
smart_intercom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000261e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000543d4  080263d0  080263d0  000363d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807a7a4  0807a7a4  00090084  2**0
                  CONTENTS
  4 .ARM          00000008  0807a7a4  0807a7a4  0008a7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807a7ac  0807a7ac  00090084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807a7ac  0807a7ac  0008a7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807a7b0  0807a7b0  0008a7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0807a7b4  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00047cc4  20000084  0807a838  00090084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20047d48  0807a838  00097d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00090084  2**0
                  CONTENTS, READONLY
 12 .debug_info   003a9ecd  00000000  00000000  000900b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000232fc  00000000  00000000  00439f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 0000a808  00000000  00000000  0045d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000a328  00000000  00000000  00467a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042403  00000000  00000000  00471db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0008f747  00000000  00000000  004b41b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001d3104  00000000  00000000  005438fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  007169fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00030788  00000000  00000000  00716a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	080263b0 	.word	0x080263b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	080263b0 	.word	0x080263b0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <strlen>:
 80002d4:	4603      	mov	r3, r0
 80002d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d1fb      	bne.n	80002d6 <strlen+0x2>
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	3801      	subs	r0, #1
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_drsub>:
 80002e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__adddf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_dsub>:
 80002ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f0 <__adddf3>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fa:	ea94 0f05 	teq	r4, r5
 80002fe:	bf08      	it	eq
 8000300:	ea90 0f02 	teqeq	r0, r2
 8000304:	bf1f      	itttt	ne
 8000306:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000316:	f000 80e2 	beq.w	80004de <__adddf3+0x1ee>
 800031a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000322:	bfb8      	it	lt
 8000324:	426d      	neglt	r5, r5
 8000326:	dd0c      	ble.n	8000342 <__adddf3+0x52>
 8000328:	442c      	add	r4, r5
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	ea82 0000 	eor.w	r0, r2, r0
 8000336:	ea83 0101 	eor.w	r1, r3, r1
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	2d36      	cmp	r5, #54	; 0x36
 8000344:	bf88      	it	hi
 8000346:	bd30      	pophi	{r4, r5, pc}
 8000348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800034c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x70>
 800035a:	4240      	negs	r0, r0
 800035c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x84>
 800036e:	4252      	negs	r2, r2
 8000370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000374:	ea94 0f05 	teq	r4, r5
 8000378:	f000 80a7 	beq.w	80004ca <__adddf3+0x1da>
 800037c:	f1a4 0401 	sub.w	r4, r4, #1
 8000380:	f1d5 0e20 	rsbs	lr, r5, #32
 8000384:	db0d      	blt.n	80003a2 <__adddf3+0xb2>
 8000386:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038a:	fa22 f205 	lsr.w	r2, r2, r5
 800038e:	1880      	adds	r0, r0, r2
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	fa03 f20e 	lsl.w	r2, r3, lr
 8000398:	1880      	adds	r0, r0, r2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	4159      	adcs	r1, r3
 80003a0:	e00e      	b.n	80003c0 <__adddf3+0xd0>
 80003a2:	f1a5 0520 	sub.w	r5, r5, #32
 80003a6:	f10e 0e20 	add.w	lr, lr, #32
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b0:	bf28      	it	cs
 80003b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	18c0      	adds	r0, r0, r3
 80003bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	d507      	bpl.n	80003d6 <__adddf3+0xe6>
 80003c6:	f04f 0e00 	mov.w	lr, #0
 80003ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003da:	d31b      	bcc.n	8000414 <__adddf3+0x124>
 80003dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e0:	d30c      	bcc.n	80003fc <__adddf3+0x10c>
 80003e2:	0849      	lsrs	r1, r1, #1
 80003e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ec:	f104 0401 	add.w	r4, r4, #1
 80003f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f8:	f080 809a 	bcs.w	8000530 <__adddf3+0x240>
 80003fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	ea41 0105 	orr.w	r1, r1, r5
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000418:	4140      	adcs	r0, r0
 800041a:	eb41 0101 	adc.w	r1, r1, r1
 800041e:	3c01      	subs	r4, #1
 8000420:	bf28      	it	cs
 8000422:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000426:	d2e9      	bcs.n	80003fc <__adddf3+0x10c>
 8000428:	f091 0f00 	teq	r1, #0
 800042c:	bf04      	itt	eq
 800042e:	4601      	moveq	r1, r0
 8000430:	2000      	moveq	r0, #0
 8000432:	fab1 f381 	clz	r3, r1
 8000436:	bf08      	it	eq
 8000438:	3320      	addeq	r3, #32
 800043a:	f1a3 030b 	sub.w	r3, r3, #11
 800043e:	f1b3 0220 	subs.w	r2, r3, #32
 8000442:	da0c      	bge.n	800045e <__adddf3+0x16e>
 8000444:	320c      	adds	r2, #12
 8000446:	dd08      	ble.n	800045a <__adddf3+0x16a>
 8000448:	f102 0c14 	add.w	ip, r2, #20
 800044c:	f1c2 020c 	rsb	r2, r2, #12
 8000450:	fa01 f00c 	lsl.w	r0, r1, ip
 8000454:	fa21 f102 	lsr.w	r1, r1, r2
 8000458:	e00c      	b.n	8000474 <__adddf3+0x184>
 800045a:	f102 0214 	add.w	r2, r2, #20
 800045e:	bfd8      	it	le
 8000460:	f1c2 0c20 	rsble	ip, r2, #32
 8000464:	fa01 f102 	lsl.w	r1, r1, r2
 8000468:	fa20 fc0c 	lsr.w	ip, r0, ip
 800046c:	bfdc      	itt	le
 800046e:	ea41 010c 	orrle.w	r1, r1, ip
 8000472:	4090      	lslle	r0, r2
 8000474:	1ae4      	subs	r4, r4, r3
 8000476:	bfa2      	ittt	ge
 8000478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800047c:	4329      	orrge	r1, r5
 800047e:	bd30      	popge	{r4, r5, pc}
 8000480:	ea6f 0404 	mvn.w	r4, r4
 8000484:	3c1f      	subs	r4, #31
 8000486:	da1c      	bge.n	80004c2 <__adddf3+0x1d2>
 8000488:	340c      	adds	r4, #12
 800048a:	dc0e      	bgt.n	80004aa <__adddf3+0x1ba>
 800048c:	f104 0414 	add.w	r4, r4, #20
 8000490:	f1c4 0220 	rsb	r2, r4, #32
 8000494:	fa20 f004 	lsr.w	r0, r0, r4
 8000498:	fa01 f302 	lsl.w	r3, r1, r2
 800049c:	ea40 0003 	orr.w	r0, r0, r3
 80004a0:	fa21 f304 	lsr.w	r3, r1, r4
 80004a4:	ea45 0103 	orr.w	r1, r5, r3
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f1c4 040c 	rsb	r4, r4, #12
 80004ae:	f1c4 0220 	rsb	r2, r4, #32
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ba:	ea40 0003 	orr.w	r0, r0, r3
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	fa21 f004 	lsr.w	r0, r1, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f094 0f00 	teq	r4, #0
 80004ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d2:	bf06      	itte	eq
 80004d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d8:	3401      	addeq	r4, #1
 80004da:	3d01      	subne	r5, #1
 80004dc:	e74e      	b.n	800037c <__adddf3+0x8c>
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf18      	it	ne
 80004e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e8:	d029      	beq.n	800053e <__adddf3+0x24e>
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	d005      	beq.n	8000502 <__adddf3+0x212>
 80004f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fa:	bf04      	itt	eq
 80004fc:	4619      	moveq	r1, r3
 80004fe:	4610      	moveq	r0, r2
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea91 0f03 	teq	r1, r3
 8000506:	bf1e      	ittt	ne
 8000508:	2100      	movne	r1, #0
 800050a:	2000      	movne	r0, #0
 800050c:	bd30      	popne	{r4, r5, pc}
 800050e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000512:	d105      	bne.n	8000520 <__adddf3+0x230>
 8000514:	0040      	lsls	r0, r0, #1
 8000516:	4149      	adcs	r1, r1
 8000518:	bf28      	it	cs
 800051a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000524:	bf3c      	itt	cc
 8000526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052a:	bd30      	popcc	{r4, r5, pc}
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000538:	f04f 0000 	mov.w	r0, #0
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000542:	bf1a      	itte	ne
 8000544:	4619      	movne	r1, r3
 8000546:	4610      	movne	r0, r2
 8000548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800054c:	bf1c      	itt	ne
 800054e:	460b      	movne	r3, r1
 8000550:	4602      	movne	r2, r0
 8000552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000556:	bf06      	itte	eq
 8000558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800055c:	ea91 0f03 	teqeq	r1, r3
 8000560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	bf00      	nop

08000568 <__aeabi_ui2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f04f 0500 	mov.w	r5, #0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e750      	b.n	8000428 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_i2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a0:	bf48      	it	mi
 80005a2:	4240      	negmi	r0, r0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e73e      	b.n	8000428 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_f2d>:
 80005ac:	0042      	lsls	r2, r0, #1
 80005ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ba:	bf1f      	itttt	ne
 80005bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c8:	4770      	bxne	lr
 80005ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ce:	bf08      	it	eq
 80005d0:	4770      	bxeq	lr
 80005d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d6:	bf04      	itt	eq
 80005d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	e71c      	b.n	8000428 <__adddf3+0x138>
 80005ee:	bf00      	nop

080005f0 <__aeabi_ul2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	e00a      	b.n	8000616 <__aeabi_l2d+0x16>

08000600 <__aeabi_l2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060e:	d502      	bpl.n	8000616 <__aeabi_l2d+0x16>
 8000610:	4240      	negs	r0, r0
 8000612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000622:	f43f aed8 	beq.w	80003d6 <__adddf3+0xe6>
 8000626:	f04f 0203 	mov.w	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000636:	bf18      	it	ne
 8000638:	3203      	addne	r2, #3
 800063a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	fa00 fc03 	lsl.w	ip, r0, r3
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 fe03 	lsl.w	lr, r1, r3
 800064e:	ea40 000e 	orr.w	r0, r0, lr
 8000652:	fa21 f102 	lsr.w	r1, r1, r2
 8000656:	4414      	add	r4, r2
 8000658:	e6bd      	b.n	80003d6 <__adddf3+0xe6>
 800065a:	bf00      	nop

0800065c <__aeabi_dmul>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066a:	bf1d      	ittte	ne
 800066c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000670:	ea94 0f0c 	teqne	r4, ip
 8000674:	ea95 0f0c 	teqne	r5, ip
 8000678:	f000 f8de 	bleq	8000838 <__aeabi_dmul+0x1dc>
 800067c:	442c      	add	r4, r5
 800067e:	ea81 0603 	eor.w	r6, r1, r3
 8000682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068e:	bf18      	it	ne
 8000690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	d038      	beq.n	8000710 <__aeabi_dmul+0xb4>
 800069e:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a2:	f04f 0500 	mov.w	r5, #0
 80006a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b2:	f04f 0600 	mov.w	r6, #0
 80006b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ba:	f09c 0f00 	teq	ip, #0
 80006be:	bf18      	it	ne
 80006c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d0:	d204      	bcs.n	80006dc <__aeabi_dmul+0x80>
 80006d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d6:	416d      	adcs	r5, r5
 80006d8:	eb46 0606 	adc.w	r6, r6, r6
 80006dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f4:	bf88      	it	hi
 80006f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fa:	d81e      	bhi.n	800073a <__aeabi_dmul+0xde>
 80006fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000714:	ea46 0101 	orr.w	r1, r6, r1
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000724:	bfc2      	ittt	gt
 8000726:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072e:	bd70      	popgt	{r4, r5, r6, pc}
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f04f 0e00 	mov.w	lr, #0
 8000738:	3c01      	subs	r4, #1
 800073a:	f300 80ab 	bgt.w	8000894 <__aeabi_dmul+0x238>
 800073e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000742:	bfde      	ittt	le
 8000744:	2000      	movle	r0, #0
 8000746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074a:	bd70      	pople	{r4, r5, r6, pc}
 800074c:	f1c4 0400 	rsb	r4, r4, #0
 8000750:	3c20      	subs	r4, #32
 8000752:	da35      	bge.n	80007c0 <__aeabi_dmul+0x164>
 8000754:	340c      	adds	r4, #12
 8000756:	dc1b      	bgt.n	8000790 <__aeabi_dmul+0x134>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f305 	lsl.w	r3, r0, r5
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	fa21 f604 	lsr.w	r6, r1, r4
 8000780:	eb42 0106 	adc.w	r1, r2, r6
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 040c 	rsb	r4, r4, #12
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f304 	lsl.w	r3, r0, r4
 800079c:	fa20 f005 	lsr.w	r0, r0, r5
 80007a0:	fa01 f204 	lsl.w	r2, r1, r4
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	f141 0100 	adc.w	r1, r1, #0
 80007b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f205 	lsl.w	r2, r0, r5
 80007c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007cc:	fa20 f304 	lsr.w	r3, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
 80007d8:	fa21 f004 	lsr.w	r0, r1, r4
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	fa21 f204 	lsr.w	r2, r1, r4
 80007e4:	ea20 0002 	bic.w	r0, r0, r2
 80007e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f094 0f00 	teq	r4, #0
 80007fc:	d10f      	bne.n	800081e <__aeabi_dmul+0x1c2>
 80007fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000802:	0040      	lsls	r0, r0, #1
 8000804:	eb41 0101 	adc.w	r1, r1, r1
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3c01      	subeq	r4, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1a6>
 8000812:	ea41 0106 	orr.w	r1, r1, r6
 8000816:	f095 0f00 	teq	r5, #0
 800081a:	bf18      	it	ne
 800081c:	4770      	bxne	lr
 800081e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	eb43 0303 	adc.w	r3, r3, r3
 8000828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3d01      	subeq	r5, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1c6>
 8000832:	ea43 0306 	orr.w	r3, r3, r6
 8000836:	4770      	bx	lr
 8000838:	ea94 0f0c 	teq	r4, ip
 800083c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000840:	bf18      	it	ne
 8000842:	ea95 0f0c 	teqne	r5, ip
 8000846:	d00c      	beq.n	8000862 <__aeabi_dmul+0x206>
 8000848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084c:	bf18      	it	ne
 800084e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000852:	d1d1      	bne.n	80007f8 <__aeabi_dmul+0x19c>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000866:	bf06      	itte	eq
 8000868:	4610      	moveq	r0, r2
 800086a:	4619      	moveq	r1, r3
 800086c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000870:	d019      	beq.n	80008a6 <__aeabi_dmul+0x24a>
 8000872:	ea94 0f0c 	teq	r4, ip
 8000876:	d102      	bne.n	800087e <__aeabi_dmul+0x222>
 8000878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800087c:	d113      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 800087e:	ea95 0f0c 	teq	r5, ip
 8000882:	d105      	bne.n	8000890 <__aeabi_dmul+0x234>
 8000884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000888:	bf1c      	itt	ne
 800088a:	4610      	movne	r0, r2
 800088c:	4619      	movne	r1, r3
 800088e:	d10a      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <__aeabi_ddiv>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008be:	bf1d      	ittte	ne
 80008c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c4:	ea94 0f0c 	teqne	r4, ip
 80008c8:	ea95 0f0c 	teqne	r5, ip
 80008cc:	f000 f8a7 	bleq	8000a1e <__aeabi_ddiv+0x16e>
 80008d0:	eba4 0405 	sub.w	r4, r4, r5
 80008d4:	ea81 0e03 	eor.w	lr, r1, r3
 80008d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f000 8088 	beq.w	80009f4 <__aeabi_ddiv+0x144>
 80008e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000900:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000908:	429d      	cmp	r5, r3
 800090a:	bf08      	it	eq
 800090c:	4296      	cmpeq	r6, r2
 800090e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000912:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000916:	d202      	bcs.n	800091e <__aeabi_ddiv+0x6e>
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	1ab6      	subs	r6, r6, r2
 8000920:	eb65 0503 	sbc.w	r5, r5, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800098c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000990:	d018      	beq.n	80009c4 <__aeabi_ddiv+0x114>
 8000992:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ae:	d1c0      	bne.n	8000932 <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	d10b      	bne.n	80009ce <__aeabi_ddiv+0x11e>
 80009b6:	ea41 0100 	orr.w	r1, r1, r0
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c2:	e7b6      	b.n	8000932 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	bf04      	itt	eq
 80009ca:	4301      	orreq	r1, r0
 80009cc:	2000      	moveq	r0, #0
 80009ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d2:	bf88      	it	hi
 80009d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d8:	f63f aeaf 	bhi.w	800073a <__aeabi_dmul+0xde>
 80009dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e0:	bf04      	itt	eq
 80009e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ea:	f150 0000 	adcs.w	r0, r0, #0
 80009ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a00:	bfc2      	ittt	gt
 8000a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a10:	f04f 0e00 	mov.w	lr, #0
 8000a14:	3c01      	subs	r4, #1
 8000a16:	e690      	b.n	800073a <__aeabi_dmul+0xde>
 8000a18:	ea45 0e06 	orr.w	lr, r5, r6
 8000a1c:	e68d      	b.n	800073a <__aeabi_dmul+0xde>
 8000a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	bf08      	it	eq
 8000a28:	ea95 0f0c 	teqeq	r5, ip
 8000a2c:	f43f af3b 	beq.w	80008a6 <__aeabi_dmul+0x24a>
 8000a30:	ea94 0f0c 	teq	r4, ip
 8000a34:	d10a      	bne.n	8000a4c <__aeabi_ddiv+0x19c>
 8000a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3a:	f47f af34 	bne.w	80008a6 <__aeabi_dmul+0x24a>
 8000a3e:	ea95 0f0c 	teq	r5, ip
 8000a42:	f47f af25 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e72c      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a4c:	ea95 0f0c 	teq	r5, ip
 8000a50:	d106      	bne.n	8000a60 <__aeabi_ddiv+0x1b0>
 8000a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a56:	f43f aefd 	beq.w	8000854 <__aeabi_dmul+0x1f8>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e722      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6a:	f47f aec5 	bne.w	80007f8 <__aeabi_dmul+0x19c>
 8000a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a72:	f47f af0d 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7a:	f47f aeeb 	bne.w	8000854 <__aeabi_dmul+0x1f8>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_dmul+0x24a>

08000a80 <__gedf2>:
 8000a80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a84:	e006      	b.n	8000a94 <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__ledf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	e002      	b.n	8000a94 <__cmpdf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__cmpdf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aaa:	d01b      	beq.n	8000ae4 <__cmpdf2+0x54>
 8000aac:	b001      	add	sp, #4
 8000aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab8:	ea91 0f03 	teqne	r1, r3
 8000abc:	bf02      	ittt	eq
 8000abe:	ea90 0f02 	teqeq	r0, r2
 8000ac2:	2000      	moveq	r0, #0
 8000ac4:	4770      	bxeq	lr
 8000ac6:	f110 0f00 	cmn.w	r0, #0
 8000aca:	ea91 0f03 	teq	r1, r3
 8000ace:	bf58      	it	pl
 8000ad0:	4299      	cmppl	r1, r3
 8000ad2:	bf08      	it	eq
 8000ad4:	4290      	cmpeq	r0, r2
 8000ad6:	bf2c      	ite	cs
 8000ad8:	17d8      	asrcs	r0, r3, #31
 8000ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ade:	f040 0001 	orr.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__cmpdf2+0x64>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d107      	bne.n	8000b04 <__cmpdf2+0x74>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d1d6      	bne.n	8000aac <__cmpdf2+0x1c>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d0d3      	beq.n	8000aac <__cmpdf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	468c      	mov	ip, r1
 8000b14:	4619      	mov	r1, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	e000      	b.n	8000b1c <__aeabi_cdcmpeq>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdcmpeq>:
 8000b1c:	b501      	push	{r0, lr}
 8000b1e:	f7ff ffb7 	bl	8000a90 <__cmpdf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd01      	pop	{r0, pc}

08000b2c <__aeabi_dcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffce 	bl	8000b0c <__aeabi_cdrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc4 	bl	8000b0c <__aeabi_cdrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c94:	f000 b9a4 	b.w	8000fe0 <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f83c 	bl	8000d1c <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_d2lz>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	460d      	mov	r5, r1
 8000cba:	f7ff ff41 	bl	8000b40 <__aeabi_dcmplt>
 8000cbe:	b928      	cbnz	r0, 8000ccc <__aeabi_d2lz+0x1c>
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	4629      	mov	r1, r5
 8000cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc8:	f000 b80a 	b.w	8000ce0 <__aeabi_d2ulz>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cd2:	f000 f805 	bl	8000ce0 <__aeabi_d2ulz>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	bd38      	pop	{r3, r4, r5, pc}
 8000cde:	bf00      	nop

08000ce0 <__aeabi_d2ulz>:
 8000ce0:	b5d0      	push	{r4, r6, r7, lr}
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__aeabi_d2ulz+0x34>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	4606      	mov	r6, r0
 8000ce8:	460f      	mov	r7, r1
 8000cea:	f7ff fcb7 	bl	800065c <__aeabi_dmul>
 8000cee:	f000 f979 	bl	8000fe4 <__aeabi_d2uiz>
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	f7ff fc38 	bl	8000568 <__aeabi_ui2d>
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <__aeabi_d2ulz+0x38>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f7ff fcae 	bl	800065c <__aeabi_dmul>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4630      	mov	r0, r6
 8000d06:	4639      	mov	r1, r7
 8000d08:	f7ff faf0 	bl	80002ec <__aeabi_dsub>
 8000d0c:	f000 f96a 	bl	8000fe4 <__aeabi_d2uiz>
 8000d10:	4621      	mov	r1, r4
 8000d12:	bdd0      	pop	{r4, r6, r7, pc}
 8000d14:	3df00000 	.word	0x3df00000
 8000d18:	41f00000 	.word	0x41f00000

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d20:	9d08      	ldr	r5, [sp, #32]
 8000d22:	4604      	mov	r4, r0
 8000d24:	468c      	mov	ip, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 8083 	bne.w	8000e32 <__udivmoddi4+0x116>
 8000d2c:	428a      	cmp	r2, r1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	d947      	bls.n	8000dc2 <__udivmoddi4+0xa6>
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	b142      	cbz	r2, 8000d4a <__udivmoddi4+0x2e>
 8000d38:	f1c2 0020 	rsb	r0, r2, #32
 8000d3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d40:	4091      	lsls	r1, r2
 8000d42:	4097      	lsls	r7, r2
 8000d44:	ea40 0c01 	orr.w	ip, r0, r1
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d4e:	0c23      	lsrs	r3, r4, #16
 8000d50:	fbbc f6f8 	udiv	r6, ip, r8
 8000d54:	fa1f fe87 	uxth.w	lr, r7
 8000d58:	fb08 c116 	mls	r1, r8, r6, ip
 8000d5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d60:	fb06 f10e 	mul.w	r1, r6, lr
 8000d64:	4299      	cmp	r1, r3
 8000d66:	d909      	bls.n	8000d7c <__udivmoddi4+0x60>
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d6e:	f080 8119 	bcs.w	8000fa4 <__udivmoddi4+0x288>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 8116 	bls.w	8000fa4 <__udivmoddi4+0x288>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	443b      	add	r3, r7
 8000d7c:	1a5b      	subs	r3, r3, r1
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3310 	mls	r3, r8, r0, r3
 8000d88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x8c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d9a:	f080 8105 	bcs.w	8000fa8 <__udivmoddi4+0x28c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f240 8102 	bls.w	8000fa8 <__udivmoddi4+0x28c>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dac:	eba4 040e 	sub.w	r4, r4, lr
 8000db0:	2600      	movs	r6, #0
 8000db2:	b11d      	cbz	r5, 8000dbc <__udivmoddi4+0xa0>
 8000db4:	40d4      	lsrs	r4, r2
 8000db6:	2300      	movs	r3, #0
 8000db8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	b902      	cbnz	r2, 8000dc6 <__udivmoddi4+0xaa>
 8000dc4:	deff      	udf	#255	; 0xff
 8000dc6:	fab2 f282 	clz	r2, r2
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	d150      	bne.n	8000e70 <__udivmoddi4+0x154>
 8000dce:	1bcb      	subs	r3, r1, r7
 8000dd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd4:	fa1f f887 	uxth.w	r8, r7
 8000dd8:	2601      	movs	r6, #1
 8000dda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dde:	0c21      	lsrs	r1, r4, #16
 8000de0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb08 f30c 	mul.w	r3, r8, ip
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0xe4>
 8000df0:	1879      	adds	r1, r7, r1
 8000df2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0xe2>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	f200 80e9 	bhi.w	8000fd0 <__udivmoddi4+0x2b4>
 8000dfe:	4684      	mov	ip, r0
 8000e00:	1ac9      	subs	r1, r1, r3
 8000e02:	b2a3      	uxth	r3, r4
 8000e04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e10:	fb08 f800 	mul.w	r8, r8, r0
 8000e14:	45a0      	cmp	r8, r4
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0x10c>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0x10a>
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	f200 80d9 	bhi.w	8000fd8 <__udivmoddi4+0x2bc>
 8000e26:	4618      	mov	r0, r3
 8000e28:	eba4 0408 	sub.w	r4, r4, r8
 8000e2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e30:	e7bf      	b.n	8000db2 <__udivmoddi4+0x96>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d909      	bls.n	8000e4a <__udivmoddi4+0x12e>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	f000 80b1 	beq.w	8000f9e <__udivmoddi4+0x282>
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e42:	4630      	mov	r0, r6
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	fab3 f683 	clz	r6, r3
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	d14a      	bne.n	8000ee8 <__udivmoddi4+0x1cc>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d302      	bcc.n	8000e5c <__udivmoddi4+0x140>
 8000e56:	4282      	cmp	r2, r0
 8000e58:	f200 80b8 	bhi.w	8000fcc <__udivmoddi4+0x2b0>
 8000e5c:	1a84      	subs	r4, r0, r2
 8000e5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	468c      	mov	ip, r1
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d0a8      	beq.n	8000dbc <__udivmoddi4+0xa0>
 8000e6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0xa0>
 8000e70:	f1c2 0320 	rsb	r3, r2, #32
 8000e74:	fa20 f603 	lsr.w	r6, r0, r3
 8000e78:	4097      	lsls	r7, r2
 8000e7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e82:	40d9      	lsrs	r1, r3
 8000e84:	4330      	orrs	r0, r6
 8000e86:	0c03      	lsrs	r3, r0, #16
 8000e88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e8c:	fa1f f887 	uxth.w	r8, r7
 8000e90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e98:	fb06 f108 	mul.w	r1, r6, r8
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea2:	d909      	bls.n	8000eb8 <__udivmoddi4+0x19c>
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eaa:	f080 808d 	bcs.w	8000fc8 <__udivmoddi4+0x2ac>
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	f240 808a 	bls.w	8000fc8 <__udivmoddi4+0x2ac>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	443b      	add	r3, r7
 8000eb8:	1a5b      	subs	r3, r3, r1
 8000eba:	b281      	uxth	r1, r0
 8000ebc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb00 f308 	mul.w	r3, r0, r8
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d907      	bls.n	8000ee0 <__udivmoddi4+0x1c4>
 8000ed0:	1879      	adds	r1, r7, r1
 8000ed2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ed6:	d273      	bcs.n	8000fc0 <__udivmoddi4+0x2a4>
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d971      	bls.n	8000fc0 <__udivmoddi4+0x2a4>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4439      	add	r1, r7
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ee6:	e778      	b.n	8000dda <__udivmoddi4+0xbe>
 8000ee8:	f1c6 0c20 	rsb	ip, r6, #32
 8000eec:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ef4:	431c      	orrs	r4, r3
 8000ef6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000efa:	fa01 f306 	lsl.w	r3, r1, r6
 8000efe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f06:	431f      	orrs	r7, r3
 8000f08:	0c3b      	lsrs	r3, r7, #16
 8000f0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0e:	fa1f f884 	uxth.w	r8, r4
 8000f12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f1e:	458a      	cmp	sl, r1
 8000f20:	fa02 f206 	lsl.w	r2, r2, r6
 8000f24:	fa00 f306 	lsl.w	r3, r0, r6
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x220>
 8000f2a:	1861      	adds	r1, r4, r1
 8000f2c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f30:	d248      	bcs.n	8000fc4 <__udivmoddi4+0x2a8>
 8000f32:	458a      	cmp	sl, r1
 8000f34:	d946      	bls.n	8000fc4 <__udivmoddi4+0x2a8>
 8000f36:	f1a9 0902 	sub.w	r9, r9, #2
 8000f3a:	4421      	add	r1, r4
 8000f3c:	eba1 010a 	sub.w	r1, r1, sl
 8000f40:	b2bf      	uxth	r7, r7
 8000f42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f4e:	fb00 f808 	mul.w	r8, r0, r8
 8000f52:	45b8      	cmp	r8, r7
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x24a>
 8000f56:	19e7      	adds	r7, r4, r7
 8000f58:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f5c:	d22e      	bcs.n	8000fbc <__udivmoddi4+0x2a0>
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d92c      	bls.n	8000fbc <__udivmoddi4+0x2a0>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4427      	add	r7, r4
 8000f66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f6a:	eba7 0708 	sub.w	r7, r7, r8
 8000f6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000f72:	454f      	cmp	r7, r9
 8000f74:	46c6      	mov	lr, r8
 8000f76:	4649      	mov	r1, r9
 8000f78:	d31a      	bcc.n	8000fb0 <__udivmoddi4+0x294>
 8000f7a:	d017      	beq.n	8000fac <__udivmoddi4+0x290>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x27a>
 8000f7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000f82:	eb67 0701 	sbc.w	r7, r7, r1
 8000f86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f8a:	40f2      	lsrs	r2, r6
 8000f8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f90:	40f7      	lsrs	r7, r6
 8000f92:	e9c5 2700 	strd	r2, r7, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	462e      	mov	r6, r5
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	e70b      	b.n	8000dbc <__udivmoddi4+0xa0>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	e6e9      	b.n	8000d7c <__udivmoddi4+0x60>
 8000fa8:	4618      	mov	r0, r3
 8000faa:	e6fd      	b.n	8000da8 <__udivmoddi4+0x8c>
 8000fac:	4543      	cmp	r3, r8
 8000fae:	d2e5      	bcs.n	8000f7c <__udivmoddi4+0x260>
 8000fb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000fb8:	3801      	subs	r0, #1
 8000fba:	e7df      	b.n	8000f7c <__udivmoddi4+0x260>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e7d2      	b.n	8000f66 <__udivmoddi4+0x24a>
 8000fc0:	4660      	mov	r0, ip
 8000fc2:	e78d      	b.n	8000ee0 <__udivmoddi4+0x1c4>
 8000fc4:	4681      	mov	r9, r0
 8000fc6:	e7b9      	b.n	8000f3c <__udivmoddi4+0x220>
 8000fc8:	4666      	mov	r6, ip
 8000fca:	e775      	b.n	8000eb8 <__udivmoddi4+0x19c>
 8000fcc:	4630      	mov	r0, r6
 8000fce:	e74a      	b.n	8000e66 <__udivmoddi4+0x14a>
 8000fd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd4:	4439      	add	r1, r7
 8000fd6:	e713      	b.n	8000e00 <__udivmoddi4+0xe4>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	443c      	add	r4, r7
 8000fdc:	e724      	b.n	8000e28 <__udivmoddi4+0x10c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2uiz>:
 8000fe4:	004a      	lsls	r2, r1, #1
 8000fe6:	d211      	bcs.n	800100c <__aeabi_d2uiz+0x28>
 8000fe8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fec:	d211      	bcs.n	8001012 <__aeabi_d2uiz+0x2e>
 8000fee:	d50d      	bpl.n	800100c <__aeabi_d2uiz+0x28>
 8000ff0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ff4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ff8:	d40e      	bmi.n	8001018 <__aeabi_d2uiz+0x34>
 8000ffa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001002:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001006:	fa23 f002 	lsr.w	r0, r3, r2
 800100a:	4770      	bx	lr
 800100c:	f04f 0000 	mov.w	r0, #0
 8001010:	4770      	bx	lr
 8001012:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001016:	d102      	bne.n	800101e <__aeabi_d2uiz+0x3a>
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101c:	4770      	bx	lr
 800101e:	f04f 0000 	mov.w	r0, #0
 8001022:	4770      	bx	lr

08001024 <tflite_micro_loop>:

#define CMSIS_NN

//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void tflite_micro_loop()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	loop();
 8001028:	f010 f85a 	bl	80110e0 <loop>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <tflite_micro_setup>:

//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void tflite_micro_setup()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	setup();
 8001034:	f00f ff58 	bl	8010ee8 <setup>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <app_main_init>:
//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_init()
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af02      	add	r7, sp, #8
	NT35510_Init();
 8001042:	f000 fd0b 	bl	8001a5c <NT35510_Init>

	LCD_ClearScreen(0x7FFFU);
 8001046:	f647 70ff 	movw	r0, #32767	; 0x7fff
 800104a:	f000 fb8d 	bl	8001768 <LCD_ClearScreen>
	LCD_SetDirection(HORIZONTAL_RIGHT);
 800104e:	2003      	movs	r0, #3
 8001050:	f000 fb32 	bl	80016b8 <LCD_SetDirection>
	LCD_ClearScreen(0xffffU);
 8001054:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001058:	f000 fb86 	bl	8001768 <LCD_ClearScreen>

	// Draw frame:
	LCD_DrawLine(10, 10, 790, 10, 0xF800U,4);		// up
 800105c:	2304      	movs	r3, #4
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	230a      	movs	r3, #10
 8001068:	f240 3216 	movw	r2, #790	; 0x316
 800106c:	210a      	movs	r1, #10
 800106e:	200a      	movs	r0, #10
 8001070:	f000 fbcd 	bl	800180e <LCD_DrawLine>
	LCD_DrawLine(10, 10, 10, 470, 0x07E0U,4);		// left
 8001074:	2304      	movs	r3, #4
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8001082:	220a      	movs	r2, #10
 8001084:	210a      	movs	r1, #10
 8001086:	200a      	movs	r0, #10
 8001088:	f000 fbc1 	bl	800180e <LCD_DrawLine>
	LCD_DrawLine(790, 10, 790, 470, 0x001FU,4);		// right
 800108c:	2304      	movs	r3, #4
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	231f      	movs	r3, #31
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8001098:	f240 3216 	movw	r2, #790	; 0x316
 800109c:	210a      	movs	r1, #10
 800109e:	f240 3016 	movw	r0, #790	; 0x316
 80010a2:	f000 fbb4 	bl	800180e <LCD_DrawLine>
	LCD_DrawLine(10, 470, 790, 470, 0xF800U,4);		// down
 80010a6:	2304      	movs	r3, #4
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80010b4:	f240 3216 	movw	r2, #790	; 0x316
 80010b8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80010bc:	200a      	movs	r0, #10
 80010be:	f000 fba6 	bl	800180e <LCD_DrawLine>


	ov7670_init();
 80010c2:	f001 faef 	bl	80026a4 <ov7670_init>
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <app_main_loop>:


//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_loop()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af02      	add	r7, sp, #8
	uint8_t buff[10] = {0};
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	809a      	strh	r2, [r3, #4]
	//uint8_t i2cDatToSnd[5] = {0};
	//uint8_t i2cDatToRec[5] = {0};
	uint32_t milis = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t milis2 = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
	int j,z = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
	int k = -2;
 80010ea:	f06f 0301 	mvn.w	r3, #1
 80010ee:	613b      	str	r3, [r7, #16]
	int kk = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

	LCD_SetDirection(VERTICAL_UP);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 fadf 	bl	80016b8 <LCD_SetDirection>
	LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 80010fa:	f240 1303 	movw	r3, #259	; 0x103
 80010fe:	f240 1253 	movw	r2, #339	; 0x153
 8001102:	2114      	movs	r1, #20
 8001104:	2014      	movs	r0, #20
 8001106:	f000 fa6f 	bl	80015e8 <LCD_SetWindow>
	tflite_micro_setup();
 800110a:	f7ff ff91 	bl	8001030 <tflite_micro_setup>



	while(1)
	{
		tflite_micro_loop();
 800110e:	f7ff ff89 	bl	8001024 <tflite_micro_loop>

		if(g_person_score < 0)
 8001112:	4b8e      	ldr	r3, [pc, #568]	; (800134c <app_main_loop+0x280>)
 8001114:	f993 3000 	ldrsb.w	r3, [r3]
 8001118:	2b00      	cmp	r3, #0
 800111a:	da05      	bge.n	8001128 <app_main_loop+0x5c>
			sprintf(buff, "-");
 800111c:	463b      	mov	r3, r7
 800111e:	498c      	ldr	r1, [pc, #560]	; (8001350 <app_main_loop+0x284>)
 8001120:	4618      	mov	r0, r3
 8001122:	f024 fb73 	bl	802580c <siprintf>
 8001126:	e004      	b.n	8001132 <app_main_loop+0x66>
		else
			sprintf(buff, "\n");
 8001128:	463b      	mov	r3, r7
 800112a:	498a      	ldr	r1, [pc, #552]	; (8001354 <app_main_loop+0x288>)
 800112c:	4618      	mov	r0, r3
 800112e:	f024 fb6d 	bl	802580c <siprintf>
		sprintf(buff + strlen(buff), "%03d", abs(g_person_score));
 8001132:	463b      	mov	r3, r7
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f8cd 	bl	80002d4 <strlen>
 800113a:	4602      	mov	r2, r0
 800113c:	463b      	mov	r3, r7
 800113e:	1898      	adds	r0, r3, r2
 8001140:	4b82      	ldr	r3, [pc, #520]	; (800134c <app_main_loop+0x280>)
 8001142:	f993 3000 	ldrsb.w	r3, [r3]
 8001146:	2b00      	cmp	r3, #0
 8001148:	bfb8      	it	lt
 800114a:	425b      	neglt	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	4981      	ldr	r1, [pc, #516]	; (8001358 <app_main_loop+0x28c>)
 8001152:	f024 fb5b 	bl	802580c <siprintf>
		LCD_PrintStr(20, 400, 0xffff, 0x0000, buff, 5);
 8001156:	2305      	movs	r3, #5
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	463b      	mov	r3, r7
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2300      	movs	r3, #0
 8001160:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001164:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001168:	2014      	movs	r0, #20
 800116a:	f000 fc41 	bl	80019f0 <LCD_PrintStr>

		if(g_no_person_score < 0)
 800116e:	4b7b      	ldr	r3, [pc, #492]	; (800135c <app_main_loop+0x290>)
 8001170:	f993 3000 	ldrsb.w	r3, [r3]
 8001174:	2b00      	cmp	r3, #0
 8001176:	da05      	bge.n	8001184 <app_main_loop+0xb8>
			sprintf(buff, "-");
 8001178:	463b      	mov	r3, r7
 800117a:	4975      	ldr	r1, [pc, #468]	; (8001350 <app_main_loop+0x284>)
 800117c:	4618      	mov	r0, r3
 800117e:	f024 fb45 	bl	802580c <siprintf>
 8001182:	e004      	b.n	800118e <app_main_loop+0xc2>
		else
			sprintf(buff, "\n");
 8001184:	463b      	mov	r3, r7
 8001186:	4973      	ldr	r1, [pc, #460]	; (8001354 <app_main_loop+0x288>)
 8001188:	4618      	mov	r0, r3
 800118a:	f024 fb3f 	bl	802580c <siprintf>
		sprintf(buff + strlen(buff),"%03d",abs(g_no_person_score));
 800118e:	463b      	mov	r3, r7
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f89f 	bl	80002d4 <strlen>
 8001196:	4602      	mov	r2, r0
 8001198:	463b      	mov	r3, r7
 800119a:	1898      	adds	r0, r3, r2
 800119c:	4b6f      	ldr	r3, [pc, #444]	; (800135c <app_main_loop+0x290>)
 800119e:	f993 3000 	ldrsb.w	r3, [r3]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bfb8      	it	lt
 80011a6:	425b      	neglt	r3, r3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	496a      	ldr	r1, [pc, #424]	; (8001358 <app_main_loop+0x28c>)
 80011ae:	f024 fb2d 	bl	802580c <siprintf>
		LCD_PrintStr(20, 450, 0xffff, 0x0000, buff, 5);
 80011b2:	2305      	movs	r3, #5
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	463b      	mov	r3, r7
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2300      	movs	r3, #0
 80011bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80011c4:	2014      	movs	r0, #20
 80011c6:	f000 fc13 	bl	80019f0 <LCD_PrintStr>

		uart_tx_process();
 80011ca:	f001 fd57 	bl	8002c7c <uart_tx_process>
		uart_rx_process();
 80011ce:	f001 fe81 	bl	8002ed4 <uart_rx_process>

		LCD_SetWindow(20 , 280, 20+96-1, 280+96-1); // 320 x 240
 80011d2:	f240 1377 	movw	r3, #375	; 0x177
 80011d6:	2273      	movs	r2, #115	; 0x73
 80011d8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80011dc:	2014      	movs	r0, #20
 80011de:	f000 fa03 	bl	80015e8 <LCD_SetWindow>

		//*********************************************************************************************************************
		//*********************************************************************************************************************
		/**/

		for(z = 0; z < 96*96*2; z+=2)
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	e059      	b.n	800129c <app_main_loop+0x1d0>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ee:	485c      	ldr	r0, [pc, #368]	; (8001360 <app_main_loop+0x294>)
 80011f0:	f002 fe6e 	bl	8003ed0 <HAL_GPIO_WritePin>
			char gray = (
					(((g_person_image_data1[z] & 0xF8U) >> 3) +	//red
 80011f4:	4a5b      	ldr	r2, [pc, #364]	; (8001364 <app_main_loop+0x298>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	08db      	lsrs	r3, r3, #3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4618      	mov	r0, r3
					(((g_person_image_data1[z] & 0x07U) << 2) | ((g_person_image_data1[z+1] & 0xC0U) >> 6)) +	//green
 8001202:	4a58      	ldr	r2, [pc, #352]	; (8001364 <app_main_loop+0x298>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	f003 031c 	and.w	r3, r3, #28
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	3201      	adds	r2, #1
 8001214:	4953      	ldr	r1, [pc, #332]	; (8001364 <app_main_loop+0x298>)
 8001216:	5c8a      	ldrb	r2, [r1, r2]
 8001218:	0992      	lsrs	r2, r2, #6
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	4313      	orrs	r3, r2
					(((g_person_image_data1[z] & 0xF8U) >> 3) +	//red
 800121e:	18c2      	adds	r2, r0, r3
					(((g_person_image_data1[z+1] & 0x1FU)))	//blue
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	3301      	adds	r3, #1
 8001224:	494f      	ldr	r1, [pc, #316]	; (8001364 <app_main_loop+0x298>)
 8001226:	5ccb      	ldrb	r3, [r1, r3]
 8001228:	f003 031f 	and.w	r3, r3, #31
					(((g_person_image_data1[z] & 0x07U) << 2) | ((g_person_image_data1[z+1] & 0xC0U) >> 6)) +	//green
 800122c:	4413      	add	r3, r2
					) / 3);
 800122e:	4a4e      	ldr	r2, [pc, #312]	; (8001368 <app_main_loop+0x29c>)
 8001230:	fba2 2303 	umull	r2, r3, r2, r3
 8001234:	085b      	lsrs	r3, r3, #1
			char gray = (
 8001236:	73fb      	strb	r3, [r7, #15]

			uint16_t graysc = (
					((gray << 11) & 0xF800U) |
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	b29b      	uxth	r3, r3
 800123c:	02db      	lsls	r3, r3, #11
 800123e:	b29a      	uxth	r2, r3
					((gray << 6)  & 0x07C0U) |
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	b29b      	uxth	r3, r3
 8001244:	019b      	lsls	r3, r3, #6
 8001246:	b29b      	uxth	r3, r3
 8001248:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800124c:	b29b      	uxth	r3, r3
					((gray << 11) & 0xF800U) |
 800124e:	4313      	orrs	r3, r2
 8001250:	b29a      	uxth	r2, r3
					((gray << 0)  & 0x001FU));
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	b29b      	uxth	r3, r3
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	b29b      	uxth	r3, r3
			uint16_t graysc = (
 800125c:	4313      	orrs	r3, r2
 800125e:	81bb      	strh	r3, [r7, #12]

			g_cam_gray_frame[kk] = gray << 3;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	b2d9      	uxtb	r1, r3
 8001266:	4a41      	ldr	r2, [pc, #260]	; (800136c <app_main_loop+0x2a0>)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	4413      	add	r3, r2
 800126c:	460a      	mov	r2, r1
 800126e:	701a      	strb	r2, [r3, #0]

			kk++;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3301      	adds	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
			if(kk >= OV7670_GRAY_SIZE)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 800127c:	db01      	blt.n	8001282 <app_main_loop+0x1b6>
				kk = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]

			FSMC_WR_DAT(graysc);
 8001282:	89bb      	ldrh	r3, [r7, #12]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 f99d 	bl	80015c4 <FSMC_WR_DAT>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001290:	4833      	ldr	r0, [pc, #204]	; (8001360 <app_main_loop+0x294>)
 8001292:	f002 fe1d 	bl	8003ed0 <HAL_GPIO_WritePin>
		for(z = 0; z < 96*96*2; z+=2)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	3302      	adds	r3, #2
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	f5b3 4f90 	cmp.w	r3, #18432	; 0x4800
 80012a2:	dba1      	blt.n	80011e8 <app_main_loop+0x11c>





		LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 80012a4:	f240 1303 	movw	r3, #259	; 0x103
 80012a8:	f240 1253 	movw	r2, #339	; 0x153
 80012ac:	2114      	movs	r1, #20
 80012ae:	2014      	movs	r0, #20
 80012b0:	f000 f99a 	bl	80015e8 <LCD_SetWindow>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	e013      	b.n	80012e2 <app_main_loop+0x216>
			//		(gray & 0x001FU));
			// FSMC_WR_DAT(graysc);


			// RRRRR GGGGGG BBBBB
			FSMC_WR_DAT(((g_cam_buff[j] << 8) & 0xFF00U) | (g_cam_buff[j+1] & 0x00FFU));
 80012ba:	4a2d      	ldr	r2, [pc, #180]	; (8001370 <app_main_loop+0x2a4>)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4928      	ldr	r1, [pc, #160]	; (8001370 <app_main_loop+0x2a4>)
 80012ce:	5ccb      	ldrb	r3, [r1, r3]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f974 	bl	80015c4 <FSMC_WR_DAT>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	3302      	adds	r3, #2
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	4a23      	ldr	r2, [pc, #140]	; (8001374 <app_main_loop+0x2a8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	dde7      	ble.n	80012ba <app_main_loop+0x1ee>
		}

		if(HAL_GetTick() > milis + 1000)
 80012ea:	f002 f87f 	bl	80033ec <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d913      	bls.n	8001322 <app_main_loop+0x256>
		{
			milis = HAL_GetTick();
 80012fa:	f002 f877 	bl	80033ec <HAL_GetTick>
 80012fe:	6278      	str	r0, [r7, #36]	; 0x24
			if(milis >= (0xFFFFFFFFU - 1000U))
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	f46f 727a 	mvn.w	r2, #1000	; 0x3e8
 8001306:	4293      	cmp	r3, r2
 8001308:	d302      	bcc.n	8001310 <app_main_loop+0x244>
			{
				milis = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
 800130e:	e008      	b.n	8001322 <app_main_loop+0x256>
			}
			else
			{// every second
				sprintf(buff, "0x\r\n");
 8001310:	463b      	mov	r3, r7
 8001312:	4919      	ldr	r1, [pc, #100]	; (8001378 <app_main_loop+0x2ac>)
 8001314:	4618      	mov	r0, r3
 8001316:	f024 fa79 	bl	802580c <siprintf>
				uart_write(buff);
 800131a:	463b      	mov	r3, r7
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fd25 	bl	8002d6c <uart_write>
			}
		}
		if(HAL_GetTick() > milis2 + 5000)
 8001322:	f002 f863 	bl	80033ec <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800132e:	3308      	adds	r3, #8
 8001330:	429a      	cmp	r2, r3
 8001332:	f67f aeec 	bls.w	800110e <app_main_loop+0x42>
		{
			milis2 = HAL_GetTick();
 8001336:	f002 f859 	bl	80033ec <HAL_GetTick>
 800133a:	6238      	str	r0, [r7, #32]
			if(milis2 >= (0xFFFFFFFFU - 5000U))
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <app_main_loop+0x2b0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	f67f aee4 	bls.w	800110e <app_main_loop+0x42>
			{
				milis2 = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
		tflite_micro_loop();
 800134a:	e6e0      	b.n	800110e <app_main_loop+0x42>
 800134c:	200000a0 	.word	0x200000a0
 8001350:	080263d0 	.word	0x080263d0
 8001354:	080263d4 	.word	0x080263d4
 8001358:	080263d8 	.word	0x080263d8
 800135c:	200000a1 	.word	0x200000a1
 8001360:	40020400 	.word	0x40020400
 8001364:	0802c820 	.word	0x0802c820
 8001368:	aaaaaaab 	.word	0xaaaaaaab
 800136c:	20025b38 	.word	0x20025b38
 8001370:	200000b8 	.word	0x200000b8
 8001374:	000257fe 	.word	0x000257fe
 8001378:	080263e0 	.word	0x080263e0
 800137c:	ffffec76 	.word	0xffffec76

08001380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_DMA_Init+0x30>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <MX_DMA_Init+0x30>)
 8001390:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_DMA_Init+0x30>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	; 0x38
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80013ce:	463b      	mov	r3, r7
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013e0:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <MX_FSMC_Init+0xf0>)
 80013e2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80013e6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80013e8:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <MX_FSMC_Init+0xf0>)
 80013ea:	4a2f      	ldr	r2, [pc, #188]	; (80014a8 <MX_FSMC_Init+0xf4>)
 80013ec:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <MX_FSMC_Init+0xf0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80013f4:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <MX_FSMC_Init+0xf0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <MX_FSMC_Init+0xf0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <MX_FSMC_Init+0xf0>)
 8001402:	2210      	movs	r2, #16
 8001404:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <MX_FSMC_Init+0xf0>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800140c:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <MX_FSMC_Init+0xf0>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <MX_FSMC_Init+0xf0>)
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_FSMC_Init+0xf0>)
 800141a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <MX_FSMC_Init+0xf0>)
 8001422:	2200      	movs	r2, #0
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_FSMC_Init+0xf0>)
 8001428:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_FSMC_Init+0xf0>)
 8001430:	2200      	movs	r2, #0
 8001432:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_FSMC_Init+0xf0>)
 8001436:	2200      	movs	r2, #0
 8001438:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_FSMC_Init+0xf0>)
 800143c:	2200      	movs	r2, #0
 800143e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_FSMC_Init+0xf0>)
 8001442:	2200      	movs	r2, #0
 8001444:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_FSMC_Init+0xf0>)
 8001448:	2200      	movs	r2, #0
 800144a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 9;
 800144c:	2309      	movs	r3, #9
 800144e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001450:	230f      	movs	r3, #15
 8001452:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 5;
 8001454:	2305      	movs	r3, #5
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 8001458:	2301      	movs	r3, #1
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800145c:	2310      	movs	r3, #16
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001460:	2311      	movs	r3, #17
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001464:	2300      	movs	r3, #0
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 8001468:	2302      	movs	r3, #2
 800146a:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800146c:	230f      	movs	r3, #15
 800146e:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8001470:	2303      	movs	r3, #3
 8001472:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 1;
 8001474:	2301      	movs	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001478:	2310      	movs	r3, #16
 800147a:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800147c:	2311      	movs	r3, #17
 800147e:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001484:	463a      	mov	r2, r7
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_FSMC_Init+0xf0>)
 800148e:	f005 ffcb 	bl	8007428 <HAL_SRAM_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_FSMC_Init+0xe8>
  {
    Error_Handler( );
 8001498:	f000 ff6c 	bl	8002374 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800149c:	bf00      	nop
 800149e:	3738      	adds	r7, #56	; 0x38
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20047a70 	.word	0x20047a70
 80014a8:	a0000104 	.word	0xa0000104

080014ac <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80014c0:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <HAL_FSMC_MspInit+0xc8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d151      	bne.n	800156c <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_FSMC_MspInit+0xc8>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4b29      	ldr	r3, [pc, #164]	; (8001578 <HAL_FSMC_MspInit+0xcc>)
 80014d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d6:	4a28      	ldr	r2, [pc, #160]	; (8001578 <HAL_FSMC_MspInit+0xcc>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6393      	str	r3, [r2, #56]	; 0x38
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <HAL_FSMC_MspInit+0xcc>)
 80014e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80014ea:	f64f 7380 	movw	r3, #65408	; 0xff80
 80014ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014fc:	230c      	movs	r3, #12
 80014fe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	481d      	ldr	r0, [pc, #116]	; (800157c <HAL_FSMC_MspInit+0xd0>)
 8001506:	f002 fb4f 	bl	8003ba8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800151c:	230c      	movs	r3, #12
 800151e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4619      	mov	r1, r3
 8001524:	4816      	ldr	r0, [pc, #88]	; (8001580 <HAL_FSMC_MspInit+0xd4>)
 8001526:	f002 fb3f 	bl	8003ba8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 800152a:	f64c 63b0 	movw	r3, #52912	; 0xceb0
 800152e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800153c:	230c      	movs	r3, #12
 800153e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	480f      	ldr	r0, [pc, #60]	; (8001584 <HAL_FSMC_MspInit+0xd8>)
 8001546:	f002 fb2f 	bl	8003ba8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800154a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800154e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800155c:	230a      	movs	r3, #10
 800155e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <HAL_FSMC_MspInit+0xdc>)
 8001566:	f002 fb1f 	bl	8003ba8 <HAL_GPIO_Init>
 800156a:	e000      	b.n	800156e <HAL_FSMC_MspInit+0xc2>
    return;
 800156c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200000a4 	.word	0x200000a4
 8001578:	40023800 	.word	0x40023800
 800157c:	40021000 	.word	0x40021000
 8001580:	40020400 	.word	0x40020400
 8001584:	40020c00 	.word	0x40020c00
 8001588:	40020800 	.word	0x40020800

0800158c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001594:	f7ff ff8a 	bl	80014ac <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <FSMC_WR_REG>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void FSMC_WR_REG(uint32_t Reg)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	LCD_FSMC->REG = Reg;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <FSMC_WR_REG+0x20>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	b292      	uxth	r2, r2
 80015b0:	801a      	strh	r2, [r3, #0]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000000 	.word	0x20000000

080015c4 <FSMC_WR_DAT>:
* function   :
* parameters :N/A
* retvalue   :N/A
*******************************************************************************************************************************/
void FSMC_WR_DAT(uint16_t Dat)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
	LCD_FSMC->DAT = Dat;
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <FSMC_WR_DAT+0x20>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	88fa      	ldrh	r2, [r7, #6]
 80015d4:	805a      	strh	r2, [r3, #2]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000000 	.word	0x20000000

080015e8 <LCD_SetWindow>:
							LCD_SetDirection function. It calls to FSMC_WR_REG(RAMWR) function at the end.
* parameters :XS(x start address), YS(y start address), XE(x end address) and YE(y end address)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetWindow(uint16_t Xs, uint16_t Ys, uint16_t Xe, uint16_t Ye)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4604      	mov	r4, r0
 80015f0:	4608      	mov	r0, r1
 80015f2:	4611      	mov	r1, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	4623      	mov	r3, r4
 80015f8:	80fb      	strh	r3, [r7, #6]
 80015fa:	4603      	mov	r3, r0
 80015fc:	80bb      	strh	r3, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	807b      	strh	r3, [r7, #2]
 8001602:	4613      	mov	r3, r2
 8001604:	803b      	strh	r3, [r7, #0]
	FSMC_WR_REG(CASET_XS_H);		FSMC_WR_DAT(Xs >> 8);
 8001606:	f44f 5028 	mov.w	r0, #10752	; 0x2a00
 800160a:	f7ff ffc9 	bl	80015a0 <FSMC_WR_REG>
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	b29b      	uxth	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ffd5 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XS_L);		FSMC_WR_DAT(Xs & 0x00FFU);
 800161a:	f642 2001 	movw	r0, #10753	; 0x2a01
 800161e:	f7ff ffbf 	bl	80015a0 <FSMC_WR_REG>
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	b29b      	uxth	r3, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ffcb 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_H);		FSMC_WR_DAT(Xe >> 8);
 800162e:	f642 2002 	movw	r0, #10754	; 0x2a02
 8001632:	f7ff ffb5 	bl	80015a0 <FSMC_WR_REG>
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	b29b      	uxth	r3, r3
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ffc1 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_L);		FSMC_WR_DAT(Xe & 0x00FFU);
 8001642:	f642 2003 	movw	r0, #10755	; 0x2a03
 8001646:	f7ff ffab 	bl	80015a0 <FSMC_WR_REG>
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b29b      	uxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ffb7 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_H);		FSMC_WR_DAT(Ys >> 8);
 8001656:	f44f 502c 	mov.w	r0, #11008	; 0x2b00
 800165a:	f7ff ffa1 	bl	80015a0 <FSMC_WR_REG>
 800165e:	88bb      	ldrh	r3, [r7, #4]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	b29b      	uxth	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ffad 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_L);		FSMC_WR_DAT(Ys & 0x00FFU);
 800166a:	f642 3001 	movw	r0, #11009	; 0x2b01
 800166e:	f7ff ff97 	bl	80015a0 <FSMC_WR_REG>
 8001672:	88bb      	ldrh	r3, [r7, #4]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	b29b      	uxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ffa3 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_H);		FSMC_WR_DAT(Ye >> 8);
 800167e:	f642 3002 	movw	r0, #11010	; 0x2b02
 8001682:	f7ff ff8d 	bl	80015a0 <FSMC_WR_REG>
 8001686:	883b      	ldrh	r3, [r7, #0]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	b29b      	uxth	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff99 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_L);		FSMC_WR_DAT(Ye & 0x00FFU);
 8001692:	f642 3003 	movw	r0, #11011	; 0x2b03
 8001696:	f7ff ff83 	bl	80015a0 <FSMC_WR_REG>
 800169a:	883b      	ldrh	r3, [r7, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff8f 	bl	80015c4 <FSMC_WR_DAT>

	FSMC_WR_REG(RAMWR);
 80016a6:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 80016aa:	f7ff ff79 	bl	80015a0 <FSMC_WR_REG>
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
	...

080016b8 <LCD_SetDirection>:
							the selected orientation.
* parameters :Direction(Use Orientation Direction Definitions defined in FSMC_NT35510.h)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetDirection(uint8_t Direction)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
	switch(Direction)
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d84b      	bhi.n	8001760 <LCD_SetDirection+0xa8>
 80016c8:	a201      	add	r2, pc, #4	; (adr r2, 80016d0 <LCD_SetDirection+0x18>)
 80016ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ce:	bf00      	nop
 80016d0:	080016e1 	.word	0x080016e1
 80016d4:	08001701 	.word	0x08001701
 80016d8:	08001721 	.word	0x08001721
 80016dc:	08001741 	.word	0x08001741
	{
		case 0:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0000U);
 80016e0:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 80016e4:	f7ff ff5c 	bl	80015a0 <FSMC_WR_REG>
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff ff6b 	bl	80015c4 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 80016ee:	f240 331f 	movw	r3, #799	; 0x31f
 80016f2:	f240 12df 	movw	r2, #479	; 0x1df
 80016f6:	2100      	movs	r1, #0
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff ff75 	bl	80015e8 <LCD_SetWindow>
		break;
 80016fe:	e02f      	b.n	8001760 <LCD_SetDirection+0xa8>
		case 1:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00C0U);
 8001700:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8001704:	f7ff ff4c 	bl	80015a0 <FSMC_WR_REG>
 8001708:	20c0      	movs	r0, #192	; 0xc0
 800170a:	f7ff ff5b 	bl	80015c4 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 800170e:	f240 331f 	movw	r3, #799	; 0x31f
 8001712:	f240 12df 	movw	r2, #479	; 0x1df
 8001716:	2100      	movs	r1, #0
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff ff65 	bl	80015e8 <LCD_SetWindow>
		break;
 800171e:	e01f      	b.n	8001760 <LCD_SetDirection+0xa8>
		case 2:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0060U);
 8001720:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8001724:	f7ff ff3c 	bl	80015a0 <FSMC_WR_REG>
 8001728:	2060      	movs	r0, #96	; 0x60
 800172a:	f7ff ff4b 	bl	80015c4 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 800172e:	f240 13df 	movw	r3, #479	; 0x1df
 8001732:	f240 321f 	movw	r2, #799	; 0x31f
 8001736:	2100      	movs	r1, #0
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff ff55 	bl	80015e8 <LCD_SetWindow>
		break;
 800173e:	e00f      	b.n	8001760 <LCD_SetDirection+0xa8>
		case 3:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00A0U);
 8001740:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8001744:	f7ff ff2c 	bl	80015a0 <FSMC_WR_REG>
 8001748:	20a0      	movs	r0, #160	; 0xa0
 800174a:	f7ff ff3b 	bl	80015c4 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 800174e:	f240 13df 	movw	r3, #479	; 0x1df
 8001752:	f240 321f 	movw	r2, #799	; 0x31f
 8001756:	2100      	movs	r1, #0
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff ff45 	bl	80015e8 <LCD_SetWindow>
		break;
 800175e:	bf00      	nop
	}
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <LCD_ClearScreen>:
							orientation direction change.
* parameters :Color(Desired screen color)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_ClearScreen(uint16_t Color)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
  uint32_t i;

	for(i=0; i<(480*800); i++)
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	e006      	b.n	8001786 <LCD_ClearScreen+0x1e>
	{
		FSMC_WR_DAT(Color);
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff22 	bl	80015c4 <FSMC_WR_DAT>
	for(i=0; i<(480*800); i++)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4a03      	ldr	r2, [pc, #12]	; (8001798 <LCD_ClearScreen+0x30>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d9f4      	bls.n	8001778 <LCD_ClearScreen+0x10>
	}
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	0005dbff 	.word	0x0005dbff

0800179c <LCD_DrawPoint>:
* parameters :X(x address of the center of the point), Y(y address of the center of the point)
							Color(point color), Size(point size)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_DrawPoint(uint16_t X, uint16_t Y, uint16_t Color, uint8_t Size)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4604      	mov	r4, r0
 80017a4:	4608      	mov	r0, r1
 80017a6:	4611      	mov	r1, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4623      	mov	r3, r4
 80017ac:	80fb      	strh	r3, [r7, #6]
 80017ae:	4603      	mov	r3, r0
 80017b0:	80bb      	strh	r3, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	807b      	strh	r3, [r7, #2]
 80017b6:	4613      	mov	r3, r2
 80017b8:	707b      	strb	r3, [r7, #1]
  uint32_t i;
	LCD_SetWindow(X, Y, X + (Size - 1), Y + (Size - 1));
 80017ba:	787b      	ldrb	r3, [r7, #1]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	4413      	add	r3, r2
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29c      	uxth	r4, r3
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	88bb      	ldrh	r3, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	88b9      	ldrh	r1, [r7, #4]
 80017d8:	88f8      	ldrh	r0, [r7, #6]
 80017da:	4622      	mov	r2, r4
 80017dc:	f7ff ff04 	bl	80015e8 <LCD_SetWindow>
	for(i=0; i < (Size) * (Size); i++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e006      	b.n	80017f4 <LCD_DrawPoint+0x58>
	{
		FSMC_WR_DAT(Color);
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff feeb 	bl	80015c4 <FSMC_WR_DAT>
	for(i=0; i < (Size) * (Size); i++)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3301      	adds	r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	787b      	ldrb	r3, [r7, #1]
 80017f6:	787a      	ldrb	r2, [r7, #1]
 80017f8:	fb02 f303 	mul.w	r3, r2, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4293      	cmp	r3, r2
 8001802:	d3f0      	bcc.n	80017e6 <LCD_DrawPoint+0x4a>
	}
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bd90      	pop	{r4, r7, pc}

0800180e <LCD_DrawLine>:
* function   :
* parameters :Xs(x start address), Ys(y start address), Xe(x end address), Ye(y end address), Color(line color), Size(line size)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_DrawLine(uint16_t Xs, uint16_t Ys, uint16_t Xe, uint16_t Ye, uint16_t Color, uint8_t Size)
{
 800180e:	b590      	push	{r4, r7, lr}
 8001810:	b087      	sub	sp, #28
 8001812:	af00      	add	r7, sp, #0
 8001814:	4604      	mov	r4, r0
 8001816:	4608      	mov	r0, r1
 8001818:	4611      	mov	r1, r2
 800181a:	461a      	mov	r2, r3
 800181c:	4623      	mov	r3, r4
 800181e:	80fb      	strh	r3, [r7, #6]
 8001820:	4603      	mov	r3, r0
 8001822:	80bb      	strh	r3, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	803b      	strh	r3, [r7, #0]


	int16_t	deltaX = Xe - Xs;
 800182c:	887a      	ldrh	r2, [r7, #2]
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	b29b      	uxth	r3, r3
 8001834:	82fb      	strh	r3, [r7, #22]
	if(deltaX<0)
 8001836:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800183a:	2b00      	cmp	r3, #0
 800183c:	da03      	bge.n	8001846 <LCD_DrawLine+0x38>
		deltaX = deltaX * (-1);
 800183e:	8afb      	ldrh	r3, [r7, #22]
 8001840:	425b      	negs	r3, r3
 8001842:	b29b      	uxth	r3, r3
 8001844:	82fb      	strh	r3, [r7, #22]

	int16_t	deltaY = Ye - Ys;
 8001846:	883a      	ldrh	r2, [r7, #0]
 8001848:	88bb      	ldrh	r3, [r7, #4]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	b29b      	uxth	r3, r3
 800184e:	827b      	strh	r3, [r7, #18]
	if(deltaY<0)
 8001850:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001854:	2b00      	cmp	r3, #0
 8001856:	da03      	bge.n	8001860 <LCD_DrawLine+0x52>
		deltaX = deltaY * (-1);
 8001858:	8a7b      	ldrh	r3, [r7, #18]
 800185a:	425b      	negs	r3, r3
 800185c:	b29b      	uxth	r3, r3
 800185e:	82fb      	strh	r3, [r7, #22]

	int8_t		signX = (Xs < Xe) ? (1) : (-1);
 8001860:	88fa      	ldrh	r2, [r7, #6]
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	429a      	cmp	r2, r3
 8001866:	d201      	bcs.n	800186c <LCD_DrawLine+0x5e>
 8001868:	2301      	movs	r3, #1
 800186a:	e001      	b.n	8001870 <LCD_DrawLine+0x62>
 800186c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001870:	747b      	strb	r3, [r7, #17]
	int8_t		signY = (Ys < Ye) ? (1) : (-1);
 8001872:	88ba      	ldrh	r2, [r7, #4]
 8001874:	883b      	ldrh	r3, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d201      	bcs.n	800187e <LCD_DrawLine+0x70>
 800187a:	2301      	movs	r3, #1
 800187c:	e001      	b.n	8001882 <LCD_DrawLine+0x74>
 800187e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001882:	743b      	strb	r3, [r7, #16]
	int16_t		error = deltaX - deltaY;
 8001884:	8afa      	ldrh	r2, [r7, #22]
 8001886:	8a7b      	ldrh	r3, [r7, #18]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	b29b      	uxth	r3, r3
 800188c:	82bb      	strh	r3, [r7, #20]

	for (;;)
	{
		LCD_DrawPoint(Xs, Ys, Color, Size);
 800188e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001892:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001894:	88b9      	ldrh	r1, [r7, #4]
 8001896:	88f8      	ldrh	r0, [r7, #6]
 8001898:	f7ff ff80 	bl	800179c <LCD_DrawPoint>

		if(Xs == Xe && Ys == Ye)
 800189c:	88fa      	ldrh	r2, [r7, #6]
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d103      	bne.n	80018ac <LCD_DrawLine+0x9e>
 80018a4:	88ba      	ldrh	r2, [r7, #4]
 80018a6:	883b      	ldrh	r3, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d025      	beq.n	80018f8 <LCD_DrawLine+0xea>
			break;

		int16_t error2 = error;
 80018ac:	8abb      	ldrh	r3, [r7, #20]
 80018ae:	81fb      	strh	r3, [r7, #14]

		if(error2 > -deltaY)
 80018b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018b8:	425b      	negs	r3, r3
 80018ba:	429a      	cmp	r2, r3
 80018bc:	dd0a      	ble.n	80018d4 <LCD_DrawLine+0xc6>
		{
			error -= deltaY;
 80018be:	8aba      	ldrh	r2, [r7, #20]
 80018c0:	8a7b      	ldrh	r3, [r7, #18]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	82bb      	strh	r3, [r7, #20]
			Xs += signX;
 80018c8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	4413      	add	r3, r2
 80018d2:	80fb      	strh	r3, [r7, #6]
		}

		if(error2 < deltaX)
 80018d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dad6      	bge.n	800188e <LCD_DrawLine+0x80>
		{
			error += deltaX;
 80018e0:	8aba      	ldrh	r2, [r7, #20]
 80018e2:	8afb      	ldrh	r3, [r7, #22]
 80018e4:	4413      	add	r3, r2
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	82bb      	strh	r3, [r7, #20]
			Ys += signY;
 80018ea:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	88bb      	ldrh	r3, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	80bb      	strh	r3, [r7, #4]
	{
 80018f6:	e7ca      	b.n	800188e <LCD_DrawLine+0x80>
			break;
 80018f8:	bf00      	nop
		}
	}
}
 80018fa:	bf00      	nop
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd90      	pop	{r4, r7, pc}
	...

08001904 <LCD_PrintCh>:
* parameters :X(x start address), Y(y start address), Color(character color), Bcolor(background
							color), Character(use standard ASCII values for characters) and Size(characters size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintCh(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t Character, uint8_t Size)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	4604      	mov	r4, r0
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4623      	mov	r3, r4
 8001914:	80fb      	strh	r3, [r7, #6]
 8001916:	4603      	mov	r3, r0
 8001918:	80bb      	strh	r3, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	807b      	strh	r3, [r7, #2]
 800191e:	4613      	mov	r3, r2
 8001920:	803b      	strh	r3, [r7, #0]
	uint8_t i, j, k, p=0;
 8001922:	2300      	movs	r3, #0
 8001924:	733b      	strb	r3, [r7, #12]
	uint16_t c=0;
 8001926:	2300      	movs	r3, #0
 8001928:	817b      	strh	r3, [r7, #10]
	LCD_SetWindow(X, Y, X+(8 * Size - 1), Y+(8  *Size - 1));									// Define area by character size.
 800192a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800192e:	b29b      	uxth	r3, r3
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	b29a      	uxth	r2, r3
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	4413      	add	r3, r2
 8001938:	b29b      	uxth	r3, r3
 800193a:	3b01      	subs	r3, #1
 800193c:	b29c      	uxth	r4, r3
 800193e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001942:	b29b      	uxth	r3, r3
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	b29a      	uxth	r2, r3
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29b      	uxth	r3, r3
 8001952:	88b9      	ldrh	r1, [r7, #4]
 8001954:	88f8      	ldrh	r0, [r7, #6]
 8001956:	4622      	mov	r2, r4
 8001958:	f7ff fe46 	bl	80015e8 <LCD_SetWindow>

	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e03c      	b.n	80019dc <LCD_PrintCh+0xd8>
	{
		for(j=0; j < Size; j++)																					// Print each row size times.
 8001962:	2300      	movs	r3, #0
 8001964:	73bb      	strb	r3, [r7, #14]
 8001966:	e031      	b.n	80019cc <LCD_PrintCh+0xc8>
		{
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8001968:	2300      	movs	r3, #0
 800196a:	737b      	strb	r3, [r7, #13]
 800196c:	e028      	b.n	80019c0 <LCD_PrintCh+0xbc>
			{
				if((ASCIItable[Character][i]>>(7-k)) & 0x01)
 800196e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	491d      	ldr	r1, [pc, #116]	; (80019ec <LCD_PrintCh+0xe8>)
 8001976:	00d2      	lsls	r2, r2, #3
 8001978:	440a      	add	r2, r1
 800197a:	4413      	add	r3, r2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	7b7b      	ldrb	r3, [r7, #13]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	fa42 f303 	asr.w	r3, r2, r3
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <LCD_PrintCh+0x94>
					c=Color;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	817b      	strh	r3, [r7, #10]
 8001996:	e001      	b.n	800199c <LCD_PrintCh+0x98>
				else
					c=Bcolor;
 8001998:	883b      	ldrh	r3, [r7, #0]
 800199a:	817b      	strh	r3, [r7, #10]
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 800199c:	2300      	movs	r3, #0
 800199e:	733b      	strb	r3, [r7, #12]
 80019a0:	e006      	b.n	80019b0 <LCD_PrintCh+0xac>
				{
					FSMC_WR_DAT(c);
 80019a2:	897b      	ldrh	r3, [r7, #10]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fe0d 	bl	80015c4 <FSMC_WR_DAT>
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 80019aa:	7b3b      	ldrb	r3, [r7, #12]
 80019ac:	3301      	adds	r3, #1
 80019ae:	733b      	strb	r3, [r7, #12]
 80019b0:	7b3a      	ldrb	r2, [r7, #12]
 80019b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d3f3      	bcc.n	80019a2 <LCD_PrintCh+0x9e>
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 80019ba:	7b7b      	ldrb	r3, [r7, #13]
 80019bc:	3301      	adds	r3, #1
 80019be:	737b      	strb	r3, [r7, #13]
 80019c0:	7b7b      	ldrb	r3, [r7, #13]
 80019c2:	2b07      	cmp	r3, #7
 80019c4:	d9d3      	bls.n	800196e <LCD_PrintCh+0x6a>
		for(j=0; j < Size; j++)																					// Print each row size times.
 80019c6:	7bbb      	ldrb	r3, [r7, #14]
 80019c8:	3301      	adds	r3, #1
 80019ca:	73bb      	strb	r3, [r7, #14]
 80019cc:	7bba      	ldrb	r2, [r7, #14]
 80019ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d3c8      	bcc.n	8001968 <LCD_PrintCh+0x64>
	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	3301      	adds	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	2b07      	cmp	r3, #7
 80019e0:	d9bf      	bls.n	8001962 <LCD_PrintCh+0x5e>
				}
			}
		}
	}
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd90      	pop	{r4, r7, pc}
 80019ec:	0802c01c 	.word	0x0802c01c

080019f0 <LCD_PrintStr>:
							color), string(pointer to an array of characters, standard ASCII values) and size
							(character size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintStr(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t* String, uint8_t Size)
{
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	4604      	mov	r4, r0
 80019f8:	4608      	mov	r0, r1
 80019fa:	4611      	mov	r1, r2
 80019fc:	461a      	mov	r2, r3
 80019fe:	4623      	mov	r3, r4
 8001a00:	80fb      	strh	r3, [r7, #6]
 8001a02:	4603      	mov	r3, r0
 8001a04:	80bb      	strh	r3, [r7, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	807b      	strh	r3, [r7, #2]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	803b      	strh	r3, [r7, #0]
	X=X-8*Size;
 8001a0e:	7f3b      	ldrb	r3, [r7, #28]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	88fa      	ldrh	r2, [r7, #6]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	80fb      	strh	r3, [r7, #6]
	while(*String)
 8001a1c:	e015      	b.n	8001a4a <LCD_PrintStr+0x5a>
		LCD_PrintCh(X = X + 8 * Size, Y, Color, Bcolor, *String++, Size);
 8001a1e:	7f3b      	ldrb	r3, [r7, #28]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	4413      	add	r3, r2
 8001a2a:	80fb      	strh	r3, [r7, #6]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	61ba      	str	r2, [r7, #24]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	883d      	ldrh	r5, [r7, #0]
 8001a36:	887c      	ldrh	r4, [r7, #2]
 8001a38:	88b9      	ldrh	r1, [r7, #4]
 8001a3a:	88f8      	ldrh	r0, [r7, #6]
 8001a3c:	7f3a      	ldrb	r2, [r7, #28]
 8001a3e:	9201      	str	r2, [sp, #4]
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	462b      	mov	r3, r5
 8001a44:	4622      	mov	r2, r4
 8001a46:	f7ff ff5d 	bl	8001904 <LCD_PrintCh>
	while(*String)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1e5      	bne.n	8001a1e <LCD_PrintStr+0x2e>
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bdb0      	pop	{r4, r5, r7, pc}

08001a5c <NT35510_Init>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void NT35510_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	RST_LOW;													// Reset on.
 8001a60:	2200      	movs	r2, #0
 8001a62:	2140      	movs	r1, #64	; 0x40
 8001a64:	48fd      	ldr	r0, [pc, #1012]	; (8001e5c <NT35510_Init+0x400>)
 8001a66:	f002 fa33 	bl	8003ed0 <HAL_GPIO_WritePin>
	HAL_Delay(300);											// Short delay needed on power up
 8001a6a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a6e:	f001 fcc9 	bl	8003404 <HAL_Delay>
	RST_HIGH;													// Reset off.
 8001a72:	2201      	movs	r2, #1
 8001a74:	2140      	movs	r1, #64	; 0x40
 8001a76:	48f9      	ldr	r0, [pc, #996]	; (8001e5c <NT35510_Init+0x400>)
 8001a78:	f002 fa2a 	bl	8003ed0 <HAL_GPIO_WritePin>
	HAL_Delay(800);											// Short delay needed on power up
 8001a7c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a80:	f001 fcc0 	bl	8003404 <HAL_Delay>

	// Manufacture Command Set selection
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8001a84:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001a88:	f7ff fd8a 	bl	80015a0 <FSMC_WR_REG>
 8001a8c:	2055      	movs	r0, #85	; 0x55
 8001a8e:	f7ff fd99 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8001a92:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001a96:	f7ff fd83 	bl	80015a0 <FSMC_WR_REG>
 8001a9a:	20aa      	movs	r0, #170	; 0xaa
 8001a9c:	f7ff fd92 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8001aa0:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001aa4:	f7ff fd7c 	bl	80015a0 <FSMC_WR_REG>
 8001aa8:	2052      	movs	r0, #82	; 0x52
 8001aaa:	f7ff fd8b 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8001aae:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001ab2:	f7ff fd75 	bl	80015a0 <FSMC_WR_REG>
 8001ab6:	2008      	movs	r0, #8
 8001ab8:	f7ff fd84 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0001U);		// Select page 1
 8001abc:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001ac0:	f7ff fd6e 	bl	80015a0 <FSMC_WR_REG>
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f7ff fd7d 	bl	80015c4 <FSMC_WR_DAT>

	// AVDD 5.2V
	FSMC_WR_REG(SETAVDD_NORM);		FSMC_WR_DAT(0x000DU);
 8001aca:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8001ace:	f7ff fd67 	bl	80015a0 <FSMC_WR_REG>
 8001ad2:	200d      	movs	r0, #13
 8001ad4:	f7ff fd76 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_IDLE);		FSMC_WR_DAT(0x000DU);
 8001ad8:	f24b 0001 	movw	r0, #45057	; 0xb001
 8001adc:	f7ff fd60 	bl	80015a0 <FSMC_WR_REG>
 8001ae0:	200d      	movs	r0, #13
 8001ae2:	f7ff fd6f 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_PART);		FSMC_WR_DAT(0x000DU);
 8001ae6:	f24b 0002 	movw	r0, #45058	; 0xb002
 8001aea:	f7ff fd59 	bl	80015a0 <FSMC_WR_REG>
 8001aee:	200d      	movs	r0, #13
 8001af0:	f7ff fd68 	bl	80015c4 <FSMC_WR_DAT>

	// AVDD ratio
	FSMC_WR_REG(BT1CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001af4:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001af8:	f7ff fd52 	bl	80015a0 <FSMC_WR_REG>
 8001afc:	2034      	movs	r0, #52	; 0x34
 8001afe:	f7ff fd61 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001b02:	f24b 6001 	movw	r0, #46593	; 0xb601
 8001b06:	f7ff fd4b 	bl	80015a0 <FSMC_WR_REG>
 8001b0a:	2034      	movs	r0, #52	; 0x34
 8001b0c:	f7ff fd5a 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001b10:	f24b 6002 	movw	r0, #46594	; 0xb602
 8001b14:	f7ff fd44 	bl	80015a0 <FSMC_WR_REG>
 8001b18:	2034      	movs	r0, #52	; 0x34
 8001b1a:	f7ff fd53 	bl	80015c4 <FSMC_WR_DAT>

	// AVEE  -5.2V
	FSMC_WR_REG(SETAVEE_NORM);		FSMC_WR_DAT(0x000DU);
 8001b1e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8001b22:	f7ff fd3d 	bl	80015a0 <FSMC_WR_REG>
 8001b26:	200d      	movs	r0, #13
 8001b28:	f7ff fd4c 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_IDLE);		FSMC_WR_DAT(0x000DU);
 8001b2c:	f24b 1001 	movw	r0, #45313	; 0xb101
 8001b30:	f7ff fd36 	bl	80015a0 <FSMC_WR_REG>
 8001b34:	200d      	movs	r0, #13
 8001b36:	f7ff fd45 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_PART);		FSMC_WR_DAT(0x000DU);
 8001b3a:	f24b 1002 	movw	r0, #45314	; 0xb102
 8001b3e:	f7ff fd2f 	bl	80015a0 <FSMC_WR_REG>
 8001b42:	200d      	movs	r0, #13
 8001b44:	f7ff fd3e 	bl	80015c4 <FSMC_WR_DAT>

	// AVEE ratio
	FSMC_WR_REG(BT2CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001b48:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001b4c:	f7ff fd28 	bl	80015a0 <FSMC_WR_REG>
 8001b50:	2034      	movs	r0, #52	; 0x34
 8001b52:	f7ff fd37 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001b56:	f24b 7001 	movw	r0, #46849	; 0xb701
 8001b5a:	f7ff fd21 	bl	80015a0 <FSMC_WR_REG>
 8001b5e:	2034      	movs	r0, #52	; 0x34
 8001b60:	f7ff fd30 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001b64:	f24b 7002 	movw	r0, #46850	; 0xb702
 8001b68:	f7ff fd1a 	bl	80015a0 <FSMC_WR_REG>
 8001b6c:	2034      	movs	r0, #52	; 0x34
 8001b6e:	f7ff fd29 	bl	80015c4 <FSMC_WR_DAT>

	// VCL  -2.5V
	FSMC_WR_REG(SETVCL_NORM);		FSMC_WR_DAT(0x0000U);
 8001b72:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8001b76:	f7ff fd13 	bl	80015a0 <FSMC_WR_REG>
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff fd22 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_IDLE);		FSMC_WR_DAT(0x0000U);
 8001b80:	f24b 2001 	movw	r0, #45569	; 0xb201
 8001b84:	f7ff fd0c 	bl	80015a0 <FSMC_WR_REG>
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff fd1b 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_PART);		FSMC_WR_DAT(0x0000U);
 8001b8e:	f24b 2002 	movw	r0, #45570	; 0xb202
 8001b92:	f7ff fd05 	bl	80015a0 <FSMC_WR_REG>
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7ff fd14 	bl	80015c4 <FSMC_WR_DAT>

	// VCL ratio
	FSMC_WR_REG(BT3CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8001b9c:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8001ba0:	f7ff fcfe 	bl	80015a0 <FSMC_WR_REG>
 8001ba4:	2024      	movs	r0, #36	; 0x24
 8001ba6:	f7ff fd0d 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8001baa:	f64b 0001 	movw	r0, #47105	; 0xb801
 8001bae:	f7ff fcf7 	bl	80015a0 <FSMC_WR_REG>
 8001bb2:	2024      	movs	r0, #36	; 0x24
 8001bb4:	f7ff fd06 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_PART);		FSMC_WR_DAT(0x0024U);
 8001bb8:	f64b 0002 	movw	r0, #47106	; 0xb802
 8001bbc:	f7ff fcf0 	bl	80015a0 <FSMC_WR_REG>
 8001bc0:	2024      	movs	r0, #36	; 0x24
 8001bc2:	f7ff fcff 	bl	80015c4 <FSMC_WR_DAT>

	// VGH  15V
	FSMC_WR_REG(VGHCTR);			FSMC_WR_DAT(0x01);
 8001bc6:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8001bca:	f7ff fce9 	bl	80015a0 <FSMC_WR_REG>
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7ff fcf8 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_NORM);		FSMC_WR_DAT(0x000FU);
 8001bd4:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8001bd8:	f7ff fce2 	bl	80015a0 <FSMC_WR_REG>
 8001bdc:	200f      	movs	r0, #15
 8001bde:	f7ff fcf1 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_IDLE);		FSMC_WR_DAT(0x000FU);
 8001be2:	f24b 3001 	movw	r0, #45825	; 0xb301
 8001be6:	f7ff fcdb 	bl	80015a0 <FSMC_WR_REG>
 8001bea:	200f      	movs	r0, #15
 8001bec:	f7ff fcea 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_PART);		FSMC_WR_DAT(0x000FU);
 8001bf0:	f24b 3002 	movw	r0, #45826	; 0xb302
 8001bf4:	f7ff fcd4 	bl	80015a0 <FSMC_WR_REG>
 8001bf8:	200f      	movs	r0, #15
 8001bfa:	f7ff fce3 	bl	80015c4 <FSMC_WR_DAT>

	// VGH  ratio
	FSMC_WR_REG(BT4CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001bfe:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8001c02:	f7ff fccd 	bl	80015a0 <FSMC_WR_REG>
 8001c06:	2034      	movs	r0, #52	; 0x34
 8001c08:	f7ff fcdc 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001c0c:	f64b 1001 	movw	r0, #47361	; 0xb901
 8001c10:	f7ff fcc6 	bl	80015a0 <FSMC_WR_REG>
 8001c14:	2034      	movs	r0, #52	; 0x34
 8001c16:	f7ff fcd5 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001c1a:	f64b 1002 	movw	r0, #47362	; 0xb902
 8001c1e:	f7ff fcbf 	bl	80015a0 <FSMC_WR_REG>
 8001c22:	2034      	movs	r0, #52	; 0x34
 8001c24:	f7ff fcce 	bl	80015c4 <FSMC_WR_DAT>

	// VGL_REG  -10V
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8001c28:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001c2c:	f7ff fcb8 	bl	80015a0 <FSMC_WR_REG>
 8001c30:	2008      	movs	r0, #8
 8001c32:	f7ff fcc7 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8001c36:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001c3a:	f7ff fcb1 	bl	80015a0 <FSMC_WR_REG>
 8001c3e:	2008      	movs	r0, #8
 8001c40:	f7ff fcc0 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB501);			FSMC_WR_DAT(0x0008U);
 8001c44:	f24b 5001 	movw	r0, #46337	; 0xb501
 8001c48:	f7ff fcaa 	bl	80015a0 <FSMC_WR_REG>
 8001c4c:	2008      	movs	r0, #8
 8001c4e:	f7ff fcb9 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC200);			FSMC_WR_DAT(0x0003U);
 8001c52:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8001c56:	f7ff fca3 	bl	80015a0 <FSMC_WR_REG>
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	f7ff fcb2 	bl	80015c4 <FSMC_WR_DAT>

	// VGLX  ratio
	FSMC_WR_REG(BT5CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8001c60:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8001c64:	f7ff fc9c 	bl	80015a0 <FSMC_WR_REG>
 8001c68:	2024      	movs	r0, #36	; 0x24
 8001c6a:	f7ff fcab 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8001c6e:	f64b 2001 	movw	r0, #47617	; 0xba01
 8001c72:	f7ff fc95 	bl	80015a0 <FSMC_WR_REG>
 8001c76:	2024      	movs	r0, #36	; 0x24
 8001c78:	f7ff fca4 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_PART);		FSMC_WR_DAT(0x0024U);
 8001c7c:	f64b 2002 	movw	r0, #47618	; 0xba02
 8001c80:	f7ff fc8e 	bl	80015a0 <FSMC_WR_REG>
 8001c84:	2024      	movs	r0, #36	; 0x24
 8001c86:	f7ff fc9d 	bl	80015c4 <FSMC_WR_DAT>

	// VGMP/VGSP 4.5V/0V
	FSMC_WR_REG(SETVGP_0);			FSMC_WR_DAT(0x0000U);
 8001c8a:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8001c8e:	f7ff fc87 	bl	80015a0 <FSMC_WR_REG>
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fc96 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_1);			FSMC_WR_DAT(0x0078U);
 8001c98:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8001c9c:	f7ff fc80 	bl	80015a0 <FSMC_WR_REG>
 8001ca0:	2078      	movs	r0, #120	; 0x78
 8001ca2:	f7ff fc8f 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_2);			FSMC_WR_DAT(0x0000U);
 8001ca6:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001caa:	f7ff fc79 	bl	80015a0 <FSMC_WR_REG>
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff fc88 	bl	80015c4 <FSMC_WR_DAT>

	// VGMN/VGSN -4.5V/0V
	FSMC_WR_REG(SETVGN_0);			FSMC_WR_DAT(0x0000U);
 8001cb4:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8001cb8:	f7ff fc72 	bl	80015a0 <FSMC_WR_REG>
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7ff fc81 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_1);			FSMC_WR_DAT(0x0078U);
 8001cc2:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8001cc6:	f7ff fc6b 	bl	80015a0 <FSMC_WR_REG>
 8001cca:	2078      	movs	r0, #120	; 0x78
 8001ccc:	f7ff fc7a 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_2);			FSMC_WR_DAT(0x0000U);
 8001cd0:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8001cd4:	f7ff fc64 	bl	80015a0 <FSMC_WR_REG>
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff fc73 	bl	80015c4 <FSMC_WR_DAT>

	// VCOM  -1.325V
	FSMC_WR_REG(SETVCMOFF_0);		FSMC_WR_DAT(0x0000);
 8001cde:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8001ce2:	f7ff fc5d 	bl	80015a0 <FSMC_WR_REG>
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff fc6c 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCMOFF_1);		FSMC_WR_DAT(0x0089);
 8001cec:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8001cf0:	f7ff fc56 	bl	80015a0 <FSMC_WR_REG>
 8001cf4:	2089      	movs	r0, #137	; 0x89
 8001cf6:	f7ff fc65 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(GMBCTR2_BASE | 0x0033U);    FSMC_WR_DAT(0x007FU);
*/
	//**************************************************************************************************************************//

	// Select Page 0
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8001cfa:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001cfe:	f7ff fc4f 	bl	80015a0 <FSMC_WR_REG>
 8001d02:	2055      	movs	r0, #85	; 0x55
 8001d04:	f7ff fc5e 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8001d08:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001d0c:	f7ff fc48 	bl	80015a0 <FSMC_WR_REG>
 8001d10:	20aa      	movs	r0, #170	; 0xaa
 8001d12:	f7ff fc57 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8001d16:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001d1a:	f7ff fc41 	bl	80015a0 <FSMC_WR_REG>
 8001d1e:	2052      	movs	r0, #82	; 0x52
 8001d20:	f7ff fc50 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8001d24:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001d28:	f7ff fc3a 	bl	80015a0 <FSMC_WR_REG>
 8001d2c:	2008      	movs	r0, #8
 8001d2e:	f7ff fc49 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0000U);		// Select page 0
 8001d32:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001d36:	f7ff fc33 	bl	80015a0 <FSMC_WR_REG>
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff fc42 	bl	80015c4 <FSMC_WR_DAT>

	// DISPLAY CONTROL
	FSMC_WR_REG(DOPCTR_0);			FSMC_WR_DAT(0x00CCU);
 8001d40:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8001d44:	f7ff fc2c 	bl	80015a0 <FSMC_WR_REG>
 8001d48:	20cc      	movs	r0, #204	; 0xcc
 8001d4a:	f7ff fc3b 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(DOPCTR_1);			FSMC_WR_DAT(0x0000U);
 8001d4e:	f24b 1001 	movw	r0, #45313	; 0xb101
 8001d52:	f7ff fc25 	bl	80015a0 <FSMC_WR_REG>
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff fc34 	bl	80015c4 <FSMC_WR_DAT>

	FSMC_WR_REG(DPRSLCTR);			FSMC_WR_DAT(0x0050U);			// Display Resolution 480RGB x 800
 8001d5c:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001d60:	f7ff fc1e 	bl	80015a0 <FSMC_WR_REG>
 8001d64:	2050      	movs	r0, #80	; 0x50
 8001d66:	f7ff fc2d 	bl	80015c4 <FSMC_WR_DAT>

	// SOURCE HOLD TIME
	FSMC_WR_REG(SDHDTCTR);			FSMC_WR_DAT(0x0005U);
 8001d6a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001d6e:	f7ff fc17 	bl	80015a0 <FSMC_WR_REG>
 8001d72:	2005      	movs	r0, #5
 8001d74:	f7ff fc26 	bl	80015c4 <FSMC_WR_DAT>

	// Set Gate EQ
	FSMC_WR_REG(GSEQCTR_ST);		FSMC_WR_DAT(0x0070U);
 8001d78:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001d7c:	f7ff fc10 	bl	80015a0 <FSMC_WR_REG>
 8001d80:	2070      	movs	r0, #112	; 0x70
 8001d82:	f7ff fc1f 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(GSEQCTR_CK);		FSMC_WR_DAT(0x0070U);
 8001d86:	f24b 7001 	movw	r0, #46849	; 0xb701
 8001d8a:	f7ff fc09 	bl	80015a0 <FSMC_WR_REG>
 8001d8e:	2070      	movs	r0, #112	; 0x70
 8001d90:	f7ff fc18 	bl	80015c4 <FSMC_WR_DAT>

	// Source EQ control (Mode 2)
	FSMC_WR_REG(SDEQCTR_MOD );	FSMC_WR_DAT(0x0001U);
 8001d94:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8001d98:	f7ff fc02 	bl	80015a0 <FSMC_WR_REG>
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7ff fc11 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS1);	FSMC_WR_DAT(0x0003U);
 8001da2:	f64b 0001 	movw	r0, #47105	; 0xb801
 8001da6:	f7ff fbfb 	bl	80015a0 <FSMC_WR_REG>
 8001daa:	2003      	movs	r0, #3
 8001dac:	f7ff fc0a 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS2);	FSMC_WR_DAT(0x0003U);
 8001db0:	f64b 0002 	movw	r0, #47106	; 0xb802
 8001db4:	f7ff fbf4 	bl	80015a0 <FSMC_WR_REG>
 8001db8:	2003      	movs	r0, #3
 8001dba:	f7ff fc03 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS3);	FSMC_WR_DAT(0x0003U);
 8001dbe:	f64b 0003 	movw	r0, #47107	; 0xb803
 8001dc2:	f7ff fbed 	bl	80015a0 <FSMC_WR_REG>
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	f7ff fbfc 	bl	80015c4 <FSMC_WR_DAT>

	// INVERSION MODE
	FSMC_WR_REG(INVCTR_NORM);		FSMC_WR_DAT(0x0002U);
 8001dcc:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8001dd0:	f7ff fbe6 	bl	80015a0 <FSMC_WR_REG>
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	f7ff fbf5 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_IDLE);		FSMC_WR_DAT(0x0000U);
 8001dda:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8001dde:	f7ff fbdf 	bl	80015a0 <FSMC_WR_REG>
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7ff fbee 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_PART);		FSMC_WR_DAT(0x0000U);
 8001de8:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001dec:	f7ff fbd8 	bl	80015a0 <FSMC_WR_REG>
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff fbe7 	bl	80015c4 <FSMC_WR_DAT>

	// Timing control
	FSMC_WR_REG(0xC900);				FSMC_WR_DAT(0x00D0U);
 8001df6:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8001dfa:	f7ff fbd1 	bl	80015a0 <FSMC_WR_REG>
 8001dfe:	20d0      	movs	r0, #208	; 0xd0
 8001e00:	f7ff fbe0 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC901);				FSMC_WR_DAT(0x0002U);
 8001e04:	f64c 1001 	movw	r0, #51457	; 0xc901
 8001e08:	f7ff fbca 	bl	80015a0 <FSMC_WR_REG>
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f7ff fbd9 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC902);				FSMC_WR_DAT(0x0050U);
 8001e12:	f64c 1002 	movw	r0, #51458	; 0xc902
 8001e16:	f7ff fbc3 	bl	80015a0 <FSMC_WR_REG>
 8001e1a:	2050      	movs	r0, #80	; 0x50
 8001e1c:	f7ff fbd2 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC903);				FSMC_WR_DAT(0x0050U);
 8001e20:	f64c 1003 	movw	r0, #51459	; 0xc903
 8001e24:	f7ff fbbc 	bl	80015a0 <FSMC_WR_REG>
 8001e28:	2050      	movs	r0, #80	; 0x50
 8001e2a:	f7ff fbcb 	bl	80015c4 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC904);				FSMC_WR_DAT(0x0050U);
 8001e2e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8001e32:	f7ff fbb5 	bl	80015a0 <FSMC_WR_REG>
 8001e36:	2050      	movs	r0, #80	; 0x50
 8001e38:	f7ff fbc4 	bl	80015c4 <FSMC_WR_DAT>

	//**************************************************************************************************************************//
	// User Command Set
	FSMC_WR_REG(TEON);   				FSMC_WR_DAT(0x0000U);			// V-Blanking information only
 8001e3c:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8001e40:	f7ff fbae 	bl	80015a0 <FSMC_WR_REG>
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff fbbd 	bl	80015c4 <FSMC_WR_DAT>


	FSMC_WR_REG(COLMOD);   			FSMC_WR_DAT(0x0055U);		// RGB and MCU Interface Data format 16-Bits
 8001e4a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8001e4e:	f7ff fba7 	bl	80015a0 <FSMC_WR_REG>
 8001e52:	2055      	movs	r0, #85	; 0x55
 8001e54:	f7ff fbb6 	bl	80015c4 <FSMC_WR_DAT>
 8001e58:	e002      	b.n	8001e60 <NT35510_Init+0x404>
 8001e5a:	bf00      	nop
 8001e5c:	40020800 	.word	0x40020800
	FSMC_WR_REG(MADCTL);   			FSMC_WR_DAT(0x0000U);		// MADCTL: MY MX MV RGB MH RSMX RSMY
 8001e60:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8001e64:	f7ff fb9c 	bl	80015a0 <FSMC_WR_REG>
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fbab 	bl	80015c4 <FSMC_WR_DAT>


	FSMC_WR_REG(SLPOUT);   						// Sleep Out
 8001e6e:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8001e72:	f7ff fb95 	bl	80015a0 <FSMC_WR_REG>

	HAL_Delay(120);
 8001e76:	2078      	movs	r0, #120	; 0x78
 8001e78:	f001 fac4 	bl	8003404 <HAL_Delay>

	FSMC_WR_REG(DISPON);   						// Display On
 8001e7c:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8001e80:	f7ff fb8e 	bl	80015a0 <FSMC_WR_REG>

	HAL_Delay(200);
 8001e84:	20c8      	movs	r0, #200	; 0xc8
 8001e86:	f001 fabd 	bl	8003404 <HAL_Delay>

	LCD_SetDirection(VERTICAL_UP);		// Vertical-up display orientation as default
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7ff fc14 	bl	80016b8 <LCD_SetDirection>
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <MX_GPIO_Init>:

/** Configure pins
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
 8001e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a69      	ldr	r2, [pc, #420]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001eb4:	f043 0320 	orr.w	r3, r3, #32
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b67      	ldr	r3, [pc, #412]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	4b63      	ldr	r3, [pc, #396]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a62      	ldr	r2, [pc, #392]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b60      	ldr	r3, [pc, #384]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	4b5c      	ldr	r3, [pc, #368]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a5b      	ldr	r2, [pc, #364]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b59      	ldr	r3, [pc, #356]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b55      	ldr	r3, [pc, #340]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a54      	ldr	r2, [pc, #336]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001f08:	f043 0310 	orr.w	r3, r3, #16
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b52      	ldr	r3, [pc, #328]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	4b4e      	ldr	r3, [pc, #312]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a4d      	ldr	r2, [pc, #308]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001f24:	f043 0308 	orr.w	r3, r3, #8
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a46      	ldr	r2, [pc, #280]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b44      	ldr	r3, [pc, #272]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	4b40      	ldr	r3, [pc, #256]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a3f      	ldr	r2, [pc, #252]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <MX_GPIO_Init+0x1c4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OV7670_RST_GPIO_Port, OV7670_RST_Pin, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2104      	movs	r1, #4
 8001f72:	483a      	ldr	r0, [pc, #232]	; (800205c <MX_GPIO_Init+0x1c8>)
 8001f74:	f001 ffac 	bl	8003ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f7e:	4838      	ldr	r0, [pc, #224]	; (8002060 <MX_GPIO_Init+0x1cc>)
 8001f80:	f001 ffa6 	bl	8003ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RST_GPIO_Port, FSMC_RST_Pin, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2140      	movs	r1, #64	; 0x40
 8001f88:	4836      	ldr	r0, [pc, #216]	; (8002064 <MX_GPIO_Init+0x1d0>)
 8001f8a:	f001 ffa1 	bl	8003ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_RST_Pin;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f92:	2301      	movs	r3, #1
 8001f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OV7670_RST_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 031c 	add.w	r3, r7, #28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	482d      	ldr	r0, [pc, #180]	; (800205c <MX_GPIO_Init+0x1c8>)
 8001fa6:	f001 fdff 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OV7670_D0_Pin|OV7670_D1_Pin|OV7670_D2_Pin|OV7670_D3_Pin
 8001faa:	23ff      	movs	r3, #255	; 0xff
 8001fac:	61fb      	str	r3, [r7, #28]
                          |OV7670_D4_Pin|OV7670_D5_Pin|OV7670_D6_Pin|OV7670_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4828      	ldr	r0, [pc, #160]	; (8002060 <MX_GPIO_Init+0x1cc>)
 8001fbe:	f001 fdf3 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_HREF_Pin;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fc6:	4b28      	ldr	r3, [pc, #160]	; (8002068 <MX_GPIO_Init+0x1d4>)
 8001fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_HREF_GPIO_Port, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4825      	ldr	r0, [pc, #148]	; (800206c <MX_GPIO_Init+0x1d8>)
 8001fd6:	f001 fde7 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_VSYNC_Pin;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <MX_GPIO_Init+0x1dc>)
 8001fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	4619      	mov	r1, r3
 8001fec:	481f      	ldr	r0, [pc, #124]	; (800206c <MX_GPIO_Init+0x1d8>)
 8001fee:	f001 fddb 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4815      	ldr	r0, [pc, #84]	; (8002060 <MX_GPIO_Init+0x1cc>)
 800200c:	f001 fdcc 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RST_Pin;
 8002010:	2340      	movs	r3, #64	; 0x40
 8002012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002014:	2301      	movs	r3, #1
 8002016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RST_GPIO_Port, &GPIO_InitStruct);
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	4619      	mov	r1, r3
 8002026:	480f      	ldr	r0, [pc, #60]	; (8002064 <MX_GPIO_Init+0x1d0>)
 8002028:	f001 fdbe 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800202c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	4619      	mov	r1, r3
 8002048:	4806      	ldr	r0, [pc, #24]	; (8002064 <MX_GPIO_Init+0x1d0>)
 800204a:	f001 fdad 	bl	8003ba8 <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);*/

}
 800204e:	bf00      	nop
 8002050:	3730      	adds	r7, #48	; 0x30
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40021400 	.word	0x40021400
 8002060:	40020400 	.word	0x40020400
 8002064:	40020800 	.word	0x40020800
 8002068:	10210000 	.word	0x10210000
 800206c:	40021800 	.word	0x40021800
 8002070:	10310000 	.word	0x10310000

08002074 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <MX_I2C2_Init+0x50>)
 800207a:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <MX_I2C2_Init+0x54>)
 800207c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_I2C2_Init+0x50>)
 8002080:	4a12      	ldr	r2, [pc, #72]	; (80020cc <MX_I2C2_Init+0x58>)
 8002082:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <MX_I2C2_Init+0x50>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 66;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_I2C2_Init+0x50>)
 800208c:	2242      	movs	r2, #66	; 0x42
 800208e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_I2C2_Init+0x50>)
 8002092:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002096:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <MX_I2C2_Init+0x50>)
 800209a:	2200      	movs	r2, #0
 800209c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_I2C2_Init+0x50>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <MX_I2C2_Init+0x50>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_I2C2_Init+0x50>)
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_I2C2_Init+0x50>)
 80020b2:	f001 ff3f 	bl	8003f34 <HAL_I2C_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80020bc:	f000 f95a 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20047ac0 	.word	0x20047ac0
 80020c8:	40005800 	.word	0x40005800
 80020cc:	00061a80 	.word	0x00061a80

080020d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <HAL_I2C_MspInit+0x94>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d133      	bne.n	800215a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <HAL_I2C_MspInit+0x98>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a1b      	ldr	r2, [pc, #108]	; (8002168 <HAL_I2C_MspInit+0x98>)
 80020fc:	f043 0320 	orr.w	r3, r3, #32
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_I2C_MspInit+0x98>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800210e:	2303      	movs	r3, #3
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002112:	2312      	movs	r3, #18
 8002114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002116:	2301      	movs	r3, #1
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211a:	2303      	movs	r3, #3
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800211e:	2304      	movs	r3, #4
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	4810      	ldr	r0, [pc, #64]	; (800216c <HAL_I2C_MspInit+0x9c>)
 800212a:	f001 fd3d 	bl	8003ba8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <HAL_I2C_MspInit+0x98>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a0c      	ldr	r2, [pc, #48]	; (8002168 <HAL_I2C_MspInit+0x98>)
 8002138:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_I2C_MspInit+0x98>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	2021      	movs	r0, #33	; 0x21
 8002150:	f001 fa7b 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002154:	2021      	movs	r0, #33	; 0x21
 8002156:	f001 fa94 	bl	8003682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800215a:	bf00      	nop
 800215c:	3728      	adds	r7, #40	; 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40005800 	.word	0x40005800
 8002168:	40023800 	.word	0x40023800
 800216c:	40021400 	.word	0x40021400

08002170 <i2c_read_reg>:
extern I2C_HandleTypeDef hi2c2;


//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
uint8_t i2c_read_reg(uint8_t address, uint8_t reg)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af02      	add	r7, sp, #8
 8002176:	4603      	mov	r3, r0
 8002178:	460a      	mov	r2, r1
 800217a:	71fb      	strb	r3, [r7, #7]
 800217c:	4613      	mov	r3, r2
 800217e:	71bb      	strb	r3, [r7, #6]
	tx_data[0] = reg;
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <i2c_read_reg+0x48>)
 8002182:	79bb      	ldrb	r3, [r7, #6]
 8002184:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 2, 10);
 8002186:	230a      	movs	r3, #10
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2302      	movs	r3, #2
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <i2c_read_reg+0x48>)
 800218e:	2142      	movs	r1, #66	; 0x42
 8002190:	480a      	ldr	r0, [pc, #40]	; (80021bc <i2c_read_reg+0x4c>)
 8002192:	f002 f813 	bl	80041bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0x42U, rx_data, 1, 10);
 8002196:	230a      	movs	r3, #10
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2301      	movs	r3, #1
 800219c:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <i2c_read_reg+0x50>)
 800219e:	2142      	movs	r1, #66	; 0x42
 80021a0:	4806      	ldr	r0, [pc, #24]	; (80021bc <i2c_read_reg+0x4c>)
 80021a2:	f002 f909 	bl	80043b8 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f001 f92c 	bl	8003404 <HAL_Delay>
	return rx_data[0];
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <i2c_read_reg+0x50>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200000a8 	.word	0x200000a8
 80021bc:	20047ac0 	.word	0x20047ac0
 80021c0:	200000b0 	.word	0x200000b0

080021c4 <i2c_write_reg>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void i2c_write_reg(uint8_t address, uint8_t reg, uint8_t data)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
 80021ce:	460b      	mov	r3, r1
 80021d0:	71bb      	strb	r3, [r7, #6]
 80021d2:	4613      	mov	r3, r2
 80021d4:	717b      	strb	r3, [r7, #5]
	tx_data[0] = reg;
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <i2c_write_reg+0x3c>)
 80021d8:	79bb      	ldrb	r3, [r7, #6]
 80021da:	7013      	strb	r3, [r2, #0]
	tx_data[1] = data;
 80021dc:	4a08      	ldr	r2, [pc, #32]	; (8002200 <i2c_write_reg+0x3c>)
 80021de:	797b      	ldrb	r3, [r7, #5]
 80021e0:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 3, 10);
 80021e2:	230a      	movs	r3, #10
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2303      	movs	r3, #3
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <i2c_write_reg+0x3c>)
 80021ea:	2142      	movs	r1, #66	; 0x42
 80021ec:	4805      	ldr	r0, [pc, #20]	; (8002204 <i2c_write_reg+0x40>)
 80021ee:	f001 ffe5 	bl	80041bc <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f001 f906 	bl	8003404 <HAL_Delay>
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200000a8 	.word	0x200000a8
 8002204:	20047ac0 	.word	0x20047ac0

08002208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800220c:	f001 f888 	bl	8003320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002210:	f000 f812 	bl	8002238 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002214:	f7ff fe3e 	bl	8001e94 <MX_GPIO_Init>
  MX_DMA_Init();
 8002218:	f7ff f8b2 	bl	8001380 <MX_DMA_Init>
  MX_TIM1_Init();
 800221c:	f000 fc4a 	bl	8002ab4 <MX_TIM1_Init>
  MX_FSMC_Init();
 8002220:	f7ff f8c8 	bl	80013b4 <MX_FSMC_Init>
  MX_I2C2_Init();
 8002224:	f7ff ff26 	bl	8002074 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8002228:	f000 ffd4 	bl	80031d4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 800222c:	f7fe ff06 	bl	800103c <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main_loop();
 8002230:	f7fe ff4c 	bl	80010cc <app_main_loop>
 8002234:	e7fc      	b.n	8002230 <main+0x28>
	...

08002238 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b0aa      	sub	sp, #168	; 0xa8
 800223c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800223e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002242:	2234      	movs	r2, #52	; 0x34
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f022 feec 	bl	8025024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800224c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800225c:	f107 0308 	add.w	r3, r7, #8
 8002260:	2258      	movs	r2, #88	; 0x58
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f022 fedd 	bl	8025024 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b3f      	ldr	r3, [pc, #252]	; (800236c <_Z18SystemClock_Configv+0x134>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a3e      	ldr	r2, [pc, #248]	; (800236c <_Z18SystemClock_Configv+0x134>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b3c      	ldr	r3, [pc, #240]	; (800236c <_Z18SystemClock_Configv+0x134>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002286:	2300      	movs	r3, #0
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	4b39      	ldr	r3, [pc, #228]	; (8002370 <_Z18SystemClock_Configv+0x138>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a38      	ldr	r2, [pc, #224]	; (8002370 <_Z18SystemClock_Configv+0x138>)
 8002290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b36      	ldr	r3, [pc, #216]	; (8002370 <_Z18SystemClock_Configv+0x138>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022a2:	2302      	movs	r3, #2
 80022a4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a6:	2301      	movs	r3, #1
 80022a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ac:	2310      	movs	r3, #16
 80022ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b2:	2302      	movs	r3, #2
 80022b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022be:	2308      	movs	r3, #8
 80022c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 100;
 80022c4:	2364      	movs	r3, #100	; 0x64
 80022c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022ca:	2302      	movs	r3, #2
 80022cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022d0:	2302      	movs	r3, #2
 80022d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022d6:	2302      	movs	r3, #2
 80022d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022e0:	4618      	mov	r0, r3
 80022e2:	f004 fe1d 	bl	8006f20 <HAL_RCC_OscConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80022f6:	f000 f83d 	bl	8002374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022fa:	230f      	movs	r3, #15
 80022fc:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022fe:	2302      	movs	r3, #2
 8002300:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002302:	2300      	movs	r3, #0
 8002304:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800230c:	2300      	movs	r3, #0
 800230e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002310:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002314:	2103      	movs	r1, #3
 8002316:	4618      	mov	r0, r3
 8002318:	f004 f93e 	bl	8006598 <HAL_RCC_ClockConfig>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	bf14      	ite	ne
 8002322:	2301      	movne	r3, #1
 8002324:	2300      	moveq	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 800232c:	f000 f822 	bl	8002374 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
 8002330:	2304      	movs	r3, #4
 8002332:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8002334:	2301      	movs	r3, #1
 8002336:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	4618      	mov	r0, r3
 8002340:	f004 fb62 	bl	8006a08 <HAL_RCCEx_PeriphCLKConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf14      	ite	ne
 800234a:	2301      	movne	r3, #1
 800234c:	2300      	moveq	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <_Z18SystemClock_Configv+0x120>
  {
    Error_Handler();
 8002354:	f000 f80e 	bl	8002374 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_5);
 8002358:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800235c:	2100      	movs	r1, #0
 800235e:	2001      	movs	r0, #1
 8002360:	f004 fa00 	bl	8006764 <HAL_RCC_MCOConfig>
}
 8002364:	bf00      	nop
 8002366:	37a8      	adds	r7, #168	; 0xa8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	40007000 	.word	0x40007000

08002374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002378:	b672      	cpsid	i
}
 800237a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800237c:	e7fe      	b.n	800237c <Error_Handler+0x8>

0800237e <ov7670_saturation>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_saturation(int8_t s)  //-2 to 2
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	71fb      	strb	r3, [r7, #7]
	//color matrix values
	ov7670_write_register(OV7670_MTX1,	0x80 + 0x20 * s);
 8002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238c:	3304      	adds	r3, #4
 800238e:	b2db      	uxtb	r3, r3
 8002390:	015b      	lsls	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	4619      	mov	r1, r3
 8002396:	204f      	movs	r0, #79	; 0x4f
 8002398:	f000 f8d8 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_MTX2, 	0x80 + 0x20 * s);
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	3304      	adds	r3, #4
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	015b      	lsls	r3, r3, #5
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	2050      	movs	r0, #80	; 0x50
 80023ac:	f000 f8ce 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_MTX3, 	0x00);
 80023b0:	2100      	movs	r1, #0
 80023b2:	2051      	movs	r0, #81	; 0x51
 80023b4:	f000 f8ca 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_MTX4, 	0x22 + (0x11 * s) / 2);
 80023b8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80023bc:	4613      	mov	r3, r2
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	4413      	add	r3, r2
 80023c2:	0fda      	lsrs	r2, r3, #31
 80023c4:	4413      	add	r3, r2
 80023c6:	105b      	asrs	r3, r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	3322      	adds	r3, #34	; 0x22
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	4619      	mov	r1, r3
 80023d0:	2052      	movs	r0, #82	; 0x52
 80023d2:	f000 f8bb 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_MTX5, 	0x5e + (0x2f * s) / 2);
 80023d6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	0fda      	lsrs	r2, r3, #31
 80023e6:	4413      	add	r3, r2
 80023e8:	105b      	asrs	r3, r3, #1
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	335e      	adds	r3, #94	; 0x5e
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	4619      	mov	r1, r3
 80023f2:	2053      	movs	r0, #83	; 0x53
 80023f4:	f000 f8aa 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_MTX6, 	0x80 + 0x20 * s);
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	3304      	adds	r3, #4
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	015b      	lsls	r3, r3, #5
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4619      	mov	r1, r3
 8002406:	2054      	movs	r0, #84	; 0x54
 8002408:	f000 f8a0 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_MTXS, 	0x9e);  //matrix signs
 800240c:	219e      	movs	r1, #158	; 0x9e
 800240e:	2058      	movs	r0, #88	; 0x58
 8002410:	f000 f89c 	bl	800254c <ov7670_write_register>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <ov7670_frame_control>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_frame_control(int16_t hStart,  int16_t vStart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	460a      	mov	r2, r1
 8002426:	80fb      	strh	r3, [r7, #6]
 8002428:	4613      	mov	r3, r2
 800242a:	80bb      	strh	r3, [r7, #4]
	int hStop = (hStart + 640) % 784;
 800242c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002430:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002434:	4a2e      	ldr	r2, [pc, #184]	; (80024f0 <ov7670_frame_control+0xd4>)
 8002436:	fb82 1203 	smull	r1, r2, r2, r3
 800243a:	1211      	asrs	r1, r2, #8
 800243c:	17da      	asrs	r2, r3, #31
 800243e:	1a8a      	subs	r2, r1, r2
 8002440:	f44f 7144 	mov.w	r1, #784	; 0x310
 8002444:	fb01 f202 	mul.w	r2, r1, r2
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
	ov7670_write_register(OV7670_HSTART,	hStart >> 3);
 800244c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002450:	10db      	asrs	r3, r3, #3
 8002452:	b21b      	sxth	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	2017      	movs	r0, #23
 800245a:	f000 f877 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_HSTOP,		hStop >> 3);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	10db      	asrs	r3, r3, #3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	2018      	movs	r0, #24
 8002468:	f000 f870 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_HREF, 		((hStop & 0b111) << 3) | (hStart & 0b111));
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	b25b      	sxtb	r3, r3
 8002472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002476:	b25a      	sxtb	r2, r3
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	b25b      	sxtb	r3, r3
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	b25b      	sxtb	r3, r3
 8002482:	4313      	orrs	r3, r2
 8002484:	b25b      	sxtb	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	4619      	mov	r1, r3
 800248a:	2032      	movs	r0, #50	; 0x32
 800248c:	f000 f85e 	bl	800254c <ov7670_write_register>

	int vStop = (vStart + 480);
 8002490:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002494:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002498:	60bb      	str	r3, [r7, #8]
	ov7670_write_register(OV7670_VSTRT, 	vStart >> 2);
 800249a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800249e:	109b      	asrs	r3, r3, #2
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	4619      	mov	r1, r3
 80024a6:	2019      	movs	r0, #25
 80024a8:	f000 f850 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_VSTOP, 	vStop >> 2);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	109b      	asrs	r3, r3, #2
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	4619      	mov	r1, r3
 80024b4:	201a      	movs	r0, #26
 80024b6:	f000 f849 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_VREF, 		((vStop & 0b11) << 2) | (vStart & 0b11));
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	b25b      	sxtb	r3, r3
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	b25a      	sxtb	r2, r3
 80024c6:	88bb      	ldrh	r3, [r7, #4]
 80024c8:	b25b      	sxtb	r3, r3
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	b25b      	sxtb	r3, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b25b      	sxtb	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	4619      	mov	r1, r3
 80024d8:	2003      	movs	r0, #3
 80024da:	f000 f837 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_COM10, 	0x20U);
 80024de:	2120      	movs	r1, #32
 80024e0:	2015      	movs	r0, #21
 80024e2:	f000 f833 	bl	800254c <ov7670_write_register>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	5397829d 	.word	0x5397829d

080024f4 <ov7670_subsampling_control>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_subsampling_control(int8_t com14, int8_t downSample, int8_t pclk_div)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
 80024fe:	460b      	mov	r3, r1
 8002500:	71bb      	strb	r3, [r7, #6]
 8002502:	4613      	mov	r3, r2
 8002504:	717b      	strb	r3, [r7, #5]
	ov7670_write_register(OV7670_COM3, 			0x04);  //DCW enable
 8002506:	2104      	movs	r1, #4
 8002508:	200c      	movs	r0, #12
 800250a:	f000 f81f 	bl	800254c <ov7670_write_register>

	ov7670_write_register(OV7670_COM14, 		com14);       //pixel clock divided by 4, manual scaling enable, DCW and PCLK controlled by register
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	4619      	mov	r1, r3
 8002512:	203e      	movs	r0, #62	; 0x3e
 8002514:	f000 f81a 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_XSC, 		0x3a);
 8002518:	213a      	movs	r1, #58	; 0x3a
 800251a:	2070      	movs	r0, #112	; 0x70
 800251c:	f000 f816 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_YSC, 		0x35);
 8002520:	2135      	movs	r1, #53	; 0x35
 8002522:	2071      	movs	r0, #113	; 0x71
 8002524:	f000 f812 	bl	800254c <ov7670_write_register>

	ov7670_write_register(OV7670_SCL_DCWCTR, 	downSample);
 8002528:	79bb      	ldrb	r3, [r7, #6]
 800252a:	4619      	mov	r1, r3
 800252c:	2072      	movs	r0, #114	; 0x72
 800252e:	f000 f80d 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_PCLK_DIV, 	pclk_div); //pixel clock divided by 4
 8002532:	797b      	ldrb	r3, [r7, #5]
 8002534:	4619      	mov	r1, r3
 8002536:	2073      	movs	r0, #115	; 0x73
 8002538:	f000 f808 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_PCLK_DLY, 	0x02);
 800253c:	2102      	movs	r1, #2
 800253e:	20a2      	movs	r0, #162	; 0xa2
 8002540:	f000 f804 	bl	800254c <ov7670_write_register>
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <ov7670_write_register>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_write_register(unsigned char reg, unsigned char val)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	460a      	mov	r2, r1
 8002556:	71fb      	strb	r3, [r7, #7]
 8002558:	4613      	mov	r3, r2
 800255a:	71bb      	strb	r3, [r7, #6]
	//uint8_t buff[25] = {0};

	//sprintf(buff, "0x%02x,0x%02x,", reg, i2c_read_reg(0x43, reg));
	i2c_write_reg(0x42U, reg, val);
 800255c:	79ba      	ldrb	r2, [r7, #6]
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	4619      	mov	r1, r3
 8002562:	2042      	movs	r0, #66	; 0x42
 8002564:	f7ff fe2e 	bl	80021c4 <i2c_write_reg>
	//sprintf(buff + strlen(buff), "0x%02x\r\n", i2c_read_reg(0x43, reg));
	//uart_write(buff);
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <ov7670_read_register>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
uint8_t ov7670_read_register(unsigned char reg)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
	return i2c_read_reg(0x42U, reg);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4619      	mov	r1, r3
 800257e:	2042      	movs	r0, #66	; 0x42
 8002580:	f7ff fdf6 	bl	8002170 <i2c_read_reg>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <ov7670_set_mode>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_set_mode(ov7670_res_fmt_t resolution, uint16_t exposure)
{   // 0,1 or 2 for QQQ, QQ, or Q VGA.  All are RGB565
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	460a      	mov	r2, r1
 8002598:	71fb      	strb	r3, [r7, #7]
 800259a:	4613      	mov	r3, r2
 800259c:	80bb      	strh	r3, [r7, #4]
	if (resolution < 0)
		resolution = 0;
	else if(resolution > 2)
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <ov7670_set_mode+0x1a>
		resolution = 2;
 80025a4:	2302      	movs	r3, #2
 80025a6:	71fb      	strb	r3, [r7, #7]

	ov7670_write_register(OV7670_COM7,	0x80U);				// all registers default
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	2012      	movs	r0, #18
 80025ac:	f7ff ffce 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_CLKRC,	0x80U);				// double clock?? My spec sheet says Reserved
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	2011      	movs	r0, #17
 80025b4:	f7ff ffca 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_COM11,	0x08U | 0x02U);		// enable auto 50/60Hz detect + exposure timing can be less...
 80025b8:	210a      	movs	r1, #10
 80025ba:	203b      	movs	r0, #59	; 0x3b
 80025bc:	f7ff ffc6 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_COM7,	0x04U);				// RGB
 80025c0:	2104      	movs	r1, #4
 80025c2:	2012      	movs	r0, #18
 80025c4:	f7ff ffc2 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_COM15,	0xC0U | 0x10U);		// RGB565
 80025c8:	21d0      	movs	r1, #208	; 0xd0
 80025ca:	2040      	movs	r0, #64	; 0x40
 80025cc:	f7ff ffbe 	bl	800254c <ov7670_write_register>

	switch (resolution) {
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d01c      	beq.n	8002610 <ov7670_set_mode+0x82>
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	dc25      	bgt.n	8002626 <ov7670_set_mode+0x98>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <ov7670_set_mode+0x56>
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d00b      	beq.n	80025fa <ov7670_set_mode+0x6c>
 80025e2:	e020      	b.n	8002626 <ov7670_set_mode+0x98>
	case 0:
		ov7670_subsampling_control(0x1B, 0x33, 0xF3);
 80025e4:	f06f 020c 	mvn.w	r2, #12
 80025e8:	2133      	movs	r1, #51	; 0x33
 80025ea:	201b      	movs	r0, #27
 80025ec:	f7ff ff82 	bl	80024f4 <ov7670_subsampling_control>
		ov7670_frame_control(196, 14);
 80025f0:	210e      	movs	r1, #14
 80025f2:	20c4      	movs	r0, #196	; 0xc4
 80025f4:	f7ff ff12 	bl	800241c <ov7670_frame_control>
		break;
 80025f8:	e015      	b.n	8002626 <ov7670_set_mode+0x98>
	case 1:
		ov7670_subsampling_control(0x1A, 0x22, 0xF2);
 80025fa:	f06f 020d 	mvn.w	r2, #13
 80025fe:	2122      	movs	r1, #34	; 0x22
 8002600:	201a      	movs	r0, #26
 8002602:	f7ff ff77 	bl	80024f4 <ov7670_subsampling_control>
		ov7670_frame_control(174, 14);
 8002606:	210e      	movs	r1, #14
 8002608:	20ae      	movs	r0, #174	; 0xae
 800260a:	f7ff ff07 	bl	800241c <ov7670_frame_control>
		break;
 800260e:	e00a      	b.n	8002626 <ov7670_set_mode+0x98>
	case 2:
		ov7670_subsampling_control(0x19, 0x11, 0xF1);
 8002610:	f06f 020e 	mvn.w	r2, #14
 8002614:	2111      	movs	r1, #17
 8002616:	2019      	movs	r0, #25
 8002618:	f7ff ff6c 	bl	80024f4 <ov7670_subsampling_control>
		ov7670_frame_control(154, 14);
 800261c:	210e      	movs	r1, #14
 800261e:	209a      	movs	r0, #154	; 0x9a
 8002620:	f7ff fefc 	bl	800241c <ov7670_frame_control>
		break;
 8002624:	bf00      	nop
	}

	//ov7670_writeRegist(OV7670_COM10, 0x02); //VSYNC negative
	//ov7670_writeRegist(OV7670_MVFP, 0x2b);  //mirror flip

	ov7670_write_register(0xB0U, 			0x84U); // no clue what this is but it's most important for colors
 8002626:	2184      	movs	r1, #132	; 0x84
 8002628:	20b0      	movs	r0, #176	; 0xb0
 800262a:	f7ff ff8f 	bl	800254c <ov7670_write_register>
	ov7670_saturation(0);
 800262e:	2000      	movs	r0, #0
 8002630:	f7ff fea5 	bl	800237e <ov7670_saturation>
	ov7670_write_register(OV7670_COM8, 		0xE7U); // AGC AWB AEC all on
 8002634:	21e7      	movs	r1, #231	; 0xe7
 8002636:	2013      	movs	r0, #19
 8002638:	f7ff ff88 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_AWBCTR0, 	0x9FU); // Simple AWB
 800263c:	219f      	movs	r1, #159	; 0x9f
 800263e:	206f      	movs	r0, #111	; 0x6f
 8002640:	f7ff ff84 	bl	800254c <ov7670_write_register>

	// What is this comment about? I tried but don't see any difference.
	// Line 1029 of https://github.com/yandex/smart/blob/master/drivers/media/i2c/ov7670.c
	ov7670_write_register(OV7670_CLKRC, 	0x80U);
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	2011      	movs	r0, #17
 8002648:	f7ff ff80 	bl	800254c <ov7670_write_register>

	HAL_Delay(50);
 800264c:	2032      	movs	r0, #50	; 0x32
 800264e:	f000 fed9 	bl	8003404 <HAL_Delay>

	uint8_t com1 = exposure & 0x03U;			// AEC[1:0]
 8002652:	88bb      	ldrh	r3, [r7, #4]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	73fb      	strb	r3, [r7, #15]
	uint8_t aech = (exposure >> 2) & 0xFFU;		// AEC[9:2]
 800265c:	88bb      	ldrh	r3, [r7, #4]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	b29b      	uxth	r3, r3
 8002662:	73bb      	strb	r3, [r7, #14]
	uint8_t aechh = (exposure >> 10) & 0xFFU;	// AEC[15:10]
 8002664:	88bb      	ldrh	r3, [r7, #4]
 8002666:	0a9b      	lsrs	r3, r3, #10
 8002668:	b29b      	uxth	r3, r3
 800266a:	737b      	strb	r3, [r7, #13]

	ov7670_write_register(OV7670_COM1, 		(ov7670_read_register(OV7670_COM1) & ~0x03U) | com1);
 800266c:	2004      	movs	r0, #4
 800266e:	f7ff ff7f 	bl	8002570 <ov7670_read_register>
 8002672:	4603      	mov	r3, r0
 8002674:	f023 0303 	bic.w	r3, r3, #3
 8002678:	b2da      	uxtb	r2, r3
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	4313      	orrs	r3, r2
 800267e:	b2db      	uxtb	r3, r3
 8002680:	4619      	mov	r1, r3
 8002682:	2004      	movs	r0, #4
 8002684:	f7ff ff62 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_AECH, 		aech);
 8002688:	7bbb      	ldrb	r3, [r7, #14]
 800268a:	4619      	mov	r1, r3
 800268c:	2010      	movs	r0, #16
 800268e:	f7ff ff5d 	bl	800254c <ov7670_write_register>
	ov7670_write_register(OV7670_AECHH, 	aechh);
 8002692:	7b7b      	ldrb	r3, [r7, #13]
 8002694:	4619      	mov	r1, r3
 8002696:	2007      	movs	r0, #7
 8002698:	f7ff ff58 	bl	800254c <ov7670_write_register>
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <ov7670_init>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_init()
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
	OV7670_RST_LOW;
 80026a8:	2200      	movs	r2, #0
 80026aa:	2104      	movs	r1, #4
 80026ac:	4815      	ldr	r0, [pc, #84]	; (8002704 <ov7670_init+0x60>)
 80026ae:	f001 fc0f 	bl	8003ed0 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80026b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026b6:	f000 fea5 	bl	8003404 <HAL_Delay>
	OV7670_RST_HIGH;
 80026ba:	2201      	movs	r2, #1
 80026bc:	2104      	movs	r1, #4
 80026be:	4811      	ldr	r0, [pc, #68]	; (8002704 <ov7670_init+0x60>)
 80026c0:	f001 fc06 	bl	8003ed0 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80026c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026c8:	f000 fe9c 	bl	8003404 <HAL_Delay>

	ov7670_set_mode(QVGA_RGB565, 200);
 80026cc:	21c8      	movs	r1, #200	; 0xc8
 80026ce:	2002      	movs	r0, #2
 80026d0:	f7ff ff5d 	bl	800258e <ov7670_set_mode>
	HAL_Delay(300);
 80026d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026d8:	f000 fe94 	bl	8003404 <HAL_Delay>

	TIM1->DIER |= TIM_DIER_TDE;// | TIM_DIER_TDE TIM_DIER_UDE;
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <ov7670_init+0x64>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a09      	ldr	r2, [pc, #36]	; (8002708 <ov7670_init+0x64>)
 80026e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e6:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim1);
 80026e8:	4808      	ldr	r0, [pc, #32]	; (800270c <ov7670_init+0x68>)
 80026ea:	f004 ff31 	bl	8007550 <HAL_TIM_Base_Start>

	HAL_NVIC_SetPriority(OV7670_VSYNC_EXTI_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	2007      	movs	r0, #7
 80026f4:	f000 ffa9 	bl	800364a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7670_VSYNC_EXTI_IRQn);
 80026f8:	2007      	movs	r0, #7
 80026fa:	f000 ffc2 	bl	8003682 <HAL_NVIC_EnableIRQ>
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40021400 	.word	0x40021400
 8002708:	40010000 	.word	0x40010000
 800270c:	20047b74 	.word	0x20047b74

08002710 <HAL_GPIO_EXTI_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == OV7670_VSYNC_Pin)
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d102      	bne.n	8002726 <HAL_GPIO_EXTI_Callback+0x16>
		EXTI1_VSYNC_Callback();
 8002720:	f000 f838 	bl	8002794 <EXTI1_VSYNC_Callback>
	else if(GPIO_Pin == OV7670_HREF_Pin)
		EXTI0_HREF_Callback();
}
 8002724:	e004      	b.n	8002730 <HAL_GPIO_EXTI_Callback+0x20>
	else if(GPIO_Pin == OV7670_HREF_Pin)
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_GPIO_EXTI_Callback+0x20>
		EXTI0_HREF_Callback();
 800272c:	f000 f804 	bl	8002738 <EXTI0_HREF_Callback>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <EXTI0_HREF_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI0_HREF_Callback()
{	// Falling edge
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
	HAL_DMA_Abort(&hdma_tim1_trig);
 800273c:	4810      	ldr	r0, [pc, #64]	; (8002780 <EXTI0_HREF_Callback+0x48>)
 800273e:	f001 f8b2 	bl	80038a6 <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)(g_cam_buff + g_offset), 640);
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <EXTI0_HREF_Callback+0x4c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a10      	ldr	r2, [pc, #64]	; (8002788 <EXTI0_HREF_Callback+0x50>)
 8002748:	4413      	add	r3, r2
 800274a:	461a      	mov	r2, r3
 800274c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002750:	490e      	ldr	r1, [pc, #56]	; (800278c <EXTI0_HREF_Callback+0x54>)
 8002752:	480b      	ldr	r0, [pc, #44]	; (8002780 <EXTI0_HREF_Callback+0x48>)
 8002754:	f001 f86c 	bl	8003830 <HAL_DMA_Start>
	if(g_cam_buff + g_offset >= g_cam_buff + OV7670_FRAME_SIZE_QVGA - 640)//38080=38400-320
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <EXTI0_HREF_Callback+0x4c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <EXTI0_HREF_Callback+0x50>)
 800275e:	4413      	add	r3, r2
 8002760:	4a0b      	ldr	r2, [pc, #44]	; (8002790 <EXTI0_HREF_Callback+0x58>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d303      	bcc.n	800276e <EXTI0_HREF_Callback+0x36>
	{
		g_offset = 0;
 8002766:	4b07      	ldr	r3, [pc, #28]	; (8002784 <EXTI0_HREF_Callback+0x4c>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		g_offset += 640;
	}
}
 800276c:	e005      	b.n	800277a <EXTI0_HREF_Callback+0x42>
		g_offset += 640;
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <EXTI0_HREF_Callback+0x4c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002776:	4a03      	ldr	r2, [pc, #12]	; (8002784 <EXTI0_HREF_Callback+0x4c>)
 8002778:	6013      	str	r3, [r2, #0]
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20047b14 	.word	0x20047b14
 8002784:	20027f38 	.word	0x20027f38
 8002788:	200000b8 	.word	0x200000b8
 800278c:	40020410 	.word	0x40020410
 8002790:	20025638 	.word	0x20025638

08002794 <EXTI1_VSYNC_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI1_VSYNC_Callback()
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	// Rising edge
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
	if(OV7670_VSYNC_GPIO_Port->IDR & OV7670_VSYNC_Pin)
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <EXTI1_VSYNC_Callback+0x54>)
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d006      	beq.n	80027b2 <EXTI1_VSYNC_Callback+0x1e>
	{

		HAL_DMA_Abort(&hdma_tim1_trig);
 80027a4:	4811      	ldr	r0, [pc, #68]	; (80027ec <EXTI1_VSYNC_Callback+0x58>)
 80027a6:	f001 f87e 	bl	80038a6 <HAL_DMA_Abort>
		HAL_NVIC_DisableIRQ(OV7670_HREF_EXTI_IRQn);
 80027aa:	2006      	movs	r0, #6
 80027ac:	f000 ff77 	bl	800369e <HAL_NVIC_DisableIRQ>
		HAL_DMA_Abort(&hdma_tim1_trig);
		HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)g_cam_buff, 640); // first line
		g_offset += 640;
	}
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
}
 80027b0:	e017      	b.n	80027e2 <EXTI1_VSYNC_Callback+0x4e>
		HAL_NVIC_SetPriority(OV7670_HREF_EXTI_IRQn, 0, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2100      	movs	r1, #0
 80027b6:	2006      	movs	r0, #6
 80027b8:	f000 ff47 	bl	800364a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(OV7670_HREF_EXTI_IRQn);
 80027bc:	2006      	movs	r0, #6
 80027be:	f000 ff60 	bl	8003682 <HAL_NVIC_EnableIRQ>
		HAL_DMA_Abort(&hdma_tim1_trig);
 80027c2:	480a      	ldr	r0, [pc, #40]	; (80027ec <EXTI1_VSYNC_Callback+0x58>)
 80027c4:	f001 f86f 	bl	80038a6 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)g_cam_buff, 640); // first line
 80027c8:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <EXTI1_VSYNC_Callback+0x5c>)
 80027ca:	f44f 7320 	mov.w	r3, #640	; 0x280
 80027ce:	4909      	ldr	r1, [pc, #36]	; (80027f4 <EXTI1_VSYNC_Callback+0x60>)
 80027d0:	4806      	ldr	r0, [pc, #24]	; (80027ec <EXTI1_VSYNC_Callback+0x58>)
 80027d2:	f001 f82d 	bl	8003830 <HAL_DMA_Start>
		g_offset += 640;
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <EXTI1_VSYNC_Callback+0x64>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027de:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <EXTI1_VSYNC_Callback+0x64>)
 80027e0:	6013      	str	r3, [r2, #0]
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40021800 	.word	0x40021800
 80027ec:	20047b14 	.word	0x20047b14
 80027f0:	200000b8 	.word	0x200000b8
 80027f4:	40020410 	.word	0x40020410
 80027f8:	20027f38 	.word	0x20027f38

080027fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <HAL_MspInit+0x4c>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a0f      	ldr	r2, [pc, #60]	; (8002848 <HAL_MspInit+0x4c>)
 800280c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_MspInit+0x4c>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_MspInit+0x4c>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a08      	ldr	r2, [pc, #32]	; (8002848 <HAL_MspInit+0x4c>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_MspInit+0x4c>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800

0800284c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002850:	e7fe      	b.n	8002850 <NMI_Handler+0x4>

08002852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002856:	e7fe      	b.n	8002856 <HardFault_Handler+0x4>

08002858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800285c:	e7fe      	b.n	800285c <MemManage_Handler+0x4>

0800285e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002862:	e7fe      	b.n	8002862 <BusFault_Handler+0x4>

08002864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <UsageFault_Handler+0x4>

0800286a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002898:	f000 fd94 	bl	80033c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}

080028a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80028a4:	2001      	movs	r0, #1
 80028a6:	f001 fb2d 	bl	8003f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}

080028ae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80028b2:	2002      	movs	r0, #2
 80028b4:	f001 fb26 	bl	8003f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}

080028bc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <I2C2_EV_IRQHandler+0x10>)
 80028c2:	f001 ff9f 	bl	8004804 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20047ac0 	.word	0x20047ac0

080028d0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((USART6->SR & USART_SR_RXNE) && (USART6->CR1 & USART_CR1_RXNEIE))
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <USART6_IRQHandler+0x2c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <USART6_IRQHandler+0x20>
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <USART6_IRQHandler+0x2c>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <USART6_IRQHandler+0x20>
		uart_rx_callback();
 80028ec:	f000 fb9a 	bl	8003024 <uart_rx_callback>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <USART6_IRQHandler+0x30>)
 80028f2:	f005 f993 	bl	8007c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40011400 	.word	0x40011400
 8002900:	20047cf0 	.word	0x20047cf0

08002904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
	return 1;
 8002908:	2301      	movs	r3, #1
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <_kill>:

int _kill(int pid, int sig)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800291e:	f022 fb0d 	bl	8024f3c <__errno>
 8002922:	4603      	mov	r3, r0
 8002924:	2216      	movs	r2, #22
 8002926:	601a      	str	r2, [r3, #0]
	return -1;
 8002928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_exit>:

void _exit (int status)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800293c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ffe7 	bl	8002914 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002946:	e7fe      	b.n	8002946 <_exit+0x12>

08002948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e00a      	b.n	8002970 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800295a:	f3af 8000 	nop.w
 800295e:	4601      	mov	r1, r0
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	60ba      	str	r2, [r7, #8]
 8002966:	b2ca      	uxtb	r2, r1
 8002968:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	3301      	adds	r3, #1
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	dbf0      	blt.n	800295a <_read+0x12>
	}

return len;
 8002978:	687b      	ldr	r3, [r7, #4]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e009      	b.n	80029a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	60ba      	str	r2, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dbf1      	blt.n	8002994 <_write+0x12>
	}
	return len;
 80029b0:	687b      	ldr	r3, [r7, #4]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_close>:

int _close(int file)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
	return -1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029e2:	605a      	str	r2, [r3, #4]
	return 0;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <_isatty>:

int _isatty(int file)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
	return 1;
 80029fa:	2301      	movs	r3, #1
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
	return 0;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <_sbrk+0x5c>)
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <_sbrk+0x60>)
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <_sbrk+0x64>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d102      	bne.n	8002a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <_sbrk+0x64>)
 8002a42:	4a12      	ldr	r2, [pc, #72]	; (8002a8c <_sbrk+0x68>)
 8002a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <_sbrk+0x64>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d207      	bcs.n	8002a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a54:	f022 fa72 	bl	8024f3c <__errno>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a62:	e009      	b.n	8002a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <_sbrk+0x64>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <_sbrk+0x64>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	4a05      	ldr	r2, [pc, #20]	; (8002a88 <_sbrk+0x64>)
 8002a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a76:	68fb      	ldr	r3, [r7, #12]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20050000 	.word	0x20050000
 8002a84:	00000400 	.word	0x00000400
 8002a88:	20027f3c 	.word	0x20027f3c
 8002a8c:	20047d48 	.word	0x20047d48

08002a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <SystemInit+0x20>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <SystemInit+0x20>)
 8002a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002aba:	f107 030c 	add.w	r3, r7, #12
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]
 8002ac8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ad2:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <MX_TIM1_Init+0xa4>)
 8002ad4:	4a21      	ldr	r2, [pc, #132]	; (8002b5c <MX_TIM1_Init+0xa8>)
 8002ad6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ad8:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <MX_TIM1_Init+0xa4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <MX_TIM1_Init+0xa4>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <MX_TIM1_Init+0xa4>)
 8002ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aec:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <MX_TIM1_Init+0xa4>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002af2:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <MX_TIM1_Init+0xa4>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af8:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <MX_TIM1_Init+0xa4>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002afe:	4816      	ldr	r0, [pc, #88]	; (8002b58 <MX_TIM1_Init+0xa4>)
 8002b00:	f004 fcd6 	bl	80074b0 <HAL_TIM_Base_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002b0a:	f7ff fc33 	bl	8002374 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002b0e:	2307      	movs	r3, #7
 8002b10:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002b12:	2360      	movs	r3, #96	; 0x60
 8002b14:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	4619      	mov	r1, r3
 8002b24:	480c      	ldr	r0, [pc, #48]	; (8002b58 <MX_TIM1_Init+0xa4>)
 8002b26:	f004 fd7b 	bl	8007620 <HAL_TIM_SlaveConfigSynchro>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002b30:	f7ff fc20 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b34:	2300      	movs	r3, #0
 8002b36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_TIM1_Init+0xa4>)
 8002b42:	f004 ff5d 	bl	8007a00 <HAL_TIMEx_MasterConfigSynchronization>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002b4c:	f7ff fc12 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b50:	bf00      	nop
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20047b74 	.word	0x20047b74
 8002b5c:	40010000 	.word	0x40010000

08002b60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a31      	ldr	r2, [pc, #196]	; (8002c44 <HAL_TIM_Base_MspInit+0xe4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d15b      	bne.n	8002c3a <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_TIM_Base_MspInit+0xe8>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	4a2f      	ldr	r2, [pc, #188]	; (8002c48 <HAL_TIM_Base_MspInit+0xe8>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6453      	str	r3, [r2, #68]	; 0x44
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_TIM_Base_MspInit+0xe8>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_TIM_Base_MspInit+0xe8>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a28      	ldr	r2, [pc, #160]	; (8002c48 <HAL_TIM_Base_MspInit+0xe8>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <HAL_TIM_Base_MspInit+0xe8>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	481d      	ldr	r0, [pc, #116]	; (8002c4c <HAL_TIM_Base_MspInit+0xec>)
 8002bd8:	f000 ffe6 	bl	8003ba8 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_TRIG Init */
    hdma_tim1_trig.Instance = DMA2_Stream0;
 8002bdc:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <HAL_TIM_Base_MspInit+0xf0>)
 8002bde:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <HAL_TIM_Base_MspInit+0xf4>)
 8002be0:	601a      	str	r2, [r3, #0]
    hdma_tim1_trig.Init.Channel = DMA_CHANNEL_6;
 8002be2:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_TIM_Base_MspInit+0xf0>)
 8002be4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002be8:	605a      	str	r2, [r3, #4]
    hdma_tim1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bea:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_TIM_Base_MspInit+0xf0>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
    hdma_tim1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf0:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <HAL_TIM_Base_MspInit+0xf0>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	60da      	str	r2, [r3, #12]
    hdma_tim1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <HAL_TIM_Base_MspInit+0xf0>)
 8002bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bfc:	611a      	str	r2, [r3, #16]
    hdma_tim1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <HAL_TIM_Base_MspInit+0xf0>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	615a      	str	r2, [r3, #20]
    hdma_tim1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_TIM_Base_MspInit+0xf0>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
    hdma_tim1_trig.Init.Mode = DMA_NORMAL;
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <HAL_TIM_Base_MspInit+0xf0>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	61da      	str	r2, [r3, #28]
    hdma_tim1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_TIM_Base_MspInit+0xf0>)
 8002c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c16:	621a      	str	r2, [r3, #32]
    hdma_tim1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c18:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_TIM_Base_MspInit+0xf0>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_trig) != HAL_OK)
 8002c1e:	480c      	ldr	r0, [pc, #48]	; (8002c50 <HAL_TIM_Base_MspInit+0xf0>)
 8002c20:	f000 fd58 	bl	80036d4 <HAL_DMA_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_TIM_Base_MspInit+0xce>
    {
      Error_Handler();
 8002c2a:	f7ff fba3 	bl	8002374 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_trig);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <HAL_TIM_Base_MspInit+0xf0>)
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38
 8002c34:	4a06      	ldr	r2, [pc, #24]	; (8002c50 <HAL_TIM_Base_MspInit+0xf0>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	3728      	adds	r7, #40	; 0x28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	20047b14 	.word	0x20047b14
 8002c54:	40026410 	.word	0x40026410

08002c58 <uart_init>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_init()
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <uart_init+0x20>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <uart_init+0x20>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	60da      	str	r2, [r3, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20047cf0 	.word	0x20047cf0

08002c7c <uart_tx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_tx_process()
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
	static uint8_t last_nose = 0;
	uint8_t string_size;

	switch(g_uart_tx_state)
 8002c82:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <uart_tx_process+0xd8>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d030      	beq.n	8002cec <uart_tx_process+0x70>
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	dc5e      	bgt.n	8002d4c <uart_tx_process+0xd0>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <uart_tx_process+0x1c>
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d00a      	beq.n	8002cac <uart_tx_process+0x30>
			g_uart_tx_state = UART_TX_TRANSMIT;
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
			g_uart_tx_state = UART_TX_IDLE;
		break;
	}
}
 8002c96:	e059      	b.n	8002d4c <uart_tx_process+0xd0>
		if(g_uart_tx_nose != g_uart_tx_tail)
 8002c98:	4b2f      	ldr	r3, [pc, #188]	; (8002d58 <uart_tx_process+0xdc>)
 8002c9a:	881a      	ldrh	r2, [r3, #0]
 8002c9c:	4b2f      	ldr	r3, [pc, #188]	; (8002d5c <uart_tx_process+0xe0>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d050      	beq.n	8002d46 <uart_tx_process+0xca>
			g_uart_tx_state = UART_TX_TRANSMIT;
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <uart_tx_process+0xd8>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
		break;
 8002caa:	e04c      	b.n	8002d46 <uart_tx_process+0xca>
		string_size = strlen(g_uart_tx_buffer + (g_uart_tx_nose)) + 1;
 8002cac:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <uart_tx_process+0xdc>)
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <uart_tx_process+0xe4>)
 8002cb4:	4413      	add	r3, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fb0c 	bl	80002d4 <strlen>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit_IT(
 8002cc4:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <uart_tx_process+0xdc>)
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <uart_tx_process+0xe4>)
 8002ccc:	4413      	add	r3, r2
 8002cce:	79fa      	ldrb	r2, [r7, #7]
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4823      	ldr	r0, [pc, #140]	; (8002d64 <uart_tx_process+0xe8>)
 8002cd6:	f004 ff5c 	bl	8007b92 <HAL_UART_Transmit_IT>
		last_nose = g_uart_tx_nose;
 8002cda:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <uart_tx_process+0xdc>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <uart_tx_process+0xec>)
 8002ce2:	701a      	strb	r2, [r3, #0]
		g_uart_tx_state = UART_TX_TRANSMITING;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <uart_tx_process+0xd8>)
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	701a      	strb	r2, [r3, #0]
		break;
 8002cea:	e02f      	b.n	8002d4c <uart_tx_process+0xd0>
		if((last_nose == g_uart_tx_nose))
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <uart_tx_process+0xec>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <uart_tx_process+0xdc>)
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d103      	bne.n	8002d02 <uart_tx_process+0x86>
			g_uart_tx_state = UART_TX_TRANSMITING;
 8002cfa:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <uart_tx_process+0xd8>)
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	701a      	strb	r2, [r3, #0]
		break;
 8002d00:	e023      	b.n	8002d4a <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail != g_uart_tx_nose))
 8002d02:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <uart_tx_process+0xec>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <uart_tx_process+0xdc>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d009      	beq.n	8002d24 <uart_tx_process+0xa8>
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <uart_tx_process+0xe0>)
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <uart_tx_process+0xdc>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d003      	beq.n	8002d24 <uart_tx_process+0xa8>
			g_uart_tx_state = UART_TX_TRANSMIT;
 8002d1c:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <uart_tx_process+0xd8>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
		break;
 8002d22:	e012      	b.n	8002d4a <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <uart_tx_process+0xec>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <uart_tx_process+0xdc>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d00b      	beq.n	8002d4a <uart_tx_process+0xce>
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <uart_tx_process+0xe0>)
 8002d34:	881a      	ldrh	r2, [r3, #0]
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <uart_tx_process+0xdc>)
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d105      	bne.n	8002d4a <uart_tx_process+0xce>
			g_uart_tx_state = UART_TX_IDLE;
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <uart_tx_process+0xd8>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
		break;
 8002d44:	e001      	b.n	8002d4a <uart_tx_process+0xce>
		break;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <uart_tx_process+0xd0>
		break;
 8002d4a:	bf00      	nop
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20027f40 	.word	0x20027f40
 8002d58:	20028044 	.word	0x20028044
 8002d5c:	20028046 	.word	0x20028046
 8002d60:	20027f44 	.word	0x20027f44
 8002d64:	20047cf0 	.word	0x20047cf0
 8002d68:	2002804e 	.word	0x2002804e

08002d6c <uart_write>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_write(uint8_t* buff)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	uint8_t string_size = strlen(buff) + 1;
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7fd faad 	bl	80002d4 <strlen>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]

	if(
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8002d82:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <uart_write+0x110>)
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <uart_write+0x114>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	1ad3      	subs	r3, r2, r3
	if(
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	db0a      	blt.n	8002da8 <uart_write+0x3c>
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <uart_write+0x110>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <uart_write+0x114>)
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	1acb      	subs	r3, r1, r3
 8002da0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002da4:	429a      	cmp	r2, r3
 8002da6:	db10      	blt.n	8002dca <uart_write+0x5e>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 8002da8:	4b34      	ldr	r3, [pc, #208]	; (8002e7c <uart_write+0x110>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <uart_write+0x114>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	1ad3      	subs	r3, r2, r3
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	dc5c      	bgt.n	8002e72 <uart_write+0x106>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <uart_write+0x114>)
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4b2e      	ldr	r3, [pc, #184]	; (8002e7c <uart_write+0x110>)
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	1acb      	subs	r3, r1, r3
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	da53      	bge.n	8002e72 <uart_write+0x106>
	{
		if(((g_uart_tx_tail - g_uart_tx_nose >= 0)) && (string_size > (UART_TX_BUFFER_MAX - g_uart_tx_tail)))
 8002dca:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <uart_write+0x110>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <uart_write+0x114>)
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db2f      	blt.n	8002e3a <uart_write+0xce>
 8002dda:	7bfa      	ldrb	r2, [r7, #15]
 8002ddc:	4b27      	ldr	r3, [pc, #156]	; (8002e7c <uart_write+0x110>)
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dd28      	ble.n	8002e3a <uart_write+0xce>
		{
			strncpy(g_uart_tx_buffer + g_uart_tx_tail, buff, UART_TX_BUFFER_MAX - g_uart_tx_tail);
 8002de8:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <uart_write+0x110>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <uart_write+0x118>)
 8002df0:	4413      	add	r3, r2
 8002df2:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <uart_write+0x110>)
 8002df4:	8812      	ldrh	r2, [r2, #0]
 8002df6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f022 fd3f 	bl	8025880 <strncpy>
			string_size -= (UART_TX_BUFFER_MAX - g_uart_tx_tail);
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <uart_write+0x110>)
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
			strncpy(g_uart_tx_buffer + 0, buff + (UART_TX_BUFFER_MAX - g_uart_tx_tail), string_size);
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <uart_write+0x110>)
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	4619      	mov	r1, r3
 8002e24:	4817      	ldr	r0, [pc, #92]	; (8002e84 <uart_write+0x118>)
 8002e26:	f022 fd2b 	bl	8025880 <strncpy>
			g_uart_tx_tail = 0;
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <uart_write+0x110>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	801a      	strh	r2, [r3, #0]
			g_uart_tx_tail = string_size;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <uart_write+0x110>)
 8002e36:	801a      	strh	r2, [r3, #0]
				g_uart_tx_tail += string_size;
			else
				g_uart_tx_tail = 0;
		}
	}
}
 8002e38:	e01b      	b.n	8002e72 <uart_write+0x106>
			strcpy(g_uart_tx_buffer + g_uart_tx_tail, buff);
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <uart_write+0x110>)
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <uart_write+0x118>)
 8002e42:	4413      	add	r3, r2
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f022 fd00 	bl	802584c <strcpy>
			if(g_uart_tx_tail + string_size < UART_TX_BUFFER_MAX)
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <uart_write+0x110>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	4413      	add	r3, r2
 8002e56:	2bfe      	cmp	r3, #254	; 0xfe
 8002e58:	dc08      	bgt.n	8002e6c <uart_write+0x100>
				g_uart_tx_tail += string_size;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <uart_write+0x110>)
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <uart_write+0x110>)
 8002e68:	801a      	strh	r2, [r3, #0]
}
 8002e6a:	e002      	b.n	8002e72 <uart_write+0x106>
				g_uart_tx_tail = 0;
 8002e6c:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <uart_write+0x110>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	801a      	strh	r2, [r3, #0]
}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20028046 	.word	0x20028046
 8002e80:	20028044 	.word	0x20028044
 8002e84:	20027f44 	.word	0x20027f44

08002e88 <HAL_UART_TxCpltCallback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	g_uart_tx_nose += strlen(g_uart_tx_buffer + g_uart_tx_nose) + 1;
 8002e90:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <HAL_UART_TxCpltCallback+0x44>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_UART_TxCpltCallback+0x48>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fa1a 	bl	80002d4 <strlen>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_UART_TxCpltCallback+0x44>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3301      	adds	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_UART_TxCpltCallback+0x44>)
 8002eb2:	801a      	strh	r2, [r3, #0]

	if(g_uart_tx_nose >= UART_TX_BUFFER_MAX)
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_UART_TxCpltCallback+0x44>)
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	2bfe      	cmp	r3, #254	; 0xfe
 8002eba:	d902      	bls.n	8002ec2 <HAL_UART_TxCpltCallback+0x3a>
		g_uart_tx_nose = 0;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_UART_TxCpltCallback+0x44>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	801a      	strh	r2, [r3, #0]

}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20028044 	.word	0x20028044
 8002ed0:	20027f44 	.word	0x20027f44

08002ed4 <uart_rx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_process()
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
	uint8_t string_size = strlen(g_uart_rx_buffer + g_uart_rx_nose + 1) + 1;
 8002eda:	4b4b      	ldr	r3, [pc, #300]	; (8003008 <uart_rx_process+0x134>)
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	4a4a      	ldr	r2, [pc, #296]	; (800300c <uart_rx_process+0x138>)
 8002ee2:	4413      	add	r3, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fd f9f5 	bl	80002d4 <strlen>
 8002eea:	4603      	mov	r3, r0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	71fb      	strb	r3, [r7, #7]

	switch(g_uart_rx_state)
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <uart_rx_process+0x13c>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <uart_rx_process+0x2c>
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d008      	beq.n	8002f10 <uart_rx_process+0x3c>
			g_uart_rx_state = UART_RX_IDLE;
		break;


	}
}
 8002efe:	e07e      	b.n	8002ffe <uart_rx_process+0x12a>
		if(g_uart_rx_cnt)
 8002f00:	4b44      	ldr	r3, [pc, #272]	; (8003014 <uart_rx_process+0x140>)
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d077      	beq.n	8002ff8 <uart_rx_process+0x124>
			g_uart_rx_state = UART_RX_RECEIVE;
 8002f08:	4b41      	ldr	r3, [pc, #260]	; (8003010 <uart_rx_process+0x13c>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
		break;
 8002f0e:	e073      	b.n	8002ff8 <uart_rx_process+0x124>
		if(g_uart_rx_nose < g_uart_rx_tail &&
 8002f10:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <uart_rx_process+0x134>)
 8002f12:	881a      	ldrh	r2, [r3, #0]
 8002f14:	4b40      	ldr	r3, [pc, #256]	; (8003018 <uart_rx_process+0x144>)
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d21c      	bcs.n	8002f56 <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 8002f1c:	4b3a      	ldr	r3, [pc, #232]	; (8003008 <uart_rx_process+0x134>)
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	4413      	add	r3, r2
 8002f26:	3b02      	subs	r3, #2
 8002f28:	4a38      	ldr	r2, [pc, #224]	; (800300c <uart_rx_process+0x138>)
 8002f2a:	5cd3      	ldrb	r3, [r2, r3]
		if(g_uart_rx_nose < g_uart_rx_tail &&
 8002f2c:	2b0d      	cmp	r3, #13
 8002f2e:	d112      	bne.n	8002f56 <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 1] == '\n'))
 8002f30:	4b35      	ldr	r3, [pc, #212]	; (8003008 <uart_rx_process+0x134>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	4413      	add	r3, r2
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	4a33      	ldr	r2, [pc, #204]	; (800300c <uart_rx_process+0x138>)
 8002f3e:	5cd3      	ldrb	r3, [r2, r3]
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 8002f40:	2b0a      	cmp	r3, #10
 8002f42:	d108      	bne.n	8002f56 <uart_rx_process+0x82>
			serial_protocol(g_uart_rx_buffer + g_uart_rx_nose + 1);
 8002f44:	4b30      	ldr	r3, [pc, #192]	; (8003008 <uart_rx_process+0x134>)
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	4a30      	ldr	r2, [pc, #192]	; (800300c <uart_rx_process+0x138>)
 8002f4c:	4413      	add	r3, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f92c 	bl	80031ac <serial_protocol>
 8002f54:	e02e      	b.n	8002fb4 <uart_rx_process+0xe0>
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 8002f56:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <uart_rx_process+0x134>)
 8002f58:	881a      	ldrh	r2, [r3, #0]
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	; (8003018 <uart_rx_process+0x144>)
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d928      	bls.n	8002fb4 <uart_rx_process+0xe0>
							(g_uart_rx_buffer[strlen(g_uart_rx_buffer) - 1] == '\n'))
 8002f62:	482a      	ldr	r0, [pc, #168]	; (800300c <uart_rx_process+0x138>)
 8002f64:	f7fd f9b6 	bl	80002d4 <strlen>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	4a27      	ldr	r2, [pc, #156]	; (800300c <uart_rx_process+0x138>)
 8002f6e:	5cd3      	ldrb	r3, [r2, r3]
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 8002f70:	2b0a      	cmp	r3, #10
 8002f72:	d11f      	bne.n	8002fb4 <uart_rx_process+0xe0>
			strncpy(g_uart_rx_tmp_buf, g_uart_rx_buffer + g_uart_rx_nose + 1, string_size);
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <uart_rx_process+0x134>)
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	4a24      	ldr	r2, [pc, #144]	; (800300c <uart_rx_process+0x138>)
 8002f7c:	4413      	add	r3, r2
 8002f7e:	79fa      	ldrb	r2, [r7, #7]
 8002f80:	4619      	mov	r1, r3
 8002f82:	4826      	ldr	r0, [pc, #152]	; (800301c <uart_rx_process+0x148>)
 8002f84:	f022 fc7c 	bl	8025880 <strncpy>
			string_size = strlen(g_uart_rx_buffer + 1) + 1;
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <uart_rx_process+0x14c>)
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd f9a2 	bl	80002d4 <strlen>
 8002f90:	4603      	mov	r3, r0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	71fb      	strb	r3, [r7, #7]
			strncpy(g_uart_rx_tmp_buf + strlen(g_uart_rx_tmp_buf), g_uart_rx_buffer , string_size);
 8002f98:	4820      	ldr	r0, [pc, #128]	; (800301c <uart_rx_process+0x148>)
 8002f9a:	f7fd f99b 	bl	80002d4 <strlen>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4a1e      	ldr	r2, [pc, #120]	; (800301c <uart_rx_process+0x148>)
 8002fa2:	4413      	add	r3, r2
 8002fa4:	79fa      	ldrb	r2, [r7, #7]
 8002fa6:	4919      	ldr	r1, [pc, #100]	; (800300c <uart_rx_process+0x138>)
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f022 fc69 	bl	8025880 <strncpy>
			serial_protocol(g_uart_rx_tmp_buf);
 8002fae:	481b      	ldr	r0, [pc, #108]	; (800301c <uart_rx_process+0x148>)
 8002fb0:	f000 f8fc 	bl	80031ac <serial_protocol>
		g_uart_rx_cnt--;
 8002fb4:	4b17      	ldr	r3, [pc, #92]	; (8003014 <uart_rx_process+0x140>)
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	4b15      	ldr	r3, [pc, #84]	; (8003014 <uart_rx_process+0x140>)
 8002fbe:	801a      	strh	r2, [r3, #0]
		if(g_uart_rx_nose + string_size < UART_RX_BUFFER_MAX)
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <uart_rx_process+0x134>)
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	4413      	add	r3, r2
 8002fca:	2bfe      	cmp	r3, #254	; 0xfe
 8002fcc:	dc08      	bgt.n	8002fe0 <uart_rx_process+0x10c>
			g_uart_rx_nose += string_size;
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <uart_rx_process+0x134>)
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <uart_rx_process+0x134>)
 8002fdc:	801a      	strh	r2, [r3, #0]
 8002fde:	e003      	b.n	8002fe8 <uart_rx_process+0x114>
			g_uart_rx_nose = string_size;
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <uart_rx_process+0x134>)
 8002fe6:	801a      	strh	r2, [r3, #0]
		if(!g_uart_rx_cnt)
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <uart_rx_process+0x140>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d105      	bne.n	8002ffc <uart_rx_process+0x128>
			g_uart_rx_state = UART_RX_IDLE;
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <uart_rx_process+0x13c>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
		break;
 8002ff6:	e001      	b.n	8002ffc <uart_rx_process+0x128>
		break;
 8002ff8:	bf00      	nop
 8002ffa:	e000      	b.n	8002ffe <uart_rx_process+0x12a>
		break;
 8002ffc:	bf00      	nop
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20028048 	.word	0x20028048
 800300c:	20047bf0 	.word	0x20047bf0
 8003010:	20027f41 	.word	0x20027f41
 8003014:	2002804c 	.word	0x2002804c
 8003018:	2002804a 	.word	0x2002804a
 800301c:	20047bbc 	.word	0x20047bbc
 8003020:	20047bf1 	.word	0x20047bf1

08003024 <uart_rx_callback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_callback()
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
	g_uart_rx_tail++;
 8003028:	4b5b      	ldr	r3, [pc, #364]	; (8003198 <uart_rx_callback+0x174>)
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	4b59      	ldr	r3, [pc, #356]	; (8003198 <uart_rx_callback+0x174>)
 8003032:	801a      	strh	r2, [r3, #0]

	if((g_uart_rx_tail < (UART_RX_BUFFER_MAX - 1)) && ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2/*1*/)))
 8003034:	4b58      	ldr	r3, [pc, #352]	; (8003198 <uart_rx_callback+0x174>)
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	2bfd      	cmp	r3, #253	; 0xfd
 800303a:	d847      	bhi.n	80030cc <uart_rx_callback+0xa8>
 800303c:	4b57      	ldr	r3, [pc, #348]	; (800319c <uart_rx_callback+0x178>)
 800303e:	881a      	ldrh	r2, [r3, #0]
 8003040:	4b55      	ldr	r3, [pc, #340]	; (8003198 <uart_rx_callback+0x174>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d307      	bcc.n	8003058 <uart_rx_callback+0x34>
 8003048:	4b54      	ldr	r3, [pc, #336]	; (800319c <uart_rx_callback+0x178>)
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	4b52      	ldr	r3, [pc, #328]	; (8003198 <uart_rx_callback+0x174>)
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	dd39      	ble.n	80030cc <uart_rx_callback+0xa8>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);//253
 8003058:	4b51      	ldr	r3, [pc, #324]	; (80031a0 <uart_rx_callback+0x17c>)
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	4b4e      	ldr	r3, [pc, #312]	; (8003198 <uart_rx_callback+0x174>)
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	b2c9      	uxtb	r1, r1
 8003064:	4b4f      	ldr	r3, [pc, #316]	; (80031a4 <uart_rx_callback+0x180>)
 8003066:	5499      	strb	r1, [r3, r2]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8003068:	4b4b      	ldr	r3, [pc, #300]	; (8003198 <uart_rx_callback+0x174>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <uart_rx_callback+0x180>)
 8003070:	5c9b      	ldrb	r3, [r3, r2]
 8003072:	2b0d      	cmp	r3, #13
 8003074:	f040 8087 	bne.w	8003186 <uart_rx_callback+0x162>
		{
			g_uart_rx_buffer[++g_uart_rx_tail] = '\n';//254
 8003078:	4b47      	ldr	r3, [pc, #284]	; (8003198 <uart_rx_callback+0x174>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	4b45      	ldr	r3, [pc, #276]	; (8003198 <uart_rx_callback+0x174>)
 8003082:	801a      	strh	r2, [r3, #0]
 8003084:	4b44      	ldr	r3, [pc, #272]	; (8003198 <uart_rx_callback+0x174>)
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <uart_rx_callback+0x180>)
 800308c:	210a      	movs	r1, #10
 800308e:	5499      	strb	r1, [r3, r2]
			g_uart_rx_cnt++;
 8003090:	4b45      	ldr	r3, [pc, #276]	; (80031a8 <uart_rx_callback+0x184>)
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	4b43      	ldr	r3, [pc, #268]	; (80031a8 <uart_rx_callback+0x184>)
 800309a:	801a      	strh	r2, [r3, #0]
			g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 800309c:	4b3e      	ldr	r3, [pc, #248]	; (8003198 <uart_rx_callback+0x174>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <uart_rx_callback+0x174>)
 80030a6:	801a      	strh	r2, [r3, #0]
 80030a8:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <uart_rx_callback+0x174>)
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <uart_rx_callback+0x180>)
 80030b0:	2100      	movs	r1, #0
 80030b2:	5499      	strb	r1, [r3, r2]
			if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 0))
 80030b4:	4b38      	ldr	r3, [pc, #224]	; (8003198 <uart_rx_callback+0x174>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	2bff      	cmp	r3, #255	; 0xff
 80030ba:	d164      	bne.n	8003186 <uart_rx_callback+0x162>
 80030bc:	4b37      	ldr	r3, [pc, #220]	; (800319c <uart_rx_callback+0x178>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d060      	beq.n	8003186 <uart_rx_callback+0x162>
			{
				g_uart_rx_tail = 0;
 80030c4:	4b34      	ldr	r3, [pc, #208]	; (8003198 <uart_rx_callback+0x174>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	801a      	strh	r2, [r3, #0]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 80030ca:	e05c      	b.n	8003186 <uart_rx_callback+0x162>
			}
		}
	}
	else if((g_uart_rx_tail == (UART_RX_BUFFER_MAX - 1)) && (g_uart_rx_nose > 1)/*(g_uart_rx_nose < g_uart_rx_tail)*/)
 80030cc:	4b32      	ldr	r3, [pc, #200]	; (8003198 <uart_rx_callback+0x174>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	2bfe      	cmp	r3, #254	; 0xfe
 80030d2:	d13e      	bne.n	8003152 <uart_rx_callback+0x12e>
 80030d4:	4b31      	ldr	r3, [pc, #196]	; (800319c <uart_rx_callback+0x178>)
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d93a      	bls.n	8003152 <uart_rx_callback+0x12e>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);//254
 80030dc:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <uart_rx_callback+0x17c>)
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <uart_rx_callback+0x174>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	b2c9      	uxtb	r1, r1
 80030e8:	4b2e      	ldr	r3, [pc, #184]	; (80031a4 <uart_rx_callback+0x180>)
 80030ea:	5499      	strb	r1, [r3, r2]
		g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <uart_rx_callback+0x174>)
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	3301      	adds	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <uart_rx_callback+0x174>)
 80030f6:	801a      	strh	r2, [r3, #0]
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <uart_rx_callback+0x174>)
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <uart_rx_callback+0x180>)
 8003100:	2100      	movs	r1, #0
 8003102:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8003104:	4b24      	ldr	r3, [pc, #144]	; (8003198 <uart_rx_callback+0x174>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	3b01      	subs	r3, #1
 800310a:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <uart_rx_callback+0x180>)
 800310c:	5cd3      	ldrb	r3, [r2, r3]
 800310e:	2b0d      	cmp	r3, #13
 8003110:	d13b      	bne.n	800318a <uart_rx_callback+0x166>
		{
			g_uart_rx_cnt++;
 8003112:	4b25      	ldr	r3, [pc, #148]	; (80031a8 <uart_rx_callback+0x184>)
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	3301      	adds	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	4b23      	ldr	r3, [pc, #140]	; (80031a8 <uart_rx_callback+0x184>)
 800311c:	801a      	strh	r2, [r3, #0]
			if(g_uart_rx_nose > 1)
 800311e:	4b1f      	ldr	r3, [pc, #124]	; (800319c <uart_rx_callback+0x178>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d931      	bls.n	800318a <uart_rx_callback+0x166>
			{
				g_uart_rx_tail = 0;
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <uart_rx_callback+0x174>)
 8003128:	2200      	movs	r2, #0
 800312a:	801a      	strh	r2, [r3, #0]
				g_uart_rx_buffer[g_uart_rx_tail] = '\n';//0
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <uart_rx_callback+0x174>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <uart_rx_callback+0x180>)
 8003134:	210a      	movs	r1, #10
 8003136:	5499      	strb	r1, [r3, r2]
				g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//1
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <uart_rx_callback+0x174>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	4b15      	ldr	r3, [pc, #84]	; (8003198 <uart_rx_callback+0x174>)
 8003142:	801a      	strh	r2, [r3, #0]
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <uart_rx_callback+0x174>)
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <uart_rx_callback+0x180>)
 800314c:	2100      	movs	r1, #0
 800314e:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8003150:	e01b      	b.n	800318a <uart_rx_callback+0x166>
			{
				//error - full
			}
		}
	}
	else if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 1))
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <uart_rx_callback+0x174>)
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	2bff      	cmp	r3, #255	; 0xff
 8003158:	d118      	bne.n	800318c <uart_rx_callback+0x168>
 800315a:	4b10      	ldr	r3, [pc, #64]	; (800319c <uart_rx_callback+0x178>)
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d914      	bls.n	800318c <uart_rx_callback+0x168>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = '\0';
 8003162:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <uart_rx_callback+0x174>)
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <uart_rx_callback+0x180>)
 800316a:	2100      	movs	r1, #0
 800316c:	5499      	strb	r1, [r3, r2]
		g_uart_rx_tail = 1;
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <uart_rx_callback+0x174>)
 8003170:	2201      	movs	r2, #1
 8003172:	801a      	strh	r2, [r3, #0]
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);
 8003174:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <uart_rx_callback+0x17c>)
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	4b07      	ldr	r3, [pc, #28]	; (8003198 <uart_rx_callback+0x174>)
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	b2c9      	uxtb	r1, r1
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <uart_rx_callback+0x180>)
 8003182:	5499      	strb	r1, [r3, r2]

	}

}
 8003184:	e002      	b.n	800318c <uart_rx_callback+0x168>
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8003186:	bf00      	nop
 8003188:	e000      	b.n	800318c <uart_rx_callback+0x168>
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 800318a:	bf00      	nop
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	2002804a 	.word	0x2002804a
 800319c:	20028048 	.word	0x20028048
 80031a0:	40011400 	.word	0x40011400
 80031a4:	20047bf0 	.word	0x20047bf0
 80031a8:	2002804c 	.word	0x2002804c

080031ac <serial_protocol>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void serial_protocol(uint8_t* buff)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	6078      	str	r0, [r7, #4]
	LCD_PrintStr(20, 100, 0, 0x841FU, buff, 5);
 80031b4:	2305      	movs	r3, #5
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	f248 431f 	movw	r3, #33823	; 0x841f
 80031c0:	2200      	movs	r2, #0
 80031c2:	2164      	movs	r1, #100	; 0x64
 80031c4:	2014      	movs	r0, #20
 80031c6:	f7fe fc13 	bl	80019f0 <LCD_PrintStr>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <MX_USART6_UART_Init+0x4c>)
 80031da:	4a12      	ldr	r2, [pc, #72]	; (8003224 <MX_USART6_UART_Init+0x50>)
 80031dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80031de:	4b10      	ldr	r3, [pc, #64]	; (8003220 <MX_USART6_UART_Init+0x4c>)
 80031e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80031e6:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <MX_USART6_UART_Init+0x4c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <MX_USART6_UART_Init+0x4c>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80031f2:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <MX_USART6_UART_Init+0x4c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <MX_USART6_UART_Init+0x4c>)
 80031fa:	220c      	movs	r2, #12
 80031fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <MX_USART6_UART_Init+0x4c>)
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <MX_USART6_UART_Init+0x4c>)
 8003206:	2200      	movs	r2, #0
 8003208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800320a:	4805      	ldr	r0, [pc, #20]	; (8003220 <MX_USART6_UART_Init+0x4c>)
 800320c:	f004 fc74 	bl	8007af8 <HAL_UART_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003216:	f7ff f8ad 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20047cf0 	.word	0x20047cf0
 8003224:	40011400 	.word	0x40011400

08003228 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_UART_MspInit+0x98>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d136      	bne.n	80032b8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_UART_MspInit+0x9c>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <HAL_UART_MspInit+0x9c>)
 8003254:	f043 0320 	orr.w	r3, r3, #32
 8003258:	6453      	str	r3, [r2, #68]	; 0x44
 800325a:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <HAL_UART_MspInit+0x9c>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <HAL_UART_MspInit+0x9c>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <HAL_UART_MspInit+0x9c>)
 8003270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <HAL_UART_MspInit+0x9c>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8003282:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8003286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003288:	2302      	movs	r3, #2
 800328a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003290:	2303      	movs	r3, #3
 8003292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003294:	2308      	movs	r3, #8
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	4619      	mov	r1, r3
 800329e:	480a      	ldr	r0, [pc, #40]	; (80032c8 <HAL_UART_MspInit+0xa0>)
 80032a0:	f000 fc82 	bl	8003ba8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80032a4:	2200      	movs	r2, #0
 80032a6:	2100      	movs	r1, #0
 80032a8:	2047      	movs	r0, #71	; 0x47
 80032aa:	f000 f9ce 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80032ae:	2047      	movs	r0, #71	; 0x47
 80032b0:	f000 f9e7 	bl	8003682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */
    uart_init();
 80032b4:	f7ff fcd0 	bl	8002c58 <uart_init>
  /* USER CODE END USART6_MspInit 1 */
  }
}
 80032b8:	bf00      	nop
 80032ba:	3728      	adds	r7, #40	; 0x28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40011400 	.word	0x40011400
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40021800 	.word	0x40021800

080032cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80032cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032d0:	480d      	ldr	r0, [pc, #52]	; (8003308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032d2:	490e      	ldr	r1, [pc, #56]	; (800330c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032d4:	4a0e      	ldr	r2, [pc, #56]	; (8003310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d8:	e002      	b.n	80032e0 <LoopCopyDataInit>

080032da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032de:	3304      	adds	r3, #4

080032e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e4:	d3f9      	bcc.n	80032da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e6:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032e8:	4c0b      	ldr	r4, [pc, #44]	; (8003318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032ec:	e001      	b.n	80032f2 <LoopFillZerobss>

080032ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f0:	3204      	adds	r2, #4

080032f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f4:	d3fb      	bcc.n	80032ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032f6:	f7ff fbcb 	bl	8002a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032fa:	f021 fe37 	bl	8024f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032fe:	f7fe ff83 	bl	8002208 <main>
  bx  lr    
 8003302:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003304:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800330c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003310:	0807a7b4 	.word	0x0807a7b4
  ldr r2, =_sbss
 8003314:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8003318:	20047d48 	.word	0x20047d48

0800331c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800331c:	e7fe      	b.n	800331c <ADC_IRQHandler>
	...

08003320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <HAL_Init+0x40>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <HAL_Init+0x40>)
 800332a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800332e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_Init+0x40>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <HAL_Init+0x40>)
 8003336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_Init+0x40>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a07      	ldr	r2, [pc, #28]	; (8003360 <HAL_Init+0x40>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003348:	2003      	movs	r0, #3
 800334a:	f000 f973 	bl	8003634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800334e:	2000      	movs	r0, #0
 8003350:	f000 f808 	bl	8003364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003354:	f7ff fa52 	bl	80027fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40023c00 	.word	0x40023c00

08003364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_InitTick+0x54>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_InitTick+0x58>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	4619      	mov	r1, r3
 8003376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800337a:	fbb3 f3f1 	udiv	r3, r3, r1
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f999 	bl	80036ba <HAL_SYSTICK_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e00e      	b.n	80033b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b0f      	cmp	r3, #15
 8003396:	d80a      	bhi.n	80033ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003398:	2200      	movs	r2, #0
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033a0:	f000 f953 	bl	800364a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033a4:	4a06      	ldr	r2, [pc, #24]	; (80033c0 <HAL_InitTick+0x5c>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e000      	b.n	80033b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000004 	.word	0x20000004
 80033bc:	2000000c 	.word	0x2000000c
 80033c0:	20000008 	.word	0x20000008

080033c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_IncTick+0x20>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_IncTick+0x24>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <HAL_IncTick+0x24>)
 80033d6:	6013      	str	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	2000000c 	.word	0x2000000c
 80033e8:	20047d34 	.word	0x20047d34

080033ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return uwTick;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_GetTick+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20047d34 	.word	0x20047d34

08003404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800340c:	f7ff ffee 	bl	80033ec <HAL_GetTick>
 8003410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800341c:	d005      	beq.n	800342a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <HAL_Delay+0x44>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800342a:	bf00      	nop
 800342c:	f7ff ffde 	bl	80033ec <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	429a      	cmp	r2, r3
 800343a:	d8f7      	bhi.n	800342c <HAL_Delay+0x28>
  {
  }
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	2000000c 	.word	0x2000000c

0800344c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800345c:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <__NVIC_SetPriorityGrouping+0x44>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003468:	4013      	ands	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800347e:	4a04      	ldr	r2, [pc, #16]	; (8003490 <__NVIC_SetPriorityGrouping+0x44>)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	60d3      	str	r3, [r2, #12]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <__NVIC_GetPriorityGrouping+0x18>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	0a1b      	lsrs	r3, r3, #8
 800349e:	f003 0307 	and.w	r3, r3, #7
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000ed00 	.word	0xe000ed00

080034b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	db0b      	blt.n	80034da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	f003 021f 	and.w	r2, r3, #31
 80034c8:	4907      	ldr	r1, [pc, #28]	; (80034e8 <__NVIC_EnableIRQ+0x38>)
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	2001      	movs	r0, #1
 80034d2:	fa00 f202 	lsl.w	r2, r0, r2
 80034d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	e000e100 	.word	0xe000e100

080034ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	db12      	blt.n	8003524 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	490a      	ldr	r1, [pc, #40]	; (8003530 <__NVIC_DisableIRQ+0x44>)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	2001      	movs	r0, #1
 800350e:	fa00 f202 	lsl.w	r2, r0, r2
 8003512:	3320      	adds	r3, #32
 8003514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003518:	f3bf 8f4f 	dsb	sy
}
 800351c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800351e:	f3bf 8f6f 	isb	sy
}
 8003522:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000e100 	.word	0xe000e100

08003534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	6039      	str	r1, [r7, #0]
 800353e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	2b00      	cmp	r3, #0
 8003546:	db0a      	blt.n	800355e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	490c      	ldr	r1, [pc, #48]	; (8003580 <__NVIC_SetPriority+0x4c>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	0112      	lsls	r2, r2, #4
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	440b      	add	r3, r1
 8003558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800355c:	e00a      	b.n	8003574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4908      	ldr	r1, [pc, #32]	; (8003584 <__NVIC_SetPriority+0x50>)
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	3b04      	subs	r3, #4
 800356c:	0112      	lsls	r2, r2, #4
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	440b      	add	r3, r1
 8003572:	761a      	strb	r2, [r3, #24]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000e100 	.word	0xe000e100
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f1c3 0307 	rsb	r3, r3, #7
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	bf28      	it	cs
 80035a6:	2304      	movcs	r3, #4
 80035a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d902      	bls.n	80035b8 <NVIC_EncodePriority+0x30>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3b03      	subs	r3, #3
 80035b6:	e000      	b.n	80035ba <NVIC_EncodePriority+0x32>
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	401a      	ands	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	43d9      	mvns	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	4313      	orrs	r3, r2
         );
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003600:	d301      	bcc.n	8003606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003602:	2301      	movs	r3, #1
 8003604:	e00f      	b.n	8003626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <SysTick_Config+0x40>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360e:	210f      	movs	r1, #15
 8003610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003614:	f7ff ff8e 	bl	8003534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <SysTick_Config+0x40>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361e:	4b04      	ldr	r3, [pc, #16]	; (8003630 <SysTick_Config+0x40>)
 8003620:	2207      	movs	r2, #7
 8003622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	e000e010 	.word	0xe000e010

08003634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff05 	bl	800344c <__NVIC_SetPriorityGrouping>
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	4603      	mov	r3, r0
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800365c:	f7ff ff1a 	bl	8003494 <__NVIC_GetPriorityGrouping>
 8003660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	6978      	ldr	r0, [r7, #20]
 8003668:	f7ff ff8e 	bl	8003588 <NVIC_EncodePriority>
 800366c:	4602      	mov	r2, r0
 800366e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff5d 	bl	8003534 <__NVIC_SetPriority>
}
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	4603      	mov	r3, r0
 800368a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800368c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff0d 	bl	80034b0 <__NVIC_EnableIRQ>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80036a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff1d 	bl	80034ec <__NVIC_DisableIRQ>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ff94 	bl	80035f0 <SysTick_Config>
 80036c8:	4603      	mov	r3, r0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036e0:	f7ff fe84 	bl	80033ec <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e099      	b.n	8003824 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003710:	e00f      	b.n	8003732 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003712:	f7ff fe6b 	bl	80033ec <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b05      	cmp	r3, #5
 800371e:	d908      	bls.n	8003732 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2203      	movs	r2, #3
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e078      	b.n	8003824 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e8      	bne.n	8003712 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4b38      	ldr	r3, [pc, #224]	; (800382c <HAL_DMA_Init+0x158>)
 800374c:	4013      	ands	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800375e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800376a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	2b04      	cmp	r3, #4
 800378a:	d107      	bne.n	800379c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	4313      	orrs	r3, r2
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 0307 	bic.w	r3, r3, #7
 80037b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d117      	bne.n	80037f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00e      	beq.n	80037f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f969 	bl	8003ab0 <DMA_CheckFifoParam>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2240      	movs	r2, #64	; 0x40
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037f2:	2301      	movs	r3, #1
 80037f4:	e016      	b.n	8003824 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f920 	bl	8003a44 <DMA_CalcBaseAndBitshift>
 8003804:	4603      	mov	r3, r0
 8003806:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	223f      	movs	r2, #63	; 0x3f
 800380e:	409a      	lsls	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	e010803f 	.word	0xe010803f

08003830 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_DMA_Start+0x20>
 800384c:	2302      	movs	r3, #2
 800384e:	e026      	b.n	800389e <HAL_DMA_Start+0x6e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d115      	bne.n	8003890 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f8b4 	bl	80039e6 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e005      	b.n	800389c <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003898:	2302      	movs	r3, #2
 800389a:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 800389c:	7dfb      	ldrb	r3, [r7, #23]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038b4:	f7ff fd9a 	bl	80033ec <HAL_GetTick>
 80038b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d008      	beq.n	80038d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e052      	b.n	800397e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0216 	bic.w	r2, r2, #22
 80038e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d103      	bne.n	8003908 <HAL_DMA_Abort+0x62>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0208 	bic.w	r2, r2, #8
 8003916:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003928:	e013      	b.n	8003952 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800392a:	f7ff fd5f 	bl	80033ec <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b05      	cmp	r3, #5
 8003936:	d90c      	bls.n	8003952 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2203      	movs	r2, #3
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e015      	b.n	800397e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e4      	bne.n	800392a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	223f      	movs	r2, #63	; 0x3f
 8003966:	409a      	lsls	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d004      	beq.n	80039a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2280      	movs	r2, #128	; 0x80
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e00c      	b.n	80039be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2205      	movs	r2, #5
 80039a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d8:	b2db      	uxtb	r3, r3
}
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b085      	sub	sp, #20
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a02:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d108      	bne.n	8003a26 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a24:	e007      	b.n	8003a36 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	60da      	str	r2, [r3, #12]
}
 8003a36:	bf00      	nop
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	3b10      	subs	r3, #16
 8003a54:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <DMA_CalcBaseAndBitshift+0x64>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a5e:	4a13      	ldr	r2, [pc, #76]	; (8003aac <DMA_CalcBaseAndBitshift+0x68>)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d909      	bls.n	8003a86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a7a:	f023 0303 	bic.w	r3, r3, #3
 8003a7e:	1d1a      	adds	r2, r3, #4
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	659a      	str	r2, [r3, #88]	; 0x58
 8003a84:	e007      	b.n	8003a96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a8e:	f023 0303 	bic.w	r3, r3, #3
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	aaaaaaab 	.word	0xaaaaaaab
 8003aac:	0802c434 	.word	0x0802c434

08003ab0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d11f      	bne.n	8003b0a <DMA_CheckFifoParam+0x5a>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d856      	bhi.n	8003b7e <DMA_CheckFifoParam+0xce>
 8003ad0:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <DMA_CheckFifoParam+0x28>)
 8003ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad6:	bf00      	nop
 8003ad8:	08003ae9 	.word	0x08003ae9
 8003adc:	08003afb 	.word	0x08003afb
 8003ae0:	08003ae9 	.word	0x08003ae9
 8003ae4:	08003b7f 	.word	0x08003b7f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d046      	beq.n	8003b82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af8:	e043      	b.n	8003b82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b02:	d140      	bne.n	8003b86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b08:	e03d      	b.n	8003b86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b12:	d121      	bne.n	8003b58 <DMA_CheckFifoParam+0xa8>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d837      	bhi.n	8003b8a <DMA_CheckFifoParam+0xda>
 8003b1a:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <DMA_CheckFifoParam+0x70>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003b31 	.word	0x08003b31
 8003b24:	08003b37 	.word	0x08003b37
 8003b28:	08003b31 	.word	0x08003b31
 8003b2c:	08003b49 	.word	0x08003b49
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      break;
 8003b34:	e030      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d025      	beq.n	8003b8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b46:	e022      	b.n	8003b8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b50:	d11f      	bne.n	8003b92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b56:	e01c      	b.n	8003b92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d903      	bls.n	8003b66 <DMA_CheckFifoParam+0xb6>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d003      	beq.n	8003b6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b64:	e018      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6a:	e015      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b7c:	e00b      	b.n	8003b96 <DMA_CheckFifoParam+0xe6>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e00a      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
      break;
 8003b82:	bf00      	nop
 8003b84:	e008      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
      break;
 8003b86:	bf00      	nop
 8003b88:	e006      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e004      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
      break;
 8003b8e:	bf00      	nop
 8003b90:	e002      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b92:	bf00      	nop
 8003b94:	e000      	b.n	8003b98 <DMA_CheckFifoParam+0xe8>
      break;
 8003b96:	bf00      	nop
    }
  } 
  
  return status; 
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop

08003ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b089      	sub	sp, #36	; 0x24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	e165      	b.n	8003e90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	f040 8154 	bne.w	8003e8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d005      	beq.n	8003bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d130      	bne.n	8003c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	2203      	movs	r2, #3
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c30:	2201      	movs	r2, #1
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 0201 	and.w	r2, r3, #1
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d017      	beq.n	8003c98 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	2203      	movs	r2, #3
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d123      	bne.n	8003cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	08da      	lsrs	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3208      	adds	r2, #8
 8003cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	220f      	movs	r2, #15
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	08da      	lsrs	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3208      	adds	r2, #8
 8003ce6:	69b9      	ldr	r1, [r7, #24]
 8003ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0203 	and.w	r2, r3, #3
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80ae 	beq.w	8003e8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	4b5d      	ldr	r3, [pc, #372]	; (8003ea8 <HAL_GPIO_Init+0x300>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	4a5c      	ldr	r2, [pc, #368]	; (8003ea8 <HAL_GPIO_Init+0x300>)
 8003d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ea8 <HAL_GPIO_Init+0x300>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d4a:	4a58      	ldr	r2, [pc, #352]	; (8003eac <HAL_GPIO_Init+0x304>)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	089b      	lsrs	r3, r3, #2
 8003d50:	3302      	adds	r3, #2
 8003d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	220f      	movs	r2, #15
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a4f      	ldr	r2, [pc, #316]	; (8003eb0 <HAL_GPIO_Init+0x308>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d025      	beq.n	8003dc2 <HAL_GPIO_Init+0x21a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a4e      	ldr	r2, [pc, #312]	; (8003eb4 <HAL_GPIO_Init+0x30c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01f      	beq.n	8003dbe <HAL_GPIO_Init+0x216>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a4d      	ldr	r2, [pc, #308]	; (8003eb8 <HAL_GPIO_Init+0x310>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d019      	beq.n	8003dba <HAL_GPIO_Init+0x212>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a4c      	ldr	r2, [pc, #304]	; (8003ebc <HAL_GPIO_Init+0x314>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <HAL_GPIO_Init+0x20e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a4b      	ldr	r2, [pc, #300]	; (8003ec0 <HAL_GPIO_Init+0x318>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00d      	beq.n	8003db2 <HAL_GPIO_Init+0x20a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a4a      	ldr	r2, [pc, #296]	; (8003ec4 <HAL_GPIO_Init+0x31c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d007      	beq.n	8003dae <HAL_GPIO_Init+0x206>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a49      	ldr	r2, [pc, #292]	; (8003ec8 <HAL_GPIO_Init+0x320>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <HAL_GPIO_Init+0x202>
 8003da6:	2306      	movs	r3, #6
 8003da8:	e00c      	b.n	8003dc4 <HAL_GPIO_Init+0x21c>
 8003daa:	2307      	movs	r3, #7
 8003dac:	e00a      	b.n	8003dc4 <HAL_GPIO_Init+0x21c>
 8003dae:	2305      	movs	r3, #5
 8003db0:	e008      	b.n	8003dc4 <HAL_GPIO_Init+0x21c>
 8003db2:	2304      	movs	r3, #4
 8003db4:	e006      	b.n	8003dc4 <HAL_GPIO_Init+0x21c>
 8003db6:	2303      	movs	r3, #3
 8003db8:	e004      	b.n	8003dc4 <HAL_GPIO_Init+0x21c>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e002      	b.n	8003dc4 <HAL_GPIO_Init+0x21c>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_GPIO_Init+0x21c>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	f002 0203 	and.w	r2, r2, #3
 8003dca:	0092      	lsls	r2, r2, #2
 8003dcc:	4093      	lsls	r3, r2
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dd4:	4935      	ldr	r1, [pc, #212]	; (8003eac <HAL_GPIO_Init+0x304>)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	3302      	adds	r3, #2
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003de2:	4b3a      	ldr	r3, [pc, #232]	; (8003ecc <HAL_GPIO_Init+0x324>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e06:	4a31      	ldr	r2, [pc, #196]	; (8003ecc <HAL_GPIO_Init+0x324>)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e0c:	4b2f      	ldr	r3, [pc, #188]	; (8003ecc <HAL_GPIO_Init+0x324>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e30:	4a26      	ldr	r2, [pc, #152]	; (8003ecc <HAL_GPIO_Init+0x324>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e36:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <HAL_GPIO_Init+0x324>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4013      	ands	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e5a:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <HAL_GPIO_Init+0x324>)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e60:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <HAL_GPIO_Init+0x324>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e84:	4a11      	ldr	r2, [pc, #68]	; (8003ecc <HAL_GPIO_Init+0x324>)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2b0f      	cmp	r3, #15
 8003e94:	f67f ae96 	bls.w	8003bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	3724      	adds	r7, #36	; 0x24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	40013800 	.word	0x40013800
 8003eb0:	40020000 	.word	0x40020000
 8003eb4:	40020400 	.word	0x40020400
 8003eb8:	40020800 	.word	0x40020800
 8003ebc:	40020c00 	.word	0x40020c00
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40021400 	.word	0x40021400
 8003ec8:	40021800 	.word	0x40021800
 8003ecc:	40013c00 	.word	0x40013c00

08003ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	807b      	strh	r3, [r7, #2]
 8003edc:	4613      	mov	r3, r2
 8003ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ee0:	787b      	ldrb	r3, [r7, #1]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ee6:	887a      	ldrh	r2, [r7, #2]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003eec:	e003      	b.n	8003ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eee:	887b      	ldrh	r3, [r7, #2]
 8003ef0:	041a      	lsls	r2, r3, #16
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	619a      	str	r2, [r3, #24]
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d006      	beq.n	8003f28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f1a:	4a05      	ldr	r2, [pc, #20]	; (8003f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe fbf4 	bl	8002710 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40013c00 	.word	0x40013c00

08003f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e12b      	b.n	800419e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fe f8b8 	bl	80020d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f98:	f002 fd0e 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8003f9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4a81      	ldr	r2, [pc, #516]	; (80041a8 <HAL_I2C_Init+0x274>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d807      	bhi.n	8003fb8 <HAL_I2C_Init+0x84>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a80      	ldr	r2, [pc, #512]	; (80041ac <HAL_I2C_Init+0x278>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	bf94      	ite	ls
 8003fb0:	2301      	movls	r3, #1
 8003fb2:	2300      	movhi	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e006      	b.n	8003fc6 <HAL_I2C_Init+0x92>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a7d      	ldr	r2, [pc, #500]	; (80041b0 <HAL_I2C_Init+0x27c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	bf94      	ite	ls
 8003fc0:	2301      	movls	r3, #1
 8003fc2:	2300      	movhi	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e0e7      	b.n	800419e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4a78      	ldr	r2, [pc, #480]	; (80041b4 <HAL_I2C_Init+0x280>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	0c9b      	lsrs	r3, r3, #18
 8003fd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4a6a      	ldr	r2, [pc, #424]	; (80041a8 <HAL_I2C_Init+0x274>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d802      	bhi.n	8004008 <HAL_I2C_Init+0xd4>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	3301      	adds	r3, #1
 8004006:	e009      	b.n	800401c <HAL_I2C_Init+0xe8>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800400e:	fb02 f303 	mul.w	r3, r2, r3
 8004012:	4a69      	ldr	r2, [pc, #420]	; (80041b8 <HAL_I2C_Init+0x284>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	099b      	lsrs	r3, r3, #6
 800401a:	3301      	adds	r3, #1
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	430b      	orrs	r3, r1
 8004022:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800402e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	495c      	ldr	r1, [pc, #368]	; (80041a8 <HAL_I2C_Init+0x274>)
 8004038:	428b      	cmp	r3, r1
 800403a:	d819      	bhi.n	8004070 <HAL_I2C_Init+0x13c>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1e59      	subs	r1, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	fbb1 f3f3 	udiv	r3, r1, r3
 800404a:	1c59      	adds	r1, r3, #1
 800404c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004050:	400b      	ands	r3, r1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_I2C_Init+0x138>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1e59      	subs	r1, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	fbb1 f3f3 	udiv	r3, r1, r3
 8004064:	3301      	adds	r3, #1
 8004066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406a:	e051      	b.n	8004110 <HAL_I2C_Init+0x1dc>
 800406c:	2304      	movs	r3, #4
 800406e:	e04f      	b.n	8004110 <HAL_I2C_Init+0x1dc>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d111      	bne.n	800409c <HAL_I2C_Init+0x168>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1e58      	subs	r0, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6859      	ldr	r1, [r3, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	440b      	add	r3, r1
 8004086:	fbb0 f3f3 	udiv	r3, r0, r3
 800408a:	3301      	adds	r3, #1
 800408c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e012      	b.n	80040c2 <HAL_I2C_Init+0x18e>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1e58      	subs	r0, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	0099      	lsls	r1, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b2:	3301      	adds	r3, #1
 80040b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_I2C_Init+0x196>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e022      	b.n	8004110 <HAL_I2C_Init+0x1dc>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10e      	bne.n	80040f0 <HAL_I2C_Init+0x1bc>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1e58      	subs	r0, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6859      	ldr	r1, [r3, #4]
 80040da:	460b      	mov	r3, r1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	440b      	add	r3, r1
 80040e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e4:	3301      	adds	r3, #1
 80040e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ee:	e00f      	b.n	8004110 <HAL_I2C_Init+0x1dc>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1e58      	subs	r0, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	0099      	lsls	r1, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	fbb0 f3f3 	udiv	r3, r0, r3
 8004106:	3301      	adds	r3, #1
 8004108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	6809      	ldr	r1, [r1, #0]
 8004114:	4313      	orrs	r3, r2
 8004116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800413e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6911      	ldr	r1, [r2, #16]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68d2      	ldr	r2, [r2, #12]
 800414a:	4311      	orrs	r1, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	430b      	orrs	r3, r1
 8004152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	000186a0 	.word	0x000186a0
 80041ac:	001e847f 	.word	0x001e847f
 80041b0:	003d08ff 	.word	0x003d08ff
 80041b4:	431bde83 	.word	0x431bde83
 80041b8:	10624dd3 	.word	0x10624dd3

080041bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	461a      	mov	r2, r3
 80041c8:	460b      	mov	r3, r1
 80041ca:	817b      	strh	r3, [r7, #10]
 80041cc:	4613      	mov	r3, r2
 80041ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041d0:	f7ff f90c 	bl	80033ec <HAL_GetTick>
 80041d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b20      	cmp	r3, #32
 80041e0:	f040 80e0 	bne.w	80043a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2319      	movs	r3, #25
 80041ea:	2201      	movs	r2, #1
 80041ec:	4970      	ldr	r1, [pc, #448]	; (80043b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f001 ffa8 	bl	8006144 <I2C_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041fa:	2302      	movs	r3, #2
 80041fc:	e0d3      	b.n	80043a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_I2C_Master_Transmit+0x50>
 8004208:	2302      	movs	r3, #2
 800420a:	e0cc      	b.n	80043a6 <HAL_I2C_Master_Transmit+0x1ea>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d007      	beq.n	8004232 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0201 	orr.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2221      	movs	r2, #33	; 0x21
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2210      	movs	r2, #16
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	893a      	ldrh	r2, [r7, #8]
 8004262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a50      	ldr	r2, [pc, #320]	; (80043b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004274:	8979      	ldrh	r1, [r7, #10]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	6a3a      	ldr	r2, [r7, #32]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f001 fd6a 	bl	8005d54 <I2C_MasterRequestWrite>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e08d      	b.n	80043a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042a0:	e066      	b.n	8004370 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	6a39      	ldr	r1, [r7, #32]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f002 f822 	bl	80062f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d107      	bne.n	80042ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e06b      	b.n	80043a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d11b      	bne.n	8004344 <HAL_I2C_Master_Transmit+0x188>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	d017      	beq.n	8004344 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	781a      	ldrb	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	6a39      	ldr	r1, [r7, #32]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f002 f812 	bl	8006372 <I2C_WaitOnBTFFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00d      	beq.n	8004370 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2b04      	cmp	r3, #4
 800435a:	d107      	bne.n	800436c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e01a      	b.n	80043a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	2b00      	cmp	r3, #0
 8004376:	d194      	bne.n	80042a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e000      	b.n	80043a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	00100002 	.word	0x00100002
 80043b4:	ffff0000 	.word	0xffff0000

080043b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08c      	sub	sp, #48	; 0x30
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	461a      	mov	r2, r3
 80043c4:	460b      	mov	r3, r1
 80043c6:	817b      	strh	r3, [r7, #10]
 80043c8:	4613      	mov	r3, r2
 80043ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043cc:	f7ff f80e 	bl	80033ec <HAL_GetTick>
 80043d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b20      	cmp	r3, #32
 80043dc:	f040 820b 	bne.w	80047f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	2319      	movs	r3, #25
 80043e6:	2201      	movs	r2, #1
 80043e8:	497c      	ldr	r1, [pc, #496]	; (80045dc <HAL_I2C_Master_Receive+0x224>)
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f001 feaa 	bl	8006144 <I2C_WaitOnFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
 80043f8:	e1fe      	b.n	80047f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_I2C_Master_Receive+0x50>
 8004404:	2302      	movs	r3, #2
 8004406:	e1f7      	b.n	80047f8 <HAL_I2C_Master_Receive+0x440>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	d007      	beq.n	800442e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0201 	orr.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800443c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2222      	movs	r2, #34	; 0x22
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2210      	movs	r2, #16
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	893a      	ldrh	r2, [r7, #8]
 800445e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a5c      	ldr	r2, [pc, #368]	; (80045e0 <HAL_I2C_Master_Receive+0x228>)
 800446e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004470:	8979      	ldrh	r1, [r7, #10]
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f001 fcee 	bl	8005e58 <I2C_MasterRequestRead>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e1b8      	b.n	80047f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448a:	2b00      	cmp	r3, #0
 800448c:	d113      	bne.n	80044b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	623b      	str	r3, [r7, #32]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	e18c      	b.n	80047d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d11b      	bne.n	80044f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e16c      	b.n	80047d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d11b      	bne.n	8004536 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800451c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	e14c      	b.n	80047d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800455c:	e138      	b.n	80047d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004562:	2b03      	cmp	r3, #3
 8004564:	f200 80f1 	bhi.w	800474a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456c:	2b01      	cmp	r3, #1
 800456e:	d123      	bne.n	80045b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004572:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f001 ff6f 	bl	8006458 <I2C_WaitOnRXNEFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e139      	b.n	80047f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045b6:	e10b      	b.n	80047d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d14e      	bne.n	800465e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	2200      	movs	r2, #0
 80045c8:	4906      	ldr	r1, [pc, #24]	; (80045e4 <HAL_I2C_Master_Receive+0x22c>)
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f001 fdba 	bl	8006144 <I2C_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d008      	beq.n	80045e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e10e      	b.n	80047f8 <HAL_I2C_Master_Receive+0x440>
 80045da:	bf00      	nop
 80045dc:	00100002 	.word	0x00100002
 80045e0:	ffff0000 	.word	0xffff0000
 80045e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800465c:	e0b8      	b.n	80047d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	2200      	movs	r2, #0
 8004666:	4966      	ldr	r1, [pc, #408]	; (8004800 <HAL_I2C_Master_Receive+0x448>)
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f001 fd6b 	bl	8006144 <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0bf      	b.n	80047f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	2200      	movs	r2, #0
 80046c2:	494f      	ldr	r1, [pc, #316]	; (8004800 <HAL_I2C_Master_Receive+0x448>)
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f001 fd3d 	bl	8006144 <I2C_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e091      	b.n	80047f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004748:	e042      	b.n	80047d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800474a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f001 fe82 	bl	8006458 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e04c      	b.n	80047f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b04      	cmp	r3, #4
 800479c:	d118      	bne.n	80047d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f47f aec2 	bne.w	800455e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	e000      	b.n	80047f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
  }
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3728      	adds	r7, #40	; 0x28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	00010004 	.word	0x00010004

08004804 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004824:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	2b10      	cmp	r3, #16
 8004832:	d003      	beq.n	800483c <HAL_I2C_EV_IRQHandler+0x38>
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	f040 80bd 	bne.w	80049b6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10d      	bne.n	8004872 <HAL_I2C_EV_IRQHandler+0x6e>
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800485c:	d003      	beq.n	8004866 <HAL_I2C_EV_IRQHandler+0x62>
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004864:	d101      	bne.n	800486a <HAL_I2C_EV_IRQHandler+0x66>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_I2C_EV_IRQHandler+0x68>
 800486a:	2300      	movs	r3, #0
 800486c:	2b01      	cmp	r3, #1
 800486e:	f000 812e 	beq.w	8004ace <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00c      	beq.n	8004896 <HAL_I2C_EV_IRQHandler+0x92>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	0a5b      	lsrs	r3, r3, #9
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d006      	beq.n	8004896 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f001 fe6a 	bl	8006562 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fcbb 	bl	800520a <I2C_Master_SB>
 8004894:	e08e      	b.n	80049b4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	08db      	lsrs	r3, r3, #3
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HAL_I2C_EV_IRQHandler+0xb2>
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	0a5b      	lsrs	r3, r3, #9
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fd31 	bl	8005316 <I2C_Master_ADD10>
 80048b4:	e07e      	b.n	80049b4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <HAL_I2C_EV_IRQHandler+0xd2>
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	0a5b      	lsrs	r3, r3, #9
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fd4b 	bl	800536a <I2C_Master_ADDR>
 80048d4:	e06e      	b.n	80049b4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	089b      	lsrs	r3, r3, #2
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d037      	beq.n	8004952 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f0:	f000 80ef 	beq.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	09db      	lsrs	r3, r3, #7
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00f      	beq.n	8004920 <HAL_I2C_EV_IRQHandler+0x11c>
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	0a9b      	lsrs	r3, r3, #10
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d009      	beq.n	8004920 <HAL_I2C_EV_IRQHandler+0x11c>
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	089b      	lsrs	r3, r3, #2
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d103      	bne.n	8004920 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f948 	bl	8004bae <I2C_MasterTransmit_TXE>
 800491e:	e049      	b.n	80049b4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	089b      	lsrs	r3, r3, #2
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80d2 	beq.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	0a5b      	lsrs	r3, r3, #9
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 80cb 	beq.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b10      	cmp	r3, #16
 8004940:	d103      	bne.n	800494a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f9cf 	bl	8004ce6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004948:	e0c3      	b.n	8004ad2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa33 	bl	8004db6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004950:	e0bf      	b.n	8004ad2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004960:	f000 80b7 	beq.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00f      	beq.n	8004990 <HAL_I2C_EV_IRQHandler+0x18c>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	0a9b      	lsrs	r3, r3, #10
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d009      	beq.n	8004990 <HAL_I2C_EV_IRQHandler+0x18c>
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 faa3 	bl	8004ed4 <I2C_MasterReceive_RXNE>
 800498e:	e011      	b.n	80049b4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 809a 	beq.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	0a5b      	lsrs	r3, r3, #9
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8093 	beq.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fb42 	bl	8005036 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049b2:	e08e      	b.n	8004ad2 <HAL_I2C_EV_IRQHandler+0x2ce>
 80049b4:	e08d      	b.n	8004ad2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d004      	beq.n	80049c8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	61fb      	str	r3, [r7, #28]
 80049c6:	e007      	b.n	80049d8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d012      	beq.n	8004a0a <HAL_I2C_EV_IRQHandler+0x206>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	0a5b      	lsrs	r3, r3, #9
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00c      	beq.n	8004a0a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004a00:	69b9      	ldr	r1, [r7, #24]
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 ff00 	bl	8005808 <I2C_Slave_ADDR>
 8004a08:	e066      	b.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <HAL_I2C_EV_IRQHandler+0x226>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	0a5b      	lsrs	r3, r3, #9
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 ff34 	bl	8005890 <I2C_Slave_STOPF>
 8004a28:	e056      	b.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a2a:	7bbb      	ldrb	r3, [r7, #14]
 8004a2c:	2b21      	cmp	r3, #33	; 0x21
 8004a2e:	d002      	beq.n	8004a36 <HAL_I2C_EV_IRQHandler+0x232>
 8004a30:	7bbb      	ldrb	r3, [r7, #14]
 8004a32:	2b29      	cmp	r3, #41	; 0x29
 8004a34:	d125      	bne.n	8004a82 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	09db      	lsrs	r3, r3, #7
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00f      	beq.n	8004a62 <HAL_I2C_EV_IRQHandler+0x25e>
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	0a9b      	lsrs	r3, r3, #10
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <HAL_I2C_EV_IRQHandler+0x25e>
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	089b      	lsrs	r3, r3, #2
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fe16 	bl	800568c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a60:	e039      	b.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	089b      	lsrs	r3, r3, #2
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d033      	beq.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d2>
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	0a5b      	lsrs	r3, r3, #9
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d02d      	beq.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fe43 	bl	8005706 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a80:	e029      	b.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	099b      	lsrs	r3, r3, #6
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00f      	beq.n	8004aae <HAL_I2C_EV_IRQHandler+0x2aa>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	0a9b      	lsrs	r3, r3, #10
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_I2C_EV_IRQHandler+0x2aa>
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	089b      	lsrs	r3, r3, #2
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d103      	bne.n	8004aae <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fe4e 	bl	8005748 <I2C_SlaveReceive_RXNE>
 8004aac:	e014      	b.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	089b      	lsrs	r3, r3, #2
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00e      	beq.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2d4>
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	0a5b      	lsrs	r3, r3, #9
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d008      	beq.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fe7c 	bl	80057c4 <I2C_SlaveReceive_BTF>
 8004acc:	e004      	b.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004ace:	bf00      	nop
 8004ad0:	e002      	b.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ad6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	460b      	mov	r3, r1
 8004b38:	70fb      	strb	r3, [r7, #3]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bc4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d150      	bne.n	8004c76 <I2C_MasterTransmit_TXE+0xc8>
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b21      	cmp	r3, #33	; 0x21
 8004bd8:	d14d      	bne.n	8004c76 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d01d      	beq.n	8004c1c <I2C_MasterTransmit_TXE+0x6e>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d01a      	beq.n	8004c1c <I2C_MasterTransmit_TXE+0x6e>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bec:	d016      	beq.n	8004c1c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bfc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2211      	movs	r2, #17
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff62 	bl	8004ade <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c1a:	e060      	b.n	8004cde <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c2a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b40      	cmp	r3, #64	; 0x40
 8004c54:	d107      	bne.n	8004c66 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff ff7d 	bl	8004b5e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c64:	e03b      	b.n	8004cde <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff ff35 	bl	8004ade <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c74:	e033      	b.n	8004cde <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	2b21      	cmp	r3, #33	; 0x21
 8004c7a:	d005      	beq.n	8004c88 <I2C_MasterTransmit_TXE+0xda>
 8004c7c:	7bbb      	ldrb	r3, [r7, #14]
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d12d      	bne.n	8004cde <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b22      	cmp	r3, #34	; 0x22
 8004c86:	d12a      	bne.n	8004cde <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d108      	bne.n	8004ca4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ca2:	e01c      	b.n	8004cde <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d103      	bne.n	8004cb8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f880 	bl	8004db6 <I2C_MemoryTransmit_TXE_BTF>
}
 8004cb6:	e012      	b.n	8004cde <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	781a      	ldrb	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cdc:	e7ff      	b.n	8004cde <I2C_MasterTransmit_TXE+0x130>
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b21      	cmp	r3, #33	; 0x21
 8004cfe:	d156      	bne.n	8004dae <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d012      	beq.n	8004d30 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	781a      	ldrb	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d2e:	e03e      	b.n	8004dae <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d01d      	beq.n	8004d72 <I2C_MasterTransmit_BTF+0x8c>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d01a      	beq.n	8004d72 <I2C_MasterTransmit_BTF+0x8c>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d42:	d016      	beq.n	8004d72 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d52:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2211      	movs	r2, #17
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff feb7 	bl	8004ade <HAL_I2C_MasterTxCpltCallback>
}
 8004d70:	e01d      	b.n	8004dae <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d80:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d90:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff fe98 	bl	8004ade <HAL_I2C_MasterTxCpltCallback>
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d11d      	bne.n	8004e0a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d10b      	bne.n	8004dee <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de6:	1c9a      	adds	r2, r3, #2
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004dec:	e06e      	b.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	121b      	asrs	r3, r3, #8
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e08:	e060      	b.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d10b      	bne.n	8004e2a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e28:	e050      	b.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d14c      	bne.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b22      	cmp	r3, #34	; 0x22
 8004e36:	d108      	bne.n	8004e4a <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e46:	601a      	str	r2, [r3, #0]
}
 8004e48:	e040      	b.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d015      	beq.n	8004e80 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b21      	cmp	r3, #33	; 0x21
 8004e58:	d112      	bne.n	8004e80 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	781a      	ldrb	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e7e:	e025      	b.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d120      	bne.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b21      	cmp	r3, #33	; 0x21
 8004e8e:	d11d      	bne.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e9e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff fe49 	bl	8004b5e <HAL_I2C_MemTxCpltCallback>
}
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b22      	cmp	r3, #34	; 0x22
 8004ee6:	f040 80a2 	bne.w	800502e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d921      	bls.n	8004f3c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	f040 8082 	bne.w	800502e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f38:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004f3a:	e078      	b.n	800502e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d074      	beq.n	800502e <I2C_MasterReceive_RXNE+0x15a>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d002      	beq.n	8004f50 <I2C_MasterReceive_RXNE+0x7c>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d16e      	bne.n	800502e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f001 fa4f 	bl	80063f4 <I2C_WaitOnSTOPRequestThroughIT>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d142      	bne.n	8004fe2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f7a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d10a      	bne.n	8004fcc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff fdd4 	bl	8004b72 <HAL_I2C_MemRxCpltCallback>
}
 8004fca:	e030      	b.n	800502e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2212      	movs	r2, #18
 8004fd8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff fd89 	bl	8004af2 <HAL_I2C_MasterRxCpltCallback>
}
 8004fe0:	e025      	b.n	800502e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ff0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fdac 	bl	8004b86 <HAL_I2C_ErrorCallback>
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b04      	cmp	r3, #4
 800504c:	d11b      	bne.n	8005086 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005084:	e0bd      	b.n	8005202 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b03      	cmp	r3, #3
 800508e:	d129      	bne.n	80050e4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d00a      	beq.n	80050bc <I2C_MasterReceive_BTF+0x86>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d007      	beq.n	80050bc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050e2:	e08e      	b.n	8005202 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d176      	bne.n	80051dc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d002      	beq.n	80050fa <I2C_MasterReceive_BTF+0xc4>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b10      	cmp	r3, #16
 80050f8:	d108      	bne.n	800510c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e019      	b.n	8005140 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b04      	cmp	r3, #4
 8005110:	d002      	beq.n	8005118 <I2C_MasterReceive_BTF+0xe2>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d108      	bne.n	800512a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	e00a      	b.n	8005140 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b10      	cmp	r3, #16
 800512e:	d007      	beq.n	8005140 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800519a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b40      	cmp	r3, #64	; 0x40
 80051ae:	d10a      	bne.n	80051c6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff fcd7 	bl	8004b72 <HAL_I2C_MemRxCpltCallback>
}
 80051c4:	e01d      	b.n	8005202 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2212      	movs	r2, #18
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff fc8c 	bl	8004af2 <HAL_I2C_MasterRxCpltCallback>
}
 80051da:	e012      	b.n	8005202 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005202:	bf00      	nop
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	d117      	bne.n	800524e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	b2db      	uxtb	r3, r3
 800522c:	461a      	mov	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005236:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005238:	e067      	b.n	800530a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	b2da      	uxtb	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	611a      	str	r2, [r3, #16]
}
 800524c:	e05d      	b.n	800530a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005256:	d133      	bne.n	80052c0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b21      	cmp	r3, #33	; 0x21
 8005262:	d109      	bne.n	8005278 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005268:	b2db      	uxtb	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005274:	611a      	str	r2, [r3, #16]
 8005276:	e008      	b.n	800528a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	b2db      	uxtb	r3, r3
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	b2da      	uxtb	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	2b00      	cmp	r3, #0
 8005290:	d004      	beq.n	800529c <I2C_Master_SB+0x92>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d108      	bne.n	80052ae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d032      	beq.n	800530a <I2C_Master_SB+0x100>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d02d      	beq.n	800530a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052bc:	605a      	str	r2, [r3, #4]
}
 80052be:	e024      	b.n	800530a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10e      	bne.n	80052e6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	11db      	asrs	r3, r3, #7
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	f003 0306 	and.w	r3, r3, #6
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	f063 030f 	orn	r3, r3, #15
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	611a      	str	r2, [r3, #16]
}
 80052e4:	e011      	b.n	800530a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d10d      	bne.n	800530a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	11db      	asrs	r3, r3, #7
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f003 0306 	and.w	r3, r3, #6
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	f063 030e 	orn	r3, r3, #14
 8005302:	b2da      	uxtb	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	611a      	str	r2, [r3, #16]
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	b2da      	uxtb	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <I2C_Master_ADD10+0x26>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d108      	bne.n	800534e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00c      	beq.n	800535e <I2C_Master_ADD10+0x48>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d007      	beq.n	800535e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800535c:	605a      	str	r2, [r3, #4]
  }
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800536a:	b480      	push	{r7}
 800536c:	b091      	sub	sp, #68	; 0x44
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005378:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b22      	cmp	r3, #34	; 0x22
 8005392:	f040 8169 	bne.w	8005668 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10f      	bne.n	80053be <I2C_Master_ADDR+0x54>
 800539e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053a2:	2b40      	cmp	r3, #64	; 0x40
 80053a4:	d10b      	bne.n	80053be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a6:	2300      	movs	r3, #0
 80053a8:	633b      	str	r3, [r7, #48]	; 0x30
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	633b      	str	r3, [r7, #48]	; 0x30
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	633b      	str	r3, [r7, #48]	; 0x30
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	e160      	b.n	8005680 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d11d      	bne.n	8005402 <I2C_Master_ADDR+0x98>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053ce:	d118      	bne.n	8005402 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d0:	2300      	movs	r3, #0
 80053d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	651a      	str	r2, [r3, #80]	; 0x50
 8005400:	e13e      	b.n	8005680 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d113      	bne.n	8005434 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540c:	2300      	movs	r3, #0
 800540e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e115      	b.n	8005660 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b01      	cmp	r3, #1
 800543c:	f040 808a 	bne.w	8005554 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005446:	d137      	bne.n	80054b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005456:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005466:	d113      	bne.n	8005490 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005476:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005478:	2300      	movs	r3, #0
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	e0e7      	b.n	8005660 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005490:	2300      	movs	r3, #0
 8005492:	623b      	str	r3, [r7, #32]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	623b      	str	r3, [r7, #32]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	623b      	str	r3, [r7, #32]
 80054a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e0d3      	b.n	8005660 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d02e      	beq.n	800551c <I2C_Master_ADDR+0x1b2>
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d02b      	beq.n	800551c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	2b12      	cmp	r3, #18
 80054c8:	d102      	bne.n	80054d0 <I2C_Master_ADDR+0x166>
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d125      	bne.n	800551c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d00e      	beq.n	80054f4 <I2C_Master_ADDR+0x18a>
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d00b      	beq.n	80054f4 <I2C_Master_ADDR+0x18a>
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	2b10      	cmp	r3, #16
 80054e0:	d008      	beq.n	80054f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e007      	b.n	8005504 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005502:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	e0a1      	b.n	8005660 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800552c:	2300      	movs	r3, #0
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	61bb      	str	r3, [r7, #24]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e085      	b.n	8005660 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d14d      	bne.n	80055fa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	2b04      	cmp	r3, #4
 8005562:	d016      	beq.n	8005592 <I2C_Master_ADDR+0x228>
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	2b02      	cmp	r3, #2
 8005568:	d013      	beq.n	8005592 <I2C_Master_ADDR+0x228>
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	2b10      	cmp	r3, #16
 800556e:	d010      	beq.n	8005592 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800557e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e007      	b.n	80055a2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055a0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b0:	d117      	bne.n	80055e2 <I2C_Master_ADDR+0x278>
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055b8:	d00b      	beq.n	80055d2 <I2C_Master_ADDR+0x268>
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d008      	beq.n	80055d2 <I2C_Master_ADDR+0x268>
 80055c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d005      	beq.n	80055d2 <I2C_Master_ADDR+0x268>
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	2b10      	cmp	r3, #16
 80055ca:	d002      	beq.n	80055d2 <I2C_Master_ADDR+0x268>
 80055cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d107      	bne.n	80055e2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	e032      	b.n	8005660 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005608:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005618:	d117      	bne.n	800564a <I2C_Master_ADDR+0x2e0>
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005620:	d00b      	beq.n	800563a <I2C_Master_ADDR+0x2d0>
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	2b01      	cmp	r3, #1
 8005626:	d008      	beq.n	800563a <I2C_Master_ADDR+0x2d0>
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	2b08      	cmp	r3, #8
 800562c:	d005      	beq.n	800563a <I2C_Master_ADDR+0x2d0>
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	2b10      	cmp	r3, #16
 8005632:	d002      	beq.n	800563a <I2C_Master_ADDR+0x2d0>
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	2b20      	cmp	r3, #32
 8005638:	d107      	bne.n	800564a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005648:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800564a:	2300      	movs	r3, #0
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	613b      	str	r3, [r7, #16]
 800565e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005666:	e00b      	b.n	8005680 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
}
 800567e:	e7ff      	b.n	8005680 <I2C_Master_ADDR+0x316>
 8005680:	bf00      	nop
 8005682:	3744      	adds	r7, #68	; 0x44
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d02b      	beq.n	80056fe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	781a      	ldrb	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d114      	bne.n	80056fe <I2C_SlaveTransmit_TXE+0x72>
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b29      	cmp	r3, #41	; 0x29
 80056d8:	d111      	bne.n	80056fe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2221      	movs	r2, #33	; 0x21
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2228      	movs	r2, #40	; 0x28
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff fa04 	bl	8004b06 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d011      	beq.n	800573c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	781a      	ldrb	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005756:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d02c      	beq.n	80057bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d114      	bne.n	80057bc <I2C_SlaveReceive_RXNE+0x74>
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	2b2a      	cmp	r3, #42	; 0x2a
 8005796:	d111      	bne.n	80057bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2222      	movs	r2, #34	; 0x22
 80057ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2228      	movs	r2, #40	; 0x28
 80057b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff f9af 	bl	8004b1a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057bc:	bf00      	nop
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d012      	beq.n	80057fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005822:	2b28      	cmp	r3, #40	; 0x28
 8005824:	d127      	bne.n	8005876 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005834:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	089b      	lsrs	r3, r3, #2
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005842:	2301      	movs	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	09db      	lsrs	r3, r3, #7
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d103      	bne.n	800585a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	81bb      	strh	r3, [r7, #12]
 8005858:	e002      	b.n	8005860 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005868:	89ba      	ldrh	r2, [r7, #12]
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff f95d 	bl	8004b2e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005874:	e008      	b.n	8005888 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f06f 0202 	mvn.w	r2, #2
 800587e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80058b0:	2300      	movs	r3, #0
 80058b2:	60bb      	str	r3, [r7, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ec:	d172      	bne.n	80059d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	2b22      	cmp	r3, #34	; 0x22
 80058f2:	d002      	beq.n	80058fa <I2C_Slave_STOPF+0x6a>
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b2a      	cmp	r3, #42	; 0x2a
 80058f8:	d135      	bne.n	8005966 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	b29a      	uxth	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f043 0204 	orr.w	r2, r3, #4
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800592c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	4618      	mov	r0, r3
 8005934:	f7fe f849 	bl	80039ca <HAL_DMA_GetState>
 8005938:	4603      	mov	r3, r0
 800593a:	2b01      	cmp	r3, #1
 800593c:	d049      	beq.n	80059d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	4a69      	ldr	r2, [pc, #420]	; (8005ae8 <I2C_Slave_STOPF+0x258>)
 8005944:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe f81b 	bl	8003986 <HAL_DMA_Abort_IT>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d03d      	beq.n	80059d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005960:	4610      	mov	r0, r2
 8005962:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005964:	e035      	b.n	80059d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	b29a      	uxth	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f043 0204 	orr.w	r2, r3, #4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005998:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe f813 	bl	80039ca <HAL_DMA_GetState>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d014      	beq.n	80059d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ae:	4a4e      	ldr	r2, [pc, #312]	; (8005ae8 <I2C_Slave_STOPF+0x258>)
 80059b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fd ffe5 	bl	8003986 <HAL_DMA_Abort_IT>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d008      	beq.n	80059d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059cc:	4610      	mov	r0, r2
 80059ce:	4798      	blx	r3
 80059d0:	e000      	b.n	80059d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d03e      	beq.n	8005a5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d112      	bne.n	8005a12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b40      	cmp	r3, #64	; 0x40
 8005a1e:	d112      	bne.n	8005a46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	f043 0204 	orr.w	r2, r3, #4
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f843 	bl	8005af0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a6a:	e039      	b.n	8005ae0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a70:	d109      	bne.n	8005a86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2228      	movs	r2, #40	; 0x28
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff f84a 	bl	8004b1a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b28      	cmp	r3, #40	; 0x28
 8005a90:	d111      	bne.n	8005ab6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a15      	ldr	r2, [pc, #84]	; (8005aec <I2C_Slave_STOPF+0x25c>)
 8005a96:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff f84b 	bl	8004b4a <HAL_I2C_ListenCpltCallback>
}
 8005ab4:	e014      	b.n	8005ae0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	2b22      	cmp	r3, #34	; 0x22
 8005abc:	d002      	beq.n	8005ac4 <I2C_Slave_STOPF+0x234>
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	2b22      	cmp	r3, #34	; 0x22
 8005ac2:	d10d      	bne.n	8005ae0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff f81d 	bl	8004b1a <HAL_I2C_SlaveRxCpltCallback>
}
 8005ae0:	bf00      	nop
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	08005ff5 	.word	0x08005ff5
 8005aec:	ffff0000 	.word	0xffff0000

08005af0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005afe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b08:	7bbb      	ldrb	r3, [r7, #14]
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d002      	beq.n	8005b14 <I2C_ITError+0x24>
 8005b0e:	7bbb      	ldrb	r3, [r7, #14]
 8005b10:	2b40      	cmp	r3, #64	; 0x40
 8005b12:	d10a      	bne.n	8005b2a <I2C_ITError+0x3a>
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	2b22      	cmp	r3, #34	; 0x22
 8005b18:	d107      	bne.n	8005b2a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b28:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b30:	2b28      	cmp	r3, #40	; 0x28
 8005b32:	d107      	bne.n	8005b44 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2228      	movs	r2, #40	; 0x28
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b42:	e015      	b.n	8005b70 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b52:	d00a      	beq.n	8005b6a <I2C_ITError+0x7a>
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	2b60      	cmp	r3, #96	; 0x60
 8005b58:	d007      	beq.n	8005b6a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b7e:	d162      	bne.n	8005c46 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b8e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d020      	beq.n	8005be0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba2:	4a6a      	ldr	r2, [pc, #424]	; (8005d4c <I2C_ITError+0x25c>)
 8005ba4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fd feeb 	bl	8003986 <HAL_DMA_Abort_IT>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 8089 	beq.w	8005cca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4798      	blx	r3
 8005bde:	e074      	b.n	8005cca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	4a59      	ldr	r2, [pc, #356]	; (8005d4c <I2C_ITError+0x25c>)
 8005be6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fd feca 	bl	8003986 <HAL_DMA_Abort_IT>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d068      	beq.n	8005cca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c02:	2b40      	cmp	r3, #64	; 0x40
 8005c04:	d10b      	bne.n	8005c1e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0201 	bic.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c40:	4610      	mov	r0, r2
 8005c42:	4798      	blx	r3
 8005c44:	e041      	b.n	8005cca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b60      	cmp	r3, #96	; 0x60
 8005c50:	d125      	bne.n	8005c9e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d10b      	bne.n	8005c86 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fe ff7f 	bl	8004b9a <HAL_I2C_AbortCpltCallback>
 8005c9c:	e015      	b.n	8005cca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca8:	2b40      	cmp	r3, #64	; 0x40
 8005caa:	d10b      	bne.n	8005cc4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7fe ff5e 	bl	8004b86 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10e      	bne.n	8005cf8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d109      	bne.n	8005cf8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d104      	bne.n	8005cf8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d06:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d113      	bne.n	8005d44 <I2C_ITError+0x254>
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	2b28      	cmp	r3, #40	; 0x28
 8005d20:	d110      	bne.n	8005d44 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <I2C_ITError+0x260>)
 8005d26:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fe ff03 	bl	8004b4a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d44:	bf00      	nop
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	08005ff5 	.word	0x08005ff5
 8005d50:	ffff0000 	.word	0xffff0000

08005d54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	607a      	str	r2, [r7, #4]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	460b      	mov	r3, r1
 8005d62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d006      	beq.n	8005d7e <I2C_MasterRequestWrite+0x2a>
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d003      	beq.n	8005d7e <I2C_MasterRequestWrite+0x2a>
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d7c:	d108      	bne.n	8005d90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e00b      	b.n	8005da8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	2b12      	cmp	r3, #18
 8005d96:	d107      	bne.n	8005da8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005da6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f9c5 	bl	8006144 <I2C_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00d      	beq.n	8005ddc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dce:	d103      	bne.n	8005dd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e035      	b.n	8005e48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005de4:	d108      	bne.n	8005df8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005de6:	897b      	ldrh	r3, [r7, #10]
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005df4:	611a      	str	r2, [r3, #16]
 8005df6:	e01b      	b.n	8005e30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005df8:	897b      	ldrh	r3, [r7, #10]
 8005dfa:	11db      	asrs	r3, r3, #7
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f003 0306 	and.w	r3, r3, #6
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	f063 030f 	orn	r3, r3, #15
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	490e      	ldr	r1, [pc, #56]	; (8005e50 <I2C_MasterRequestWrite+0xfc>)
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 f9eb 	bl	80061f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e010      	b.n	8005e48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e26:	897b      	ldrh	r3, [r7, #10]
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4907      	ldr	r1, [pc, #28]	; (8005e54 <I2C_MasterRequestWrite+0x100>)
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f9db 	bl	80061f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	00010008 	.word	0x00010008
 8005e54:	00010002 	.word	0x00010002

08005e58 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	460b      	mov	r3, r1
 8005e66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e7c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d006      	beq.n	8005e92 <I2C_MasterRequestRead+0x3a>
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d003      	beq.n	8005e92 <I2C_MasterRequestRead+0x3a>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e90:	d108      	bne.n	8005ea4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e00b      	b.n	8005ebc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	2b11      	cmp	r3, #17
 8005eaa:	d107      	bne.n	8005ebc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f93b 	bl	8006144 <I2C_WaitOnFlagUntilTimeout>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00d      	beq.n	8005ef0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee2:	d103      	bne.n	8005eec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e079      	b.n	8005fe4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef8:	d108      	bne.n	8005f0c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005efa:	897b      	ldrh	r3, [r7, #10]
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	f043 0301 	orr.w	r3, r3, #1
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	611a      	str	r2, [r3, #16]
 8005f0a:	e05f      	b.n	8005fcc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f0c:	897b      	ldrh	r3, [r7, #10]
 8005f0e:	11db      	asrs	r3, r3, #7
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	f003 0306 	and.w	r3, r3, #6
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f063 030f 	orn	r3, r3, #15
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	4930      	ldr	r1, [pc, #192]	; (8005fec <I2C_MasterRequestRead+0x194>)
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 f961 	bl	80061f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e054      	b.n	8005fe4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f3a:	897b      	ldrh	r3, [r7, #10]
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4929      	ldr	r1, [pc, #164]	; (8005ff0 <I2C_MasterRequestRead+0x198>)
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f951 	bl	80061f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e044      	b.n	8005fe4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	613b      	str	r3, [r7, #16]
 8005f6e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f7e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f8d9 	bl	8006144 <I2C_WaitOnFlagUntilTimeout>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00d      	beq.n	8005fb4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa6:	d103      	bne.n	8005fb0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e017      	b.n	8005fe4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005fb4:	897b      	ldrh	r3, [r7, #10]
 8005fb6:	11db      	asrs	r3, r3, #7
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	f003 0306 	and.w	r3, r3, #6
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f063 030e 	orn	r3, r3, #14
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	4907      	ldr	r1, [pc, #28]	; (8005ff0 <I2C_MasterRequestRead+0x198>)
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f90d 	bl	80061f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	00010008 	.word	0x00010008
 8005ff0:	00010002 	.word	0x00010002

08005ff4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800600e:	4b4b      	ldr	r3, [pc, #300]	; (800613c <I2C_DMAAbort+0x148>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	08db      	lsrs	r3, r3, #3
 8006014:	4a4a      	ldr	r2, [pc, #296]	; (8006140 <I2C_DMAAbort+0x14c>)
 8006016:	fba2 2303 	umull	r2, r3, r2, r3
 800601a:	0a1a      	lsrs	r2, r3, #8
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	00da      	lsls	r2, r3, #3
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	f043 0220 	orr.w	r2, r3, #32
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800603a:	e00a      	b.n	8006052 <I2C_DMAAbort+0x5e>
    }
    count--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3b01      	subs	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800604c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006050:	d0ea      	beq.n	8006028 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605e:	2200      	movs	r2, #0
 8006060:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	2200      	movs	r2, #0
 8006070:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006080:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2200      	movs	r2, #0
 8006086:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006094:	2200      	movs	r2, #0
 8006096:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	2200      	movs	r2, #0
 80060a6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b60      	cmp	r3, #96	; 0x60
 80060c2:	d10e      	bne.n	80060e2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2200      	movs	r2, #0
 80060d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060da:	6978      	ldr	r0, [r7, #20]
 80060dc:	f7fe fd5d 	bl	8004b9a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060e0:	e027      	b.n	8006132 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060e2:	7cfb      	ldrb	r3, [r7, #19]
 80060e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060e8:	2b28      	cmp	r3, #40	; 0x28
 80060ea:	d117      	bne.n	800611c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800610a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2228      	movs	r2, #40	; 0x28
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800611a:	e007      	b.n	800612c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800612c:	6978      	ldr	r0, [r7, #20]
 800612e:	f7fe fd2a 	bl	8004b86 <HAL_I2C_ErrorCallback>
}
 8006132:	bf00      	nop
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000004 	.word	0x20000004
 8006140:	14f8b589 	.word	0x14f8b589

08006144 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	4613      	mov	r3, r2
 8006152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006154:	e025      	b.n	80061a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800615c:	d021      	beq.n	80061a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800615e:	f7fd f945 	bl	80033ec <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d302      	bcc.n	8006174 <I2C_WaitOnFlagUntilTimeout+0x30>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d116      	bne.n	80061a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f043 0220 	orr.w	r2, r3, #32
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e023      	b.n	80061ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	0c1b      	lsrs	r3, r3, #16
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d10d      	bne.n	80061c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	43da      	mvns	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4013      	ands	r3, r2
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	bf0c      	ite	eq
 80061be:	2301      	moveq	r3, #1
 80061c0:	2300      	movne	r3, #0
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	e00c      	b.n	80061e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	43da      	mvns	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4013      	ands	r3, r2
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	bf0c      	ite	eq
 80061da:	2301      	moveq	r3, #1
 80061dc:	2300      	movne	r3, #0
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d0b6      	beq.n	8006156 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
 80061fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006200:	e051      	b.n	80062a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800620c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006210:	d123      	bne.n	800625a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006220:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800622a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f043 0204 	orr.w	r2, r3, #4
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e046      	b.n	80062e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006260:	d021      	beq.n	80062a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006262:	f7fd f8c3 	bl	80033ec <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	429a      	cmp	r2, r3
 8006270:	d302      	bcc.n	8006278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d116      	bne.n	80062a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f043 0220 	orr.w	r2, r3, #32
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e020      	b.n	80062e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	0c1b      	lsrs	r3, r3, #16
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10c      	bne.n	80062ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	43da      	mvns	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4013      	ands	r3, r2
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bf14      	ite	ne
 80062c2:	2301      	movne	r3, #1
 80062c4:	2300      	moveq	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	e00b      	b.n	80062e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	43da      	mvns	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	4013      	ands	r3, r2
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bf14      	ite	ne
 80062dc:	2301      	movne	r3, #1
 80062de:	2300      	moveq	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d18d      	bne.n	8006202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062fc:	e02d      	b.n	800635a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f900 	bl	8006504 <I2C_IsAcknowledgeFailed>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e02d      	b.n	800636a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006314:	d021      	beq.n	800635a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006316:	f7fd f869 	bl	80033ec <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	429a      	cmp	r2, r3
 8006324:	d302      	bcc.n	800632c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d116      	bne.n	800635a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f043 0220 	orr.w	r2, r3, #32
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e007      	b.n	800636a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006364:	2b80      	cmp	r3, #128	; 0x80
 8006366:	d1ca      	bne.n	80062fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800637e:	e02d      	b.n	80063dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f8bf 	bl	8006504 <I2C_IsAcknowledgeFailed>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e02d      	b.n	80063ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006396:	d021      	beq.n	80063dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006398:	f7fd f828 	bl	80033ec <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d302      	bcc.n	80063ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d116      	bne.n	80063dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e007      	b.n	80063ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d1ca      	bne.n	8006380 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006400:	4b13      	ldr	r3, [pc, #76]	; (8006450 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	08db      	lsrs	r3, r3, #3
 8006406:	4a13      	ldr	r2, [pc, #76]	; (8006454 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006408:	fba2 2303 	umull	r2, r3, r2, r3
 800640c:	0a1a      	lsrs	r2, r3, #8
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3b01      	subs	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d107      	bne.n	8006432 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	f043 0220 	orr.w	r2, r3, #32
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e008      	b.n	8006444 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800643c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006440:	d0e9      	beq.n	8006416 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	20000004 	.word	0x20000004
 8006454:	14f8b589 	.word	0x14f8b589

08006458 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006464:	e042      	b.n	80064ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b10      	cmp	r3, #16
 8006472:	d119      	bne.n	80064a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f06f 0210 	mvn.w	r2, #16
 800647c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e029      	b.n	80064fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a8:	f7fc ffa0 	bl	80033ec <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d302      	bcc.n	80064be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d116      	bne.n	80064ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	f043 0220 	orr.w	r2, r3, #32
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e007      	b.n	80064fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f6:	2b40      	cmp	r3, #64	; 0x40
 80064f8:	d1b5      	bne.n	8006466 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651a:	d11b      	bne.n	8006554 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006524:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	f043 0204 	orr.w	r2, r3, #4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006572:	d103      	bne.n	800657c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800657a:	e007      	b.n	800658c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006584:	d102      	bne.n	800658c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2208      	movs	r2, #8
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e0cc      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065ac:	4b68      	ldr	r3, [pc, #416]	; (8006750 <HAL_RCC_ClockConfig+0x1b8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0307 	and.w	r3, r3, #7
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d90c      	bls.n	80065d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ba:	4b65      	ldr	r3, [pc, #404]	; (8006750 <HAL_RCC_ClockConfig+0x1b8>)
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	b2d2      	uxtb	r2, r2
 80065c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c2:	4b63      	ldr	r3, [pc, #396]	; (8006750 <HAL_RCC_ClockConfig+0x1b8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d001      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e0b8      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d020      	beq.n	8006622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065ec:	4b59      	ldr	r3, [pc, #356]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	4a58      	ldr	r2, [pc, #352]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 80065f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006604:	4b53      	ldr	r3, [pc, #332]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	4a52      	ldr	r2, [pc, #328]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 800660a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800660e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006610:	4b50      	ldr	r3, [pc, #320]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	494d      	ldr	r1, [pc, #308]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 800661e:	4313      	orrs	r3, r2
 8006620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d044      	beq.n	80066b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d107      	bne.n	8006646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006636:	4b47      	ldr	r3, [pc, #284]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d119      	bne.n	8006676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e07f      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2b02      	cmp	r3, #2
 800664c:	d003      	beq.n	8006656 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006652:	2b03      	cmp	r3, #3
 8006654:	d107      	bne.n	8006666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006656:	4b3f      	ldr	r3, [pc, #252]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d109      	bne.n	8006676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e06f      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006666:	4b3b      	ldr	r3, [pc, #236]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e067      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006676:	4b37      	ldr	r3, [pc, #220]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f023 0203 	bic.w	r2, r3, #3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	4934      	ldr	r1, [pc, #208]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 8006684:	4313      	orrs	r3, r2
 8006686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006688:	f7fc feb0 	bl	80033ec <HAL_GetTick>
 800668c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800668e:	e00a      	b.n	80066a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006690:	f7fc feac 	bl	80033ec <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	f241 3288 	movw	r2, #5000	; 0x1388
 800669e:	4293      	cmp	r3, r2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e04f      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066a6:	4b2b      	ldr	r3, [pc, #172]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 020c 	and.w	r2, r3, #12
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d1eb      	bne.n	8006690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066b8:	4b25      	ldr	r3, [pc, #148]	; (8006750 <HAL_RCC_ClockConfig+0x1b8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d20c      	bcs.n	80066e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066c6:	4b22      	ldr	r3, [pc, #136]	; (8006750 <HAL_RCC_ClockConfig+0x1b8>)
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ce:	4b20      	ldr	r3, [pc, #128]	; (8006750 <HAL_RCC_ClockConfig+0x1b8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d001      	beq.n	80066e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e032      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066ec:	4b19      	ldr	r3, [pc, #100]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	4916      	ldr	r1, [pc, #88]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b00      	cmp	r3, #0
 8006708:	d009      	beq.n	800671e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800670a:	4b12      	ldr	r3, [pc, #72]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	490e      	ldr	r1, [pc, #56]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 800671a:	4313      	orrs	r3, r2
 800671c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800671e:	f000 f889 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 8006722:	4602      	mov	r2, r0
 8006724:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <HAL_RCC_ClockConfig+0x1bc>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	091b      	lsrs	r3, r3, #4
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	490a      	ldr	r1, [pc, #40]	; (8006758 <HAL_RCC_ClockConfig+0x1c0>)
 8006730:	5ccb      	ldrb	r3, [r1, r3]
 8006732:	fa22 f303 	lsr.w	r3, r2, r3
 8006736:	4a09      	ldr	r2, [pc, #36]	; (800675c <HAL_RCC_ClockConfig+0x1c4>)
 8006738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800673a:	4b09      	ldr	r3, [pc, #36]	; (8006760 <HAL_RCC_ClockConfig+0x1c8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fc fe10 	bl	8003364 <HAL_InitTick>

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40023c00 	.word	0x40023c00
 8006754:	40023800 	.word	0x40023800
 8006758:	0802c41c 	.word	0x0802c41c
 800675c:	20000004 	.word	0x20000004
 8006760:	20000008 	.word	0x20000008

08006764 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08c      	sub	sp, #48	; 0x30
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d129      	bne.n	80067ca <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8006776:	2300      	movs	r3, #0
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	4b2b      	ldr	r3, [pc, #172]	; (8006828 <HAL_RCC_MCOConfig+0xc4>)
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	4a2a      	ldr	r2, [pc, #168]	; (8006828 <HAL_RCC_MCOConfig+0xc4>)
 8006780:	f043 0301 	orr.w	r3, r3, #1
 8006784:	6313      	str	r3, [r2, #48]	; 0x30
 8006786:	4b28      	ldr	r3, [pc, #160]	; (8006828 <HAL_RCC_MCOConfig+0xc4>)
 8006788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006798:	2302      	movs	r3, #2
 800679a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800679c:	2303      	movs	r3, #3
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80067a4:	2300      	movs	r3, #0
 80067a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80067a8:	f107 031c 	add.w	r3, r7, #28
 80067ac:	4619      	mov	r1, r3
 80067ae:	481f      	ldr	r0, [pc, #124]	; (800682c <HAL_RCC_MCOConfig+0xc8>)
 80067b0:	f7fd f9fa 	bl	8003ba8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80067b4:	4b1c      	ldr	r3, [pc, #112]	; (8006828 <HAL_RCC_MCOConfig+0xc4>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	430b      	orrs	r3, r1
 80067c2:	4919      	ldr	r1, [pc, #100]	; (8006828 <HAL_RCC_MCOConfig+0xc4>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80067c8:	e029      	b.n	800681e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	4b16      	ldr	r3, [pc, #88]	; (8006828 <HAL_RCC_MCOConfig+0xc4>)
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	4a15      	ldr	r2, [pc, #84]	; (8006828 <HAL_RCC_MCOConfig+0xc4>)
 80067d4:	f043 0304 	orr.w	r3, r3, #4
 80067d8:	6313      	str	r3, [r2, #48]	; 0x30
 80067da:	4b13      	ldr	r3, [pc, #76]	; (8006828 <HAL_RCC_MCOConfig+0xc4>)
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80067e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067ec:	2302      	movs	r3, #2
 80067ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067f0:	2303      	movs	r3, #3
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80067f8:	2300      	movs	r3, #0
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80067fc:	f107 031c 	add.w	r3, r7, #28
 8006800:	4619      	mov	r1, r3
 8006802:	480b      	ldr	r0, [pc, #44]	; (8006830 <HAL_RCC_MCOConfig+0xcc>)
 8006804:	f7fd f9d0 	bl	8003ba8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006808:	4b07      	ldr	r3, [pc, #28]	; (8006828 <HAL_RCC_MCOConfig+0xc4>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	00d9      	lsls	r1, r3, #3
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	430b      	orrs	r3, r1
 8006818:	4903      	ldr	r1, [pc, #12]	; (8006828 <HAL_RCC_MCOConfig+0xc4>)
 800681a:	4313      	orrs	r3, r2
 800681c:	608b      	str	r3, [r1, #8]
}
 800681e:	bf00      	nop
 8006820:	3730      	adds	r7, #48	; 0x30
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40023800 	.word	0x40023800
 800682c:	40020000 	.word	0x40020000
 8006830:	40020800 	.word	0x40020800

08006834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006834:	b5b0      	push	{r4, r5, r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800683a:	2100      	movs	r1, #0
 800683c:	6079      	str	r1, [r7, #4]
 800683e:	2100      	movs	r1, #0
 8006840:	60f9      	str	r1, [r7, #12]
 8006842:	2100      	movs	r1, #0
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006846:	2100      	movs	r1, #0
 8006848:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800684a:	4952      	ldr	r1, [pc, #328]	; (8006994 <HAL_RCC_GetSysClockFreq+0x160>)
 800684c:	6889      	ldr	r1, [r1, #8]
 800684e:	f001 010c 	and.w	r1, r1, #12
 8006852:	2908      	cmp	r1, #8
 8006854:	d00d      	beq.n	8006872 <HAL_RCC_GetSysClockFreq+0x3e>
 8006856:	2908      	cmp	r1, #8
 8006858:	f200 8094 	bhi.w	8006984 <HAL_RCC_GetSysClockFreq+0x150>
 800685c:	2900      	cmp	r1, #0
 800685e:	d002      	beq.n	8006866 <HAL_RCC_GetSysClockFreq+0x32>
 8006860:	2904      	cmp	r1, #4
 8006862:	d003      	beq.n	800686c <HAL_RCC_GetSysClockFreq+0x38>
 8006864:	e08e      	b.n	8006984 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006866:	4b4c      	ldr	r3, [pc, #304]	; (8006998 <HAL_RCC_GetSysClockFreq+0x164>)
 8006868:	60bb      	str	r3, [r7, #8]
       break;
 800686a:	e08e      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800686c:	4b4b      	ldr	r3, [pc, #300]	; (800699c <HAL_RCC_GetSysClockFreq+0x168>)
 800686e:	60bb      	str	r3, [r7, #8]
      break;
 8006870:	e08b      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006872:	4948      	ldr	r1, [pc, #288]	; (8006994 <HAL_RCC_GetSysClockFreq+0x160>)
 8006874:	6849      	ldr	r1, [r1, #4]
 8006876:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800687a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800687c:	4945      	ldr	r1, [pc, #276]	; (8006994 <HAL_RCC_GetSysClockFreq+0x160>)
 800687e:	6849      	ldr	r1, [r1, #4]
 8006880:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006884:	2900      	cmp	r1, #0
 8006886:	d024      	beq.n	80068d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006888:	4942      	ldr	r1, [pc, #264]	; (8006994 <HAL_RCC_GetSysClockFreq+0x160>)
 800688a:	6849      	ldr	r1, [r1, #4]
 800688c:	0989      	lsrs	r1, r1, #6
 800688e:	4608      	mov	r0, r1
 8006890:	f04f 0100 	mov.w	r1, #0
 8006894:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006898:	f04f 0500 	mov.w	r5, #0
 800689c:	ea00 0204 	and.w	r2, r0, r4
 80068a0:	ea01 0305 	and.w	r3, r1, r5
 80068a4:	493d      	ldr	r1, [pc, #244]	; (800699c <HAL_RCC_GetSysClockFreq+0x168>)
 80068a6:	fb01 f003 	mul.w	r0, r1, r3
 80068aa:	2100      	movs	r1, #0
 80068ac:	fb01 f102 	mul.w	r1, r1, r2
 80068b0:	1844      	adds	r4, r0, r1
 80068b2:	493a      	ldr	r1, [pc, #232]	; (800699c <HAL_RCC_GetSysClockFreq+0x168>)
 80068b4:	fba2 0101 	umull	r0, r1, r2, r1
 80068b8:	1863      	adds	r3, r4, r1
 80068ba:	4619      	mov	r1, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	461a      	mov	r2, r3
 80068c0:	f04f 0300 	mov.w	r3, #0
 80068c4:	f7fa f9dc 	bl	8000c80 <__aeabi_uldivmod>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4613      	mov	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	e04a      	b.n	8006968 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068d2:	4b30      	ldr	r3, [pc, #192]	; (8006994 <HAL_RCC_GetSysClockFreq+0x160>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	099b      	lsrs	r3, r3, #6
 80068d8:	461a      	mov	r2, r3
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80068e2:	f04f 0100 	mov.w	r1, #0
 80068e6:	ea02 0400 	and.w	r4, r2, r0
 80068ea:	ea03 0501 	and.w	r5, r3, r1
 80068ee:	4620      	mov	r0, r4
 80068f0:	4629      	mov	r1, r5
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	f04f 0300 	mov.w	r3, #0
 80068fa:	014b      	lsls	r3, r1, #5
 80068fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006900:	0142      	lsls	r2, r0, #5
 8006902:	4610      	mov	r0, r2
 8006904:	4619      	mov	r1, r3
 8006906:	1b00      	subs	r0, r0, r4
 8006908:	eb61 0105 	sbc.w	r1, r1, r5
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	018b      	lsls	r3, r1, #6
 8006916:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800691a:	0182      	lsls	r2, r0, #6
 800691c:	1a12      	subs	r2, r2, r0
 800691e:	eb63 0301 	sbc.w	r3, r3, r1
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f04f 0100 	mov.w	r1, #0
 800692a:	00d9      	lsls	r1, r3, #3
 800692c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006930:	00d0      	lsls	r0, r2, #3
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	1912      	adds	r2, r2, r4
 8006938:	eb45 0303 	adc.w	r3, r5, r3
 800693c:	f04f 0000 	mov.w	r0, #0
 8006940:	f04f 0100 	mov.w	r1, #0
 8006944:	0299      	lsls	r1, r3, #10
 8006946:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800694a:	0290      	lsls	r0, r2, #10
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4610      	mov	r0, r2
 8006952:	4619      	mov	r1, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	461a      	mov	r2, r3
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	f7fa f990 	bl	8000c80 <__aeabi_uldivmod>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4613      	mov	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006968:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <HAL_RCC_GetSysClockFreq+0x160>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	3301      	adds	r3, #1
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006980:	60bb      	str	r3, [r7, #8]
      break;
 8006982:	e002      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006984:	4b04      	ldr	r3, [pc, #16]	; (8006998 <HAL_RCC_GetSysClockFreq+0x164>)
 8006986:	60bb      	str	r3, [r7, #8]
      break;
 8006988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800698a:	68bb      	ldr	r3, [r7, #8]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bdb0      	pop	{r4, r5, r7, pc}
 8006994:	40023800 	.word	0x40023800
 8006998:	00f42400 	.word	0x00f42400
 800699c:	017d7840 	.word	0x017d7840

080069a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069a6:	681b      	ldr	r3, [r3, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000004 	.word	0x20000004

080069b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069bc:	f7ff fff0 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	0a9b      	lsrs	r3, r3, #10
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	4903      	ldr	r1, [pc, #12]	; (80069dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ce:	5ccb      	ldrb	r3, [r1, r3]
 80069d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40023800 	.word	0x40023800
 80069dc:	0802c42c 	.word	0x0802c42c

080069e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069e4:	f7ff ffdc 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	0b5b      	lsrs	r3, r3, #13
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	4903      	ldr	r1, [pc, #12]	; (8006a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069f6:	5ccb      	ldrb	r3, [r1, r3]
 80069f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40023800 	.word	0x40023800
 8006a04:	0802c42c 	.word	0x0802c42c

08006a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d010      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006a2c:	4b7a      	ldr	r3, [pc, #488]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a32:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	4977      	ldr	r1, [pc, #476]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d010      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006a5a:	4b6f      	ldr	r3, [pc, #444]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a60:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	496b      	ldr	r1, [pc, #428]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d022      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8006a88:	4b63      	ldr	r3, [pc, #396]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a96:	4960      	ldr	r1, [pc, #384]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ab2:	d10c      	bne.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006ab4:	4b58      	ldr	r3, [pc, #352]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	4954      	ldr	r1, [pc, #336]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d022      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8006ada:	4b4f      	ldr	r3, [pc, #316]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ae0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae8:	494b      	ldr	r1, [pc, #300]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006af8:	2301      	movs	r3, #1
 8006afa:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b04:	d10c      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006b06:	4b44      	ldr	r3, [pc, #272]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	021b      	lsls	r3, r3, #8
 8006b18:	493f      	ldr	r1, [pc, #252]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 808a 	beq.w	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	4b39      	ldr	r3, [pc, #228]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	4a38      	ldr	r2, [pc, #224]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b3e:	4b36      	ldr	r3, [pc, #216]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b4a:	4b34      	ldr	r3, [pc, #208]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a33      	ldr	r2, [pc, #204]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b56:	f7fc fc49 	bl	80033ec <HAL_GetTick>
 8006b5a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b5c:	e008      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b5e:	f7fc fc45 	bl	80033ec <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e1d1      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b70:	4b2a      	ldr	r3, [pc, #168]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0f0      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b7c:	4b26      	ldr	r3, [pc, #152]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b84:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d02f      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d028      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b9a:	4b1f      	ldr	r3, [pc, #124]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ba4:	4b1e      	ldr	r3, [pc, #120]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006baa:	4b1d      	ldr	r3, [pc, #116]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006bb0:	4a19      	ldr	r2, [pc, #100]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bb6:	4b18      	ldr	r3, [pc, #96]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d114      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006bc2:	f7fc fc13 	bl	80033ec <HAL_GetTick>
 8006bc6:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc8:	e00a      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bca:	f7fc fc0f 	bl	80033ec <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e199      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be0:	4b0d      	ldr	r3, [pc, #52]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0ee      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bf8:	d114      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006bfa:	4b07      	ldr	r3, [pc, #28]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0e:	4902      	ldr	r1, [pc, #8]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	608b      	str	r3, [r1, #8]
 8006c14:	e00c      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006c16:	bf00      	nop
 8006c18:	40023800 	.word	0x40023800
 8006c1c:	40007000 	.word	0x40007000
 8006c20:	42470e40 	.word	0x42470e40
 8006c24:	4b89      	ldr	r3, [pc, #548]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	4a88      	ldr	r2, [pc, #544]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c2e:	6093      	str	r3, [r2, #8]
 8006c30:	4b86      	ldr	r3, [pc, #536]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c3c:	4983      	ldr	r1, [pc, #524]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006c54:	4b7e      	ldr	r3, [pc, #504]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8006c56:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0310 	and.w	r3, r3, #16
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006c64:	4b79      	ldr	r3, [pc, #484]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c72:	4976      	ldr	r1, [pc, #472]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d011      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c86:	4b71      	ldr	r3, [pc, #452]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	496d      	ldr	r1, [pc, #436]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ca4:	d101      	bne.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00a      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006cb6:	4b65      	ldr	r3, [pc, #404]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cbc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc4:	4961      	ldr	r1, [pc, #388]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d004      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b80      	cmp	r3, #128	; 0x80
 8006cd8:	f040 80c6 	bne.w	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006cdc:	4b5d      	ldr	r3, [pc, #372]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ce2:	f7fc fb83 	bl	80033ec <HAL_GetTick>
 8006ce6:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ce8:	e008      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cea:	f7fc fb7f 	bl	80033ec <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e10b      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cfc:	4b53      	ldr	r3, [pc, #332]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1f0      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8006d08:	4a53      	ldr	r2, [pc, #332]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d023      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d019      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d004      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d4c:	d00e      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d019      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d115      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d6a:	d110      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	019b      	lsls	r3, r3, #6
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	061b      	lsls	r3, r3, #24
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	071b      	lsls	r3, r3, #28
 8006d86:	4931      	ldr	r1, [pc, #196]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d026      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d122      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006db6:	4b25      	ldr	r3, [pc, #148]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dbc:	0e1b      	lsrs	r3, r3, #24
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	019b      	lsls	r3, r3, #6
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	061b      	lsls	r3, r3, #24
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	071b      	lsls	r3, r3, #28
 8006ddc:	491b      	ldr	r1, [pc, #108]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8006de4:	4b19      	ldr	r3, [pc, #100]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dea:	f023 021f 	bic.w	r2, r3, #31
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	4915      	ldr	r1, [pc, #84]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d010      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	019b      	lsls	r3, r3, #6
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	061b      	lsls	r3, r3, #24
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	071b      	lsls	r3, r3, #28
 8006e22:	490a      	ldr	r1, [pc, #40]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e2a:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e30:	f7fc fadc 	bl	80033ec <HAL_GetTick>
 8006e34:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e36:	e011      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e38:	f7fc fad8 	bl	80033ec <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d90a      	bls.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e064      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006e4a:	bf00      	nop
 8006e4c:	40023800 	.word	0x40023800
 8006e50:	424711e0 	.word	0x424711e0
 8006e54:	42470068 	.word	0x42470068
 8006e58:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e5c:	4b2f      	ldr	r3, [pc, #188]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0e7      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e74:	4b29      	ldr	r3, [pc, #164]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e82:	4926      	ldr	r1, [pc, #152]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006e96:	4b21      	ldr	r3, [pc, #132]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e9c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	491d      	ldr	r1, [pc, #116]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006eb8:	4b18      	ldr	r3, [pc, #96]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ebe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec6:	4915      	ldr	r1, [pc, #84]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8006eda:	4b10      	ldr	r3, [pc, #64]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee8:	490c      	ldr	r1, [pc, #48]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006efc:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f02:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0a:	4904      	ldr	r1, [pc, #16]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3720      	adds	r7, #32
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	40023800 	.word	0x40023800

08006f20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e270      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d075      	beq.n	800702a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006f3e:	4ba3      	ldr	r3, [pc, #652]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 030c 	and.w	r3, r3, #12
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d00c      	beq.n	8006f64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f4a:	4ba0      	ldr	r3, [pc, #640]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006f52:	2b08      	cmp	r3, #8
 8006f54:	d112      	bne.n	8006f7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f56:	4b9d      	ldr	r3, [pc, #628]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f62:	d10b      	bne.n	8006f7c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f64:	4b99      	ldr	r3, [pc, #612]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d05b      	beq.n	8007028 <HAL_RCC_OscConfig+0x108>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d157      	bne.n	8007028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e24b      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f84:	d106      	bne.n	8006f94 <HAL_RCC_OscConfig+0x74>
 8006f86:	4b91      	ldr	r3, [pc, #580]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a90      	ldr	r2, [pc, #576]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	e01d      	b.n	8006fd0 <HAL_RCC_OscConfig+0xb0>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f9c:	d10c      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x98>
 8006f9e:	4b8b      	ldr	r3, [pc, #556]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a8a      	ldr	r2, [pc, #552]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fa8:	6013      	str	r3, [r2, #0]
 8006faa:	4b88      	ldr	r3, [pc, #544]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a87      	ldr	r2, [pc, #540]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	e00b      	b.n	8006fd0 <HAL_RCC_OscConfig+0xb0>
 8006fb8:	4b84      	ldr	r3, [pc, #528]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a83      	ldr	r2, [pc, #524]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	4b81      	ldr	r3, [pc, #516]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a80      	ldr	r2, [pc, #512]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d013      	beq.n	8007000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd8:	f7fc fa08 	bl	80033ec <HAL_GetTick>
 8006fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fde:	e008      	b.n	8006ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fe0:	f7fc fa04 	bl	80033ec <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	2b64      	cmp	r3, #100	; 0x64
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e210      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff2:	4b76      	ldr	r3, [pc, #472]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0f0      	beq.n	8006fe0 <HAL_RCC_OscConfig+0xc0>
 8006ffe:	e014      	b.n	800702a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007000:	f7fc f9f4 	bl	80033ec <HAL_GetTick>
 8007004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007006:	e008      	b.n	800701a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007008:	f7fc f9f0 	bl	80033ec <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	2b64      	cmp	r3, #100	; 0x64
 8007014:	d901      	bls.n	800701a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e1fc      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800701a:	4b6c      	ldr	r3, [pc, #432]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1f0      	bne.n	8007008 <HAL_RCC_OscConfig+0xe8>
 8007026:	e000      	b.n	800702a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d063      	beq.n	80070fe <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007036:	4b65      	ldr	r3, [pc, #404]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 030c 	and.w	r3, r3, #12
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00b      	beq.n	800705a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007042:	4b62      	ldr	r3, [pc, #392]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800704a:	2b08      	cmp	r3, #8
 800704c:	d11c      	bne.n	8007088 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800704e:	4b5f      	ldr	r3, [pc, #380]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d116      	bne.n	8007088 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800705a:	4b5c      	ldr	r3, [pc, #368]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <HAL_RCC_OscConfig+0x152>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d001      	beq.n	8007072 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e1d0      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007072:	4b56      	ldr	r3, [pc, #344]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	4952      	ldr	r1, [pc, #328]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8007082:	4313      	orrs	r3, r2
 8007084:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007086:	e03a      	b.n	80070fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d020      	beq.n	80070d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007090:	4b4f      	ldr	r3, [pc, #316]	; (80071d0 <HAL_RCC_OscConfig+0x2b0>)
 8007092:	2201      	movs	r2, #1
 8007094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007096:	f7fc f9a9 	bl	80033ec <HAL_GetTick>
 800709a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800709c:	e008      	b.n	80070b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800709e:	f7fc f9a5 	bl	80033ec <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d901      	bls.n	80070b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e1b1      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070b0:	4b46      	ldr	r3, [pc, #280]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0f0      	beq.n	800709e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070bc:	4b43      	ldr	r3, [pc, #268]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	4940      	ldr	r1, [pc, #256]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	600b      	str	r3, [r1, #0]
 80070d0:	e015      	b.n	80070fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070d2:	4b3f      	ldr	r3, [pc, #252]	; (80071d0 <HAL_RCC_OscConfig+0x2b0>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d8:	f7fc f988 	bl	80033ec <HAL_GetTick>
 80070dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070de:	e008      	b.n	80070f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070e0:	f7fc f984 	bl	80033ec <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e190      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070f2:	4b36      	ldr	r3, [pc, #216]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1f0      	bne.n	80070e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0308 	and.w	r3, r3, #8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d030      	beq.n	800716c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d016      	beq.n	8007140 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007112:	4b30      	ldr	r3, [pc, #192]	; (80071d4 <HAL_RCC_OscConfig+0x2b4>)
 8007114:	2201      	movs	r2, #1
 8007116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007118:	f7fc f968 	bl	80033ec <HAL_GetTick>
 800711c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007120:	f7fc f964 	bl	80033ec <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e170      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007132:	4b26      	ldr	r3, [pc, #152]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8007134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0f0      	beq.n	8007120 <HAL_RCC_OscConfig+0x200>
 800713e:	e015      	b.n	800716c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007140:	4b24      	ldr	r3, [pc, #144]	; (80071d4 <HAL_RCC_OscConfig+0x2b4>)
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007146:	f7fc f951 	bl	80033ec <HAL_GetTick>
 800714a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800714c:	e008      	b.n	8007160 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800714e:	f7fc f94d 	bl	80033ec <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e159      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007160:	4b1a      	ldr	r3, [pc, #104]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8007162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1f0      	bne.n	800714e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 80a0 	beq.w	80072ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800717a:	2300      	movs	r3, #0
 800717c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800717e:	4b13      	ldr	r3, [pc, #76]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10f      	bne.n	80071aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800718a:	2300      	movs	r3, #0
 800718c:	60bb      	str	r3, [r7, #8]
 800718e:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	4a0e      	ldr	r2, [pc, #56]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 8007194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007198:	6413      	str	r3, [r2, #64]	; 0x40
 800719a:	4b0c      	ldr	r3, [pc, #48]	; (80071cc <HAL_RCC_OscConfig+0x2ac>)
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a2:	60bb      	str	r3, [r7, #8]
 80071a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071a6:	2301      	movs	r3, #1
 80071a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071aa:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <HAL_RCC_OscConfig+0x2b8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d121      	bne.n	80071fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071b6:	4b08      	ldr	r3, [pc, #32]	; (80071d8 <HAL_RCC_OscConfig+0x2b8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a07      	ldr	r2, [pc, #28]	; (80071d8 <HAL_RCC_OscConfig+0x2b8>)
 80071bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071c2:	f7fc f913 	bl	80033ec <HAL_GetTick>
 80071c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c8:	e011      	b.n	80071ee <HAL_RCC_OscConfig+0x2ce>
 80071ca:	bf00      	nop
 80071cc:	40023800 	.word	0x40023800
 80071d0:	42470000 	.word	0x42470000
 80071d4:	42470e80 	.word	0x42470e80
 80071d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071dc:	f7fc f906 	bl	80033ec <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e112      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ee:	4b8b      	ldr	r3, [pc, #556]	; (800741c <HAL_RCC_OscConfig+0x4fc>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0f0      	beq.n	80071dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d106      	bne.n	8007210 <HAL_RCC_OscConfig+0x2f0>
 8007202:	4b87      	ldr	r3, [pc, #540]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 8007204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007206:	4a86      	ldr	r2, [pc, #536]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 8007208:	f043 0301 	orr.w	r3, r3, #1
 800720c:	6713      	str	r3, [r2, #112]	; 0x70
 800720e:	e01c      	b.n	800724a <HAL_RCC_OscConfig+0x32a>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	2b05      	cmp	r3, #5
 8007216:	d10c      	bne.n	8007232 <HAL_RCC_OscConfig+0x312>
 8007218:	4b81      	ldr	r3, [pc, #516]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 800721a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721c:	4a80      	ldr	r2, [pc, #512]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 800721e:	f043 0304 	orr.w	r3, r3, #4
 8007222:	6713      	str	r3, [r2, #112]	; 0x70
 8007224:	4b7e      	ldr	r3, [pc, #504]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 8007226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007228:	4a7d      	ldr	r2, [pc, #500]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 800722a:	f043 0301 	orr.w	r3, r3, #1
 800722e:	6713      	str	r3, [r2, #112]	; 0x70
 8007230:	e00b      	b.n	800724a <HAL_RCC_OscConfig+0x32a>
 8007232:	4b7b      	ldr	r3, [pc, #492]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	4a7a      	ldr	r2, [pc, #488]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 8007238:	f023 0301 	bic.w	r3, r3, #1
 800723c:	6713      	str	r3, [r2, #112]	; 0x70
 800723e:	4b78      	ldr	r3, [pc, #480]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 8007240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007242:	4a77      	ldr	r2, [pc, #476]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 8007244:	f023 0304 	bic.w	r3, r3, #4
 8007248:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d015      	beq.n	800727e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007252:	f7fc f8cb 	bl	80033ec <HAL_GetTick>
 8007256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007258:	e00a      	b.n	8007270 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800725a:	f7fc f8c7 	bl	80033ec <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	f241 3288 	movw	r2, #5000	; 0x1388
 8007268:	4293      	cmp	r3, r2
 800726a:	d901      	bls.n	8007270 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e0d1      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007270:	4b6b      	ldr	r3, [pc, #428]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 8007272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0ee      	beq.n	800725a <HAL_RCC_OscConfig+0x33a>
 800727c:	e014      	b.n	80072a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800727e:	f7fc f8b5 	bl	80033ec <HAL_GetTick>
 8007282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007284:	e00a      	b.n	800729c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007286:	f7fc f8b1 	bl	80033ec <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	f241 3288 	movw	r2, #5000	; 0x1388
 8007294:	4293      	cmp	r3, r2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e0bb      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800729c:	4b60      	ldr	r3, [pc, #384]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 800729e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1ee      	bne.n	8007286 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d105      	bne.n	80072ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ae:	4b5c      	ldr	r3, [pc, #368]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	4a5b      	ldr	r2, [pc, #364]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 80072b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 80a7 	beq.w	8007412 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072c4:	4b56      	ldr	r3, [pc, #344]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f003 030c 	and.w	r3, r3, #12
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d060      	beq.n	8007392 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d145      	bne.n	8007364 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072d8:	4b52      	ldr	r3, [pc, #328]	; (8007424 <HAL_RCC_OscConfig+0x504>)
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072de:	f7fc f885 	bl	80033ec <HAL_GetTick>
 80072e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072e4:	e008      	b.n	80072f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072e6:	f7fc f881 	bl	80033ec <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e08d      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072f8:	4b49      	ldr	r3, [pc, #292]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1f0      	bne.n	80072e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69da      	ldr	r2, [r3, #28]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	019b      	lsls	r3, r3, #6
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	3b01      	subs	r3, #1
 800731e:	041b      	lsls	r3, r3, #16
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	061b      	lsls	r3, r3, #24
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732e:	071b      	lsls	r3, r3, #28
 8007330:	493b      	ldr	r1, [pc, #236]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 8007332:	4313      	orrs	r3, r2
 8007334:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007336:	4b3b      	ldr	r3, [pc, #236]	; (8007424 <HAL_RCC_OscConfig+0x504>)
 8007338:	2201      	movs	r2, #1
 800733a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733c:	f7fc f856 	bl	80033ec <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007344:	f7fc f852 	bl	80033ec <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e05e      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007356:	4b32      	ldr	r3, [pc, #200]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0f0      	beq.n	8007344 <HAL_RCC_OscConfig+0x424>
 8007362:	e056      	b.n	8007412 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007364:	4b2f      	ldr	r3, [pc, #188]	; (8007424 <HAL_RCC_OscConfig+0x504>)
 8007366:	2200      	movs	r2, #0
 8007368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736a:	f7fc f83f 	bl	80033ec <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007370:	e008      	b.n	8007384 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007372:	f7fc f83b 	bl	80033ec <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e047      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007384:	4b26      	ldr	r3, [pc, #152]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1f0      	bne.n	8007372 <HAL_RCC_OscConfig+0x452>
 8007390:	e03f      	b.n	8007412 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e03a      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800739e:	4b20      	ldr	r3, [pc, #128]	; (8007420 <HAL_RCC_OscConfig+0x500>)
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d030      	beq.n	800740e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d129      	bne.n	800740e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d122      	bne.n	800740e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073ce:	4013      	ands	r3, r2
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d119      	bne.n	800740e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e4:	085b      	lsrs	r3, r3, #1
 80073e6:	3b01      	subs	r3, #1
 80073e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d10f      	bne.n	800740e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d107      	bne.n	800740e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007408:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800740a:	429a      	cmp	r2, r3
 800740c:	d001      	beq.n	8007412 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e000      	b.n	8007414 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	40007000 	.word	0x40007000
 8007420:	40023800 	.word	0x40023800
 8007424:	42470060 	.word	0x42470060

08007428 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e034      	b.n	80074a8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f7fa f89a 	bl	800158c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3308      	adds	r3, #8
 8007460:	4619      	mov	r1, r3
 8007462:	4610      	mov	r0, r2
 8007464:	f001 f8be 	bl	80085e4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	461a      	mov	r2, r3
 8007472:	68b9      	ldr	r1, [r7, #8]
 8007474:	f001 f926 	bl	80086c4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6858      	ldr	r0, [r3, #4]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	f001 f971 	bl	800876c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	6892      	ldr	r2, [r2, #8]
 8007492:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	6892      	ldr	r2, [r2, #8]
 800749e:	f041 0101 	orr.w	r1, r1, #1
 80074a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e041      	b.n	8007546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fb fb42 	bl	8002b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f000 f8d8 	bl	80076a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b01      	cmp	r3, #1
 8007562:	d001      	beq.n	8007568 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e046      	b.n	80075f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a23      	ldr	r2, [pc, #140]	; (8007604 <HAL_TIM_Base_Start+0xb4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d022      	beq.n	80075c0 <HAL_TIM_Base_Start+0x70>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007582:	d01d      	beq.n	80075c0 <HAL_TIM_Base_Start+0x70>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1f      	ldr	r2, [pc, #124]	; (8007608 <HAL_TIM_Base_Start+0xb8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d018      	beq.n	80075c0 <HAL_TIM_Base_Start+0x70>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1e      	ldr	r2, [pc, #120]	; (800760c <HAL_TIM_Base_Start+0xbc>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d013      	beq.n	80075c0 <HAL_TIM_Base_Start+0x70>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1c      	ldr	r2, [pc, #112]	; (8007610 <HAL_TIM_Base_Start+0xc0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00e      	beq.n	80075c0 <HAL_TIM_Base_Start+0x70>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1b      	ldr	r2, [pc, #108]	; (8007614 <HAL_TIM_Base_Start+0xc4>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d009      	beq.n	80075c0 <HAL_TIM_Base_Start+0x70>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a19      	ldr	r2, [pc, #100]	; (8007618 <HAL_TIM_Base_Start+0xc8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d004      	beq.n	80075c0 <HAL_TIM_Base_Start+0x70>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a18      	ldr	r2, [pc, #96]	; (800761c <HAL_TIM_Base_Start+0xcc>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d111      	bne.n	80075e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b06      	cmp	r3, #6
 80075d0:	d010      	beq.n	80075f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f042 0201 	orr.w	r2, r2, #1
 80075e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e2:	e007      	b.n	80075f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 0201 	orr.w	r2, r2, #1
 80075f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40010000 	.word	0x40010000
 8007608:	40000400 	.word	0x40000400
 800760c:	40000800 	.word	0x40000800
 8007610:	40000c00 	.word	0x40000c00
 8007614:	40010400 	.word	0x40010400
 8007618:	40014000 	.word	0x40014000
 800761c:	40001800 	.word	0x40001800

08007620 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007630:	2b01      	cmp	r3, #1
 8007632:	d101      	bne.n	8007638 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007634:	2302      	movs	r3, #2
 8007636:	e031      	b.n	800769c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f8ca 	bl	80077e4 <TIM_SlaveTimer_SetConfig>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d009      	beq.n	800766a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e018      	b.n	800769c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007678:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007688:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a40      	ldr	r2, [pc, #256]	; (80077b8 <TIM_Base_SetConfig+0x114>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d013      	beq.n	80076e4 <TIM_Base_SetConfig+0x40>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c2:	d00f      	beq.n	80076e4 <TIM_Base_SetConfig+0x40>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a3d      	ldr	r2, [pc, #244]	; (80077bc <TIM_Base_SetConfig+0x118>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d00b      	beq.n	80076e4 <TIM_Base_SetConfig+0x40>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a3c      	ldr	r2, [pc, #240]	; (80077c0 <TIM_Base_SetConfig+0x11c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d007      	beq.n	80076e4 <TIM_Base_SetConfig+0x40>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a3b      	ldr	r2, [pc, #236]	; (80077c4 <TIM_Base_SetConfig+0x120>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d003      	beq.n	80076e4 <TIM_Base_SetConfig+0x40>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a3a      	ldr	r2, [pc, #232]	; (80077c8 <TIM_Base_SetConfig+0x124>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d108      	bne.n	80076f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a2f      	ldr	r2, [pc, #188]	; (80077b8 <TIM_Base_SetConfig+0x114>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d02b      	beq.n	8007756 <TIM_Base_SetConfig+0xb2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007704:	d027      	beq.n	8007756 <TIM_Base_SetConfig+0xb2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a2c      	ldr	r2, [pc, #176]	; (80077bc <TIM_Base_SetConfig+0x118>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d023      	beq.n	8007756 <TIM_Base_SetConfig+0xb2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a2b      	ldr	r2, [pc, #172]	; (80077c0 <TIM_Base_SetConfig+0x11c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d01f      	beq.n	8007756 <TIM_Base_SetConfig+0xb2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a2a      	ldr	r2, [pc, #168]	; (80077c4 <TIM_Base_SetConfig+0x120>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d01b      	beq.n	8007756 <TIM_Base_SetConfig+0xb2>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a29      	ldr	r2, [pc, #164]	; (80077c8 <TIM_Base_SetConfig+0x124>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d017      	beq.n	8007756 <TIM_Base_SetConfig+0xb2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a28      	ldr	r2, [pc, #160]	; (80077cc <TIM_Base_SetConfig+0x128>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d013      	beq.n	8007756 <TIM_Base_SetConfig+0xb2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a27      	ldr	r2, [pc, #156]	; (80077d0 <TIM_Base_SetConfig+0x12c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00f      	beq.n	8007756 <TIM_Base_SetConfig+0xb2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a26      	ldr	r2, [pc, #152]	; (80077d4 <TIM_Base_SetConfig+0x130>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00b      	beq.n	8007756 <TIM_Base_SetConfig+0xb2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a25      	ldr	r2, [pc, #148]	; (80077d8 <TIM_Base_SetConfig+0x134>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d007      	beq.n	8007756 <TIM_Base_SetConfig+0xb2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a24      	ldr	r2, [pc, #144]	; (80077dc <TIM_Base_SetConfig+0x138>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d003      	beq.n	8007756 <TIM_Base_SetConfig+0xb2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a23      	ldr	r2, [pc, #140]	; (80077e0 <TIM_Base_SetConfig+0x13c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d108      	bne.n	8007768 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800775c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	4313      	orrs	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a0a      	ldr	r2, [pc, #40]	; (80077b8 <TIM_Base_SetConfig+0x114>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d003      	beq.n	800779c <TIM_Base_SetConfig+0xf8>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a0c      	ldr	r2, [pc, #48]	; (80077c8 <TIM_Base_SetConfig+0x124>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d103      	bne.n	80077a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	691a      	ldr	r2, [r3, #16]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	615a      	str	r2, [r3, #20]
}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	40010000 	.word	0x40010000
 80077bc:	40000400 	.word	0x40000400
 80077c0:	40000800 	.word	0x40000800
 80077c4:	40000c00 	.word	0x40000c00
 80077c8:	40010400 	.word	0x40010400
 80077cc:	40014000 	.word	0x40014000
 80077d0:	40014400 	.word	0x40014400
 80077d4:	40014800 	.word	0x40014800
 80077d8:	40001800 	.word	0x40001800
 80077dc:	40001c00 	.word	0x40001c00
 80077e0:	40002000 	.word	0x40002000

080077e4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f023 0307 	bic.w	r3, r3, #7
 800780e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b70      	cmp	r3, #112	; 0x70
 8007828:	d01a      	beq.n	8007860 <TIM_SlaveTimer_SetConfig+0x7c>
 800782a:	2b70      	cmp	r3, #112	; 0x70
 800782c:	d860      	bhi.n	80078f0 <TIM_SlaveTimer_SetConfig+0x10c>
 800782e:	2b60      	cmp	r3, #96	; 0x60
 8007830:	d054      	beq.n	80078dc <TIM_SlaveTimer_SetConfig+0xf8>
 8007832:	2b60      	cmp	r3, #96	; 0x60
 8007834:	d85c      	bhi.n	80078f0 <TIM_SlaveTimer_SetConfig+0x10c>
 8007836:	2b50      	cmp	r3, #80	; 0x50
 8007838:	d046      	beq.n	80078c8 <TIM_SlaveTimer_SetConfig+0xe4>
 800783a:	2b50      	cmp	r3, #80	; 0x50
 800783c:	d858      	bhi.n	80078f0 <TIM_SlaveTimer_SetConfig+0x10c>
 800783e:	2b40      	cmp	r3, #64	; 0x40
 8007840:	d019      	beq.n	8007876 <TIM_SlaveTimer_SetConfig+0x92>
 8007842:	2b40      	cmp	r3, #64	; 0x40
 8007844:	d854      	bhi.n	80078f0 <TIM_SlaveTimer_SetConfig+0x10c>
 8007846:	2b30      	cmp	r3, #48	; 0x30
 8007848:	d054      	beq.n	80078f4 <TIM_SlaveTimer_SetConfig+0x110>
 800784a:	2b30      	cmp	r3, #48	; 0x30
 800784c:	d850      	bhi.n	80078f0 <TIM_SlaveTimer_SetConfig+0x10c>
 800784e:	2b20      	cmp	r3, #32
 8007850:	d050      	beq.n	80078f4 <TIM_SlaveTimer_SetConfig+0x110>
 8007852:	2b20      	cmp	r3, #32
 8007854:	d84c      	bhi.n	80078f0 <TIM_SlaveTimer_SetConfig+0x10c>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d04c      	beq.n	80078f4 <TIM_SlaveTimer_SetConfig+0x110>
 800785a:	2b10      	cmp	r3, #16
 800785c:	d04a      	beq.n	80078f4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800785e:	e047      	b.n	80078f0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6818      	ldr	r0, [r3, #0]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	68d9      	ldr	r1, [r3, #12]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f000 f8a5 	bl	80079be <TIM_ETR_SetConfig>
      break;
 8007874:	e03f      	b.n	80078f6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b05      	cmp	r3, #5
 800787c:	d101      	bne.n	8007882 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e03a      	b.n	80078f8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6a1a      	ldr	r2, [r3, #32]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0201 	bic.w	r2, r2, #1
 8007898:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078a8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	621a      	str	r2, [r3, #32]
      break;
 80078c6:	e016      	b.n	80078f6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6818      	ldr	r0, [r3, #0]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	6899      	ldr	r1, [r3, #8]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	461a      	mov	r2, r3
 80078d6:	f000 f813 	bl	8007900 <TIM_TI1_ConfigInputStage>
      break;
 80078da:	e00c      	b.n	80078f6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	6899      	ldr	r1, [r3, #8]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	461a      	mov	r2, r3
 80078ea:	f000 f838 	bl	800795e <TIM_TI2_ConfigInputStage>
      break;
 80078ee:	e002      	b.n	80078f6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80078f0:	bf00      	nop
 80078f2:	e000      	b.n	80078f6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80078f4:	bf00      	nop
  }
  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	f023 0201 	bic.w	r2, r3, #1
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800792a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4313      	orrs	r3, r2
 8007934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f023 030a 	bic.w	r3, r3, #10
 800793c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	4313      	orrs	r3, r2
 8007944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	621a      	str	r2, [r3, #32]
}
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800795e:	b480      	push	{r7}
 8007960:	b087      	sub	sp, #28
 8007962:	af00      	add	r7, sp, #0
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	f023 0210 	bic.w	r2, r3, #16
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	031b      	lsls	r3, r3, #12
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	4313      	orrs	r3, r2
 8007992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800799a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	621a      	str	r2, [r3, #32]
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079be:	b480      	push	{r7}
 80079c0:	b087      	sub	sp, #28
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	607a      	str	r2, [r7, #4]
 80079ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	021a      	lsls	r2, r3, #8
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	431a      	orrs	r2, r3
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	609a      	str	r2, [r3, #8]
}
 80079f2:	bf00      	nop
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
	...

08007a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e05a      	b.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a21      	ldr	r2, [pc, #132]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d022      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a64:	d01d      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a1d      	ldr	r2, [pc, #116]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d018      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a1b      	ldr	r2, [pc, #108]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d013      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a1a      	ldr	r2, [pc, #104]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00e      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a18      	ldr	r2, [pc, #96]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d009      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a17      	ldr	r2, [pc, #92]	; (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d004      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a15      	ldr	r2, [pc, #84]	; (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d10c      	bne.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	40010000 	.word	0x40010000
 8007ae0:	40000400 	.word	0x40000400
 8007ae4:	40000800 	.word	0x40000800
 8007ae8:	40000c00 	.word	0x40000c00
 8007aec:	40010400 	.word	0x40010400
 8007af0:	40014000 	.word	0x40014000
 8007af4:	40001800 	.word	0x40001800

08007af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e03f      	b.n	8007b8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fb fb82 	bl	8003228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2224      	movs	r2, #36	; 0x24
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fb79 	bl	8008234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	695a      	ldr	r2, [r3, #20]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2220      	movs	r2, #32
 8007b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b085      	sub	sp, #20
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b20      	cmp	r3, #32
 8007baa:	d130      	bne.n	8007c0e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <HAL_UART_Transmit_IT+0x26>
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e029      	b.n	8007c10 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d101      	bne.n	8007bca <HAL_UART_Transmit_IT+0x38>
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	e022      	b.n	8007c10 <HAL_UART_Transmit_IT+0x7e>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	88fa      	ldrh	r2, [r7, #6]
 8007bdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	88fa      	ldrh	r2, [r7, #6]
 8007be2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2221      	movs	r2, #33	; 0x21
 8007bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c08:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e000      	b.n	8007c10 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007c0e:	2302      	movs	r3, #2
  }
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08a      	sub	sp, #40	; 0x28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10d      	bne.n	8007c6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	f003 0320 	and.w	r3, r3, #32
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d008      	beq.n	8007c6e <HAL_UART_IRQHandler+0x52>
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa4d 	bl	8008106 <UART_Receive_IT>
      return;
 8007c6c:	e17c      	b.n	8007f68 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 80b1 	beq.w	8007dd8 <HAL_UART_IRQHandler+0x1bc>
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d105      	bne.n	8007c8c <HAL_UART_IRQHandler+0x70>
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80a6 	beq.w	8007dd8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <HAL_UART_IRQHandler+0x90>
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca4:	f043 0201 	orr.w	r2, r3, #1
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <HAL_UART_IRQHandler+0xb0>
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc4:	f043 0202 	orr.w	r2, r3, #2
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <HAL_UART_IRQHandler+0xd0>
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d005      	beq.n	8007cec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce4:	f043 0204 	orr.w	r2, r3, #4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	f003 0308 	and.w	r3, r3, #8
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00f      	beq.n	8007d16 <HAL_UART_IRQHandler+0xfa>
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	f003 0320 	and.w	r3, r3, #32
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d104      	bne.n	8007d0a <HAL_UART_IRQHandler+0xee>
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	f043 0208 	orr.w	r2, r3, #8
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 811f 	beq.w	8007f5e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d007      	beq.n	8007d3a <HAL_UART_IRQHandler+0x11e>
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	f003 0320 	and.w	r3, r3, #32
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f9e6 	bl	8008106 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d44:	2b40      	cmp	r3, #64	; 0x40
 8007d46:	bf0c      	ite	eq
 8007d48:	2301      	moveq	r3, #1
 8007d4a:	2300      	movne	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d54:	f003 0308 	and.w	r3, r3, #8
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d102      	bne.n	8007d62 <HAL_UART_IRQHandler+0x146>
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d031      	beq.n	8007dc6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f926 	bl	8007fb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d72:	2b40      	cmp	r3, #64	; 0x40
 8007d74:	d123      	bne.n	8007dbe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	695a      	ldr	r2, [r3, #20]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d84:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d013      	beq.n	8007db6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d92:	4a77      	ldr	r2, [pc, #476]	; (8007f70 <HAL_UART_IRQHandler+0x354>)
 8007d94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fb fdf3 	bl	8003986 <HAL_DMA_Abort_IT>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d016      	beq.n	8007dd4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007db0:	4610      	mov	r0, r2
 8007db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db4:	e00e      	b.n	8007dd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f8e6 	bl	8007f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dbc:	e00a      	b.n	8007dd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f8e2 	bl	8007f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc4:	e006      	b.n	8007dd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f8de 	bl	8007f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007dd2:	e0c4      	b.n	8007f5e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd4:	bf00      	nop
    return;
 8007dd6:	e0c2      	b.n	8007f5e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	f040 80a2 	bne.w	8007f26 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 809c 	beq.w	8007f26 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 8096 	beq.w	8007f26 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1a:	2b40      	cmp	r3, #64	; 0x40
 8007e1c:	d14f      	bne.n	8007ebe <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007e28:	8a3b      	ldrh	r3, [r7, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 8099 	beq.w	8007f62 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e34:	8a3a      	ldrh	r2, [r7, #16]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	f080 8093 	bcs.w	8007f62 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	8a3a      	ldrh	r2, [r7, #16]
 8007e40:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e4c:	d02b      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e5c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	695a      	ldr	r2, [r3, #20]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0201 	bic.w	r2, r2, #1
 8007e6c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	695a      	ldr	r2, [r3, #20]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e7c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68da      	ldr	r2, [r3, #12]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0210 	bic.w	r2, r2, #16
 8007e9a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fb fd00 	bl	80038a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f870 	bl	8007f9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007ebc:	e051      	b.n	8007f62 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d047      	beq.n	8007f66 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007ed6:	8a7b      	ldrh	r3, [r7, #18]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d044      	beq.n	8007f66 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007eea:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695a      	ldr	r2, [r3, #20]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 0201 	bic.w	r2, r2, #1
 8007efa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0210 	bic.w	r2, r2, #16
 8007f18:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f1a:	8a7b      	ldrh	r3, [r7, #18]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f83c 	bl	8007f9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007f24:	e01f      	b.n	8007f66 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d008      	beq.n	8007f42 <HAL_UART_IRQHandler+0x326>
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f87b 	bl	8008036 <UART_Transmit_IT>
    return;
 8007f40:	e012      	b.n	8007f68 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00d      	beq.n	8007f68 <HAL_UART_IRQHandler+0x34c>
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d008      	beq.n	8007f68 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f8bd 	bl	80080d6 <UART_EndTransmit_IT>
    return;
 8007f5c:	e004      	b.n	8007f68 <HAL_UART_IRQHandler+0x34c>
    return;
 8007f5e:	bf00      	nop
 8007f60:	e002      	b.n	8007f68 <HAL_UART_IRQHandler+0x34c>
      return;
 8007f62:	bf00      	nop
 8007f64:	e000      	b.n	8007f68 <HAL_UART_IRQHandler+0x34c>
      return;
 8007f66:	bf00      	nop
  }
}
 8007f68:	3728      	adds	r7, #40	; 0x28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	0800800f 	.word	0x0800800f

08007f74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	695a      	ldr	r2, [r3, #20]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0201 	bic.w	r2, r2, #1
 8007fda:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d107      	bne.n	8007ff4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 0210 	bic.w	r2, r2, #16
 8007ff2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f7ff ffad 	bl	8007f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b21      	cmp	r3, #33	; 0x21
 8008048:	d13e      	bne.n	80080c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008052:	d114      	bne.n	800807e <UART_Transmit_IT+0x48>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d110      	bne.n	800807e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008070:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	1c9a      	adds	r2, r3, #2
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	621a      	str	r2, [r3, #32]
 800807c:	e008      	b.n	8008090 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	1c59      	adds	r1, r3, #1
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	6211      	str	r1, [r2, #32]
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008094:	b29b      	uxth	r3, r3
 8008096:	3b01      	subs	r3, #1
 8008098:	b29b      	uxth	r3, r3
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	4619      	mov	r1, r3
 800809e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10f      	bne.n	80080c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68da      	ldr	r2, [r3, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	e000      	b.n	80080ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080c8:	2302      	movs	r3, #2
  }
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b082      	sub	sp, #8
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7fa fec6 	bl	8002e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b22      	cmp	r3, #34	; 0x22
 8008118:	f040 8087 	bne.w	800822a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008124:	d117      	bne.n	8008156 <UART_Receive_IT+0x50>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d113      	bne.n	8008156 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008136:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	b29b      	uxth	r3, r3
 8008140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008144:	b29a      	uxth	r2, r3
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814e:	1c9a      	adds	r2, r3, #2
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	629a      	str	r2, [r3, #40]	; 0x28
 8008154:	e026      	b.n	80081a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800815c:	2300      	movs	r3, #0
 800815e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008168:	d007      	beq.n	800817a <UART_Receive_IT+0x74>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <UART_Receive_IT+0x82>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	b2da      	uxtb	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	e008      	b.n	800819a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008194:	b2da      	uxtb	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	3b01      	subs	r3, #1
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	4619      	mov	r1, r3
 80081b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d136      	bne.n	8008226 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0220 	bic.w	r2, r2, #32
 80081c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	695a      	ldr	r2, [r3, #20]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 0201 	bic.w	r2, r2, #1
 80081e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2220      	movs	r2, #32
 80081ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d10e      	bne.n	8008216 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f022 0210 	bic.w	r2, r2, #16
 8008206:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7ff fec4 	bl	8007f9c <HAL_UARTEx_RxEventCallback>
 8008214:	e002      	b.n	800821c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff feac 	bl	8007f74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	e002      	b.n	800822c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	e000      	b.n	800822c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800822a:	2302      	movs	r3, #2
  }
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	b09f      	sub	sp, #124	; 0x7c
 800823a:	af00      	add	r7, sp, #0
 800823c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800823e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800824a:	68d9      	ldr	r1, [r3, #12]
 800824c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	ea40 0301 	orr.w	r3, r0, r1
 8008254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008258:	689a      	ldr	r2, [r3, #8]
 800825a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	431a      	orrs	r2, r3
 8008260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	431a      	orrs	r2, r3
 8008266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	4313      	orrs	r3, r2
 800826c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800826e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008278:	f021 010c 	bic.w	r1, r1, #12
 800827c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008282:	430b      	orrs	r3, r1
 8008284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008292:	6999      	ldr	r1, [r3, #24]
 8008294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	ea40 0301 	orr.w	r3, r0, r1
 800829c:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800829e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	4b6a      	ldr	r3, [pc, #424]	; (800844c <UART_SetConfig+0x218>)
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d00e      	beq.n	80082c6 <UART_SetConfig+0x92>
 80082a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	4b68      	ldr	r3, [pc, #416]	; (8008450 <UART_SetConfig+0x21c>)
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d009      	beq.n	80082c6 <UART_SetConfig+0x92>
 80082b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	4b67      	ldr	r3, [pc, #412]	; (8008454 <UART_SetConfig+0x220>)
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d004      	beq.n	80082c6 <UART_SetConfig+0x92>
 80082bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	4b65      	ldr	r3, [pc, #404]	; (8008458 <UART_SetConfig+0x224>)
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d103      	bne.n	80082ce <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082c6:	f7fe fb8b 	bl	80069e0 <HAL_RCC_GetPCLK2Freq>
 80082ca:	6778      	str	r0, [r7, #116]	; 0x74
 80082cc:	e002      	b.n	80082d4 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082ce:	f7fe fb73 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 80082d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082dc:	f040 80c0 	bne.w	8008460 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082e2:	461c      	mov	r4, r3
 80082e4:	f04f 0500 	mov.w	r5, #0
 80082e8:	4622      	mov	r2, r4
 80082ea:	462b      	mov	r3, r5
 80082ec:	1891      	adds	r1, r2, r2
 80082ee:	6439      	str	r1, [r7, #64]	; 0x40
 80082f0:	415b      	adcs	r3, r3
 80082f2:	647b      	str	r3, [r7, #68]	; 0x44
 80082f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082f8:	1912      	adds	r2, r2, r4
 80082fa:	eb45 0303 	adc.w	r3, r5, r3
 80082fe:	f04f 0000 	mov.w	r0, #0
 8008302:	f04f 0100 	mov.w	r1, #0
 8008306:	00d9      	lsls	r1, r3, #3
 8008308:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800830c:	00d0      	lsls	r0, r2, #3
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	1911      	adds	r1, r2, r4
 8008314:	6639      	str	r1, [r7, #96]	; 0x60
 8008316:	416b      	adcs	r3, r5
 8008318:	667b      	str	r3, [r7, #100]	; 0x64
 800831a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	461a      	mov	r2, r3
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	1891      	adds	r1, r2, r2
 8008326:	63b9      	str	r1, [r7, #56]	; 0x38
 8008328:	415b      	adcs	r3, r3
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800832c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008330:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008334:	f7f8 fca4 	bl	8000c80 <__aeabi_uldivmod>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4b47      	ldr	r3, [pc, #284]	; (800845c <UART_SetConfig+0x228>)
 800833e:	fba3 2302 	umull	r2, r3, r3, r2
 8008342:	095b      	lsrs	r3, r3, #5
 8008344:	011e      	lsls	r6, r3, #4
 8008346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008348:	461c      	mov	r4, r3
 800834a:	f04f 0500 	mov.w	r5, #0
 800834e:	4622      	mov	r2, r4
 8008350:	462b      	mov	r3, r5
 8008352:	1891      	adds	r1, r2, r2
 8008354:	6339      	str	r1, [r7, #48]	; 0x30
 8008356:	415b      	adcs	r3, r3
 8008358:	637b      	str	r3, [r7, #52]	; 0x34
 800835a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800835e:	1912      	adds	r2, r2, r4
 8008360:	eb45 0303 	adc.w	r3, r5, r3
 8008364:	f04f 0000 	mov.w	r0, #0
 8008368:	f04f 0100 	mov.w	r1, #0
 800836c:	00d9      	lsls	r1, r3, #3
 800836e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008372:	00d0      	lsls	r0, r2, #3
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	1911      	adds	r1, r2, r4
 800837a:	65b9      	str	r1, [r7, #88]	; 0x58
 800837c:	416b      	adcs	r3, r5
 800837e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	461a      	mov	r2, r3
 8008386:	f04f 0300 	mov.w	r3, #0
 800838a:	1891      	adds	r1, r2, r2
 800838c:	62b9      	str	r1, [r7, #40]	; 0x28
 800838e:	415b      	adcs	r3, r3
 8008390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008396:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800839a:	f7f8 fc71 	bl	8000c80 <__aeabi_uldivmod>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4b2e      	ldr	r3, [pc, #184]	; (800845c <UART_SetConfig+0x228>)
 80083a4:	fba3 1302 	umull	r1, r3, r3, r2
 80083a8:	095b      	lsrs	r3, r3, #5
 80083aa:	2164      	movs	r1, #100	; 0x64
 80083ac:	fb01 f303 	mul.w	r3, r1, r3
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	3332      	adds	r3, #50	; 0x32
 80083b6:	4a29      	ldr	r2, [pc, #164]	; (800845c <UART_SetConfig+0x228>)
 80083b8:	fba2 2303 	umull	r2, r3, r2, r3
 80083bc:	095b      	lsrs	r3, r3, #5
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083c4:	441e      	add	r6, r3
 80083c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083c8:	4618      	mov	r0, r3
 80083ca:	f04f 0100 	mov.w	r1, #0
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	1894      	adds	r4, r2, r2
 80083d4:	623c      	str	r4, [r7, #32]
 80083d6:	415b      	adcs	r3, r3
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
 80083da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083de:	1812      	adds	r2, r2, r0
 80083e0:	eb41 0303 	adc.w	r3, r1, r3
 80083e4:	f04f 0400 	mov.w	r4, #0
 80083e8:	f04f 0500 	mov.w	r5, #0
 80083ec:	00dd      	lsls	r5, r3, #3
 80083ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083f2:	00d4      	lsls	r4, r2, #3
 80083f4:	4622      	mov	r2, r4
 80083f6:	462b      	mov	r3, r5
 80083f8:	1814      	adds	r4, r2, r0
 80083fa:	653c      	str	r4, [r7, #80]	; 0x50
 80083fc:	414b      	adcs	r3, r1
 80083fe:	657b      	str	r3, [r7, #84]	; 0x54
 8008400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	461a      	mov	r2, r3
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	1891      	adds	r1, r2, r2
 800840c:	61b9      	str	r1, [r7, #24]
 800840e:	415b      	adcs	r3, r3
 8008410:	61fb      	str	r3, [r7, #28]
 8008412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008416:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800841a:	f7f8 fc31 	bl	8000c80 <__aeabi_uldivmod>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4b0e      	ldr	r3, [pc, #56]	; (800845c <UART_SetConfig+0x228>)
 8008424:	fba3 1302 	umull	r1, r3, r3, r2
 8008428:	095b      	lsrs	r3, r3, #5
 800842a:	2164      	movs	r1, #100	; 0x64
 800842c:	fb01 f303 	mul.w	r3, r1, r3
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	3332      	adds	r3, #50	; 0x32
 8008436:	4a09      	ldr	r2, [pc, #36]	; (800845c <UART_SetConfig+0x228>)
 8008438:	fba2 2303 	umull	r2, r3, r2, r3
 800843c:	095b      	lsrs	r3, r3, #5
 800843e:	f003 0207 	and.w	r2, r3, #7
 8008442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4432      	add	r2, r6
 8008448:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800844a:	e0c3      	b.n	80085d4 <UART_SetConfig+0x3a0>
 800844c:	40011000 	.word	0x40011000
 8008450:	40011400 	.word	0x40011400
 8008454:	40011800 	.word	0x40011800
 8008458:	40011c00 	.word	0x40011c00
 800845c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008462:	461c      	mov	r4, r3
 8008464:	f04f 0500 	mov.w	r5, #0
 8008468:	4622      	mov	r2, r4
 800846a:	462b      	mov	r3, r5
 800846c:	1891      	adds	r1, r2, r2
 800846e:	6139      	str	r1, [r7, #16]
 8008470:	415b      	adcs	r3, r3
 8008472:	617b      	str	r3, [r7, #20]
 8008474:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008478:	1912      	adds	r2, r2, r4
 800847a:	eb45 0303 	adc.w	r3, r5, r3
 800847e:	f04f 0000 	mov.w	r0, #0
 8008482:	f04f 0100 	mov.w	r1, #0
 8008486:	00d9      	lsls	r1, r3, #3
 8008488:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800848c:	00d0      	lsls	r0, r2, #3
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	eb12 0804 	adds.w	r8, r2, r4
 8008496:	eb43 0905 	adc.w	r9, r3, r5
 800849a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	4618      	mov	r0, r3
 80084a0:	f04f 0100 	mov.w	r1, #0
 80084a4:	f04f 0200 	mov.w	r2, #0
 80084a8:	f04f 0300 	mov.w	r3, #0
 80084ac:	008b      	lsls	r3, r1, #2
 80084ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80084b2:	0082      	lsls	r2, r0, #2
 80084b4:	4640      	mov	r0, r8
 80084b6:	4649      	mov	r1, r9
 80084b8:	f7f8 fbe2 	bl	8000c80 <__aeabi_uldivmod>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4b47      	ldr	r3, [pc, #284]	; (80085e0 <UART_SetConfig+0x3ac>)
 80084c2:	fba3 2302 	umull	r2, r3, r3, r2
 80084c6:	095b      	lsrs	r3, r3, #5
 80084c8:	011e      	lsls	r6, r3, #4
 80084ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084cc:	4618      	mov	r0, r3
 80084ce:	f04f 0100 	mov.w	r1, #0
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	1894      	adds	r4, r2, r2
 80084d8:	60bc      	str	r4, [r7, #8]
 80084da:	415b      	adcs	r3, r3
 80084dc:	60fb      	str	r3, [r7, #12]
 80084de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084e2:	1812      	adds	r2, r2, r0
 80084e4:	eb41 0303 	adc.w	r3, r1, r3
 80084e8:	f04f 0400 	mov.w	r4, #0
 80084ec:	f04f 0500 	mov.w	r5, #0
 80084f0:	00dd      	lsls	r5, r3, #3
 80084f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084f6:	00d4      	lsls	r4, r2, #3
 80084f8:	4622      	mov	r2, r4
 80084fa:	462b      	mov	r3, r5
 80084fc:	1814      	adds	r4, r2, r0
 80084fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8008500:	414b      	adcs	r3, r1
 8008502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	4618      	mov	r0, r3
 800850a:	f04f 0100 	mov.w	r1, #0
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	008b      	lsls	r3, r1, #2
 8008518:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800851c:	0082      	lsls	r2, r0, #2
 800851e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008522:	f7f8 fbad 	bl	8000c80 <__aeabi_uldivmod>
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	4b2d      	ldr	r3, [pc, #180]	; (80085e0 <UART_SetConfig+0x3ac>)
 800852c:	fba3 1302 	umull	r1, r3, r3, r2
 8008530:	095b      	lsrs	r3, r3, #5
 8008532:	2164      	movs	r1, #100	; 0x64
 8008534:	fb01 f303 	mul.w	r3, r1, r3
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	011b      	lsls	r3, r3, #4
 800853c:	3332      	adds	r3, #50	; 0x32
 800853e:	4a28      	ldr	r2, [pc, #160]	; (80085e0 <UART_SetConfig+0x3ac>)
 8008540:	fba2 2303 	umull	r2, r3, r2, r3
 8008544:	095b      	lsrs	r3, r3, #5
 8008546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800854a:	441e      	add	r6, r3
 800854c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800854e:	4618      	mov	r0, r3
 8008550:	f04f 0100 	mov.w	r1, #0
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	1894      	adds	r4, r2, r2
 800855a:	603c      	str	r4, [r7, #0]
 800855c:	415b      	adcs	r3, r3
 800855e:	607b      	str	r3, [r7, #4]
 8008560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008564:	1812      	adds	r2, r2, r0
 8008566:	eb41 0303 	adc.w	r3, r1, r3
 800856a:	f04f 0400 	mov.w	r4, #0
 800856e:	f04f 0500 	mov.w	r5, #0
 8008572:	00dd      	lsls	r5, r3, #3
 8008574:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008578:	00d4      	lsls	r4, r2, #3
 800857a:	4622      	mov	r2, r4
 800857c:	462b      	mov	r3, r5
 800857e:	eb12 0a00 	adds.w	sl, r2, r0
 8008582:	eb43 0b01 	adc.w	fp, r3, r1
 8008586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	4618      	mov	r0, r3
 800858c:	f04f 0100 	mov.w	r1, #0
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	f04f 0300 	mov.w	r3, #0
 8008598:	008b      	lsls	r3, r1, #2
 800859a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800859e:	0082      	lsls	r2, r0, #2
 80085a0:	4650      	mov	r0, sl
 80085a2:	4659      	mov	r1, fp
 80085a4:	f7f8 fb6c 	bl	8000c80 <__aeabi_uldivmod>
 80085a8:	4602      	mov	r2, r0
 80085aa:	460b      	mov	r3, r1
 80085ac:	4b0c      	ldr	r3, [pc, #48]	; (80085e0 <UART_SetConfig+0x3ac>)
 80085ae:	fba3 1302 	umull	r1, r3, r3, r2
 80085b2:	095b      	lsrs	r3, r3, #5
 80085b4:	2164      	movs	r1, #100	; 0x64
 80085b6:	fb01 f303 	mul.w	r3, r1, r3
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	011b      	lsls	r3, r3, #4
 80085be:	3332      	adds	r3, #50	; 0x32
 80085c0:	4a07      	ldr	r2, [pc, #28]	; (80085e0 <UART_SetConfig+0x3ac>)
 80085c2:	fba2 2303 	umull	r2, r3, r2, r3
 80085c6:	095b      	lsrs	r3, r3, #5
 80085c8:	f003 020f 	and.w	r2, r3, #15
 80085cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4432      	add	r2, r6
 80085d2:	609a      	str	r2, [r3, #8]
}
 80085d4:	bf00      	nop
 80085d6:	377c      	adds	r7, #124	; 0x7c
 80085d8:	46bd      	mov	sp, r7
 80085da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085de:	bf00      	nop
 80085e0:	51eb851f 	.word	0x51eb851f

080085e4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fc:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4b2f      	ldr	r3, [pc, #188]	; (80086c0 <FSMC_NORSRAM_Init+0xdc>)
 8008602:	4013      	ands	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800860e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008614:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800861a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008620:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8008626:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800862c:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008632:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008638:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800863e:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8008644:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800864a:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8008650:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8008656:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4313      	orrs	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	2b08      	cmp	r3, #8
 8008664:	d103      	bne.n	800866e <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800866c:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68f9      	ldr	r1, [r7, #12]
 8008676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008682:	d10a      	bne.n	800869a <FSMC_NORSRAM_Init+0xb6>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d006      	beq.n	800869a <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008694:	431a      	orrs	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d006      	beq.n	80086b0 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086aa:	431a      	orrs	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	ffc00480 	.word	0xffc00480

080086c4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	1c5a      	adds	r2, r3, #1
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086de:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80086e6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80086f2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80086fa:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008702:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	3b01      	subs	r3, #1
 800870a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800870c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	3b02      	subs	r3, #2
 8008714:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008716:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800871c:	4313      	orrs	r3, r2
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4313      	orrs	r3, r2
 8008722:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6979      	ldr	r1, [r7, #20]
 800872c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800873c:	d10e      	bne.n	800875c <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008746:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	3b01      	subs	r3, #1
 800874e:	051b      	lsls	r3, r3, #20
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	4313      	orrs	r3, r2
 8008754:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
	...

0800876c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
 8008778:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800877a:	2300      	movs	r3, #0
 800877c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008784:	d122      	bne.n	80087cc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	4b15      	ldr	r3, [pc, #84]	; (80087e8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008794:	4013      	ands	r3, r2
 8008796:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80087a2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80087aa:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80087b2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80087b8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	4313      	orrs	r3, r2
 80087be:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	6979      	ldr	r1, [r7, #20]
 80087c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80087ca:	e005      	b.n	80087d8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80087d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	371c      	adds	r7, #28
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	cff00000 	.word	0xcff00000

080087ec <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;

  int computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3301      	adds	r3, #1
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	60fb      	str	r3, [r7, #12]
#if defined(_MSC_VER)
  // Context for why this is needed is in http://b/189926408#comment21
  computed_size -= sizeof(dummy.data[0]);
#endif
  return computed_size;
 80087fc:	68fb      	ldr	r3, [r7, #12]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
	...

0800880c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	2b10      	cmp	r3, #16
 800881a:	d847      	bhi.n	80088ac <TfLiteTypeGetName+0xa0>
 800881c:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <TfLiteTypeGetName+0x18>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008869 	.word	0x08008869
 8008828:	0800886d 	.word	0x0800886d
 800882c:	08008875 	.word	0x08008875
 8008830:	0800887d 	.word	0x0800887d
 8008834:	08008885 	.word	0x08008885
 8008838:	08008899 	.word	0x08008899
 800883c:	0800888d 	.word	0x0800888d
 8008840:	08008871 	.word	0x08008871
 8008844:	08008891 	.word	0x08008891
 8008848:	08008881 	.word	0x08008881
 800884c:	0800889d 	.word	0x0800889d
 8008850:	080088a1 	.word	0x080088a1
 8008854:	08008895 	.word	0x08008895
 8008858:	08008889 	.word	0x08008889
 800885c:	080088a5 	.word	0x080088a5
 8008860:	080088a9 	.word	0x080088a9
 8008864:	08008879 	.word	0x08008879
    case kTfLiteNoType:
      return "NOTYPE";
 8008868:	4b14      	ldr	r3, [pc, #80]	; (80088bc <TfLiteTypeGetName+0xb0>)
 800886a:	e020      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 800886c:	4b14      	ldr	r3, [pc, #80]	; (80088c0 <TfLiteTypeGetName+0xb4>)
 800886e:	e01e      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8008870:	4b14      	ldr	r3, [pc, #80]	; (80088c4 <TfLiteTypeGetName+0xb8>)
 8008872:	e01c      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 8008874:	4b14      	ldr	r3, [pc, #80]	; (80088c8 <TfLiteTypeGetName+0xbc>)
 8008876:	e01a      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 8008878:	4b14      	ldr	r3, [pc, #80]	; (80088cc <TfLiteTypeGetName+0xc0>)
 800887a:	e018      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 800887c:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <TfLiteTypeGetName+0xc4>)
 800887e:	e016      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 8008880:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <TfLiteTypeGetName+0xc8>)
 8008882:	e014      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 8008884:	4b14      	ldr	r3, [pc, #80]	; (80088d8 <TfLiteTypeGetName+0xcc>)
 8008886:	e012      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 8008888:	4b14      	ldr	r3, [pc, #80]	; (80088dc <TfLiteTypeGetName+0xd0>)
 800888a:	e010      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 800888c:	4b14      	ldr	r3, [pc, #80]	; (80088e0 <TfLiteTypeGetName+0xd4>)
 800888e:	e00e      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8008890:	4b14      	ldr	r3, [pc, #80]	; (80088e4 <TfLiteTypeGetName+0xd8>)
 8008892:	e00c      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8008894:	4b14      	ldr	r3, [pc, #80]	; (80088e8 <TfLiteTypeGetName+0xdc>)
 8008896:	e00a      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8008898:	4b14      	ldr	r3, [pc, #80]	; (80088ec <TfLiteTypeGetName+0xe0>)
 800889a:	e008      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 800889c:	4b14      	ldr	r3, [pc, #80]	; (80088f0 <TfLiteTypeGetName+0xe4>)
 800889e:	e006      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 80088a0:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <TfLiteTypeGetName+0xe8>)
 80088a2:	e004      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 80088a4:	4b14      	ldr	r3, [pc, #80]	; (80088f8 <TfLiteTypeGetName+0xec>)
 80088a6:	e002      	b.n	80088ae <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 80088a8:	4b14      	ldr	r3, [pc, #80]	; (80088fc <TfLiteTypeGetName+0xf0>)
 80088aa:	e000      	b.n	80088ae <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 80088ac:	4b14      	ldr	r3, [pc, #80]	; (8008900 <TfLiteTypeGetName+0xf4>)
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	080263e8 	.word	0x080263e8
 80088c0:	080263f0 	.word	0x080263f0
 80088c4:	080263f8 	.word	0x080263f8
 80088c8:	08026400 	.word	0x08026400
 80088cc:	08026408 	.word	0x08026408
 80088d0:	08026410 	.word	0x08026410
 80088d4:	08026418 	.word	0x08026418
 80088d8:	08026420 	.word	0x08026420
 80088dc:	08026428 	.word	0x08026428
 80088e0:	08026430 	.word	0x08026430
 80088e4:	08026438 	.word	0x08026438
 80088e8:	08026444 	.word	0x08026444
 80088ec:	08026450 	.word	0x08026450
 80088f0:	08026458 	.word	0x08026458
 80088f4:	08026460 	.word	0x08026460
 80088f8:	08026468 	.word	0x08026468
 80088fc:	08026474 	.word	0x08026474
 8008900:	0802647c 	.word	0x0802647c

08008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8008904:	b40e      	push	{r1, r2, r3}
 8008906:	b580      	push	{r7, lr}
 8008908:	b085      	sub	sp, #20
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 800890e:	f107 0320 	add.w	r3, r7, #32
 8008912:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3308      	adds	r3, #8
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	69f9      	ldr	r1, [r7, #28]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	4798      	blx	r3
 8008924:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8008926:	68fb      	ldr	r3, [r7, #12]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008932:	b003      	add	sp, #12
 8008934:	4770      	bx	lr

08008936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8008936:	b40c      	push	{r2, r3}
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8008942:	f107 031c 	add.w	r3, r7, #28
 8008946:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3308      	adds	r3, #8
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	69b9      	ldr	r1, [r7, #24]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4798      	blx	r3
 8008958:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 800895a:	68fb      	ldr	r3, [r7, #12]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008966:	b002      	add	sp, #8
 8008968:	4770      	bx	lr

0800896a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	6039      	str	r1, [r7, #0]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	4618      	mov	r0, r3
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <_ZNK11flatbuffers6String5c_strEv>:
  const auto cmp = memcmp(a_data, b_data, (std::min)(a_size, b_size));
  return cmp == 0 ? a_size < b_size : cmp < 0;
}

struct String : public Vector<char> {
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4618      	mov	r0, r3
 800898e:	f000 fe32 	bl	80095f6 <_ZNK11flatbuffers6VectorIcE4DataEv>
 8008992:	4603      	mov	r3, r0
 8008994:	4618      	mov	r0, r3
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 800899c:	b590      	push	{r4, r7, lr}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 80089a4:	687c      	ldr	r4, [r7, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 fe4c 	bl	8009646 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80089ae:	4603      	mov	r3, r0
 80089b0:	425b      	negs	r3, r3
 80089b2:	4423      	add	r3, r4
  }
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd90      	pop	{r4, r7, pc}

080089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7ff ffe7 	bl	800899c <_ZNK11flatbuffers5Table9GetVTableEv>
 80089ce:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 fe1c 	bl	800960e <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80089d6:	4603      	mov	r3, r0
 80089d8:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80089da:	887a      	ldrh	r2, [r7, #2]
 80089dc:	897b      	ldrh	r3, [r7, #10]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d207      	bcs.n	80089f2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 80089e2:	887b      	ldrh	r3, [r7, #2]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	4413      	add	r3, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 fe10 	bl	800960e <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80089ee:	4603      	mov	r3, r0
 80089f0:	e000      	b.n	80089f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 80089f2:	2300      	movs	r3, #0
  }
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <_ZNK6tflite13Conv2DOptions7paddingEv>:
    VT_STRIDE_H = 8,
    VT_FUSED_ACTIVATION_FUNCTION = 10,
    VT_DILATION_W_FACTOR = 12,
    VT_DILATION_H_FACTOR = 14
  };
  tflite::Padding padding() const {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	2104      	movs	r1, #4
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fe94 	bl	8009738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008a10:	4603      	mov	r3, r0
 8008a12:	b2db      	uxtb	r3, r3
  }
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <_ZNK6tflite13Conv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	2106      	movs	r1, #6
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fe56 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008a30:	4603      	mov	r3, r0
  }
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <_ZNK6tflite13Conv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	2108      	movs	r1, #8
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 fe47 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008a4e:	4603      	mov	r3, r0
  }
 8008a50:	4618      	mov	r0, r3
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	210a      	movs	r1, #10
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fe66 	bl	8009738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	b2db      	uxtb	r3, r3
  }
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	210c      	movs	r1, #12
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 fe28 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008a8c:	4603      	mov	r3, r0
  }
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b082      	sub	sp, #8
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	210e      	movs	r1, #14
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fe19 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008aaa:	4603      	mov	r3, r0
  }
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <_ZNK6tflite13Pool2DOptions7paddingEv>:
    VT_STRIDE_H = 8,
    VT_FILTER_WIDTH = 10,
    VT_FILTER_HEIGHT = 12,
    VT_FUSED_ACTIVATION_FUNCTION = 14
  };
  tflite::Padding padding() const {
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2104      	movs	r1, #4
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 fe38 	bl	8009738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	b2db      	uxtb	r3, r3
  }
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <_ZNK6tflite13Pool2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	2106      	movs	r1, #6
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 fdfa 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008ae8:	4603      	mov	r3, r0
  }
 8008aea:	4618      	mov	r0, r3
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <_ZNK6tflite13Pool2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	2108      	movs	r1, #8
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 fdeb 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008b06:	4603      	mov	r3, r0
  }
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <_ZNK6tflite13Pool2DOptions12filter_widthEv>:
  int32_t filter_width() const {
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	210a      	movs	r1, #10
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 fddc 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008b24:	4603      	mov	r3, r0
  }
 8008b26:	4618      	mov	r0, r3
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <_ZNK6tflite13Pool2DOptions13filter_heightEv>:
  int32_t filter_height() const {
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	210c      	movs	r1, #12
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 fdcd 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008b42:	4603      	mov	r3, r0
  }
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	210e      	movs	r1, #14
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fdec 	bl	8009738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008b60:	4603      	mov	r3, r0
 8008b62:	b2db      	uxtb	r3, r3
  }
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>:
    VT_DEPTH_MULTIPLIER = 10,
    VT_FUSED_ACTIVATION_FUNCTION = 12,
    VT_DILATION_W_FACTOR = 14,
    VT_DILATION_H_FACTOR = 16
  };
  tflite::Padding padding() const {
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	2104      	movs	r1, #4
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fddc 	bl	8009738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008b80:	4603      	mov	r3, r0
 8008b82:	b2db      	uxtb	r3, r3
  }
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	2106      	movs	r1, #6
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 fd9e 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008ba0:	4603      	mov	r3, r0
  }
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b082      	sub	sp, #8
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2108      	movs	r1, #8
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 fd8f 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008bbe:	4603      	mov	r3, r0
  }
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>:
  int32_t depth_multiplier() const {
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	210a      	movs	r1, #10
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 fd80 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008bdc:	4603      	mov	r3, r0
  }
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	210c      	movs	r1, #12
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 fd9f 	bl	8009738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	b2db      	uxtb	r3, r3
  }
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	210e      	movs	r1, #14
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fd61 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008c1a:	4603      	mov	r3, r0
  }
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	2110      	movs	r1, #16
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 fd52 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008c38:	4603      	mov	r3, r0
  }
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
	...

08008c44 <_ZNK6tflite14SoftmaxOptions4betaEv>:
struct SoftmaxOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SoftmaxOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BETA = 4
  };
  float beta() const {
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8008c68 <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 8008c52:	2104      	movs	r1, #4
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 fd9f 	bl	8009798 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8008c5a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	00000000 	.word	0x00000000

08008c6c <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
struct ReshapeOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReshapeOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEW_SHAPE = 4
  };
  const flatbuffers::Vector<int32_t> *new_shape() const {
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2104      	movs	r1, #4
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fd4d 	bl	8009718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8008c7e:	4603      	mov	r3, r0
  }
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <_ZNK6tflite8Operator20builtin_options_typeEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  tflite::BuiltinOptions builtin_options_type() const {
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	210a      	movs	r1, #10
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 fcf1 	bl	800967e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8008c9c:	4603      	mov	r3, r0
  }
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b082      	sub	sp, #8
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	210c      	movs	r1, #12
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 fd02 	bl	80096bc <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 8008cb8:	4603      	mov	r3, r0
  }
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>:
  template<typename T> const T *builtin_options_as() const;
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff ffdc 	bl	8008c88 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d104      	bne.n	8008ce0 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x1e>
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7ff ffe5 	bl	8008ca6 <_ZNK6tflite8Operator15builtin_optionsEv>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	e000      	b.n	8008ce2 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x20>
 8008ce0:	2300      	movs	r3, #0
  }
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>:
  const tflite::DepthwiseConv2DOptions *builtin_options_as_DepthwiseConv2DOptions() const {
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7ff ffc8 	bl	8008c88 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d104      	bne.n	8008d08 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x1e>
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff ffd1 	bl	8008ca6 <_ZNK6tflite8Operator15builtin_optionsEv>
 8008d04:	4603      	mov	r3, r0
 8008d06:	e000      	b.n	8008d0a <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x20>
 8008d08:	2300      	movs	r3, #0
  }
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ConcatEmbeddingsOptions ? static_cast<const tflite::ConcatEmbeddingsOptions *>(builtin_options()) : nullptr;
  }
  const tflite::LSHProjectionOptions *builtin_options_as_LSHProjectionOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_LSHProjectionOptions ? static_cast<const tflite::LSHProjectionOptions *>(builtin_options()) : nullptr;
  }
  const tflite::Pool2DOptions *builtin_options_as_Pool2DOptions() const {
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7ff ffb4 	bl	8008c88 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b05      	cmp	r3, #5
 8008d24:	d104      	bne.n	8008d30 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x1e>
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff ffbd 	bl	8008ca6 <_ZNK6tflite8Operator15builtin_optionsEv>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	e000      	b.n	8008d32 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x20>
 8008d30:	2300      	movs	r3, #0
  }
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
  }
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7ff ffa0 	bl	8008c88 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b09      	cmp	r3, #9
 8008d4c:	d104      	bne.n	8008d58 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff ffa9 	bl	8008ca6 <_ZNK6tflite8Operator15builtin_optionsEv>
 8008d54:	4603      	mov	r3, r0
 8008d56:	e000      	b.n	8008d5a <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 8008d58:	2300      	movs	r3, #0
  }
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ResizeBilinearOptions ? static_cast<const tflite::ResizeBilinearOptions *>(builtin_options()) : nullptr;
  }
  const tflite::CallOptions *builtin_options_as_CallOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_CallOptions ? static_cast<const tflite::CallOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff ff8c 	bl	8008c88 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b11      	cmp	r3, #17
 8008d74:	d104      	bne.n	8008d80 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff ff95 	bl	8008ca6 <_ZNK6tflite8Operator15builtin_optionsEv>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	e000      	b.n	8008d82 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 8008d80:	2300      	movs	r3, #0
  }
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	4798      	blx	r3
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4618      	mov	r0, r3
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8008e00:	f01c f871 	bl	8024ee6 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8008e0a:	f01c f86c 	bl	8024ee6 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8008e14:	f01c f867 	bl	8024ee6 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8008e1e:	f01c f862 	bl	8024ee6 <abort>
}
 8008e22:	bf00      	nop
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 8008e2c:	b590      	push	{r4, r7, lr}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d106      	bne.n	8008e4e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 8008e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e42:	4917      	ldr	r1, [pc, #92]	; (8008ea0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 8008e44:	6838      	ldr	r0, [r7, #0]
 8008e46:	f7ff fd5d 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e024      	b.n	8008e98 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 8008e4e:	68b8      	ldr	r0, [r7, #8]
 8008e50:	f000 fcc4 	bl	80097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008e54:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	089b      	lsrs	r3, r3, #2
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d906      	bls.n	8008e6e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 8008e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e62:	4910      	ldr	r1, [pc, #64]	; (8008ea4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 8008e64:	6838      	ldr	r0, [r7, #0]
 8008e66:	f7ff fd4d 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e014      	b.n	8008e98 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 8008e6e:	2300      	movs	r3, #0
 8008e70:	617b      	str	r3, [r7, #20]
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d20d      	bcs.n	8008e96 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	18d4      	adds	r4, r2, r3
 8008e82:	6979      	ldr	r1, [r7, #20]
 8008e84:	68b8      	ldr	r0, [r7, #8]
 8008e86:	f000 fcb7 	bl	80097f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	3301      	adds	r3, #1
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	e7ed      	b.n	8008e72 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	371c      	adds	r7, #28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd90      	pop	{r4, r7, pc}
 8008ea0:	080264a0 	.word	0x080264a0
 8008ea4:	080264d0 	.word	0x080264d0

08008ea8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	2b05      	cmp	r3, #5
 8008eb6:	d81b      	bhi.n	8008ef0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8008eb8:	a201      	add	r2, pc, #4	; (adr r2, 8008ec0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8008eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebe:	bf00      	nop
 8008ec0:	08008ed9 	.word	0x08008ed9
 8008ec4:	08008edd 	.word	0x08008edd
 8008ec8:	08008ee1 	.word	0x08008ee1
 8008ecc:	08008ee5 	.word	0x08008ee5
 8008ed0:	08008ee9 	.word	0x08008ee9
 8008ed4:	08008eed 	.word	0x08008eed
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	e00a      	b.n	8008ef2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e008      	b.n	8008ef2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e006      	b.n	8008ef2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e004      	b.n	8008ef2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8008ee8:	2304      	movs	r3, #4
 8008eea:	e002      	b.n	8008ef2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8008eec:	2305      	movs	r3, #5
 8008eee:	e000      	b.n	8008ef2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop

08008f00 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x16>
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d002      	beq.n	8008f1a <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1a>
 8008f14:	e003      	b.n	8008f1e <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1e>
    case Padding_SAME:
      return kTfLitePaddingSame;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e002      	b.n	8008f20 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_VALID:
      return kTfLitePaddingValid;
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	e000      	b.n	8008f20 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
  }
  return kTfLitePaddingUnknown;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
 8008f38:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	2b0f      	cmp	r3, #15
 8008f3e:	d873      	bhi.n	8009028 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xfc>
 8008f40:	a201      	add	r2, pc, #4	; (adr r2, 8008f48 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8008f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f46:	bf00      	nop
 8008f48:	08008f93 	.word	0x08008f93
 8008f4c:	08008f89 	.word	0x08008f89
 8008f50:	08008fb1 	.word	0x08008fb1
 8008f54:	08008fc5 	.word	0x08008fc5
 8008f58:	08008fd9 	.word	0x08008fd9
 8008f5c:	08008fed 	.word	0x08008fed
 8008f60:	08008ff7 	.word	0x08008ff7
 8008f64:	08008fa7 	.word	0x08008fa7
 8008f68:	08009001 	.word	0x08009001
 8008f6c:	08008fcf 	.word	0x08008fcf
 8008f70:	08008f9d 	.word	0x08008f9d
 8008f74:	0800900b 	.word	0x0800900b
 8008f78:	08008fe3 	.word	0x08008fe3
 8008f7c:	08009015 	.word	0x08009015
 8008f80:	0800901f 	.word	0x0800901f
 8008f84:	08008fbb 	.word	0x08008fbb
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	220a      	movs	r2, #10
 8008f8c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e054      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2201      	movs	r2, #1
 8008f96:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e04f      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	220b      	movs	r2, #11
 8008fa0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	e04a      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	2207      	movs	r2, #7
 8008faa:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008fac:	2300      	movs	r3, #0
 8008fae:	e045      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e040      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2210      	movs	r2, #16
 8008fbe:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	e03b      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2203      	movs	r2, #3
 8008fc8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e036      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2209      	movs	r2, #9
 8008fd2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	e031      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2204      	movs	r2, #4
 8008fdc:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e02c      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	220d      	movs	r2, #13
 8008fe6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e027      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_STRING:
      *type = kTfLiteString;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	2205      	movs	r2, #5
 8008ff0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	e022      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2206      	movs	r2, #6
 8008ffa:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	e01d      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2208      	movs	r2, #8
 8009004:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8009006:	2300      	movs	r3, #0
 8009008:	e018      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	220c      	movs	r2, #12
 800900e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8009010:	2300      	movs	r3, #0
 8009012:	e013      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	220e      	movs	r2, #14
 8009018:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800901a:	2300      	movs	r3, #0
 800901c:	e00e      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	220f      	movs	r2, #15
 8009022:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8009024:	2300      	movs	r3, #0
 8009026:	e009      	b.n	800903c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    default:
      *type = kTfLiteNoType;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	461a      	mov	r2, r3
 8009032:	4904      	ldr	r1, [pc, #16]	; (8009044 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x118>)
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff fc65 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 800903a:	2301      	movs	r3, #1
  }
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	080265f4 	.word	0x080265f4

08009048 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 8009048:	b5b0      	push	{r4, r5, r7, lr}
 800904a:	b08a      	sub	sp, #40	; 0x28
 800904c:	af02      	add	r7, sp, #8
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	68b9      	ldr	r1, [r7, #8]
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f7ff fec5 	bl	8008dec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8009062:	f107 0318 	add.w	r3, r7, #24
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	4618      	mov	r0, r3
 800906a:	f7ff feb0 	bl	8008dce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteConvParams>();
 800906e:	f107 0310 	add.w	r3, r7, #16
 8009072:	f107 0218 	add.w	r2, r7, #24
 8009076:	4611      	mov	r1, r2
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fbe3 	bl	8009844 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800907e:	f107 0310 	add.w	r3, r7, #16
 8009082:	2100      	movs	r1, #0
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fc1d 	bl	80098c4 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800908a:	4603      	mov	r3, r0
 800908c:	f083 0301 	eor.w	r3, r3, #1
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00c      	beq.n	80090b0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8009096:	4b39      	ldr	r3, [pc, #228]	; (800917c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	f240 4363 	movw	r3, #1123	; 0x463
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	4b37      	ldr	r3, [pc, #220]	; (8009180 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 80090a2:	4a38      	ldr	r2, [pc, #224]	; (8009184 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 80090a4:	68b9      	ldr	r1, [r7, #8]
 80090a6:	68b8      	ldr	r0, [r7, #8]
 80090a8:	f7ff fc45 	bl	8008936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80090ac:	2401      	movs	r4, #1
 80090ae:	e05b      	b.n	8009168 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Conv2DOptions* schema_params = op->builtin_options_as_Conv2DOptions();
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f7ff fe06 	bl	8008cc2 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>
 80090b6:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d04b      	beq.n	8009156 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 80090be:	69f8      	ldr	r0, [r7, #28]
 80090c0:	f7ff fc9c 	bl	80089fc <_ZNK6tflite13Conv2DOptions7paddingEv>
 80090c4:	4603      	mov	r3, r0
 80090c6:	461d      	mov	r5, r3
 80090c8:	f107 0310 	add.w	r3, r7, #16
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 fc06 	bl	80098de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80090d2:	4604      	mov	r4, r0
 80090d4:	4628      	mov	r0, r5
 80090d6:	f7ff ff13 	bl	8008f00 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 80090da:	4603      	mov	r3, r0
 80090dc:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 80090de:	f107 0310 	add.w	r3, r7, #16
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fbfb 	bl	80098de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80090e8:	4604      	mov	r4, r0
 80090ea:	69f8      	ldr	r0, [r7, #28]
 80090ec:	f7ff fc96 	bl	8008a1c <_ZNK6tflite13Conv2DOptions8stride_wEv>
 80090f0:	4603      	mov	r3, r0
 80090f2:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 80090f4:	f107 0310 	add.w	r3, r7, #16
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fbf0 	bl	80098de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80090fe:	4604      	mov	r4, r0
 8009100:	69f8      	ldr	r0, [r7, #28]
 8009102:	f7ff fc9a 	bl	8008a3a <_ZNK6tflite13Conv2DOptions8stride_hEv>
 8009106:	4603      	mov	r3, r0
 8009108:	60a3      	str	r3, [r4, #8]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800910a:	69f8      	ldr	r0, [r7, #28]
 800910c:	f7ff fca4 	bl	8008a58 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>
 8009110:	4603      	mov	r3, r0
 8009112:	461d      	mov	r5, r3
    params->activation =
 8009114:	f107 0310 	add.w	r3, r7, #16
 8009118:	4618      	mov	r0, r3
 800911a:	f000 fbe0 	bl	80098de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800911e:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8009120:	4628      	mov	r0, r5
 8009122:	f7ff fec1 	bl	8008ea8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8009126:	4603      	mov	r3, r0
    params->activation =
 8009128:	7323      	strb	r3, [r4, #12]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 800912a:	f107 0310 	add.w	r3, r7, #16
 800912e:	4618      	mov	r0, r3
 8009130:	f000 fbd5 	bl	80098de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009134:	4604      	mov	r4, r0
 8009136:	69f8      	ldr	r0, [r7, #28]
 8009138:	f7ff fc9e 	bl	8008a78 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>
 800913c:	4603      	mov	r3, r0
 800913e:	6123      	str	r3, [r4, #16]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8009140:	f107 0310 	add.w	r3, r7, #16
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fbca 	bl	80098de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800914a:	4604      	mov	r4, r0
 800914c:	69f8      	ldr	r0, [r7, #28]
 800914e:	f7ff fca2 	bl	8008a96 <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>
 8009152:	4603      	mov	r3, r0
 8009154:	6163      	str	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8009156:	f107 0310 	add.w	r3, r7, #16
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fbcb 	bl	80098f6 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8009160:	4602      	mov	r2, r0
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8009166:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteConvParams>();
 8009168:	f107 0310 	add.w	r3, r7, #16
 800916c:	4618      	mov	r0, r3
 800916e:	f000 fb87 	bl	8009880 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8009172:	4623      	mov	r3, r4
}
 8009174:	4618      	mov	r0, r3
 8009176:	3720      	adds	r7, #32
 8009178:	46bd      	mov	sp, r7
 800917a:	bdb0      	pop	{r4, r5, r7, pc}
 800917c:	08026574 	.word	0x08026574
 8009180:	08026514 	.word	0x08026514
 8009184:	0802655c 	.word	0x0802655c

08009188 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseDepthwiseConv2D(const Operator* op,
                                  ErrorReporter* error_reporter,
                                  BuiltinDataAllocator* allocator,
                                  void** builtin_data) {
 8009188:	b5b0      	push	{r4, r5, r7, lr}
 800918a:	b08a      	sub	sp, #40	; 0x28
 800918c:	af02      	add	r7, sp, #8
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	68b9      	ldr	r1, [r7, #8]
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f7ff fe25 	bl	8008dec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80091a2:	f107 0318 	add.w	r3, r7, #24
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7ff fe10 	bl	8008dce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteDepthwiseConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 80091ae:	f107 0310 	add.w	r3, r7, #16
 80091b2:	f107 0218 	add.w	r2, r7, #24
 80091b6:	4611      	mov	r1, r2
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fbb0 	bl	800991e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80091be:	f107 0310 	add.w	r3, r7, #16
 80091c2:	2100      	movs	r1, #0
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 fbea 	bl	800999e <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80091ca:	4603      	mov	r3, r0
 80091cc:	f083 0301 	eor.w	r3, r3, #1
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00c      	beq.n	80091f0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80091d6:	4b3f      	ldr	r3, [pc, #252]	; (80092d4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>)
 80091d8:	9301      	str	r3, [sp, #4]
 80091da:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	4b3d      	ldr	r3, [pc, #244]	; (80092d8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>)
 80091e2:	4a3e      	ldr	r2, [pc, #248]	; (80092dc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x154>)
 80091e4:	68b9      	ldr	r1, [r7, #8]
 80091e6:	68b8      	ldr	r0, [r7, #8]
 80091e8:	f7ff fba5 	bl	8008936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80091ec:	2401      	movs	r4, #1
 80091ee:	e066      	b.n	80092be <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>

  const DepthwiseConv2DOptions* schema_params =
      op->builtin_options_as_DepthwiseConv2DOptions();
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f7ff fd7a 	bl	8008cea <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>
 80091f6:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d056      	beq.n	80092ac <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>
    params->padding = ConvertPadding(schema_params->padding());
 80091fe:	69f8      	ldr	r0, [r7, #28]
 8009200:	f7ff fcb4 	bl	8008b6c <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>
 8009204:	4603      	mov	r3, r0
 8009206:	461d      	mov	r5, r3
 8009208:	f107 0310 	add.w	r3, r7, #16
 800920c:	4618      	mov	r0, r3
 800920e:	f000 fbd3 	bl	80099b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009212:	4604      	mov	r4, r0
 8009214:	4628      	mov	r0, r5
 8009216:	f7ff fe73 	bl	8008f00 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 800921a:	4603      	mov	r3, r0
 800921c:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 800921e:	f107 0310 	add.w	r3, r7, #16
 8009222:	4618      	mov	r0, r3
 8009224:	f000 fbc8 	bl	80099b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009228:	4604      	mov	r4, r0
 800922a:	69f8      	ldr	r0, [r7, #28]
 800922c:	f7ff fcae 	bl	8008b8c <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>
 8009230:	4603      	mov	r3, r0
 8009232:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8009234:	f107 0310 	add.w	r3, r7, #16
 8009238:	4618      	mov	r0, r3
 800923a:	f000 fbbd 	bl	80099b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800923e:	4604      	mov	r4, r0
 8009240:	69f8      	ldr	r0, [r7, #28]
 8009242:	f7ff fcb2 	bl	8008baa <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>
 8009246:	4603      	mov	r3, r0
 8009248:	60a3      	str	r3, [r4, #8]
    params->depth_multiplier = schema_params->depth_multiplier();
 800924a:	f107 0310 	add.w	r3, r7, #16
 800924e:	4618      	mov	r0, r3
 8009250:	f000 fbb2 	bl	80099b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009254:	4604      	mov	r4, r0
 8009256:	69f8      	ldr	r0, [r7, #28]
 8009258:	f7ff fcb6 	bl	8008bc8 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>
 800925c:	4603      	mov	r3, r0
 800925e:	60e3      	str	r3, [r4, #12]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8009260:	69f8      	ldr	r0, [r7, #28]
 8009262:	f7ff fcc0 	bl	8008be6 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>
 8009266:	4603      	mov	r3, r0
 8009268:	461d      	mov	r5, r3
    params->activation =
 800926a:	f107 0310 	add.w	r3, r7, #16
 800926e:	4618      	mov	r0, r3
 8009270:	f000 fba2 	bl	80099b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009274:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8009276:	4628      	mov	r0, r5
 8009278:	f7ff fe16 	bl	8008ea8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800927c:	4603      	mov	r3, r0
    params->activation =
 800927e:	7423      	strb	r3, [r4, #16]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 8009280:	f107 0310 	add.w	r3, r7, #16
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fb97 	bl	80099b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800928a:	4604      	mov	r4, r0
 800928c:	69f8      	ldr	r0, [r7, #28]
 800928e:	f7ff fcba 	bl	8008c06 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>
 8009292:	4603      	mov	r3, r0
 8009294:	6163      	str	r3, [r4, #20]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8009296:	f107 0310 	add.w	r3, r7, #16
 800929a:	4618      	mov	r0, r3
 800929c:	f000 fb8c 	bl	80099b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80092a0:	4604      	mov	r4, r0
 80092a2:	69f8      	ldr	r0, [r7, #28]
 80092a4:	f7ff fcbe 	bl	8008c24 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>
 80092a8:	4603      	mov	r3, r0
 80092aa:	61a3      	str	r3, [r4, #24]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80092ac:	f107 0310 	add.w	r3, r7, #16
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 fb8d 	bl	80099d0 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80092b6:	4602      	mov	r2, r0
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80092bc:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 80092be:	f107 0310 	add.w	r3, r7, #16
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 fb49 	bl	800995a <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80092c8:	4623      	mov	r3, r4
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3720      	adds	r7, #32
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bdb0      	pop	{r4, r5, r7, pc}
 80092d2:	bf00      	nop
 80092d4:	08026574 	.word	0x08026574
 80092d8:	08026514 	.word	0x08026514
 80092dc:	0802655c 	.word	0x0802655c

080092e0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        void**) {
  return kTfLiteOk;
}

TfLiteStatus ParsePool(const Operator* op, ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
 80092e0:	b5b0      	push	{r4, r5, r7, lr}
 80092e2:	b08a      	sub	sp, #40	; 0x28
 80092e4:	af02      	add	r7, sp, #8
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
 80092ec:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	68b9      	ldr	r1, [r7, #8]
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f7ff fd79 	bl	8008dec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80092fa:	f107 0318 	add.w	r3, r7, #24
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	4618      	mov	r0, r3
 8009302:	f7ff fd64 	bl	8008dce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLitePoolParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLitePoolParams>();
 8009306:	f107 0310 	add.w	r3, r7, #16
 800930a:	f107 0218 	add.w	r2, r7, #24
 800930e:	4611      	mov	r1, r2
 8009310:	4618      	mov	r0, r3
 8009312:	f000 fb71 	bl	80099f8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8009316:	f107 0310 	add.w	r3, r7, #16
 800931a:	2100      	movs	r1, #0
 800931c:	4618      	mov	r0, r3
 800931e:	f000 fbab 	bl	8009a78 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8009322:	4603      	mov	r3, r0
 8009324:	f083 0301 	eor.w	r3, r3, #1
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00c      	beq.n	8009348 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800932e:	4b39      	ldr	r3, [pc, #228]	; (8009414 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	f240 6377 	movw	r3, #1655	; 0x677
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	4b37      	ldr	r3, [pc, #220]	; (8009418 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 800933a:	4a38      	ldr	r2, [pc, #224]	; (800941c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 800933c:	68b9      	ldr	r1, [r7, #8]
 800933e:	68b8      	ldr	r0, [r7, #8]
 8009340:	f7ff faf9 	bl	8008936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009344:	2401      	movs	r4, #1
 8009346:	e05b      	b.n	8009400 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Pool2DOptions* schema_params = op->builtin_options_as_Pool2DOptions();
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7ff fce2 	bl	8008d12 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>
 800934e:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d04b      	beq.n	80093ee <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 8009356:	69f8      	ldr	r0, [r7, #28]
 8009358:	f7ff fbac 	bl	8008ab4 <_ZNK6tflite13Pool2DOptions7paddingEv>
 800935c:	4603      	mov	r3, r0
 800935e:	461d      	mov	r5, r3
 8009360:	f107 0310 	add.w	r3, r7, #16
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fb94 	bl	8009a92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800936a:	4604      	mov	r4, r0
 800936c:	4628      	mov	r0, r5
 800936e:	f7ff fdc7 	bl	8008f00 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 8009372:	4603      	mov	r3, r0
 8009374:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8009376:	f107 0310 	add.w	r3, r7, #16
 800937a:	4618      	mov	r0, r3
 800937c:	f000 fb89 	bl	8009a92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009380:	4604      	mov	r4, r0
 8009382:	69f8      	ldr	r0, [r7, #28]
 8009384:	f7ff fba6 	bl	8008ad4 <_ZNK6tflite13Pool2DOptions8stride_wEv>
 8009388:	4603      	mov	r3, r0
 800938a:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 800938c:	f107 0310 	add.w	r3, r7, #16
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fb7e 	bl	8009a92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009396:	4604      	mov	r4, r0
 8009398:	69f8      	ldr	r0, [r7, #28]
 800939a:	f7ff fbaa 	bl	8008af2 <_ZNK6tflite13Pool2DOptions8stride_hEv>
 800939e:	4603      	mov	r3, r0
 80093a0:	60a3      	str	r3, [r4, #8]
    params->filter_width = schema_params->filter_width();
 80093a2:	f107 0310 	add.w	r3, r7, #16
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fb73 	bl	8009a92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80093ac:	4604      	mov	r4, r0
 80093ae:	69f8      	ldr	r0, [r7, #28]
 80093b0:	f7ff fbae 	bl	8008b10 <_ZNK6tflite13Pool2DOptions12filter_widthEv>
 80093b4:	4603      	mov	r3, r0
 80093b6:	60e3      	str	r3, [r4, #12]
    params->filter_height = schema_params->filter_height();
 80093b8:	f107 0310 	add.w	r3, r7, #16
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 fb68 	bl	8009a92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80093c2:	4604      	mov	r4, r0
 80093c4:	69f8      	ldr	r0, [r7, #28]
 80093c6:	f7ff fbb2 	bl	8008b2e <_ZNK6tflite13Pool2DOptions13filter_heightEv>
 80093ca:	4603      	mov	r3, r0
 80093cc:	6123      	str	r3, [r4, #16]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80093ce:	69f8      	ldr	r0, [r7, #28]
 80093d0:	f7ff fbbc 	bl	8008b4c <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>
 80093d4:	4603      	mov	r3, r0
 80093d6:	461d      	mov	r5, r3
    params->activation =
 80093d8:	f107 0310 	add.w	r3, r7, #16
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 fb58 	bl	8009a92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80093e2:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80093e4:	4628      	mov	r0, r5
 80093e6:	f7ff fd5f 	bl	8008ea8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80093ea:	4603      	mov	r3, r0
    params->activation =
 80093ec:	7523      	strb	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80093ee:	f107 0310 	add.w	r3, r7, #16
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fb59 	bl	8009aaa <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80093f8:	4602      	mov	r2, r0
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80093fe:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLitePoolParams>();
 8009400:	f107 0310 	add.w	r3, r7, #16
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fb15 	bl	8009a34 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800940a:	4623      	mov	r3, r4
}
 800940c:	4618      	mov	r0, r3
 800940e:	3720      	adds	r7, #32
 8009410:	46bd      	mov	sp, r7
 8009412:	bdb0      	pop	{r4, r5, r7, pc}
 8009414:	08026574 	.word	0x08026574
 8009418:	08026514 	.word	0x08026514
 800941c:	0802655c 	.word	0x0802655c

08009420 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8009420:	b590      	push	{r4, r7, lr}
 8009422:	b08d      	sub	sp, #52	; 0x34
 8009424:	af02      	add	r7, sp, #8
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	68b9      	ldr	r1, [r7, #8]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f7ff fcd9 	bl	8008dec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800943a:	f107 0318 	add.w	r3, r7, #24
 800943e:	6879      	ldr	r1, [r7, #4]
 8009440:	4618      	mov	r0, r3
 8009442:	f7ff fcc4 	bl	8008dce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 8009446:	f107 0310 	add.w	r3, r7, #16
 800944a:	f107 0218 	add.w	r2, r7, #24
 800944e:	4611      	mov	r1, r2
 8009450:	4618      	mov	r0, r3
 8009452:	f000 fb3e 	bl	8009ad2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8009456:	f107 0310 	add.w	r3, r7, #16
 800945a:	2100      	movs	r1, #0
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fb78 	bl	8009b52 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8009462:	4603      	mov	r3, r0
 8009464:	f083 0301 	eor.w	r3, r3, #1
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00c      	beq.n	8009488 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800946e:	4b27      	ldr	r3, [pc, #156]	; (800950c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	f240 63e1 	movw	r3, #1761	; 0x6e1
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	4b25      	ldr	r3, [pc, #148]	; (8009510 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 800947a:	4a26      	ldr	r2, [pc, #152]	; (8009514 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 800947c:	68b9      	ldr	r1, [r7, #8]
 800947e:	68b8      	ldr	r0, [r7, #8]
 8009480:	f7ff fa59 	bl	8008936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009484:	2401      	movs	r4, #1
 8009486:	e037      	b.n	80094f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f7ff fc6a 	bl	8008d62 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 800948e:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	2b00      	cmp	r3, #0
 8009494:	d027      	beq.n	80094e6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 8009496:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009498:	f7ff fbe8 	bl	8008c6c <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 800949c:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d020      	beq.n	80094e6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
      TF_LITE_ENSURE_STATUS(
 80094a4:	f107 0310 	add.w	r3, r7, #16
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 fb5f 	bl	8009b6c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80094ae:	4603      	mov	r3, r0
 80094b0:	461a      	mov	r2, r3
 80094b2:	4b19      	ldr	r3, [pc, #100]	; (8009518 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	6a39      	ldr	r1, [r7, #32]
 80094ba:	2020      	movs	r0, #32
 80094bc:	f7ff fcb6 	bl	8008e2c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 80094c0:	4603      	mov	r3, r0
 80094c2:	77fb      	strb	r3, [r7, #31]
 80094c4:	7ffb      	ldrb	r3, [r7, #31]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
 80094ca:	7ffc      	ldrb	r4, [r7, #31]
 80094cc:	e014      	b.n	80094f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 80094ce:	6a38      	ldr	r0, [r7, #32]
 80094d0:	f000 f984 	bl	80097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80094d4:	4604      	mov	r4, r0
 80094d6:	f107 0310 	add.w	r3, r7, #16
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 fb46 	bl	8009b6c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80094e0:	4603      	mov	r3, r0
 80094e2:	4622      	mov	r2, r4
 80094e4:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80094e6:	f107 0310 	add.w	r3, r7, #16
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fb4a 	bl	8009b84 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80094f0:	4602      	mov	r2, r0
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80094f6:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 80094f8:	f107 0310 	add.w	r3, r7, #16
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 fb06 	bl	8009b0e <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8009502:	4623      	mov	r3, r4
}
 8009504:	4618      	mov	r0, r3
 8009506:	372c      	adds	r7, #44	; 0x2c
 8009508:	46bd      	mov	sp, r7
 800950a:	bd90      	pop	{r4, r7, pc}
 800950c:	08026574 	.word	0x08026574
 8009510:	08026514 	.word	0x08026514
 8009514:	0802655c 	.word	0x0802655c
 8009518:	08026644 	.word	0x08026644

0800951c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 800951c:	b590      	push	{r4, r7, lr}
 800951e:	b08b      	sub	sp, #44	; 0x2c
 8009520:	af02      	add	r7, sp, #8
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	68b9      	ldr	r1, [r7, #8]
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f7ff fc5b 	bl	8008dec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8009536:	f107 0318 	add.w	r3, r7, #24
 800953a:	6879      	ldr	r1, [r7, #4]
 800953c:	4618      	mov	r0, r3
 800953e:	f7ff fc46 	bl	8008dce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8009542:	f107 0310 	add.w	r3, r7, #16
 8009546:	f107 0218 	add.w	r2, r7, #24
 800954a:	4611      	mov	r1, r2
 800954c:	4618      	mov	r0, r3
 800954e:	f000 fb2d 	bl	8009bac <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8009552:	f107 0310 	add.w	r3, r7, #16
 8009556:	2100      	movs	r1, #0
 8009558:	4618      	mov	r0, r3
 800955a:	f000 fb67 	bl	8009c2c <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800955e:	4603      	mov	r3, r0
 8009560:	f083 0301 	eor.w	r3, r3, #1
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00c      	beq.n	8009584 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800956a:	4b1a      	ldr	r3, [pc, #104]	; (80095d4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	f240 7372 	movw	r3, #1906	; 0x772
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	4b18      	ldr	r3, [pc, #96]	; (80095d8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 8009576:	4a19      	ldr	r2, [pc, #100]	; (80095dc <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 8009578:	68b9      	ldr	r1, [r7, #8]
 800957a:	68b8      	ldr	r0, [r7, #8]
 800957c:	f7ff f9db 	bl	8008936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009580:	2401      	movs	r4, #1
 8009582:	e01c      	b.n	80095be <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f7ff fbd8 	bl	8008d3a <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 800958a:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00c      	beq.n	80095ac <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 8009592:	f107 0310 	add.w	r3, r7, #16
 8009596:	4618      	mov	r0, r3
 8009598:	f000 fb55 	bl	8009c46 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800959c:	4604      	mov	r4, r0
 800959e:	69f8      	ldr	r0, [r7, #28]
 80095a0:	f7ff fb50 	bl	8008c44 <_ZNK6tflite14SoftmaxOptions4betaEv>
 80095a4:	eef0 7a40 	vmov.f32	s15, s0
 80095a8:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80095ac:	f107 0310 	add.w	r3, r7, #16
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fb54 	bl	8009c5e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80095b6:	4602      	mov	r2, r0
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80095bc:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 80095be:	f107 0310 	add.w	r3, r7, #16
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 fb10 	bl	8009be8 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80095c8:	4623      	mov	r3, r4
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3724      	adds	r7, #36	; 0x24
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd90      	pop	{r4, r7, pc}
 80095d2:	bf00      	nop
 80095d4:	08026574 	.word	0x08026574
 80095d8:	08026514 	.word	0x08026514
 80095dc:	0802655c 	.word	0x0802655c

080095e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 80095e8:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 80095f6:	b480      	push	{r7}
 80095f8:	b083      	sub	sp, #12
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	3304      	adds	r3, #4
  }
 8009602:	4618      	mov	r0, r3
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fb3e 	bl	8009c9c <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8009620:	4603      	mov	r3, r0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff ffd2 	bl	80095e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800963c:	4603      	mov	r3, r0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8009646:	b580      	push	{r7, lr}
 8009648:	b082      	sub	sp, #8
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4618      	mov	r0, r3
 8009654:	f000 fb17 	bl	8009c86 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8009658:	4603      	mov	r3, r0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	4618      	mov	r0, r3
 8009670:	f000 fb20 	bl	8009cb4 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 8009674:	4603      	mov	r3, r0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800967e:	b580      	push	{r7, lr}
 8009680:	b084      	sub	sp, #16
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	807b      	strh	r3, [r7, #2]
 800968a:	4613      	mov	r3, r2
 800968c:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 800968e:	887b      	ldrh	r3, [r7, #2]
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7ff f992 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009698:	4603      	mov	r3, r0
 800969a:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800969c:	89fb      	ldrh	r3, [r7, #14]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d007      	beq.n	80096b2 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	89fb      	ldrh	r3, [r7, #14]
 80096a6:	4413      	add	r3, r2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff ffda 	bl	8009662 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 80096ae:	4603      	mov	r3, r0
 80096b0:	e000      	b.n	80096b4 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 80096b2:	787b      	ldrb	r3, [r7, #1]
  }
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	460b      	mov	r3, r1
 80096c6:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80096c8:	887b      	ldrh	r3, [r7, #2]
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fafd 	bl	8009ccc <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 80096d2:	4603      	mov	r3, r0
  }
 80096d4:	4618      	mov	r0, r3
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	460b      	mov	r3, r1
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80096ea:	897b      	ldrh	r3, [r7, #10]
 80096ec:	4619      	mov	r1, r3
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f7ff f964 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80096f4:	4603      	mov	r3, r0
 80096f6:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80096f8:	8afb      	ldrh	r3, [r7, #22]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d007      	beq.n	800970e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	8afb      	ldrh	r3, [r7, #22]
 8009702:	4413      	add	r3, r2
 8009704:	4618      	mov	r0, r3
 8009706:	f7ff ff9e 	bl	8009646 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 800970a:	4603      	mov	r3, r0
 800970c:	e000      	b.n	8009710 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 800970e:	687b      	ldr	r3, [r7, #4]
  }
 8009710:	4618      	mov	r0, r3
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009724:	887b      	ldrh	r3, [r7, #2]
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 faef 	bl	8009d0c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800972e:	4603      	mov	r3, r0
  }
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	807b      	strh	r3, [r7, #2]
 8009744:	4613      	mov	r3, r2
 8009746:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8009748:	887b      	ldrh	r3, [r7, #2]
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7ff f935 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009752:	4603      	mov	r3, r0
 8009754:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009756:	89fb      	ldrh	r3, [r7, #14]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d007      	beq.n	800976c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	89fb      	ldrh	r3, [r7, #14]
 8009760:	4413      	add	r3, r2
 8009762:	4618      	mov	r0, r3
 8009764:	f000 faf2 	bl	8009d4c <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8009768:	4603      	mov	r3, r0
 800976a:	e001      	b.n	8009770 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 800976c:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009784:	887b      	ldrh	r3, [r7, #2]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 faee 	bl	8009d6a <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800978e:	4603      	mov	r3, r0
  }
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	460b      	mov	r3, r1
 80097a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80097a6:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80097a8:	897b      	ldrh	r3, [r7, #10]
 80097aa:	4619      	mov	r1, r3
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f7ff f905 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80097b2:	4603      	mov	r3, r0
 80097b4:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80097b6:	8afb      	ldrh	r3, [r7, #22]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d008      	beq.n	80097ce <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	8afb      	ldrh	r3, [r7, #22]
 80097c0:	4413      	add	r3, r2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 faf1 	bl	8009daa <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 80097c8:	eef0 7a40 	vmov.f32	s15, s0
 80097cc:	e001      	b.n	80097d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 80097ce:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 80097d2:	eeb0 0a67 	vmov.f32	s0, s15
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7ff fef9 	bl	80095e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80097ee:	4603      	mov	r3, r0
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7ff ffea 	bl	80097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009808:	4602      	mov	r2, r0
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	4293      	cmp	r3, r2
 800980e:	d306      	bcc.n	800981e <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 8009810:	4b09      	ldr	r3, [pc, #36]	; (8009838 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 8009812:	4a0a      	ldr	r2, [pc, #40]	; (800983c <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8009814:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009818:	4809      	ldr	r0, [pc, #36]	; (8009840 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 800981a:	f01b fb6b 	bl	8024ef4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fae7 	bl	8009df2 <_ZNK11flatbuffers6VectorIlE4DataEv>
 8009824:	4603      	mov	r3, r0
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	f000 fad0 	bl	8009dce <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 800982e:	4603      	mov	r3, r0
  }
 8009830:	4618      	mov	r0, r3
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	08026654 	.word	0x08026654
 800983c:	08026660 	.word	0x08026660
 8009840:	08026730 	.word	0x08026730

08009844 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009844:	b590      	push	{r4, r7, lr}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009852:	4618      	mov	r0, r3
 8009854:	f000 fae4 	bl	8009e20 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>
 8009858:	4604      	mov	r4, r0
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	f107 030c 	add.w	r3, r7, #12
 8009862:	4611      	mov	r1, r2
 8009864:	4618      	mov	r0, r3
 8009866:	f7ff fa90 	bl	8008d8a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800986a:	f107 030c 	add.w	r3, r7, #12
 800986e:	461a      	mov	r2, r3
 8009870:	4621      	mov	r1, r4
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 faf3 	bl	8009e5e <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	bd90      	pop	{r4, r7, pc}

08009880 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8009880:	b590      	push	{r4, r7, lr}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 fafc 	bl	8009e88 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009890:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00c      	beq.n	80098b4 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fb01 	bl	8009ea2 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80098a0:	4604      	mov	r4, r0
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 fb0a 	bl	8009ebc <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80098a8:	4603      	mov	r3, r0
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4619      	mov	r1, r3
 80098ae:	4620      	mov	r0, r4
 80098b0:	f7ff fa7a 	bl	8008da8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	601a      	str	r2, [r3, #0]
      }
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4618      	mov	r0, r3
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd90      	pop	{r4, r7, pc}

080098c4 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fb15 	bl	8009efe <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80098d4:	4603      	mov	r3, r0
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80098de:	b580      	push	{r7, lr}
 80098e0:	b082      	sub	sp, #8
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
	return get();
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fb1a 	bl	8009f20 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80098ec:	4603      	mov	r3, r0
      }
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b084      	sub	sp, #16
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fb0e 	bl	8009f20 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009904:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4618      	mov	r0, r3
 800990a:	f000 fabd 	bl	8009e88 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800990e:	4603      	mov	r3, r0
 8009910:	2200      	movs	r2, #0
 8009912:	601a      	str	r2, [r3, #0]
	return __p;
 8009914:	68fb      	ldr	r3, [r7, #12]
      }
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800991e:	b590      	push	{r4, r7, lr}
 8009920:	b085      	sub	sp, #20
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800992c:	4618      	mov	r0, r3
 800992e:	f000 fb04 	bl	8009f3a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>
 8009932:	4604      	mov	r4, r0
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	f107 030c 	add.w	r3, r7, #12
 800993c:	4611      	mov	r1, r2
 800993e:	4618      	mov	r0, r3
 8009940:	f7ff fa23 	bl	8008d8a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009944:	f107 030c 	add.w	r3, r7, #12
 8009948:	461a      	mov	r2, r3
 800994a:	4621      	mov	r1, r4
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fb14 	bl	8009f7a <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	bd90      	pop	{r4, r7, pc}

0800995a <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800995a:	b590      	push	{r4, r7, lr}
 800995c:	b085      	sub	sp, #20
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4618      	mov	r0, r3
 8009966:	f000 fb1d 	bl	8009fa4 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800996a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00c      	beq.n	800998e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fb22 	bl	8009fbe <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800997a:	4604      	mov	r4, r0
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 fb2b 	bl	8009fd8 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8009982:	4603      	mov	r3, r0
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4619      	mov	r1, r3
 8009988:	4620      	mov	r0, r4
 800998a:	f7ff fa0d 	bl	8008da8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	601a      	str	r2, [r3, #0]
      }
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4618      	mov	r0, r3
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	bd90      	pop	{r4, r7, pc}

0800999e <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fb36 	bl	800a01a <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80099ae:	4603      	mov	r3, r0
 80099b0:	4618      	mov	r0, r3
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
	return get();
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fb3b 	bl	800a03c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80099c6:	4603      	mov	r3, r0
      }
 80099c8:	4618      	mov	r0, r3
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fb2f 	bl	800a03c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80099de:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fade 	bl	8009fa4 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2200      	movs	r2, #0
 80099ec:	601a      	str	r2, [r3, #0]
	return __p;
 80099ee:	68fb      	ldr	r3, [r7, #12]
      }
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80099f8:	b590      	push	{r4, r7, lr}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 fb25 	bl	800a056 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	f107 030c 	add.w	r3, r7, #12
 8009a16:	4611      	mov	r1, r2
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7ff f9b6 	bl	8008d8a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009a1e:	f107 030c 	add.w	r3, r7, #12
 8009a22:	461a      	mov	r2, r3
 8009a24:	4621      	mov	r1, r4
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fb32 	bl	800a090 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd90      	pop	{r4, r7, pc}

08009a34 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009a34:	b590      	push	{r4, r7, lr}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 fb3b 	bl	800a0ba <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009a44:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00c      	beq.n	8009a68 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fb40 	bl	800a0d4 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009a54:	4604      	mov	r4, r0
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 fb49 	bl	800a0ee <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4619      	mov	r1, r3
 8009a62:	4620      	mov	r0, r4
 8009a64:	f7ff f9a0 	bl	8008da8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]
      }
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4618      	mov	r0, r3
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd90      	pop	{r4, r7, pc}

08009a78 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fb54 	bl	800a130 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
	return get();
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fb59 	bl	800a152 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009aa0:	4603      	mov	r3, r0
      }
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fb4d 	bl	800a152 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009ab8:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 fafc 	bl	800a0ba <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	601a      	str	r2, [r3, #0]
	return __p;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
      }
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009ad2:	b590      	push	{r4, r7, lr}
 8009ad4:	b085      	sub	sp, #20
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f000 fb43 	bl	800a16c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	f107 030c 	add.w	r3, r7, #12
 8009af0:	4611      	mov	r1, r2
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7ff f949 	bl	8008d8a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009af8:	f107 030c 	add.w	r3, r7, #12
 8009afc:	461a      	mov	r2, r3
 8009afe:	4621      	mov	r1, r4
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fb50 	bl	800a1a6 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd90      	pop	{r4, r7, pc}

08009b0e <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009b0e:	b590      	push	{r4, r7, lr}
 8009b10:	b085      	sub	sp, #20
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 fb59 	bl	800a1d0 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009b1e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00c      	beq.n	8009b42 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fb5e 	bl	800a1ea <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009b2e:	4604      	mov	r4, r0
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 fb67 	bl	800a204 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8009b36:	4603      	mov	r3, r0
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f7ff f933 	bl	8008da8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	601a      	str	r2, [r3, #0]
      }
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd90      	pop	{r4, r7, pc}

08009b52 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b082      	sub	sp, #8
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fb72 	bl	800a246 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009b62:	4603      	mov	r3, r0
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
	return get();
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 fb77 	bl	800a268 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009b7a:	4603      	mov	r3, r0
      }
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fb6b 	bl	800a268 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009b92:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 fb1a 	bl	800a1d0 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	601a      	str	r2, [r3, #0]
	return __p;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
      }
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009bac:	b590      	push	{r4, r7, lr}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 fb61 	bl	800a282 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	f107 030c 	add.w	r3, r7, #12
 8009bca:	4611      	mov	r1, r2
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff f8dc 	bl	8008d8a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009bd2:	f107 030c 	add.w	r3, r7, #12
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	4621      	mov	r1, r4
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fb6a 	bl	800a2b4 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd90      	pop	{r4, r7, pc}

08009be8 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009be8:	b590      	push	{r4, r7, lr}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 fb73 	bl	800a2de <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009bf8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00c      	beq.n	8009c1c <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fb78 	bl	800a2f8 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009c08:	4604      	mov	r4, r0
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 fb81 	bl	800a312 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8009c10:	4603      	mov	r3, r0
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4619      	mov	r1, r3
 8009c16:	4620      	mov	r0, r4
 8009c18:	f7ff f8c6 	bl	8008da8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	601a      	str	r2, [r3, #0]
      }
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4618      	mov	r0, r3
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd90      	pop	{r4, r7, pc}

08009c2c <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fb8c 	bl	800a354 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b082      	sub	sp, #8
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
	return get();
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fb91 	bl	800a376 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009c54:	4603      	mov	r3, r0
      }
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b084      	sub	sp, #16
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fb85 	bl	800a376 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009c6c:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 fb34 	bl	800a2de <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2200      	movs	r2, #0
 8009c7a:	601a      	str	r2, [r3, #0]
	return __p;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
      }
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
    return t;
 8009c8e:	687b      	ldr	r3, [r7, #4]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	80fb      	strh	r3, [r7, #6]
    return t;
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	71fb      	strb	r3, [r7, #7]
    return t;
 8009cbe:	79fb      	ldrb	r3, [r7, #7]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009cd8:	887b      	ldrh	r3, [r7, #2]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7fe fe6d 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	89fb      	ldrh	r3, [r7, #14]
 8009cea:	4413      	add	r3, r2
 8009cec:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009cee:	89fb      	ldrh	r3, [r7, #14]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d006      	beq.n	8009d02 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 8009cf4:	68b8      	ldr	r0, [r7, #8]
 8009cf6:	f7ff fc98 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	4413      	add	r3, r2
                        : nullptr;
 8009d00:	e000      	b.n	8009d04 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009d02:	2300      	movs	r3, #0
  }
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	460b      	mov	r3, r1
 8009d16:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009d18:	887b      	ldrh	r3, [r7, #2]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7fe fe4d 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009d22:	4603      	mov	r3, r0
 8009d24:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	89fb      	ldrh	r3, [r7, #14]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009d2e:	89fb      	ldrh	r3, [r7, #14]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d006      	beq.n	8009d42 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 8009d34:	68b8      	ldr	r0, [r7, #8]
 8009d36:	f7ff fc78 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	4413      	add	r3, r2
                        : nullptr;
 8009d40:	e000      	b.n	8009d44 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009d42:	2300      	movs	r3, #0
  }
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f993 3000 	ldrsb.w	r3, [r3]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 fb18 	bl	800a390 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8009d60:	4603      	mov	r3, r0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	460b      	mov	r3, r1
 8009d74:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009d76:	887b      	ldrh	r3, [r7, #2]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7fe fe1e 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009d80:	4603      	mov	r3, r0
 8009d82:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	89fb      	ldrh	r3, [r7, #14]
 8009d88:	4413      	add	r3, r2
 8009d8a:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009d8c:	89fb      	ldrh	r3, [r7, #14]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d006      	beq.n	8009da0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 8009d92:	68b8      	ldr	r0, [r7, #8]
 8009d94:	f7ff fc49 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	4413      	add	r3, r2
                        : nullptr;
 8009d9e:	e000      	b.n	8009da2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009da0:	2300      	movs	r3, #0
  }
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b082      	sub	sp, #8
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	edd3 7a00 	vldr	s15, [r3]
 8009db8:	eeb0 0a67 	vmov.f32	s0, s15
 8009dbc:	f000 faf5 	bl	800a3aa <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8009dc0:	eef0 7a40 	vmov.f32	s15, s0
}
 8009dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	4413      	add	r3, r2
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff ff4f 	bl	8009c86 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8009de8:	4603      	mov	r3, r0
  }
 8009dea:	4618      	mov	r0, r3
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3304      	adds	r3, #4
  }
 8009dfe:	4618      	mov	r0, r3
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009e0a:	b480      	push	{r7}
 8009e0c:	b083      	sub	sp, #12
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4618      	mov	r0, r3
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2204      	movs	r2, #4
 8009e30:	2118      	movs	r1, #24
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	4798      	blx	r3
 8009e36:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	2018      	movs	r0, #24
 8009e3e:	f7fe fd94 	bl	800896a <_ZnwjPv>
 8009e42:	4601      	mov	r1, r0
 8009e44:	460a      	mov	r2, r1
 8009e46:	2300      	movs	r3, #0
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	6053      	str	r3, [r2, #4]
 8009e4c:	6093      	str	r3, [r2, #8]
 8009e4e:	60d3      	str	r3, [r2, #12]
 8009e50:	6113      	str	r3, [r2, #16]
 8009e52:	6153      	str	r3, [r2, #20]
 8009e54:	460b      	mov	r3, r1
  }
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8009e5e:	b590      	push	{r4, r7, lr}
 8009e60:	b085      	sub	sp, #20
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	60f8      	str	r0, [r7, #12]
 8009e66:	60b9      	str	r1, [r7, #8]
 8009e68:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009e6a:	68fc      	ldr	r4, [r7, #12]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 faab 	bl	800a3c8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8009e72:	4603      	mov	r3, r0
 8009e74:	461a      	mov	r2, r3
 8009e76:	68b9      	ldr	r1, [r7, #8]
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f000 f82a 	bl	8009ed2 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd90      	pop	{r4, r7, pc}

08009e88 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 faa3 	bl	800a3de <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b082      	sub	sp, #8
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 faa3 	bl	800a3f8 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009ed2:	b590      	push	{r4, r7, lr}
 8009ed4:	b085      	sub	sp, #20
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	60f8      	str	r0, [r7, #12]
 8009eda:	60b9      	str	r1, [r7, #8]
 8009edc:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009ede:	68fc      	ldr	r4, [r7, #12]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7ff ff92 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	f107 0308 	add.w	r3, r7, #8
 8009eec:	4619      	mov	r1, r3
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f000 fa8f 	bl	800a412 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd90      	pop	{r4, r7, pc}

08009efe <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f80a 	bl	8009f20 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	bf14      	ite	ne
 8009f12:	2301      	movne	r3, #1
 8009f14:	2300      	moveq	r3, #0
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 fa8a 	bl	800a444 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009f30:	4603      	mov	r3, r0
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>:
  T* AllocatePOD() {
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b084      	sub	sp, #16
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2204      	movs	r2, #4
 8009f4a:	211c      	movs	r1, #28
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	4798      	blx	r3
 8009f50:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4619      	mov	r1, r3
 8009f56:	201c      	movs	r0, #28
 8009f58:	f7fe fd07 	bl	800896a <_ZnwjPv>
 8009f5c:	4601      	mov	r1, r0
 8009f5e:	460a      	mov	r2, r1
 8009f60:	2300      	movs	r3, #0
 8009f62:	6013      	str	r3, [r2, #0]
 8009f64:	6053      	str	r3, [r2, #4]
 8009f66:	6093      	str	r3, [r2, #8]
 8009f68:	60d3      	str	r3, [r2, #12]
 8009f6a:	6113      	str	r3, [r2, #16]
 8009f6c:	6153      	str	r3, [r2, #20]
 8009f6e:	6193      	str	r3, [r2, #24]
 8009f70:	460b      	mov	r3, r1
  }
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8009f7a:	b590      	push	{r4, r7, lr}
 8009f7c:	b085      	sub	sp, #20
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	60f8      	str	r0, [r7, #12]
 8009f82:	60b9      	str	r1, [r7, #8]
 8009f84:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009f86:	68fc      	ldr	r4, [r7, #12]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fa1d 	bl	800a3c8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	461a      	mov	r2, r3
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 f82a 	bl	8009fee <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd90      	pop	{r4, r7, pc}

08009fa4 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fa56 	bl	800a460 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f000 fa56 	bl	800a47a <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009fee:	b590      	push	{r4, r7, lr}
 8009ff0:	b085      	sub	sp, #20
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	60f8      	str	r0, [r7, #12]
 8009ff6:	60b9      	str	r1, [r7, #8]
 8009ff8:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009ffa:	68fc      	ldr	r4, [r7, #12]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7ff ff04 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a002:	4602      	mov	r2, r0
 800a004:	f107 0308 	add.w	r3, r7, #8
 800a008:	4619      	mov	r1, r3
 800a00a:	4620      	mov	r0, r4
 800a00c:	f000 fa42 	bl	800a494 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4618      	mov	r0, r3
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	bd90      	pop	{r4, r7, pc}

0800a01a <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b082      	sub	sp, #8
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f80a 	bl	800a03c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	bf14      	ite	ne
 800a02e:	2301      	movne	r3, #1
 800a030:	2300      	moveq	r3, #0
 800a032:	b2db      	uxtb	r3, r3
 800a034:	4618      	mov	r0, r3
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fa3d 	bl	800a4c6 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a04c:	4603      	mov	r3, r0
 800a04e:	4618      	mov	r0, r3
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>:
  T* AllocatePOD() {
 800a056:	b590      	push	{r4, r7, lr}
 800a058:	b085      	sub	sp, #20
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2204      	movs	r2, #4
 800a066:	2128      	movs	r1, #40	; 0x28
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	4798      	blx	r3
 800a06c:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	4619      	mov	r1, r3
 800a072:	2028      	movs	r0, #40	; 0x28
 800a074:	f7fe fc79 	bl	800896a <_ZnwjPv>
 800a078:	4604      	mov	r4, r0
 800a07a:	4620      	mov	r0, r4
 800a07c:	2328      	movs	r3, #40	; 0x28
 800a07e:	461a      	mov	r2, r3
 800a080:	2100      	movs	r1, #0
 800a082:	f01a ffcf 	bl	8025024 <memset>
 800a086:	4623      	mov	r3, r4
  }
 800a088:	4618      	mov	r0, r3
 800a08a:	3714      	adds	r7, #20
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd90      	pop	{r4, r7, pc}

0800a090 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800a090:	b590      	push	{r4, r7, lr}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800a09c:	68fc      	ldr	r4, [r7, #12]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f992 	bl	800a3c8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	68b9      	ldr	r1, [r7, #8]
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 f82a 	bl	800a104 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd90      	pop	{r4, r7, pc}

0800a0ba <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b082      	sub	sp, #8
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 fa0c 	bl	800a4e2 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 fa0c 	bl	800a4fc <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800a104:	b590      	push	{r4, r7, lr}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800a110:	68fc      	ldr	r4, [r7, #12]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7ff fe79 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a118:	4602      	mov	r2, r0
 800a11a:	f107 0308 	add.w	r3, r7, #8
 800a11e:	4619      	mov	r1, r3
 800a120:	4620      	mov	r0, r4
 800a122:	f000 f9f8 	bl	800a516 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	4618      	mov	r0, r3
 800a12a:	3714      	adds	r7, #20
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd90      	pop	{r4, r7, pc}

0800a130 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f80a 	bl	800a152 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	bf14      	ite	ne
 800a144:	2301      	movne	r3, #1
 800a146:	2300      	moveq	r3, #0
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	4618      	mov	r0, r3
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800a152:	b580      	push	{r7, lr}
 800a154:	b082      	sub	sp, #8
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 f9f3 	bl	800a548 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a162:	4603      	mov	r3, r0
 800a164:	4618      	mov	r0, r3
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 800a16c:	b590      	push	{r4, r7, lr}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2204      	movs	r2, #4
 800a17c:	2124      	movs	r1, #36	; 0x24
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	4798      	blx	r3
 800a182:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4619      	mov	r1, r3
 800a188:	2024      	movs	r0, #36	; 0x24
 800a18a:	f7fe fbee 	bl	800896a <_ZnwjPv>
 800a18e:	4604      	mov	r4, r0
 800a190:	4620      	mov	r0, r4
 800a192:	2324      	movs	r3, #36	; 0x24
 800a194:	461a      	mov	r2, r3
 800a196:	2100      	movs	r1, #0
 800a198:	f01a ff44 	bl	8025024 <memset>
 800a19c:	4623      	mov	r3, r4
  }
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd90      	pop	{r4, r7, pc}

0800a1a6 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800a1a6:	b590      	push	{r4, r7, lr}
 800a1a8:	b085      	sub	sp, #20
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	60f8      	str	r0, [r7, #12]
 800a1ae:	60b9      	str	r1, [r7, #8]
 800a1b0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800a1b2:	68fc      	ldr	r4, [r7, #12]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f907 	bl	800a3c8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	461a      	mov	r2, r3
 800a1be:	68b9      	ldr	r1, [r7, #8]
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f000 f82a 	bl	800a21a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd90      	pop	{r4, r7, pc}

0800a1d0 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f000 f9c2 	bl	800a564 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b082      	sub	sp, #8
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f000 f9c2 	bl	800a57e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4618      	mov	r0, r3
 800a210:	370c      	adds	r7, #12
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800a21a:	b590      	push	{r4, r7, lr}
 800a21c:	b085      	sub	sp, #20
 800a21e:	af00      	add	r7, sp, #0
 800a220:	60f8      	str	r0, [r7, #12]
 800a222:	60b9      	str	r1, [r7, #8]
 800a224:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800a226:	68fc      	ldr	r4, [r7, #12]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7ff fdee 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a22e:	4602      	mov	r2, r0
 800a230:	f107 0308 	add.w	r3, r7, #8
 800a234:	4619      	mov	r1, r3
 800a236:	4620      	mov	r0, r4
 800a238:	f000 f9ae 	bl	800a598 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4618      	mov	r0, r3
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	bd90      	pop	{r4, r7, pc}

0800a246 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800a246:	b580      	push	{r7, lr}
 800a248:	b082      	sub	sp, #8
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f80a 	bl	800a268 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	bf14      	ite	ne
 800a25a:	2301      	movne	r3, #1
 800a25c:	2300      	moveq	r3, #0
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4618      	mov	r0, r3
 800a274:	f000 f9a9 	bl	800a5ca <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a278:	4603      	mov	r3, r0
 800a27a:	4618      	mov	r0, r3
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 800a282:	b580      	push	{r7, lr}
 800a284:	b084      	sub	sp, #16
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2204      	movs	r2, #4
 800a292:	2104      	movs	r1, #4
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	4798      	blx	r3
 800a298:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	4619      	mov	r1, r3
 800a29e:	2004      	movs	r0, #4
 800a2a0:	f7fe fb63 	bl	800896a <_ZnwjPv>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	f04f 0200 	mov.w	r2, #0
 800a2aa:	601a      	str	r2, [r3, #0]
  }
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800a2b4:	b590      	push	{r4, r7, lr}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800a2c0:	68fc      	ldr	r4, [r7, #12]
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f880 	bl	800a3c8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	68b9      	ldr	r1, [r7, #8]
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f000 f82a 	bl	800a328 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3714      	adds	r7, #20
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd90      	pop	{r4, r7, pc}

0800a2de <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 f97c 	bl	800a5e6 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4618      	mov	r0, r3
 800a304:	f000 f97c 	bl	800a600 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800a308:	4603      	mov	r3, r0
 800a30a:	4618      	mov	r0, r3
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a312:	b480      	push	{r7}
 800a314:	b083      	sub	sp, #12
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4618      	mov	r0, r3
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800a328:	b590      	push	{r4, r7, lr}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800a334:	68fc      	ldr	r4, [r7, #12]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7ff fd67 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a33c:	4602      	mov	r2, r0
 800a33e:	f107 0308 	add.w	r3, r7, #8
 800a342:	4619      	mov	r1, r3
 800a344:	4620      	mov	r0, r4
 800a346:	f000 f968 	bl	800a61a <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	4618      	mov	r0, r3
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	bd90      	pop	{r4, r7, pc}

0800a354 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f80a 	bl	800a376 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	bf14      	ite	ne
 800a368:	2301      	movne	r3, #1
 800a36a:	2300      	moveq	r3, #0
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800a376:	b580      	push	{r7, lr}
 800a378:	b082      	sub	sp, #8
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4618      	mov	r0, r3
 800a382:	f000 f963 	bl	800a64c <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a386:	4603      	mov	r3, r0
 800a388:	4618      	mov	r0, r3
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	71fb      	strb	r3, [r7, #7]
    return t;
 800a39a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	ee07 3a90 	vmov	s15, r3
}
 800a3ba:	eeb0 0a67 	vmov.f32	s0, s15
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 f93d 	bl	800a668 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4618      	mov	r0, r3
 800a404:	f000 f93c 	bl	800a680 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a408:	4603      	mov	r3, r0
 800a40a:	4618      	mov	r0, r3
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a412:	b5b0      	push	{r4, r5, r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	60f8      	str	r0, [r7, #12]
 800a41a:	60b9      	str	r1, [r7, #8]
 800a41c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a41e:	68fc      	ldr	r4, [r7, #12]
 800a420:	68b8      	ldr	r0, [r7, #8]
 800a422:	f000 f93a 	bl	800a69a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a426:	4605      	mov	r5, r0
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff fcee 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a42e:	4603      	mov	r3, r0
 800a430:	461a      	mov	r2, r3
 800a432:	4629      	mov	r1, r5
 800a434:	4620      	mov	r0, r4
 800a436:	f000 f93b 	bl	800a6b0 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bdb0      	pop	{r4, r5, r7, pc}

0800a444 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4618      	mov	r0, r3
 800a450:	f000 f94c 	bl	800a6ec <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a454:	4603      	mov	r3, r0
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 f94b 	bl	800a706 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a470:	4603      	mov	r3, r0
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b082      	sub	sp, #8
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4618      	mov	r0, r3
 800a486:	f000 f94a 	bl	800a71e <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a48a:	4603      	mov	r3, r0
 800a48c:	4618      	mov	r0, r3
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a494:	b5b0      	push	{r4, r5, r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a4a0:	68fc      	ldr	r4, [r7, #12]
 800a4a2:	68b8      	ldr	r0, [r7, #8]
 800a4a4:	f000 f948 	bl	800a738 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff fcad 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 f949 	bl	800a74e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bdb0      	pop	{r4, r5, r7, pc}

0800a4c6 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 f95a 	bl	800a78a <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 f959 	bl	800a7a4 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4618      	mov	r0, r3
 800a508:	f000 f958 	bl	800a7bc <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a50c:	4603      	mov	r3, r0
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a516:	b5b0      	push	{r4, r5, r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	60f8      	str	r0, [r7, #12]
 800a51e:	60b9      	str	r1, [r7, #8]
 800a520:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a522:	68fc      	ldr	r4, [r7, #12]
 800a524:	68b8      	ldr	r0, [r7, #8]
 800a526:	f000 f956 	bl	800a7d6 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a52a:	4605      	mov	r5, r0
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7ff fc6c 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a532:	4603      	mov	r3, r0
 800a534:	461a      	mov	r2, r3
 800a536:	4629      	mov	r1, r5
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 f957 	bl	800a7ec <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	4618      	mov	r0, r3
 800a542:	3710      	adds	r7, #16
 800a544:	46bd      	mov	sp, r7
 800a546:	bdb0      	pop	{r4, r5, r7, pc}

0800a548 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4618      	mov	r0, r3
 800a554:	f000 f968 	bl	800a828 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a558:	4603      	mov	r3, r0
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4618      	mov	r0, r3
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 f967 	bl	800a842 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a574:	4603      	mov	r3, r0
 800a576:	4618      	mov	r0, r3
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a57e:	b580      	push	{r7, lr}
 800a580:	b082      	sub	sp, #8
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4618      	mov	r0, r3
 800a58a:	f000 f966 	bl	800a85a <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a58e:	4603      	mov	r3, r0
 800a590:	4618      	mov	r0, r3
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a598:	b5b0      	push	{r4, r5, r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a5a4:	68fc      	ldr	r4, [r7, #12]
 800a5a6:	68b8      	ldr	r0, [r7, #8]
 800a5a8:	f000 f964 	bl	800a874 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7ff fc2b 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 f965 	bl	800a88a <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bdb0      	pop	{r4, r5, r7, pc}

0800a5ca <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 f976 	bl	800a8c6 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b082      	sub	sp, #8
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 f975 	bl	800a8e0 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 f974 	bl	800a8f8 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a610:	4603      	mov	r3, r0
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a61a:	b5b0      	push	{r4, r5, r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a626:	68fc      	ldr	r4, [r7, #12]
 800a628:	68b8      	ldr	r0, [r7, #8]
 800a62a:	f000 f972 	bl	800a912 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a62e:	4605      	mov	r5, r0
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7ff fbea 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a636:	4603      	mov	r3, r0
 800a638:	461a      	mov	r2, r3
 800a63a:	4629      	mov	r1, r5
 800a63c:	4620      	mov	r0, r4
 800a63e:	f000 f973 	bl	800a928 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	4618      	mov	r0, r3
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bdb0      	pop	{r4, r5, r7, pc}

0800a64c <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4618      	mov	r0, r3
 800a658:	f000 f984 	bl	800a964 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a65c:	4603      	mov	r3, r0
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4618      	mov	r0, r3
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f9a3 	bl	800a9bc <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a676:	4603      	mov	r3, r0
 800a678:	4618      	mov	r0, r3
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 f977 	bl	800a97e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a690:	4603      	mov	r3, r0
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a6b0:	b590      	push	{r4, r7, lr}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a6bc:	68fc      	ldr	r4, [r7, #12]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7ff fba3 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f000 f964 	bl	800a996 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	1d1c      	adds	r4, r3, #4
 800a6d2:	68b8      	ldr	r0, [r7, #8]
 800a6d4:	f7ff ffe1 	bl	800a69a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	4619      	mov	r1, r3
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f000 f97b 	bl	800a9d8 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd90      	pop	{r4, r7, pc}

0800a6ec <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 f97f 	bl	800a9fa <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	4618      	mov	r0, r3
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a706:	b580      	push	{r7, lr}
 800a708:	b082      	sub	sp, #8
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f97f 	bl	800aa12 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a714:	4603      	mov	r3, r0
 800a716:	4618      	mov	r0, r3
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4618      	mov	r0, r3
 800a72a:	f000 f928 	bl	800a97e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a72e:	4603      	mov	r3, r0
 800a730:	4618      	mov	r0, r3
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4618      	mov	r0, r3
 800a744:	370c      	adds	r7, #12
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a74e:	b590      	push	{r4, r7, lr}
 800a750:	b085      	sub	sp, #20
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	60b9      	str	r1, [r7, #8]
 800a758:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a75a:	68fc      	ldr	r4, [r7, #12]
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7ff fb54 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a762:	4603      	mov	r3, r0
 800a764:	4619      	mov	r1, r3
 800a766:	4620      	mov	r0, r4
 800a768:	f000 f915 	bl	800a996 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	1d1c      	adds	r4, r3, #4
 800a770:	68b8      	ldr	r0, [r7, #8]
 800a772:	f7ff ffe1 	bl	800a738 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a776:	4603      	mov	r3, r0
 800a778:	4619      	mov	r1, r3
 800a77a:	4620      	mov	r0, r4
 800a77c:	f000 f957 	bl	800aa2e <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	4618      	mov	r0, r3
 800a784:	3714      	adds	r7, #20
 800a786:	46bd      	mov	sp, r7
 800a788:	bd90      	pop	{r4, r7, pc}

0800a78a <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b082      	sub	sp, #8
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4618      	mov	r0, r3
 800a796:	f000 f95b 	bl	800aa50 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a79a:	4603      	mov	r3, r0
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f95b 	bl	800aa68 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 f8d9 	bl	800a97e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a7ec:	b590      	push	{r4, r7, lr}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a7f8:	68fc      	ldr	r4, [r7, #12]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f7ff fb05 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a800:	4603      	mov	r3, r0
 800a802:	4619      	mov	r1, r3
 800a804:	4620      	mov	r0, r4
 800a806:	f000 f8c6 	bl	800a996 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	1d1c      	adds	r4, r3, #4
 800a80e:	68b8      	ldr	r0, [r7, #8]
 800a810:	f7ff ffe1 	bl	800a7d6 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a814:	4603      	mov	r3, r0
 800a816:	4619      	mov	r1, r3
 800a818:	4620      	mov	r0, r4
 800a81a:	f000 f933 	bl	800aa84 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	bd90      	pop	{r4, r7, pc}

0800a828 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4618      	mov	r0, r3
 800a834:	f000 f937 	bl	800aaa6 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a838:	4603      	mov	r3, r0
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f937 	bl	800aabe <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a850:	4603      	mov	r3, r0
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b082      	sub	sp, #8
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4618      	mov	r0, r3
 800a866:	f000 f88a 	bl	800a97e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a86a:	4603      	mov	r3, r0
 800a86c:	4618      	mov	r0, r3
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4618      	mov	r0, r3
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a88a:	b590      	push	{r4, r7, lr}
 800a88c:	b085      	sub	sp, #20
 800a88e:	af00      	add	r7, sp, #0
 800a890:	60f8      	str	r0, [r7, #12]
 800a892:	60b9      	str	r1, [r7, #8]
 800a894:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a896:	68fc      	ldr	r4, [r7, #12]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f7ff fab6 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 f877 	bl	800a996 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	1d1c      	adds	r4, r3, #4
 800a8ac:	68b8      	ldr	r0, [r7, #8]
 800a8ae:	f7ff ffe1 	bl	800a874 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f000 f90f 	bl	800aada <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd90      	pop	{r4, r7, pc}

0800a8c6 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b082      	sub	sp, #8
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 f913 	bl	800aafc <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f913 	bl	800ab14 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 f83b 	bl	800a97e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a908:	4603      	mov	r3, r0
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4618      	mov	r0, r3
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a928:	b590      	push	{r4, r7, lr}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a934:	68fc      	ldr	r4, [r7, #12]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7ff fa67 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a93c:	4603      	mov	r3, r0
 800a93e:	4619      	mov	r1, r3
 800a940:	4620      	mov	r0, r4
 800a942:	f000 f828 	bl	800a996 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	1d1c      	adds	r4, r3, #4
 800a94a:	68b8      	ldr	r0, [r7, #8]
 800a94c:	f7ff ffe1 	bl	800a912 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a950:	4603      	mov	r3, r0
 800a952:	4619      	mov	r1, r3
 800a954:	4620      	mov	r0, r4
 800a956:	f000 f8eb 	bl	800ab30 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4618      	mov	r0, r3
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	bd90      	pop	{r4, r7, pc}

0800a964 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 f8ef 	bl	800ab52 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a974:	4603      	mov	r3, r0
 800a976:	4618      	mov	r0, r3
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a97e:	b580      	push	{r7, lr}
 800a980:	b082      	sub	sp, #8
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f8ef 	bl	800ab6a <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 800a98c:	4603      	mov	r3, r0
 800a98e:	4618      	mov	r0, r3
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 800a996:	b590      	push	{r4, r7, lr}
 800a998:	b083      	sub	sp, #12
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 800a9a0:	687c      	ldr	r4, [r7, #4]
 800a9a2:	6838      	ldr	r0, [r7, #0]
 800a9a4:	f7ff fa31 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f000 f8e9 	bl	800ab84 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd90      	pop	{r4, r7, pc}

0800a9bc <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	3304      	adds	r3, #4
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 f8ec 	bl	800aba6 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a9e2:	6838      	ldr	r0, [r7, #0]
 800a9e4:	f7ff fe59 	bl	800a69a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b082      	sub	sp, #8
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f8da 	bl	800abbc <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b082      	sub	sp, #8
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 f8da 	bl	800abd8 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>
 800aa24:	4603      	mov	r3, r0
 800aa26:	4618      	mov	r0, r3
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b082      	sub	sp, #8
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800aa38:	6838      	ldr	r0, [r7, #0]
 800aa3a:	f7ff fe7d 	bl	800a738 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	601a      	str	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f8c8 	bl	800abee <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	4618      	mov	r0, r3
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	3304      	adds	r3, #4
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 f8c8 	bl	800ac0a <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800aa8e:	6838      	ldr	r0, [r7, #0]
 800aa90:	f7ff fea1 	bl	800a7d6 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800aa94:	4603      	mov	r3, r0
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	601a      	str	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b082      	sub	sp, #8
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f8b6 	bl	800ac20 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800aab4:	4603      	mov	r3, r0
 800aab6:	4618      	mov	r0, r3
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	3304      	adds	r3, #4
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 f8b6 	bl	800ac3c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 800aad0:	4603      	mov	r3, r0
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800aada:	b580      	push	{r7, lr}
 800aadc:	b082      	sub	sp, #8
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800aae4:	6838      	ldr	r0, [r7, #0]
 800aae6:	f7ff fec5 	bl	800a874 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800aaea:	4603      	mov	r3, r0
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	601a      	str	r2, [r3, #0]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 f8a4 	bl	800ac52 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	3304      	adds	r3, #4
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 f8a4 	bl	800ac6e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 800ab26:	4603      	mov	r3, r0
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800ab3a:	6838      	ldr	r0, [r7, #0]
 800ab3c:	f7ff fee9 	bl	800a912 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800ab40:	4603      	mov	r3, r0
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	601a      	str	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b082      	sub	sp, #8
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f892 	bl	800ac84 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800ab60:	4603      	mov	r3, r0
 800ab62:	4618      	mov	r0, r3
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b082      	sub	sp, #8
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 f893 	bl	800aca0 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800ab8e:	6838      	ldr	r0, [r7, #0]
 800ab90:	f7ff f93b 	bl	8009e0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ab94:	4602      	mov	r2, r0
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6812      	ldr	r2, [r2, #0]
 800ab9a:	601a      	str	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800aba6:	b480      	push	{r7}
 800aba8:	b083      	sub	sp, #12
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4618      	mov	r0, r3
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	3304      	adds	r3, #4
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 f874 	bl	800acb6 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>
 800abce:	4603      	mov	r3, r0
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4618      	mov	r0, r3
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800abee:	b580      	push	{r7, lr}
 800abf0:	b082      	sub	sp, #8
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	3304      	adds	r3, #4
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 f866 	bl	800accc <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>
 800ac00:	4603      	mov	r3, r0
 800ac02:	4618      	mov	r0, r3
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ac0a:	b480      	push	{r7}
 800ac0c:	b083      	sub	sp, #12
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4618      	mov	r0, r3
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 f858 	bl	800ace2 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>
 800ac32:	4603      	mov	r3, r0
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4618      	mov	r0, r3
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 f84a 	bl	800acf8 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 800ac64:	4603      	mov	r3, r0
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ac6e:	b480      	push	{r7}
 800ac70:	b083      	sub	sp, #12
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	3304      	adds	r3, #4
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 f83c 	bl	800ad0e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 800ac96:	4603      	mov	r3, r0
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4618      	mov	r0, r3
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800acb6:	b480      	push	{r7}
 800acb8:	b083      	sub	sp, #12
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4618      	mov	r0, r3
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>:
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4618      	mov	r0, r3
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>:
 800ace2:	b480      	push	{r7}
 800ace4:	b083      	sub	sp, #12
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4618      	mov	r0, r3
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4618      	mov	r0, r3
 800ad04:	370c      	adds	r7, #12
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 800ad0e:	b480      	push	{r7}
 800ad10:	b083      	sub	sp, #12
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 800ad24:	b480      	push	{r7}
 800ad26:	af00      	add	r7, sp, #0
  return names;
 800ad28:	4b02      	ldr	r3, [pc, #8]	; (800ad34 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	0802c43c 	.word	0x0802c43c

0800ad38 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_RANDOM_STANDARD_NORMAL)) return "";
 800ad42:	2300      	movs	r3, #0
 800ad44:	72bb      	strb	r3, [r7, #10]
 800ad46:	2392      	movs	r3, #146	; 0x92
 800ad48:	72fb      	strb	r3, [r7, #11]
 800ad4a:	f107 020b 	add.w	r2, r7, #11
 800ad4e:	f107 010a 	add.w	r1, r7, #10
 800ad52:	1dfb      	adds	r3, r7, #7
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 f8a9 	bl	800aeac <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 800ad60:	4b07      	ldr	r3, [pc, #28]	; (800ad80 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 800ad62:	e008      	b.n	800ad76 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 800ad64:	79fb      	ldrb	r3, [r7, #7]
 800ad66:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 800ad68:	f7ff ffdc 	bl	800ad24 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	681b      	ldr	r3, [r3, #0]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	08026eb0 	.word	0x08026eb0

0800ad84 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2106      	movs	r1, #6
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fe fcf1 	bl	8009778 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800ad96:	4603      	mov	r3, r0
  }
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3708      	adds	r7, #8
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	2108      	movs	r1, #8
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fe fc94 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800adb4:	4603      	mov	r3, r0
  }
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
	...

0800adc0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 800adce:	2300      	movs	r3, #0
 800add0:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f019 fde2 	bl	80249a2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800adde:	4603      	mov	r3, r0
 800ade0:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7ff ffdc 	bl	800ada0 <_ZNK6tflite12OperatorCode7versionEv>
 800ade8:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX) {
 800adea:	7fbb      	ldrb	r3, [r7, #30]
 800adec:	2b92      	cmp	r3, #146	; 0x92
 800adee:	d908      	bls.n	800ae02 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    TF_LITE_REPORT_ERROR(
 800adf0:	7fbb      	ldrb	r3, [r7, #30]
 800adf2:	461a      	mov	r2, r3
 800adf4:	492a      	ldr	r1, [pc, #168]	; (800aea0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7fd fd84 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 800adfc:	2301      	movs	r3, #1
 800adfe:	77fb      	strb	r3, [r7, #31]
 800ae00:	e048      	b.n	800ae94 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800ae02:	7fbb      	ldrb	r3, [r7, #30]
 800ae04:	2b20      	cmp	r3, #32
 800ae06:	d01a      	beq.n	800ae3e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	7fb9      	ldrb	r1, [r7, #30]
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	68b8      	ldr	r0, [r7, #8]
 800ae14:	4798      	blx	r3
 800ae16:	4602      	mov	r2, r0
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d137      	bne.n	800ae94 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 800ae24:	7fbb      	ldrb	r3, [r7, #30]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7ff ff86 	bl	800ad38 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	491c      	ldr	r1, [pc, #112]	; (800aea4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7fd fd66 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "An older version of this builtin might be supported. "
          "Are you using an old TFLite binary with a newer model?\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	77fb      	strb	r3, [r7, #31]
 800ae3c:	e02a      	b.n	800ae94 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7ff ffa0 	bl	800ad84 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	bf0c      	ite	eq
 800ae4a:	2301      	moveq	r3, #1
 800ae4c:	2300      	movne	r3, #0
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d006      	beq.n	800ae62 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 800ae54:	4914      	ldr	r1, [pc, #80]	; (800aea8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7fd fd54 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	77fb      	strb	r3, [r7, #31]
 800ae60:	e018      	b.n	800ae94 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f7ff ff8e 	bl	800ad84 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fd fd89 	bl	8008982 <_ZNK11flatbuffers6String5c_strEv>
 800ae70:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3304      	adds	r3, #4
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	69ba      	ldr	r2, [r7, #24]
 800ae7c:	6979      	ldr	r1, [r7, #20]
 800ae7e:	68b8      	ldr	r0, [r7, #8]
 800ae80:	4798      	blx	r3
 800ae82:	4602      	mov	r2, r0
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800ae90:	2301      	movs	r3, #1
 800ae92:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 800ae94:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3720      	adds	r7, #32
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	08026eb4 	.word	0x08026eb4
 800aea4:	08026f08 	.word	0x08026f08
 800aea8:	08026fac 	.word	0x08026fac

0800aeac <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	781a      	ldrb	r2, [r3, #0]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d305      	bcc.n	800aed0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	781a      	ldrb	r2, [r3, #0]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d201      	bcs.n	800aed4 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 800aed0:	2301      	movs	r3, #1
 800aed2:	e000      	b.n	800aed6 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3714      	adds	r7, #20
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr

0800aee2 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	ed87 0a01 	vstr	s0, [r7, #4]
 800aeec:	ed97 0a01 	vldr	s0, [r7, #4]
 800aef0:	f019 feb4 	bl	8024c5c <roundf>
 800aef4:	eef0 7a40 	vmov.f32	s15, s0
 800aef8:	eeb0 0a67 	vmov.f32	s0, s15
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800af02:	b480      	push	{r7}
 800af04:	af00      	add	r7, sp, #0
 800af06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800af0a:	4618      	mov	r0, r3
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800af14:	b5b0      	push	{r4, r5, r7, lr}
 800af16:	b088      	sub	sp, #32
 800af18:	af00      	add	r7, sp, #0
 800af1a:	ed87 0b02 	vstr	d0, [r7, #8]
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800af22:	f04f 0200 	mov.w	r2, #0
 800af26:	f04f 0300 	mov.w	r3, #0
 800af2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af2e:	f7f5 fdfd 	bl	8000b2c <__aeabi_dcmpeq>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d006      	beq.n	800af46 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	2200      	movs	r2, #0
 800af42:	601a      	str	r2, [r3, #0]
    return;
 800af44:	e06b      	b.n	800b01e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800af46:	6838      	ldr	r0, [r7, #0]
 800af48:	ed97 0b02 	vldr	d0, [r7, #8]
 800af4c:	f019 fe08 	bl	8024b60 <frexp>
 800af50:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 800af54:	f04f 0200 	mov.w	r2, #0
 800af58:	4b32      	ldr	r3, [pc, #200]	; (800b024 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 800af5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800af5e:	f7f5 fb7d 	bl	800065c <__aeabi_dmul>
 800af62:	4602      	mov	r2, r0
 800af64:	460b      	mov	r3, r1
 800af66:	ec43 2b17 	vmov	d7, r2, r3
 800af6a:	eeb0 0a47 	vmov.f32	s0, s14
 800af6e:	eef0 0a67 	vmov.f32	s1, s15
 800af72:	f000 f97a 	bl	800b26a <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800af76:	ec53 2b10 	vmov	r2, r3, d0
 800af7a:	4610      	mov	r0, r2
 800af7c:	4619      	mov	r1, r3
 800af7e:	f7f5 fe97 	bl	8000cb0 <__aeabi_d2lz>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 800af8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af8e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800af92:	f04f 0100 	mov.w	r1, #0
 800af96:	4290      	cmp	r0, r2
 800af98:	eb71 0303 	sbcs.w	r3, r1, r3
 800af9c:	da01      	bge.n	800afa2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 800af9e:	f019 ffa2 	bl	8024ee6 <abort>
  if (q_fixed == (1LL << 31)) {
 800afa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	bf08      	it	eq
 800afaa:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800afae:	d117      	bne.n	800afe0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 800afb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800afb4:	0fd9      	lsrs	r1, r3, #31
 800afb6:	4608      	mov	r0, r1
 800afb8:	f04f 0100 	mov.w	r1, #0
 800afbc:	1884      	adds	r4, r0, r2
 800afbe:	eb41 0503 	adc.w	r5, r1, r3
 800afc2:	f04f 0200 	mov.w	r2, #0
 800afc6:	f04f 0300 	mov.w	r3, #0
 800afca:	0862      	lsrs	r2, r4, #1
 800afcc:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800afd0:	106b      	asrs	r3, r5, #1
 800afd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800afe0:	f7ff ff8f 	bl	800af02 <_ZNSt14numeric_limitsIlE3maxEv>
 800afe4:	4603      	mov	r3, r0
 800afe6:	4618      	mov	r0, r3
 800afe8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800afec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aff0:	4290      	cmp	r0, r2
 800aff2:	eb71 0303 	sbcs.w	r3, r1, r3
 800aff6:	da01      	bge.n	800affc <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 800aff8:	f019 ff75 	bl	8024ee6 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f113 0f1f 	cmn.w	r3, #31
 800b004:	da08      	bge.n	800b018 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2200      	movs	r2, #0
 800b00a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800b00c:	f04f 0200 	mov.w	r2, #0
 800b010:	f04f 0300 	mov.w	r3, #0
 800b014:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800b018:	69ba      	ldr	r2, [r7, #24]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	601a      	str	r2, [r3, #0]
}
 800b01e:	3720      	adds	r7, #32
 800b020:	46bd      	mov	sp, r7
 800b022:	bdb0      	pop	{r4, r5, r7, pc}
 800b024:	41e00000 	.word	0x41e00000

0800b028 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	ed87 0b02 	vstr	d0, [r7, #8]
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800b036:	f04f 0200 	mov.w	r2, #0
 800b03a:	4b0d      	ldr	r3, [pc, #52]	; (800b070 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 800b03c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b040:	f7f5 fd9c 	bl	8000b7c <__aeabi_dcmpgt>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800b04a:	f019 ff4c 	bl	8024ee6 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	ed97 0b02 	vldr	d0, [r7, #8]
 800b056:	f7ff ff5d 	bl	800af14 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	da01      	bge.n	800b066 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 800b062:	f019 ff40 	bl	8024ee6 <abort>
}
 800b066:	bf00      	nop
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	3ff00000 	.word	0x3ff00000

0800b074 <_ZSt3minIdERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08a:	f7f5 fd59 	bl	8000b40 <__aeabi_dcmplt>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	e000      	b.n	800b09a <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 800b098:	687b      	ldr	r3, [r7, #4]
    }
 800b09a:	4618      	mov	r0, r3
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	0000      	movs	r0, r0
 800b0a4:	0000      	movs	r0, r0
	...

0800b0a8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800b0a8:	b5b0      	push	{r4, r5, r7, lr}
 800b0aa:	b08e      	sub	sp, #56	; 0x38
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	ed87 0b06 	vstr	d0, [r7, #24]
 800b0b2:	ed87 1b04 	vstr	d1, [r7, #16]
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1LL << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1LL << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1LL << 31) - 1.0);
 800b0bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b0c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b0c4:	f7f5 faca 	bl	800065c <__aeabi_dmul>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	4614      	mov	r4, r2
 800b0ce:	461d      	mov	r5, r3
 800b0d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7f5 fa54 	bl	8000588 <__aeabi_i2d>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	f7f5 fab8 	bl	800065c <__aeabi_dmul>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800b0f4:	a30e      	add	r3, pc, #56	; (adr r3, 800b130 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800b0fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b102:	f107 0320 	add.w	r3, r7, #32
 800b106:	4611      	mov	r1, r2
 800b108:	4618      	mov	r0, r3
 800b10a:	f7ff ffb3 	bl	800b074 <_ZSt3minIdERKT_S2_S2_>
 800b10e:	4603      	mov	r3, r0
 800b110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b114:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800b118:	6879      	ldr	r1, [r7, #4]
 800b11a:	68b8      	ldr	r0, [r7, #8]
 800b11c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800b120:	f7ff ff82 	bl	800b028 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800b124:	bf00      	nop
 800b126:	3738      	adds	r7, #56	; 0x38
 800b128:	46bd      	mov	sp, r7
 800b12a:	bdb0      	pop	{r4, r5, r7, pc}
 800b12c:	f3af 8000 	nop.w
 800b130:	ffc00000 	.word	0xffc00000
 800b134:	41dfffff 	.word	0x41dfffff

0800b138 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800b138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13c:	b087      	sub	sp, #28
 800b13e:	af00      	add	r7, sp, #0
 800b140:	60f8      	str	r0, [r7, #12]
 800b142:	60b9      	str	r1, [r7, #8]
 800b144:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800b146:	2201      	movs	r2, #1
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	fa02 f303 	lsl.w	r3, r2, r3
 800b14e:	3b01      	subs	r3, #1
 800b150:	4618      	mov	r0, r3
 800b152:	f7f5 fa19 	bl	8000588 <__aeabi_i2d>
 800b156:	4682      	mov	sl, r0
 800b158:	468b      	mov	fp, r1
      (1LL << (total_signed_bits - input_integer_bits)) /
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	1ad1      	subs	r1, r2, r3
 800b160:	f04f 0201 	mov.w	r2, #1
 800b164:	f04f 0300 	mov.w	r3, #0
 800b168:	f1a1 0620 	sub.w	r6, r1, #32
 800b16c:	f1c1 0020 	rsb	r0, r1, #32
 800b170:	fa03 f901 	lsl.w	r9, r3, r1
 800b174:	fa02 f606 	lsl.w	r6, r2, r6
 800b178:	ea49 0906 	orr.w	r9, r9, r6
 800b17c:	fa22 f000 	lsr.w	r0, r2, r0
 800b180:	ea49 0900 	orr.w	r9, r9, r0
 800b184:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800b188:	4640      	mov	r0, r8
 800b18a:	4649      	mov	r1, r9
 800b18c:	f7f5 fa38 	bl	8000600 <__aeabi_l2d>
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	4650      	mov	r0, sl
 800b196:	4659      	mov	r1, fp
 800b198:	f7f5 fa60 	bl	800065c <__aeabi_dmul>
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4690      	mov	r8, r2
 800b1a2:	4699      	mov	r9, r3
      (1LL << input_left_shift);
 800b1a4:	f04f 0201 	mov.w	r2, #1
 800b1a8:	f04f 0300 	mov.w	r3, #0
 800b1ac:	68b9      	ldr	r1, [r7, #8]
 800b1ae:	f1a1 0620 	sub.w	r6, r1, #32
 800b1b2:	f1c1 0020 	rsb	r0, r1, #32
 800b1b6:	fa03 f501 	lsl.w	r5, r3, r1
 800b1ba:	fa02 f606 	lsl.w	r6, r2, r6
 800b1be:	4335      	orrs	r5, r6
 800b1c0:	fa22 f000 	lsr.w	r0, r2, r0
 800b1c4:	4305      	orrs	r5, r0
 800b1c6:	fa02 f401 	lsl.w	r4, r2, r1
      (1LL << (total_signed_bits - input_integer_bits)) /
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	f7f5 fa17 	bl	8000600 <__aeabi_l2d>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	460b      	mov	r3, r1
  const double max_input_rescaled =
 800b1d6:	4640      	mov	r0, r8
 800b1d8:	4649      	mov	r1, r9
 800b1da:	f7f5 fb69 	bl	80008b0 <__aeabi_ddiv>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800b1e6:	ed97 0b04 	vldr	d0, [r7, #16]
 800b1ea:	f019 fc39 	bl	8024a60 <floor>
 800b1ee:	ec53 2b10 	vmov	r2, r3, d0
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	f7f5 fccb 	bl	8000b90 <__aeabi_d2iz>
 800b1fa:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	371c      	adds	r7, #28
 800b200:	46bd      	mov	sp, r7
 800b202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b206 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800b206:	b480      	push	{r7}
 800b208:	b083      	sub	sp, #12
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	ed93 7a00 	vldr	s14, [r3]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	edd3 7a00 	vldr	s15, [r3]
 800b21c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b224:	d501      	bpl.n	800b22a <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	e000      	b.n	800b22c <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800b22a:	687b      	ldr	r3, [r7, #4]
    }
 800b22c:	4618      	mov	r0, r3
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	ed93 7a00 	vldr	s14, [r3]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	edd3 7a00 	vldr	s15, [r3]
 800b24e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b256:	d501      	bpl.n	800b25c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	e000      	b.n	800b25e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800b25c:	687b      	ldr	r3, [r7, #4]
    }
 800b25e:	4618      	mov	r0, r3
 800b260:	370c      	adds	r7, #12
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr

0800b26a <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b082      	sub	sp, #8
 800b26e:	af00      	add	r7, sp, #0
 800b270:	ed87 0b00 	vstr	d0, [r7]
 800b274:	ed97 0b00 	vldr	d0, [r7]
 800b278:	f019 fcaa 	bl	8024bd0 <round>
 800b27c:	eeb0 7a40 	vmov.f32	s14, s0
 800b280:	eef0 7a60 	vmov.f32	s15, s1
 800b284:	eeb0 0a47 	vmov.f32	s0, s14
 800b288:	eef0 0a67 	vmov.f32	s1, s15
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 800b292:	b580      	push	{r7, lr}
 800b294:	b082      	sub	sp, #8
 800b296:	af00      	add	r7, sp, #0
 800b298:	ed87 0a01 	vstr	s0, [r7, #4]
 800b29c:	ed97 0a01 	vldr	s0, [r7, #4]
 800b2a0:	f7ff fe1f 	bl	800aee2 <_ZSt5roundf>
 800b2a4:	eef0 7a40 	vmov.f32	s15, s0
 800b2a8:	eeb0 0a67 	vmov.f32	s0, s15
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800b2b2:	b480      	push	{r7}
 800b2b4:	b083      	sub	sp, #12
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	ed87 0b00 	vstr	d0, [r7]
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	6879      	ldr	r1, [r7, #4]
 800b2c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b2c4:	ec43 2b17 	vmov	d7, r2, r3
 800b2c8:	eeb0 0a47 	vmov.f32	s0, s14
 800b2cc:	eef0 0a67 	vmov.f32	s1, s15
 800b2d0:	370c      	adds	r7, #12
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
	...

0800b2dc <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 800b2dc:	b480      	push	{r7}
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	4b02      	ldr	r3, [pc, #8]	; (800b2ec <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	ffff8000 	.word	0xffff8000

0800b2f0 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 800b2f0:	b480      	push	{r7}
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr

0800b302 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800b302:	b480      	push	{r7}
 800b304:	af00      	add	r7, sp, #0
 800b306:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b30a:	4618      	mov	r0, r3
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	ed87 0a01 	vstr	s0, [r7, #4]
 800b31e:	ed97 0a01 	vldr	s0, [r7, #4]
 800b322:	f019 fcc1 	bl	8024ca8 <expf>
 800b326:	eef0 7a40 	vmov.f32	s15, s0
 800b32a:	eeb0 0a67 	vmov.f32	s0, s15
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800b334:	b5b0      	push	{r4, r5, r7, lr}
 800b336:	b08c      	sub	sp, #48	; 0x30
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	429a      	cmp	r2, r3
 800b344:	d107      	bne.n	800b356 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800b346:	f7ff ffdc 	bl	800b302 <_ZNSt14numeric_limitsIlE3minEv>
 800b34a:	4602      	mov	r2, r0
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4293      	cmp	r3, r2
 800b350:	d101      	bne.n	800b356 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800b352:	2301      	movs	r3, #1
 800b354:	e000      	b.n	800b358 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800b356:	2300      	movs	r3, #0
 800b358:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	461a      	mov	r2, r3
 800b360:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b364:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	461a      	mov	r2, r3
 800b36c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b370:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b376:	69ba      	ldr	r2, [r7, #24]
 800b378:	fb02 f203 	mul.w	r2, r2, r3
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	6a39      	ldr	r1, [r7, #32]
 800b380:	fb01 f303 	mul.w	r3, r1, r3
 800b384:	18d1      	adds	r1, r2, r3
 800b386:	6a3a      	ldr	r2, [r7, #32]
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	fba2 2303 	umull	r2, r3, r2, r3
 800b38e:	4419      	add	r1, r3
 800b390:	460b      	mov	r3, r1
 800b392:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b396:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800b39a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b39e:	2a00      	cmp	r2, #0
 800b3a0:	f173 0300 	sbcs.w	r3, r3, #0
 800b3a4:	db02      	blt.n	800b3ac <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 800b3a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3aa:	e000      	b.n	800b3ae <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 800b3ac:	4b18      	ldr	r3, [pc, #96]	; (800b410 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800b3ae:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800b3b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b3bc:	1884      	adds	r4, r0, r2
 800b3be:	eb41 0503 	adc.w	r5, r1, r3
 800b3c2:	4622      	mov	r2, r4
 800b3c4:	462b      	mov	r3, r5
 800b3c6:	2a00      	cmp	r2, #0
 800b3c8:	f173 0100 	sbcs.w	r1, r3, #0
 800b3cc:	da06      	bge.n	800b3dc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800b3ce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800b3d2:	f04f 0100 	mov.w	r1, #0
 800b3d6:	1812      	adds	r2, r2, r0
 800b3d8:	eb41 0303 	adc.w	r3, r1, r3
 800b3dc:	f04f 0000 	mov.w	r0, #0
 800b3e0:	f04f 0100 	mov.w	r1, #0
 800b3e4:	0fd0      	lsrs	r0, r2, #31
 800b3e6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800b3ea:	17d9      	asrs	r1, r3, #31
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800b3f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d003      	beq.n	800b404 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 800b3fc:	f7ff fd81 	bl	800af02 <_ZNSt14numeric_limitsIlE3maxEv>
 800b400:	4603      	mov	r3, r0
 800b402:	e000      	b.n	800b406 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 800b404:	68bb      	ldr	r3, [r7, #8]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3730      	adds	r7, #48	; 0x30
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bdb0      	pop	{r4, r5, r7, pc}
 800b40e:	bf00      	nop
 800b410:	c0000001 	.word	0xc0000001

0800b414 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b426:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	dc02      	bgt.n	800b434 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	425b      	negs	r3, r3
 800b432:	e000      	b.n	800b436 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 800b434:	2300      	movs	r3, #0
 800b436:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	fa02 f303 	lsl.w	r3, r2, r3
 800b440:	68b9      	ldr	r1, [r7, #8]
 800b442:	4618      	mov	r0, r3
 800b444:	f7ff ff76 	bl	800b334 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800b448:	4603      	mov	r3, r0
 800b44a:	6939      	ldr	r1, [r7, #16]
 800b44c:	4618      	mov	r0, r3
 800b44e:	f000 f8c9 	bl	800b5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800b452:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 800b454:	4618      	mov	r0, r3
 800b456:	3718      	adds	r7, #24
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <_ZN6tflite29MultiplyByQuantizedMultiplierExli>:

inline int32_t MultiplyByQuantizedMultiplier(int64_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 800b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b460:	b089      	sub	sp, #36	; 0x24
 800b462:	af00      	add	r7, sp, #0
 800b464:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800b468:	607a      	str	r2, [r7, #4]
 800b46a:	603b      	str	r3, [r7, #0]
  //
  // Assumptions: The following input ranges are assumed
  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)
  // - scaling is chosen so final scaled result fits in int32_t
  // - input x is in the range -(1<<47) <= x < (1<<47)
  assert(quantized_multiplier >= 0);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	da05      	bge.n	800b47e <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x22>
 800b472:	4b42      	ldr	r3, [pc, #264]	; (800b57c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x120>)
 800b474:	4a42      	ldr	r2, [pc, #264]	; (800b580 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 800b476:	21b3      	movs	r1, #179	; 0xb3
 800b478:	4842      	ldr	r0, [pc, #264]	; (800b584 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 800b47a:	f019 fd3b 	bl	8024ef4 <__assert_func>
  assert(shift >= -31 && shift < 8);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	f113 0f1f 	cmn.w	r3, #31
 800b484:	db02      	blt.n	800b48c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x30>
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	2b07      	cmp	r3, #7
 800b48a:	dd05      	ble.n	800b498 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x3c>
 800b48c:	4b3e      	ldr	r3, [pc, #248]	; (800b588 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x12c>)
 800b48e:	4a3c      	ldr	r2, [pc, #240]	; (800b580 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 800b490:	21b4      	movs	r1, #180	; 0xb4
 800b492:	483c      	ldr	r0, [pc, #240]	; (800b584 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 800b494:	f019 fd2e 	bl	8024ef4 <__assert_func>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
 800b498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b49c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4a0:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
 800b4a4:	4290      	cmp	r0, r2
 800b4a6:	eb71 0303 	sbcs.w	r3, r1, r3
 800b4aa:	da09      	bge.n	800b4c0 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x64>
 800b4ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b4b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4b4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800b4b8:	4290      	cmp	r0, r2
 800b4ba:	eb71 0303 	sbcs.w	r3, r1, r3
 800b4be:	da05      	bge.n	800b4cc <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x70>
 800b4c0:	4b32      	ldr	r3, [pc, #200]	; (800b58c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x130>)
 800b4c2:	4a2f      	ldr	r2, [pc, #188]	; (800b580 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 800b4c4:	21b5      	movs	r1, #181	; 0xb5
 800b4c6:	482f      	ldr	r0, [pc, #188]	; (800b584 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 800b4c8:	f019 fd14 	bl	8024ef4 <__assert_func>
         x < (static_cast<int64_t>(1) << 47));

  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a30      	ldr	r2, [pc, #192]	; (800b590 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x134>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	dc04      	bgt.n	800b4de <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x82>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b4da:	141b      	asrs	r3, r3, #16
 800b4dc:	e001      	b.n	800b4e2 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x86>
 800b4de:	f647 73ff 	movw	r3, #32767	; 0x7fff
  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
 800b4e2:	61fb      	str	r3, [r7, #28]
                                   : 0x7FFF;
  int total_shift = 15 - shift;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	f1c3 030f 	rsb	r3, r3, #15
 800b4ea:	61bb      	str	r3, [r7, #24]
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b4f4:	68b9      	ldr	r1, [r7, #8]
 800b4f6:	fb03 f001 	mul.w	r0, r3, r1
 800b4fa:	68f9      	ldr	r1, [r7, #12]
 800b4fc:	fb02 f101 	mul.w	r1, r2, r1
 800b500:	1846      	adds	r6, r0, r1
 800b502:	68b9      	ldr	r1, [r7, #8]
 800b504:	fba1 0102 	umull	r0, r1, r1, r2
 800b508:	1873      	adds	r3, r6, r1
 800b50a:	4619      	mov	r1, r3
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	1e5e      	subs	r6, r3, #1
 800b510:	f04f 0201 	mov.w	r2, #1
 800b514:	f04f 0300 	mov.w	r3, #0
 800b518:	f1a6 0e20 	sub.w	lr, r6, #32
 800b51c:	f1c6 0c20 	rsb	ip, r6, #32
 800b520:	fa03 f506 	lsl.w	r5, r3, r6
 800b524:	fa02 fe0e 	lsl.w	lr, r2, lr
 800b528:	ea45 050e 	orr.w	r5, r5, lr
 800b52c:	fa22 fc0c 	lsr.w	ip, r2, ip
 800b530:	ea45 050c 	orr.w	r5, r5, ip
 800b534:	fa02 f406 	lsl.w	r4, r2, r6
 800b538:	eb10 0a04 	adds.w	sl, r0, r4
 800b53c:	eb41 0b05 	adc.w	fp, r1, r5
 800b540:	e9c7 ab02 	strd	sl, fp, [r7, #8]
  int32_t result = x >> total_shift;
 800b544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b548:	69b9      	ldr	r1, [r7, #24]
 800b54a:	f1c1 0420 	rsb	r4, r1, #32
 800b54e:	f1b1 0020 	subs.w	r0, r1, #32
 800b552:	fa22 f801 	lsr.w	r8, r2, r1
 800b556:	fa03 f404 	lsl.w	r4, r3, r4
 800b55a:	ea48 0804 	orr.w	r8, r8, r4
 800b55e:	d403      	bmi.n	800b568 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x10c>
 800b560:	fa43 f000 	asr.w	r0, r3, r0
 800b564:	ea48 0800 	orr.w	r8, r8, r0
 800b568:	fa43 f901 	asr.w	r9, r3, r1
 800b56c:	4643      	mov	r3, r8
 800b56e:	617b      	str	r3, [r7, #20]
  return result;
 800b570:	697b      	ldr	r3, [r7, #20]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3724      	adds	r7, #36	; 0x24
 800b576:	46bd      	mov	sp, r7
 800b578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57c:	08026fe4 	.word	0x08026fe4
 800b580:	08027000 	.word	0x08027000
 800b584:	08027048 	.word	0x08027048
 800b588:	080270bc 	.word	0x080270bc
 800b58c:	080270d8 	.word	0x080270d8
 800b590:	7ffeffff 	.word	0x7ffeffff

0800b594 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	da01      	bge.n	800b5ae <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	e000      	b.n	800b5b0 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800b5ae:	687b      	ldr	r3, [r7, #4]
    }
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	da01      	bge.n	800b5d6 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	e000      	b.n	800b5d8 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800b5d6:	687b      	ldr	r3, [r7, #4]
    }
 800b5d8:	4618      	mov	r0, r3
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800b5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e6:	b089      	sub	sp, #36	; 0x24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800b5ee:	6839      	ldr	r1, [r7, #0]
 800b5f0:	2900      	cmp	r1, #0
 800b5f2:	da06      	bge.n	800b602 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800b5f4:	4b31      	ldr	r3, [pc, #196]	; (800b6bc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800b5f6:	4a32      	ldr	r2, [pc, #200]	; (800b6c0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800b5f8:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800b5fc:	4831      	ldr	r0, [pc, #196]	; (800b6c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800b5fe:	f019 fc79 	bl	8024ef4 <__assert_func>
  assert(exponent <= 31);
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	291f      	cmp	r1, #31
 800b606:	dd06      	ble.n	800b616 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800b608:	4b2f      	ldr	r3, [pc, #188]	; (800b6c8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 800b60a:	4a2d      	ldr	r2, [pc, #180]	; (800b6c0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800b60c:	f240 1167 	movw	r1, #359	; 0x167
 800b610:	482c      	ldr	r0, [pc, #176]	; (800b6c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800b612:	f019 fc6f 	bl	8024ef4 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800b616:	f04f 0001 	mov.w	r0, #1
 800b61a:	f04f 0100 	mov.w	r1, #0
 800b61e:	683c      	ldr	r4, [r7, #0]
 800b620:	f1a4 0620 	sub.w	r6, r4, #32
 800b624:	f1c4 0520 	rsb	r5, r4, #32
 800b628:	fa01 f304 	lsl.w	r3, r1, r4
 800b62c:	fa00 f606 	lsl.w	r6, r0, r6
 800b630:	4333      	orrs	r3, r6
 800b632:	fa20 f505 	lsr.w	r5, r0, r5
 800b636:	432b      	orrs	r3, r5
 800b638:	fa00 f204 	lsl.w	r2, r0, r4
 800b63c:	4613      	mov	r3, r2
 800b63e:	3b01      	subs	r3, #1
 800b640:	4618      	mov	r0, r3
 800b642:	f000 f881 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b646:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800b648:	2000      	movs	r0, #0
 800b64a:	f000 f87d 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b64e:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800b650:	2001      	movs	r0, #1
 800b652:	f000 f879 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b656:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800b658:	69f9      	ldr	r1, [r7, #28]
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f87f 	bl	800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b660:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800b662:	2101      	movs	r1, #1
 800b664:	69f8      	ldr	r0, [r7, #28]
 800b666:	f000 f888 	bl	800b77a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800b66a:	4604      	mov	r4, r0
 800b66c:	69b9      	ldr	r1, [r7, #24]
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 f892 	bl	800b798 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800b674:	4603      	mov	r3, r0
 800b676:	6979      	ldr	r1, [r7, #20]
 800b678:	4618      	mov	r0, r3
 800b67a:	f000 f870 	bl	800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b67e:	4603      	mov	r3, r0
 800b680:	4619      	mov	r1, r3
 800b682:	4620      	mov	r0, r4
 800b684:	f000 f89c 	bl	800b7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800b688:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f874 	bl	800b77a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800b692:	4604      	mov	r4, r0
 800b694:	68f9      	ldr	r1, [r7, #12]
 800b696:	6938      	ldr	r0, [r7, #16]
 800b698:	f000 f8a0 	bl	800b7dc <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800b69c:	4603      	mov	r3, r0
 800b69e:	6979      	ldr	r1, [r7, #20]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f000 f85c 	bl	800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 f888 	bl	800b7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800b6b0:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3724      	adds	r7, #36	; 0x24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	080271f8 	.word	0x080271f8
 800b6c0:	08027208 	.word	0x08027208
 800b6c4:	08027264 	.word	0x08027264
 800b6c8:	080272d8 	.word	0x080272d8

0800b6cc <_ZN6tflite17CountLeadingZerosImEEiT_>:
  return result;
}
#endif

template <typename T>
int CountLeadingZeros(T integer_input) {
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 800b6e0:	e000      	b.n	800b6e4 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 800b6e2:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800b706:	b590      	push	{r4, r7, lr}
 800b708:	b085      	sub	sp, #20
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800b70e:	f107 030c 	add.w	r3, r7, #12
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff ffec 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800b718:	4604      	mov	r4, r0
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f814 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b720:	4603      	mov	r3, r0
 800b722:	6023      	str	r3, [r4, #0]
    return retval;
 800b724:	68fb      	ldr	r3, [r7, #12]
  }
 800b726:	4618      	mov	r0, r3
 800b728:	3714      	adds	r7, #20
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd90      	pop	{r4, r7, pc}

0800b72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800b72e:	b580      	push	{r7, lr}
 800b730:	b082      	sub	sp, #8
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800b736:	2100      	movs	r1, #0
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7ff ff53 	bl	800b5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800b73e:	4603      	mov	r3, r0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  return x;
 800b750:	687b      	ldr	r3, [r7, #4]
}
 800b752:	4618      	mov	r0, r3
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800b75e:	b480      	push	{r7}
 800b760:	b083      	sub	sp, #12
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	6039      	str	r1, [r7, #0]
  return a & b;
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	4013      	ands	r3, r2
}
 800b76e:	4618      	mov	r0, r3
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800b77a:	b480      	push	{r7}
 800b77c:	b083      	sub	sp, #12
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	fa42 f303 	asr.w	r3, r2, r3
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	bfb4      	ite	lt
 800b7aa:	2301      	movlt	r3, #1
 800b7ac:	2300      	movge	r3, #0
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f000 f841 	bl	800b838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b7b6:	4603      	mov	r3, r0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3708      	adds	r7, #8
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  return a + b;
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	4413      	add	r3, r2
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	bfcc      	ite	gt
 800b7ee:	2301      	movgt	r3, #1
 800b7f0:	2300      	movle	r3, #0
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 f81f 	bl	800b838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b7fa:	4603      	mov	r3, r0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 f824 	bl	800b85a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 800b812:	4603      	mov	r3, r0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  return a - b;
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	1ad3      	subs	r3, r2, r3
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d004      	beq.n	800b850 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800b846:	2000      	movs	r0, #0
 800b848:	f000 f814 	bl	800b874 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800b84c:	4603      	mov	r3, r0
 800b84e:	e000      	b.n	800b852 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800b862:	2101      	movs	r1, #1
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f7ff febd 	bl	800b5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800b86a:	4603      	mov	r3, r0
  }
 800b86c:	4618      	mov	r0, r3
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  return ~a;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	43db      	mvns	r3, r3
}
 800b880:	4618      	mov	r0, r3
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 800b88c:	b480      	push	{r7}
 800b88e:	b089      	sub	sp, #36	; 0x24
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	461a      	mov	r2, r3
 800b89a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b89e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b8b0:	69f9      	ldr	r1, [r7, #28]
 800b8b2:	fb02 f001 	mul.w	r0, r2, r1
 800b8b6:	69b9      	ldr	r1, [r7, #24]
 800b8b8:	fb03 f101 	mul.w	r1, r3, r1
 800b8bc:	4401      	add	r1, r0
 800b8be:	69b8      	ldr	r0, [r7, #24]
 800b8c0:	fba0 2302 	umull	r2, r3, r0, r2
 800b8c4:	4419      	add	r1, r3
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b8cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 800b8d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8d4:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 800b8d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b8da:	60bb      	str	r3, [r7, #8]
             ? min
 800b8dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b8e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800b8e4:	f173 33ff 	sbcs.w	r3, r3, #4294967295	; 0xffffffff
 800b8e8:	db0e      	blt.n	800b908 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 800b8ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b8ee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800b8f2:	f04f 0100 	mov.w	r1, #0
 800b8f6:	4290      	cmp	r0, r2
 800b8f8:	eb71 0303 	sbcs.w	r3, r1, r3
 800b8fc:	db01      	blt.n	800b902 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 800b8fe:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 800b900:	e004      	b.n	800b90c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 800b902:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 800b906:	e001      	b.n	800b90c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 800b908:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3724      	adds	r7, #36	; 0x24
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 800b918:	b590      	push	{r4, r7, lr}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 800b924:	68b9      	ldr	r1, [r7, #8]
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f7ff ff19 	bl	800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b92c:	4604      	mov	r4, r0
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f7ff ffa0 	bl	800b874 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800b934:	4603      	mov	r3, r0
 800b936:	6879      	ldr	r1, [r7, #4]
 800b938:	4618      	mov	r0, r3
 800b93a:	f7ff ff10 	bl	800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b93e:	4603      	mov	r3, r0
 800b940:	4619      	mov	r1, r3
 800b942:	4620      	mov	r0, r4
 800b944:	f000 f805 	bl	800b952 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 800b948:	4603      	mov	r3, r0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd90      	pop	{r4, r7, pc}

0800b952 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 800b952:	b480      	push	{r7}
 800b954:	b083      	sub	sp, #12
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
 800b95a:	6039      	str	r1, [r7, #0]
  return a ^ b;
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	4053      	eors	r3, r2
}
 800b962:	4618      	mov	r0, r3
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 800b96e:	b480      	push	{r7}
 800b970:	af00      	add	r7, sp, #0
 800b972:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800b976:	4618      	mov	r0, r3
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800b980:	b480      	push	{r7}
 800b982:	af00      	add	r7, sp, #0
 800b984:	237f      	movs	r3, #127	; 0x7f
 800b986:	4618      	mov	r0, r3
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800b990:	b480      	push	{r7}
 800b992:	af00      	add	r7, sp, #0
 800b994:	2300      	movs	r3, #0
 800b996:	4618      	mov	r0, r3
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 800b9a0:	b480      	push	{r7}
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	23ff      	movs	r3, #255	; 0xff
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 800b9ca:	b480      	push	{r7}
 800b9cc:	b083      	sub	sp, #12
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	4413      	add	r3, r2
 800b9de:	685b      	ldr	r3, [r3, #4]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	da01      	bge.n	800ba06 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	e000      	b.n	800ba08 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 800ba06:	687b      	ldr	r3, [r7, #4]
    }
 800ba08:	4618      	mov	r0, r3
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d005      	beq.n	800ba32 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	689a      	ldr	r2, [r3, #8]
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	019b      	lsls	r3, r3, #6
 800ba2e:	4413      	add	r3, r2
 800ba30:	e006      	b.n	800ba40 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	4798      	blx	r3
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	bf00      	nop
  }
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 800ba48:	b480      	push	{r7}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
 800ba54:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	db0f      	blt.n	800ba7c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	da0b      	bge.n	800ba7c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	683a      	ldr	r2, [r7, #0]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba76:	d001      	beq.n	800ba7c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	e001      	b.n	800ba80 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 800ba7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	371c      	adds	r7, #28
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b086      	sub	sp, #24
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 800ba9c:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800baa4:	6879      	ldr	r1, [r7, #4]
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f7ff ffce 	bl	800ba48 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800baac:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	da01      	bge.n	800bab8 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800bab4:	2300      	movs	r3, #0
 800bab6:	e005      	b.n	800bac4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 800bab8:	6979      	ldr	r1, [r7, #20]
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f7ff ffaa 	bl	800ba14 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800bac0:	4603      	mov	r3, r0
 800bac2:	bf00      	nop
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3718      	adds	r7, #24
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	68b9      	ldr	r1, [r7, #8]
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f7ff ffd5 	bl	800ba8c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 800bae2:	4603      	mov	r3, r0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  if (tensor == nullptr) return nullptr;
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 800baec:	b580      	push	{r7, lr}
 800baee:	b086      	sub	sp, #24
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 800bafc:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800bb04:	6879      	ldr	r1, [r7, #4]
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f7ff ff9e 	bl	800ba48 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800bb0c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	da01      	bge.n	800bb18 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800bb14:	2300      	movs	r3, #0
 800bb16:	e005      	b.n	800bb24 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 800bb18:	6979      	ldr	r1, [r7, #20]
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f7ff ff7a 	bl	800ba14 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800bb20:	4603      	mov	r3, r0
 800bb22:	bf00      	nop
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3718      	adds	r7, #24
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	68b9      	ldr	r1, [r7, #8]
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7ff ffc5 	bl	800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800bb42:	4603      	mov	r3, r0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>:
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int32_t* per_channel_shift,
    int num_channels) {
 800bb4c:	b5b0      	push	{r4, r5, r7, lr}
 800bb4e:	b09c      	sub	sp, #112	; 0x70
 800bb50:	af04      	add	r7, sp, #16
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
 800bb58:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d013      	beq.n	800bb8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x40>
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	695c      	ldr	r4, [r3, #20]
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb6e:	461a      	mov	r2, r3
 800bb70:	2301      	movs	r3, #1
 800bb72:	9303      	str	r3, [sp, #12]
 800bb74:	9202      	str	r2, [sp, #8]
 800bb76:	4b98      	ldr	r3, [pc, #608]	; (800bdd8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	4b98      	ldr	r3, [pc, #608]	; (800bddc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x290>)
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	23da      	movs	r3, #218	; 0xda
 800bb80:	4a97      	ldr	r2, [pc, #604]	; (800bde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800bb82:	4998      	ldr	r1, [pc, #608]	; (800bde4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	47a0      	blx	r4
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e173      	b.n	800be74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d013      	beq.n	800bbbe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x72>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	695c      	ldr	r4, [r3, #20]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bba0:	461a      	mov	r2, r3
 800bba2:	2301      	movs	r3, #1
 800bba4:	9303      	str	r3, [sp, #12]
 800bba6:	9202      	str	r2, [sp, #8]
 800bba8:	4b8b      	ldr	r3, [pc, #556]	; (800bdd8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 800bbaa:	9301      	str	r3, [sp, #4]
 800bbac:	4b8e      	ldr	r3, [pc, #568]	; (800bde8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x29c>)
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	23dc      	movs	r3, #220	; 0xdc
 800bbb2:	4a8b      	ldr	r2, [pc, #556]	; (800bde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800bbb4:	498b      	ldr	r1, [pc, #556]	; (800bde4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	47a0      	blx	r4
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e15a      	b.n	800be74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc2:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 800bbc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10a      	bne.n	800bbe0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x94>
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	695c      	ldr	r4, [r3, #20]
 800bbce:	4b87      	ldr	r3, [pc, #540]	; (800bdec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a0>)
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	23e7      	movs	r3, #231	; 0xe7
 800bbd4:	4a82      	ldr	r2, [pc, #520]	; (800bde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800bbd6:	4986      	ldr	r1, [pc, #536]	; (800bdf0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	47a0      	blx	r4
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e149      	b.n	800be74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800bbe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10a      	bne.n	800bbfe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xb2>
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	695c      	ldr	r4, [r3, #20]
 800bbec:	4b81      	ldr	r3, [pc, #516]	; (800bdf4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a8>)
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	23e8      	movs	r3, #232	; 0xe8
 800bbf2:	4a7b      	ldr	r2, [pc, #492]	; (800bde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800bbf4:	497e      	ldr	r1, [pc, #504]	; (800bdf0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	47a0      	blx	r4
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e13a      	b.n	800be74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 800bbfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	bfcc      	ite	gt
 800bc08:	2301      	movgt	r3, #1
 800bc0a:	2300      	movle	r3, #0
 800bc0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 800bc10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d067      	beq.n	800bce8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	2b09      	cmp	r3, #9
 800bc1e:	d00e      	beq.n	800bc3e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf2>
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	2b07      	cmp	r3, #7
 800bc26:	d00a      	beq.n	800bc3e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf2>
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	695c      	ldr	r4, [r3, #20]
 800bc2c:	4b72      	ldr	r3, [pc, #456]	; (800bdf8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2ac>)
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	23ec      	movs	r3, #236	; 0xec
 800bc32:	4a6b      	ldr	r2, [pc, #428]	; (800bde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800bc34:	496e      	ldr	r1, [pc, #440]	; (800bdf0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	47a0      	blx	r4
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e11a      	b.n	800be74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2b09      	cmp	r3, #9
 800bc44:	d012      	beq.n	800bc6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x120>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	695c      	ldr	r4, [r3, #20]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	2309      	movs	r3, #9
 800bc52:	9303      	str	r3, [sp, #12]
 800bc54:	9202      	str	r2, [sp, #8]
 800bc56:	4b69      	ldr	r3, [pc, #420]	; (800bdfc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b0>)
 800bc58:	9301      	str	r3, [sp, #4]
 800bc5a:	4b69      	ldr	r3, [pc, #420]	; (800be00 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b4>)
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	23ee      	movs	r3, #238	; 0xee
 800bc60:	4a5f      	ldr	r2, [pc, #380]	; (800bde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800bc62:	4960      	ldr	r1, [pc, #384]	; (800bde4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	47a0      	blx	r4
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e103      	b.n	800be74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 800bc6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d013      	beq.n	800bca2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x156>
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	695c      	ldr	r4, [r3, #20]
 800bc7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bc88:	9203      	str	r2, [sp, #12]
 800bc8a:	9302      	str	r3, [sp, #8]
 800bc8c:	4b5d      	ldr	r3, [pc, #372]	; (800be04 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b8>)
 800bc8e:	9301      	str	r3, [sp, #4]
 800bc90:	4b5d      	ldr	r3, [pc, #372]	; (800be08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2bc>)
 800bc92:	9300      	str	r3, [sp, #0]
 800bc94:	23ef      	movs	r3, #239	; 0xef
 800bc96:	4a52      	ldr	r2, [pc, #328]	; (800bde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800bc98:	4952      	ldr	r1, [pc, #328]	; (800bde4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	47a0      	blx	r4
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e0e8      	b.n	800be74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
    TF_LITE_ENSURE_EQ(
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	689a      	ldr	r2, [r3, #8]
 800bca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	4413      	add	r3, r2
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d017      	beq.n	800bce8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x19c>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	695c      	ldr	r4, [r3, #20]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	689a      	ldr	r2, [r3, #8]
 800bcc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	4413      	add	r3, r2
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	9303      	str	r3, [sp, #12]
 800bccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bcd0:	9302      	str	r3, [sp, #8]
 800bcd2:	4b4e      	ldr	r3, [pc, #312]	; (800be0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c0>)
 800bcd4:	9301      	str	r3, [sp, #4]
 800bcd6:	4b4b      	ldr	r3, [pc, #300]	; (800be04 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b8>)
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	23f0      	movs	r3, #240	; 0xf0
 800bcdc:	4a40      	ldr	r2, [pc, #256]	; (800bde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800bcde:	4941      	ldr	r1, [pc, #260]	; (800bde4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	47a0      	blx	r4
 800bce4:	2301      	movs	r3, #1
 800bce6:	e0c5      	b.n	800be74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 800bcee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 800bcf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd06:	429a      	cmp	r2, r3
 800bd08:	da47      	bge.n	800bd9a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 800bd0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d005      	beq.n	800bd1e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1d2>
 800bd12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd18:	4413      	add	r3, r2
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	e001      	b.n	800bd22 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1d6>
 800bd1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 800bd24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bd26:	f7f4 fc41 	bl	80005ac <__aeabi_f2d>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 800bd32:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bd34:	f7f4 fc3a 	bl	80005ac <__aeabi_f2d>
 800bd38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bd3c:	f7f4 fc8e 	bl	800065c <__aeabi_dmul>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4614      	mov	r4, r2
 800bd46:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 800bd48:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bd4a:	f7f4 fc2f 	bl	80005ac <__aeabi_f2d>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 800bd52:	4620      	mov	r0, r4
 800bd54:	4629      	mov	r1, r5
 800bd56:	f7f4 fdab 	bl	80008b0 <__aeabi_ddiv>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 800bd62:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800bd66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800bd72:	f7ff f8cf 	bl	800af14 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 800bd76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bd7e:	4413      	add	r3, r2
 800bd80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd82:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 800bd84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bd8c:	4413      	add	r3, r2
 800bd8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd90:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 800bd92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd94:	3301      	adds	r3, #1
 800bd96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd98:	e7b2      	b.n	800bd00 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	2b03      	cmp	r3, #3
 800bda0:	d146      	bne.n	800be30 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 800bda2:	f04f 0200 	mov.w	r2, #0
 800bda6:	f04f 0300 	mov.w	r3, #0
 800bdaa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800bdae:	f107 0318 	add.w	r3, r7, #24
 800bdb2:	9301      	str	r3, [sp, #4]
 800bdb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	68b9      	ldr	r1, [r7, #8]
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f000 f85e 	bl	800be80 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bdca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d01e      	beq.n	800be10 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c4>
 800bdd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdd6:	e04d      	b.n	800be74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
 800bdd8:	08027400 	.word	0x08027400
 800bddc:	0802741c 	.word	0x0802741c
 800bde0:	080273a8 	.word	0x080273a8
 800bde4:	080273e4 	.word	0x080273e4
 800bde8:	08027438 	.word	0x08027438
 800bdec:	0802746c 	.word	0x0802746c
 800bdf0:	08027454 	.word	0x08027454
 800bdf4:	08027480 	.word	0x08027480
 800bdf8:	0802749c 	.word	0x0802749c
 800bdfc:	080274d8 	.word	0x080274d8
 800be00:	080274e4 	.word	0x080274e4
 800be04:	080274f4 	.word	0x080274f4
 800be08:	08027504 	.word	0x08027504
 800be0c:	08027528 	.word	0x08027528
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 800be10:	ed97 7b06 	vldr	d7, [r7, #24]
 800be14:	f107 0314 	add.w	r3, r7, #20
 800be18:	4619      	mov	r1, r3
 800be1a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800be1c:	eeb0 0a47 	vmov.f32	s0, s14
 800be20:	eef0 0a67 	vmov.f32	s1, s15
 800be24:	f7ff f876 	bl	800af14 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	425a      	negs	r2, r3
 800be2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be2e:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	2b09      	cmp	r3, #9
 800be36:	d007      	beq.n	800be48 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	2b03      	cmp	r3, #3
 800be3e:	d003      	beq.n	800be48 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
      input->type == kTfLiteInt16) {
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800be44:	2b07      	cmp	r3, #7
 800be46:	d114      	bne.n	800be72 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800be48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be4a:	7819      	ldrb	r1, [r3, #0]
 800be4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be50:	9300      	str	r3, [sp, #0]
 800be52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800be56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f000 fa03 	bl	800c264 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800be5e:	4603      	mov	r3, r0
 800be60:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800be64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d002      	beq.n	800be72 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x326>
 800be6c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800be70:	e000      	b.n	800be74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3760      	adds	r7, #96	; 0x60
 800be78:	46bd      	mov	sp, r7
 800be7a:	bdb0      	pop	{r4, r5, r7, pc}
 800be7c:	0000      	movs	r0, r0
	...

0800be80 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800be80:	b5b0      	push	{r4, r5, r7, lr}
 800be82:	b08e      	sub	sp, #56	; 0x38
 800be84:	af02      	add	r7, sp, #8
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	4618      	mov	r0, r3
 800be94:	f7f4 fb8a 	bl	80005ac <__aeabi_f2d>
 800be98:	4604      	mov	r4, r0
 800be9a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7f4 fb83 	bl	80005ac <__aeabi_f2d>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800beaa:	4620      	mov	r0, r4
 800beac:	4629      	mov	r1, r5
 800beae:	f7f4 fbd5 	bl	800065c <__aeabi_dmul>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d04b      	beq.n	800bf58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7f4 fb71 	bl	80005ac <__aeabi_f2d>
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800bed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bed6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800beda:	f7f4 fa07 	bl	80002ec <__aeabi_dsub>
 800bede:	4602      	mov	r2, r0
 800bee0:	460b      	mov	r3, r1
 800bee2:	ec43 2b17 	vmov	d7, r2, r3
 800bee6:	eeb0 0a47 	vmov.f32	s0, s14
 800beea:	eef0 0a67 	vmov.f32	s1, s15
 800beee:	f7ff f9e0 	bl	800b2b2 <_ZSt3absd>
 800bef2:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800bef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	4618      	mov	r0, r3
 800befc:	f7f4 fb56 	bl	80005ac <__aeabi_f2d>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800bf08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bf0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bf10:	f7f4 fcce 	bl	80008b0 <__aeabi_ddiv>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4610      	mov	r0, r2
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	461c      	mov	r4, r3
 800bf20:	a318      	add	r3, pc, #96	; (adr r3, 800bf84 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 fe15 	bl	8000b54 <__aeabi_dcmple>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 800bf30:	2300      	movs	r3, #0
 800bf32:	461c      	mov	r4, r3
 800bf34:	b2e3      	uxtb	r3, r4
 800bf36:	f083 0301 	eor.w	r3, r3, #1
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00b      	beq.n	800bf58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	695c      	ldr	r4, [r3, #20]
 800bf44:	4b0c      	ldr	r3, [pc, #48]	; (800bf78 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800bf4c:	4a0b      	ldr	r2, [pc, #44]	; (800bf7c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800bf4e:	490c      	ldr	r1, [pc, #48]	; (800bf80 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	47a0      	blx	r4
 800bf54:	2301      	movs	r3, #1
 800bf56:	e009      	b.n	800bf6c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800bf58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	68b9      	ldr	r1, [r7, #8]
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f000 f812 	bl	800bf8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800bf68:	4603      	mov	r3, r0
                                          multiplier);
 800bf6a:	bf00      	nop
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3730      	adds	r7, #48	; 0x30
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bdb0      	pop	{r4, r5, r7, pc}
 800bf74:	f3af 8000 	nop.w
 800bf78:	08027568 	.word	0x08027568
 800bf7c:	080273a8 	.word	0x080273a8
 800bf80:	08027454 	.word	0x08027454
 800bf84:	47ae147b 	.word	0x47ae147b
 800bf88:	3f947ae1 	.word	0x3f947ae1

0800bf8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800bf8c:	b590      	push	{r4, r7, lr}
 800bf8e:	b089      	sub	sp, #36	; 0x24
 800bf90:	af02      	add	r7, sp, #8
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	607a      	str	r2, [r7, #4]
 800bf98:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	ed93 7a03 	vldr	s14, [r3, #12]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	edd3 7a03 	vldr	s15, [r3, #12]
 800bfa6:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800bfaa:	ee17 0a90 	vmov	r0, s15
 800bfae:	f7f4 fafd 	bl	80005ac <__aeabi_f2d>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800bfba:	2301      	movs	r3, #1
 800bfbc:	461c      	mov	r4, r3
 800bfbe:	f04f 0200 	mov.w	r2, #0
 800bfc2:	f04f 0300 	mov.w	r3, #0
 800bfc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bfca:	f7f4 fdcd 	bl	8000b68 <__aeabi_dcmpge>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d101      	bne.n	800bfd8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	461c      	mov	r4, r3
 800bfd8:	b2e3      	uxtb	r3, r4
 800bfda:	f083 0301 	eor.w	r3, r3, #1
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00b      	beq.n	800bffc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	695c      	ldr	r4, [r3, #20]
 800bfe8:	4b0f      	ldr	r3, [pc, #60]	; (800c028 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	f240 134b 	movw	r3, #331	; 0x14b
 800bff0:	4a0e      	ldr	r2, [pc, #56]	; (800c02c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800bff2:	490f      	ldr	r1, [pc, #60]	; (800c030 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	47a0      	blx	r4
 800bff8:	2301      	movs	r3, #1
 800bffa:	e010      	b.n	800c01e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	4618      	mov	r0, r3
 800c002:	f7f4 fad3 	bl	80005ac <__aeabi_f2d>
 800c006:	4602      	mov	r2, r0
 800c008:	460b      	mov	r3, r1
 800c00a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c00e:	f7f4 fc4f 	bl	80008b0 <__aeabi_ddiv>
 800c012:	4602      	mov	r2, r0
 800c014:	460b      	mov	r3, r1
 800c016:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c018:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	371c      	adds	r7, #28
 800c022:	46bd      	mov	sp, r7
 800c024:	bd90      	pop	{r4, r7, pc}
 800c026:	bf00      	nop
 800c028:	0802758c 	.word	0x0802758c
 800c02c:	080273a8 	.word	0x080273a8
 800c030:	08027454 	.word	0x08027454

0800c034 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 800c034:	b590      	push	{r4, r7, lr}
 800c036:	b08b      	sub	sp, #44	; 0x2c
 800c038:	af02      	add	r7, sp, #8
 800c03a:	6178      	str	r0, [r7, #20]
 800c03c:	ed87 0a04 	vstr	s0, [r7, #16]
 800c040:	60f9      	str	r1, [r7, #12]
 800c042:	edc7 0a02 	vstr	s1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 800c048:	ed97 7a02 	vldr	s14, [r7, #8]
 800c04c:	edd7 7a04 	vldr	s15, [r7, #16]
 800c050:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c054:	eeb0 0a66 	vmov.f32	s0, s13
 800c058:	f7ff f91b 	bl	800b292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800c05c:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 800c060:	f7ff f94f 	bl	800b302 <_ZNSt14numeric_limitsIlE3minEv>
 800c064:	ee07 0a90 	vmov	s15, r0
 800c068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c06c:	ed97 7a07 	vldr	s14, [r7, #28]
 800c070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c078:	db0e      	blt.n	800c098 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 800c07a:	f7fe ff42 	bl	800af02 <_ZNSt14numeric_limitsIlE3maxEv>
 800c07e:	ee07 0a90 	vmov	s15, r0
 800c082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 800c086:	ed97 7a07 	vldr	s14, [r7, #28]
 800c08a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c092:	d801      	bhi.n	800c098 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 800c094:	2301      	movs	r3, #1
 800c096:	e000      	b.n	800c09a <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 800c098:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 800c09a:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 800c09c:	7efb      	ldrb	r3, [r7, #27]
 800c09e:	f083 0301 	eor.w	r3, r3, #1
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00b      	beq.n	800c0c0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	695c      	ldr	r4, [r3, #20]
 800c0ac:	4b0c      	ldr	r3, [pc, #48]	; (800c0e0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	f240 1359 	movw	r3, #345	; 0x159
 800c0b4:	4a0b      	ldr	r2, [pc, #44]	; (800c0e4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 800c0b6:	490c      	ldr	r1, [pc, #48]	; (800c0e8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 800c0b8:	6978      	ldr	r0, [r7, #20]
 800c0ba:	47a0      	blx	r4
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e00a      	b.n	800c0d6 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 800c0c0:	edd7 7a07 	vldr	s15, [r7, #28]
 800c0c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0c8:	ee17 2a90 	vmov	r2, s15
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	441a      	add	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3724      	adds	r7, #36	; 0x24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd90      	pop	{r4, r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	080275a8 	.word	0x080275a8
 800c0e4:	080273a8 	.word	0x080273a8
 800c0e8:	08027454 	.word	0x08027454

0800c0ec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b08a      	sub	sp, #40	; 0x28
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	607a      	str	r2, [r7, #4]
 800c0f6:	603b      	str	r3, [r7, #0]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	68db      	ldr	r3, [r3, #12]
 800c100:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	691b      	ldr	r3, [r3, #16]
 800c106:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 800c108:	7afb      	ldrb	r3, [r7, #11]
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d120      	bne.n	800c150 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 800c10e:	f107 0314 	add.w	r3, r7, #20
 800c112:	461a      	mov	r2, r3
 800c114:	eddf 0a52 	vldr	s1, [pc, #328]	; 800c260 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 800c118:	6a39      	ldr	r1, [r7, #32]
 800c11a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f7ff ff88 	bl	800c034 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800c124:	4603      	mov	r3, r0
 800c126:	76fb      	strb	r3, [r7, #27]
 800c128:	7efb      	ldrb	r3, [r7, #27]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 800c12e:	7efb      	ldrb	r3, [r7, #27]
 800c130:	e091      	b.n	800c256 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800c132:	f107 0214 	add.w	r2, r7, #20
 800c136:	1d3b      	adds	r3, r7, #4
 800c138:	4611      	mov	r1, r2
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7ff fa3e 	bl	800b5bc <_ZSt3maxIlERKT_S2_S2_>
 800c140:	4603      	mov	r3, r0
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c146:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800c148:	683a      	ldr	r2, [r7, #0]
 800c14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	e081      	b.n	800c254 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 800c150:	7afb      	ldrb	r3, [r7, #11]
 800c152:	2b03      	cmp	r3, #3
 800c154:	d13a      	bne.n	800c1cc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 800c156:	f107 0314 	add.w	r3, r7, #20
 800c15a:	461a      	mov	r2, r3
 800c15c:	eddf 0a40 	vldr	s1, [pc, #256]	; 800c260 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 800c160:	6a39      	ldr	r1, [r7, #32]
 800c162:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	f7ff ff64 	bl	800c034 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800c16c:	4603      	mov	r3, r0
 800c16e:	777b      	strb	r3, [r7, #29]
 800c170:	7f7b      	ldrb	r3, [r7, #29]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d001      	beq.n	800c17a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 800c176:	7f7b      	ldrb	r3, [r7, #29]
 800c178:	e06d      	b.n	800c256 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800c17a:	f107 0214 	add.w	r2, r7, #20
 800c17e:	1d3b      	adds	r3, r7, #4
 800c180:	4611      	mov	r1, r2
 800c182:	4618      	mov	r0, r3
 800c184:	f7ff fa1a 	bl	800b5bc <_ZSt3maxIlERKT_S2_S2_>
 800c188:	4603      	mov	r3, r0
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c18e:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 800c190:	f107 0314 	add.w	r3, r7, #20
 800c194:	461a      	mov	r2, r3
 800c196:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800c19a:	6a39      	ldr	r1, [r7, #32]
 800c19c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f7ff ff47 	bl	800c034 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	773b      	strb	r3, [r7, #28]
 800c1aa:	7f3b      	ldrb	r3, [r7, #28]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d001      	beq.n	800c1b4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 800c1b0:	7f3b      	ldrb	r3, [r7, #28]
 800c1b2:	e050      	b.n	800c256 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 800c1b4:	f107 0214 	add.w	r2, r7, #20
 800c1b8:	463b      	mov	r3, r7
 800c1ba:	4611      	mov	r1, r2
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7ff f9e9 	bl	800b594 <_ZSt3minIlERKT_S2_S2_>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	e043      	b.n	800c254 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 800c1cc:	7afb      	ldrb	r3, [r7, #11]
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d13a      	bne.n	800c248 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 800c1d2:	f107 0314 	add.w	r3, r7, #20
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800c1dc:	6a39      	ldr	r1, [r7, #32]
 800c1de:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f7ff ff26 	bl	800c034 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	77fb      	strb	r3, [r7, #31]
 800c1ec:	7ffb      	ldrb	r3, [r7, #31]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d001      	beq.n	800c1f6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 800c1f2:	7ffb      	ldrb	r3, [r7, #31]
 800c1f4:	e02f      	b.n	800c256 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800c1f6:	f107 0214 	add.w	r2, r7, #20
 800c1fa:	1d3b      	adds	r3, r7, #4
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7ff f9dc 	bl	800b5bc <_ZSt3maxIlERKT_S2_S2_>
 800c204:	4603      	mov	r3, r0
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c20a:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 800c20c:	f107 0314 	add.w	r3, r7, #20
 800c210:	461a      	mov	r2, r3
 800c212:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800c216:	6a39      	ldr	r1, [r7, #32]
 800c218:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f7ff ff09 	bl	800c034 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800c222:	4603      	mov	r3, r0
 800c224:	77bb      	strb	r3, [r7, #30]
 800c226:	7fbb      	ldrb	r3, [r7, #30]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d001      	beq.n	800c230 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 800c22c:	7fbb      	ldrb	r3, [r7, #30]
 800c22e:	e012      	b.n	800c256 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 800c230:	f107 0214 	add.w	r2, r7, #20
 800c234:	463b      	mov	r3, r7
 800c236:	4611      	mov	r1, r2
 800c238:	4618      	mov	r0, r3
 800c23a:	f7ff f9ab 	bl	800b594 <_ZSt3minIlERKT_S2_S2_>
 800c23e:	4603      	mov	r3, r0
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c244:	601a      	str	r2, [r3, #0]
 800c246:	e005      	b.n	800c254 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c24c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c252:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3728      	adds	r7, #40	; 0x28
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	00000000 	.word	0x00000000

0800c264 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800c264:	b590      	push	{r4, r7, lr}
 800c266:	b08b      	sub	sp, #44	; 0x2c
 800c268:	af04      	add	r7, sp, #16
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	607a      	str	r2, [r7, #4]
 800c26e:	603b      	str	r3, [r7, #0]
 800c270:	460b      	mov	r3, r1
 800c272:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800c274:	2300      	movs	r3, #0
 800c276:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800c278:	2300      	movs	r3, #0
 800c27a:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	2b03      	cmp	r3, #3
 800c282:	d108      	bne.n	800c296 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800c284:	f7ff fb84 	bl	800b990 <_ZNSt14numeric_limitsIhE3minEv>
 800c288:	4603      	mov	r3, r0
 800c28a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800c28c:	f7ff fb88 	bl	800b9a0 <_ZNSt14numeric_limitsIhE3maxEv>
 800c290:	4603      	mov	r3, r0
 800c292:	613b      	str	r3, [r7, #16]
 800c294:	e025      	b.n	800c2e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	2b09      	cmp	r3, #9
 800c29c:	d108      	bne.n	800c2b0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800c29e:	f7ff fb66 	bl	800b96e <_ZNSt14numeric_limitsIaE3minEv>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800c2a6:	f7ff fb6b 	bl	800b980 <_ZNSt14numeric_limitsIaE3maxEv>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	613b      	str	r3, [r7, #16]
 800c2ae:	e018      	b.n	800c2e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	2b07      	cmp	r3, #7
 800c2b6:	d108      	bne.n	800c2ca <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 800c2b8:	f7ff f810 	bl	800b2dc <_ZNSt14numeric_limitsIsE3minEv>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 800c2c0:	f7ff f816 	bl	800b2f0 <_ZNSt14numeric_limitsIsE3maxEv>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	613b      	str	r3, [r7, #16]
 800c2c8:	e00b      	b.n	800c2e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	695c      	ldr	r4, [r3, #20]
 800c2ce:	4b0e      	ldr	r3, [pc, #56]	; (800c308 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	f240 1391 	movw	r3, #401	; 0x191
 800c2d6:	4a0d      	ldr	r2, [pc, #52]	; (800c30c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 800c2d8:	490d      	ldr	r1, [pc, #52]	; (800c310 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	47a0      	blx	r4
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e00d      	b.n	800c2fe <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 800c2e2:	7af9      	ldrb	r1, [r7, #11]
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e6:	9302      	str	r3, [sp, #8]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	9301      	str	r3, [sp, #4]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	697a      	ldr	r2, [r7, #20]
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f7ff fef9 	bl	800c0ec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 800c2fa:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 800c2fc:	bf00      	nop
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	371c      	adds	r7, #28
 800c302:	46bd      	mov	sp, r7
 800c304:	bd90      	pop	{r4, r7, pc}
 800c306:	bf00      	nop
 800c308:	080275d0 	.word	0x080275d0
 800c30c:	080273a8 	.word	0x080273a8
 800c310:	08027454 	.word	0x08027454

0800c314 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	429a      	cmp	r2, r3
 800c328:	da01      	bge.n	800c32e <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	e000      	b.n	800c330 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800c32e:	687b      	ldr	r3, [r7, #4]
    }
 800c330:	4618      	mov	r0, r3
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4618      	mov	r0, r3
 800c348:	f000 f8cc 	bl	800c4e4 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4618      	mov	r0, r3
 800c350:	3708      	adds	r7, #8
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800c356:	b580      	push	{r7, lr}
 800c358:	b082      	sub	sp, #8
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff ffeb 	bl	800c33c <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4618      	mov	r0, r3
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  // WARNING: This API is deprecated, GetDelegateCreators is preferred.
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
    return {};
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2200      	movs	r2, #0
 800c380:	601a      	str	r2, [r3, #0]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2200      	movs	r2, #0
 800c386:	605a      	str	r2, [r3, #4]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	609a      	str	r2, [r3, #8]
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f7ff ffe1 	bl	800c356 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <_ZNSt12_Vector_baseISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EEC1Ev>:
      _Vector_base() = default;
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 f8ac 	bl	800c504 <_ZNSt12_Vector_baseISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EE12_Vector_implC1Ev>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3708      	adds	r7, #8
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <_ZNSt6vectorISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EEC1Ev>:
      vector() = default;
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b082      	sub	sp, #8
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7ff ffeb 	bl	800c39c <_ZNSt12_Vector_baseISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EEC1Ev>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <_ZNK6tflite10OpResolver19GetDelegateCreatorsEv>:
          int /*num_threads*/)>;
  using TfLiteDelegateCreators = std::vector<TfLiteDelegateCreator>;
  // Returns a vector of delegate creators to create optional delegates for
  // resolving and handling ops in the flatbuffer model. This may be used in
  // addition to the standard TfLiteRegistration lookup for graph resolution.
  virtual TfLiteDelegateCreators GetDelegateCreators() const { return {}; }
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	601a      	str	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	605a      	str	r2, [r3, #4]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	609a      	str	r2, [r3, #8]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f7ff ffe2 	bl	800c3b6 <_ZNSt6vectorISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EEC1Ev>
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
	...

0800c3fc <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	4a04      	ldr	r2, [pc, #16]	; (800c418 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4618      	mov	r0, r3
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	0802c6c4 	.word	0x0802c6c4

0800c41c <_ZN6tflite10OpResolverD0Ev>:
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7ff ffe9 	bl	800c3fc <_ZN6tflite10OpResolverD1Ev>
 800c42a:	2104      	movs	r1, #4
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f018 faf0 	bl	8024a12 <_ZdlPvj>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4618      	mov	r0, r3
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	2301      	movs	r3, #1
 800c446:	4618      	mov	r0, r3
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr

0800c452 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 800c452:	b580      	push	{r7, lr}
 800c454:	b084      	sub	sp, #16
 800c456:	af00      	add	r7, sp, #0
 800c458:	60f8      	str	r0, [r7, #12]
 800c45a:	460b      	mov	r3, r1
 800c45c:	607a      	str	r2, [r7, #4]
 800c45e:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	331c      	adds	r3, #28
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	7afa      	ldrb	r2, [r7, #11]
 800c46a:	4611      	mov	r1, r2
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	4798      	blx	r3
 800c470:	4603      	mov	r3, r0
  }
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b084      	sub	sp, #16
 800c47e:	af00      	add	r7, sp, #0
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	60b9      	str	r1, [r7, #8]
 800c484:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3320      	adds	r3, #32
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68b9      	ldr	r1, [r7, #8]
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	4798      	blx	r3
 800c494:	4603      	mov	r3, r0
  }
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
	...

0800c4a0 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	4a05      	ldr	r2, [pc, #20]	; (800c4c0 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff ffa3 	bl	800c3fc <_ZN6tflite10OpResolverD1Ev>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	0802c694 	.word	0x0802c694

0800c4c4 <_ZN6tflite15MicroOpResolverD0Ev>:
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7ff ffe7 	bl	800c4a0 <_ZN6tflite15MicroOpResolverD1Ev>
 800c4d2:	2104      	movs	r1, #4
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f018 fa9c 	bl	8024a12 <_ZdlPvj>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 f83b 	bl	800c568 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f000 f843 	bl	800c580 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <_ZNSt12_Vector_baseISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 f84b 	bl	800c5a8 <_ZNSaISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS1_EEiEEEC1Ev>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4618      	mov	r0, r3
 800c516:	f000 f853 	bl	800c5c0 <_ZNSt12_Vector_baseISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EE17_Vector_impl_dataC1Ev>
	{ }
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4618      	mov	r0, r3
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	4a04      	ldr	r2, [pc, #16]	; (800c540 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4618      	mov	r0, r3
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr
 800c540:	0802c6c4 	.word	0x0802c6c4

0800c544 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4618      	mov	r0, r3
 800c550:	f7ff ffe8 	bl	800c524 <_ZN6tflite10OpResolverC1Ev>
 800c554:	4a03      	ldr	r2, [pc, #12]	; (800c564 <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	601a      	str	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4618      	mov	r0, r3
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	0802c694 	.word	0x0802c694

0800c568 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 f839 	bl	800c5e8 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4618      	mov	r0, r3
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	601a      	str	r2, [r3, #0]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	605a      	str	r2, [r3, #4]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	609a      	str	r2, [r3, #8]
	{ }
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4618      	mov	r0, r3
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <_ZNSaISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS1_EEiEEEC1Ev>:
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 f824 	bl	800c5fe <_ZN9__gnu_cxx13new_allocatorISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS3_EEiEEEC1Ev>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3708      	adds	r7, #8
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <_ZNSt12_Vector_baseISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	601a      	str	r2, [r3, #0]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	605a      	str	r2, [r3, #4]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	609a      	str	r2, [r3, #8]
	{ }
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <_ZN9__gnu_cxx13new_allocatorISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS3_EEiEEEC1Ev>:
 800c5fe:	b480      	push	{r7}
 800c600:	b083      	sub	sp, #12
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4618      	mov	r0, r3
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <_ZNK6tflite8SubGraph9operatorsEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	210a      	movs	r1, #10
 800c620:	4618      	mov	r0, r3
 800c622:	f000 f847 	bl	800c6b4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800c626:	4603      	mov	r3, r0
  }
 800c628:	4618      	mov	r0, r3
 800c62a:	3708      	adds	r7, #8
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <_ZNK6tflite5Model9subgraphsEv>:
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2108      	movs	r1, #8
 800c63c:	4618      	mov	r0, r3
 800c63e:	f000 f849 	bl	800c6d4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800c642:	4603      	mov	r3, r0
  }
 800c644:	4618      	mov	r0, r3
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
float FlexbufferWrapper::ElementAsFloat(size_t i) const {
  return static_cast<float>(FlexbufferWrapper::ElementAsDouble(i));
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  if (subgraph->operators() != nullptr) {
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f7ff ffdd 	bl	800c614 <_ZNK6tflite8SubGraph9operatorsEv>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	bf14      	ite	ne
 800c660:	2301      	movne	r3, #1
 800c662:	2300      	moveq	r3, #0
 800c664:	b2db      	uxtb	r3, r3
 800c666:	2b00      	cmp	r3, #0
 800c668:	d008      	beq.n	800c67c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>
    return subgraph->operators()->size();
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f7ff ffd2 	bl	800c614 <_ZNK6tflite8SubGraph9operatorsEv>
 800c670:	4603      	mov	r3, r0
 800c672:	4618      	mov	r0, r3
 800c674:	f000 f83e 	bl	800c6f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800c678:	4603      	mov	r3, r0
 800c67a:	e000      	b.n	800c67e <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
  } else {
    return 0;
 800c67c:	2300      	movs	r3, #0
  }
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3708      	adds	r7, #8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 800c686:	b580      	push	{r7, lr}
 800c688:	b084      	sub	sp, #16
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
 800c68e:	6039      	str	r1, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7ff ffcd 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800c696:	4602      	mov	r2, r0
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	4619      	mov	r1, r3
 800c69c:	4610      	mov	r0, r2
 800c69e:	f000 f845 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800c6a2:	60f8      	str	r0, [r7, #12]
  return NumSubgraphOperators(subgraph);
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7ff ffd1 	bl	800c64c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800c6aa:	4603      	mov	r3, r0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800c6c0:	887b      	ldrh	r3, [r7, #2]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 f865 	bl	800c794 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800c6ca:	4603      	mov	r3, r0
  }
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	460b      	mov	r3, r1
 800c6de:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800c6e0:	887b      	ldrh	r3, [r7, #2]
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f875 	bl	800c7d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800c6ea:	4603      	mov	r3, r0
  }
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4618      	mov	r0, r3
 800c702:	f7fc ff6d 	bl	80095e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800c706:	4603      	mov	r3, r0
 800c708:	4618      	mov	r0, r3
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fc ff5f 	bl	80095e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800c722:	4603      	mov	r3, r0
 800c724:	4618      	mov	r0, r3
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7ff ffea 	bl	800c710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800c73c:	4602      	mov	r2, r0
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	4293      	cmp	r3, r2
 800c742:	d306      	bcc.n	800c752 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 800c744:	4b09      	ldr	r3, [pc, #36]	; (800c76c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 800c746:	4a0a      	ldr	r2, [pc, #40]	; (800c770 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 800c748:	f44f 7183 	mov.w	r1, #262	; 0x106
 800c74c:	4809      	ldr	r0, [pc, #36]	; (800c774 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 800c74e:	f018 fbd1 	bl	8024ef4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 f872 	bl	800c83c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 800c758:	4603      	mov	r3, r0
 800c75a:	6839      	ldr	r1, [r7, #0]
 800c75c:	4618      	mov	r0, r3
 800c75e:	f000 f859 	bl	800c814 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 800c762:	4603      	mov	r3, r0
  }
 800c764:	4618      	mov	r0, r3
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	080276b8 	.word	0x080276b8
 800c770:	080276c4 	.word	0x080276c4
 800c774:	080277c0 	.word	0x080277c0

0800c778 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 800c782:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800c786:	4610      	mov	r0, r2
 800c788:	4619      	mov	r1, r3
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	460b      	mov	r3, r1
 800c79e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800c7a0:	887b      	ldrh	r3, [r7, #2]
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7fc f909 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	89fb      	ldrh	r3, [r7, #14]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800c7b6:	89fb      	ldrh	r3, [r7, #14]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d006      	beq.n	800c7ca <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 800c7bc:	68b8      	ldr	r0, [r7, #8]
 800c7be:	f7fc ff34 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	4413      	add	r3, r2
                        : nullptr;
 800c7c8:	e000      	b.n	800c7cc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800c7ca:	2300      	movs	r3, #0
  }
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800c7e0:	887b      	ldrh	r3, [r7, #2]
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f7fc f8e9 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	89fb      	ldrh	r3, [r7, #14]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800c7f6:	89fb      	ldrh	r3, [r7, #14]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d006      	beq.n	800c80a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 800c7fc:	68b8      	ldr	r0, [r7, #8]
 800c7fe:	f7fc ff14 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800c802:	4602      	mov	r2, r0
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	4413      	add	r3, r2
                        : nullptr;
 800c808:	e000      	b.n	800c80c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800c80a:	2300      	movs	r3, #0
  }
 800c80c:	4618      	mov	r0, r3
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	4413      	add	r3, r2
 800c826:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7fc fefe 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800c82e:	4602      	mov	r2, r0
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4413      	add	r3, r2
  }
 800c834:	4618      	mov	r0, r3
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	3304      	adds	r3, #4
  }
 800c848:	4618      	mov	r0, r3
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2104      	movs	r1, #4
 800c860:	4618      	mov	r0, r3
 800c862:	f7fc ff59 	bl	8009718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800c866:	4603      	mov	r3, r0
  }
 800c868:	4618      	mov	r0, r3
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	2106      	movs	r1, #6
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fc ff5a 	bl	8009738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800c884:	4603      	mov	r3, r0
 800c886:	b2db      	uxtb	r3, r3
  }
 800c888:	4618      	mov	r0, r3
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <_ZN6tflite12RuntimeShapeC1Ev>:

class RuntimeShape {
 public:
  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data)
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
      : size_(dimensions_count) {
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	68b9      	ldr	r1, [r7, #8]
 800c8c2:	68f8      	ldr	r0, [r7, #12]
 800c8c4:	f000 f828 	bl	800c918 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {}
 800c8d2:	b480      	push	{r7}
 800c8d4:	b083      	sub	sp, #12
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4618      	mov	r0, r3
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  int32_t DimensionsCount() const { return size_; }
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <_ZN6tflite12RuntimeShape8DimsDataEv>:

  static RuntimeShape ExtendedShape(int new_shape_size,
                                    const RuntimeShape& shape) {
    return RuntimeShape(new_shape_size, shape, 1);
  }
  int32_t* DimsData() { return dims_; }
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	3304      	adds	r3, #4
 800c90c:	4618      	mov	r0, r3
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  const int32_t* DimsData() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
    size_ = dimensions_count;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	601a      	str	r2, [r3, #0]
    int32_t* dst_dims = DimsData();
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f7ff ffe8 	bl	800c900 <_ZN6tflite12RuntimeShape8DimsDataEv>
 800c930:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	461a      	mov	r2, r3
 800c938:	6879      	ldr	r1, [r7, #4]
 800c93a:	6978      	ldr	r0, [r7, #20]
 800c93c:	f018 fb4a 	bl	8024fd4 <memcpy>
  }
 800c940:	bf00      	nop
 800c942:	3718      	adds	r7, #24
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d103      	bne.n	800c960 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7ff ff99 	bl	800c890 <_ZN6tflite12RuntimeShapeC1Ev>
 800c95e:	e00d      	b.n	800c97c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	3304      	adds	r3, #4
 800c970:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800c972:	68fa      	ldr	r2, [r7, #12]
 800c974:	6939      	ldr	r1, [r7, #16]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7ff ff98 	bl	800c8ac <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	3718      	adds	r7, #24
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 800c992:	683a      	ldr	r2, [r7, #0]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	4413      	add	r3, r2
 800c998:	1e5a      	subs	r2, r3, #1
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9a0:	683a      	ldr	r2, [r7, #0]
 800c9a2:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 800c9a6:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800c9a8:	68bb      	ldr	r3, [r7, #8]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3714      	adds	r7, #20
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr

0800c9b6 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 800c9b6:	b480      	push	{r7}
 800c9b8:	b085      	sub	sp, #20
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
 800c9be:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9cc:	683a      	ldr	r2, [r7, #0]
 800c9ce:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 800c9d2:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800c9d4:	68bb      	ldr	r3, [r7, #8]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3714      	adds	r7, #20
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 800c9e2:	b480      	push	{r7}
 800c9e4:	b085      	sub	sp, #20
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 800c9ec:	683a      	ldr	r2, [r7, #0]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	1e5a      	subs	r2, r3, #1
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	fbb2 f2f3 	udiv	r2, r2, r3
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	fb02 f303 	mul.w	r3, r2, r3
 800ca00:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 800ca02:	68fb      	ldr	r3, [r7, #12]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3714      	adds	r7, #20
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	4603      	mov	r3, r0
 800ca18:	6039      	str	r1, [r7, #0]
 800ca1a:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800ca1c:	79fb      	ldrb	r3, [r7, #7]
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	2b0f      	cmp	r3, #15
 800ca22:	d85b      	bhi.n	800cadc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xcc>
 800ca24:	a201      	add	r2, pc, #4	; (adr r2, 800ca2c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 800ca26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2a:	bf00      	nop
 800ca2c:	0800ca75 	.word	0x0800ca75
 800ca30:	0800ca8d 	.word	0x0800ca8d
 800ca34:	0800ca9d 	.word	0x0800ca9d
 800ca38:	0800caad 	.word	0x0800caad
 800ca3c:	0800cadd 	.word	0x0800cadd
 800ca40:	0800cabd 	.word	0x0800cabd
 800ca44:	0800ca85 	.word	0x0800ca85
 800ca48:	0800cacd 	.word	0x0800cacd
 800ca4c:	0800caa5 	.word	0x0800caa5
 800ca50:	0800ca6d 	.word	0x0800ca6d
 800ca54:	0800ca7d 	.word	0x0800ca7d
 800ca58:	0800cad5 	.word	0x0800cad5
 800ca5c:	0800cab5 	.word	0x0800cab5
 800ca60:	0800cac5 	.word	0x0800cac5
 800ca64:	0800cadd 	.word	0x0800cadd
 800ca68:	0800ca95 	.word	0x0800ca95
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	2202      	movs	r2, #2
 800ca70:	601a      	str	r2, [r3, #0]
      break;
 800ca72:	e035      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteFloat32:
      *size = sizeof(float);
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	2204      	movs	r2, #4
 800ca78:	601a      	str	r2, [r3, #0]
      break;
 800ca7a:	e031      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteFloat64:
      *size = sizeof(double);
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	2208      	movs	r2, #8
 800ca80:	601a      	str	r2, [r3, #0]
      break;
 800ca82:	e02d      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	2202      	movs	r2, #2
 800ca88:	601a      	str	r2, [r3, #0]
      break;
 800ca8a:	e029      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	2204      	movs	r2, #4
 800ca90:	601a      	str	r2, [r3, #0]
      break;
 800ca92:	e025      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	2204      	movs	r2, #4
 800ca98:	601a      	str	r2, [r3, #0]
      break;
 800ca9a:	e021      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	601a      	str	r2, [r3, #0]
      break;
 800caa2:	e01d      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	2201      	movs	r2, #1
 800caa8:	601a      	str	r2, [r3, #0]
      break;
 800caaa:	e019      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	2208      	movs	r2, #8
 800cab0:	601a      	str	r2, [r3, #0]
      break;
 800cab2:	e015      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	2208      	movs	r2, #8
 800cab8:	601a      	str	r2, [r3, #0]
      break;
 800caba:	e011      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteBool:
      *size = sizeof(bool);
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	2201      	movs	r2, #1
 800cac0:	601a      	str	r2, [r3, #0]
      break;
 800cac2:	e00d      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteResource:
      *size = sizeof(int32_t);
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	2204      	movs	r2, #4
 800cac8:	601a      	str	r2, [r3, #0]
      break;
 800caca:	e009      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	2208      	movs	r2, #8
 800cad0:	601a      	str	r2, [r3, #0]
      break;
 800cad2:	e005      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	2210      	movs	r2, #16
 800cad8:	601a      	str	r2, [r3, #0]
      break;
 800cada:	e001      	b.n	800cae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    default:
      return kTfLiteError;
 800cadc:	2301      	movs	r3, #1
 800cade:	e000      	b.n	800cae2 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd2>
  }
  return kTfLiteOk;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	370c      	adds	r7, #12
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop

0800caf0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b088      	sub	sp, #32
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	607a      	str	r2, [r7, #4]
 800cafc:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 800cafe:	2301      	movs	r3, #1
 800cb00:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	f7ff fea6 	bl	800c854 <_ZNK6tflite6Tensor5shapeEv>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	bf14      	ite	ne
 800cb0e:	2301      	movne	r3, #1
 800cb10:	2300      	moveq	r3, #0
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d022      	beq.n	800cb5e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800cb18:	2300      	movs	r3, #0
 800cb1a:	61bb      	str	r3, [r7, #24]
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f7ff fe99 	bl	800c854 <_ZNK6tflite6Tensor5shapeEv>
 800cb22:	4603      	mov	r3, r0
 800cb24:	4618      	mov	r0, r3
 800cb26:	f000 f884 	bl	800cc32 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	bf34      	ite	cc
 800cb32:	2301      	movcc	r3, #1
 800cb34:	2300      	movcs	r3, #0
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d010      	beq.n	800cb5e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	f7ff fe89 	bl	800c854 <_ZNK6tflite6Tensor5shapeEv>
 800cb42:	4603      	mov	r3, r0
 800cb44:	69b9      	ldr	r1, [r7, #24]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7fc fe56 	bl	80097f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	fb02 f303 	mul.w	r3, r2, r3
 800cb54:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	61bb      	str	r3, [r7, #24]
 800cb5c:	e7de      	b.n	800cb1c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f7ff fe86 	bl	800c870 <_ZNK6tflite6Tensor4typeEv>
 800cb64:	4603      	mov	r3, r0
 800cb66:	4618      	mov	r0, r3
 800cb68:	f107 0315 	add.w	r3, r7, #21
 800cb6c:	683a      	ldr	r2, [r7, #0]
 800cb6e:	4619      	mov	r1, r3
 800cb70:	f7fc f9dc 	bl	8008f2c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800cb74:	4603      	mov	r3, r0
 800cb76:	75fb      	strb	r3, [r7, #23]
 800cb78:	7dfb      	ldrb	r3, [r7, #23]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 800cb7e:	7dfb      	ldrb	r3, [r7, #23]
 800cb80:	e013      	b.n	800cbaa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 800cb82:	7d7b      	ldrb	r3, [r7, #21]
 800cb84:	6879      	ldr	r1, [r7, #4]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7ff ff42 	bl	800ca10 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	75bb      	strb	r3, [r7, #22]
 800cb90:	7dbb      	ldrb	r3, [r7, #22]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d001      	beq.n	800cb9a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 800cb96:	7dbb      	ldrb	r3, [r7, #22]
 800cb98:	e007      	b.n	800cbaa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	69fa      	ldr	r2, [r7, #28]
 800cba0:	fb02 f203 	mul.w	r2, r2, r3
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3720      	adds	r7, #32
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b086      	sub	sp, #24
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d101      	bne.n	800cbc6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 800cbc2:	f018 f990 	bl	8024ee6 <abort>

  int element_count = 1;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d015      	beq.n	800cbfe <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	613b      	str	r3, [r7, #16]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	693a      	ldr	r2, [r7, #16]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	da0d      	bge.n	800cbfe <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	685a      	ldr	r2, [r3, #4]
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	4413      	add	r3, r2
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	fb02 f303 	mul.w	r3, r2, r3
 800cbf4:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	613b      	str	r3, [r7, #16]
 800cbfc:	e7eb      	b.n	800cbd6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	7a1b      	ldrb	r3, [r3, #8]
 800cc02:	f107 0208 	add.w	r2, r7, #8
 800cc06:	4611      	mov	r1, r2
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff ff01 	bl	800ca10 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	73fb      	strb	r3, [r7, #15]
 800cc12:	7bfb      	ldrb	r3, [r7, #15]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d001      	beq.n	800cc1c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
 800cc1a:	e006      	b.n	800cc2a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	68ba      	ldr	r2, [r7, #8]
 800cc20:	fb02 f203 	mul.w	r2, r2, r3
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3718      	adds	r7, #24
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b082      	sub	sp, #8
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f7fc fdce 	bl	80097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800cc40:	4603      	mov	r3, r0
 800cc42:	4618      	mov	r0, r3
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b082      	sub	sp, #8
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2108      	movs	r1, #8
 800cc56:	4618      	mov	r0, r3
 800cc58:	f001 fca1 	bl	800e59e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800cc5c:	4603      	mov	r3, r0
  }
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3708      	adds	r7, #8
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b082      	sub	sp, #8
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	210a      	movs	r1, #10
 800cc72:	4618      	mov	r0, r3
 800cc74:	f001 fca3 	bl	800e5be <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800cc78:	4603      	mov	r3, r0
  }
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3708      	adds	r7, #8
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b082      	sub	sp, #8
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	2110      	movs	r1, #16
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fc fd23 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800cc96:	4603      	mov	r3, r0
  }
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	2108      	movs	r1, #8
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f001 fc95 	bl	800e5de <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800ccb4:	4603      	mov	r3, r0
  }
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b082      	sub	sp, #8
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	210c      	movs	r1, #12
 800ccca:	4618      	mov	r0, r3
 800cccc:	f001 fca5 	bl	800e61a <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800ccd0:	4603      	mov	r3, r0
  }
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b082      	sub	sp, #8
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2200      	movs	r2, #0
 800cce6:	210e      	movs	r1, #14
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7fc fcc8 	bl	800967e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	bf14      	ite	ne
 800ccf4:	2301      	movne	r3, #1
 800ccf6:	2300      	moveq	r3, #0
 800ccf8:	b2db      	uxtb	r3, r3
  }
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3708      	adds	r7, #8
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b082      	sub	sp, #8
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2106      	movs	r1, #6
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7fc fd02 	bl	8009718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800cd14:	4603      	mov	r3, r0
  }
 800cd16:	4618      	mov	r0, r3
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b082      	sub	sp, #8
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2108      	movs	r1, #8
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fc fcf4 	bl	8009718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800cd30:	4603      	mov	r3, r0
  }
 800cd32:	4618      	mov	r0, r3
 800cd34:	3708      	adds	r7, #8
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b082      	sub	sp, #8
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2104      	movs	r1, #4
 800cd46:	4618      	mov	r0, r3
 800cd48:	f001 fc77 	bl	800e63a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800cd4c:	4603      	mov	r3, r0
  }
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3708      	adds	r7, #8
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b082      	sub	sp, #8
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2106      	movs	r1, #6
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7fc fcd8 	bl	8009718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800cd68:	4603      	mov	r3, r0
  }
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b082      	sub	sp, #8
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2108      	movs	r1, #8
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7fc fcca 	bl	8009718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800cd84:	4603      	mov	r3, r0
  }
 800cd86:	4618      	mov	r0, r3
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b082      	sub	sp, #8
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2104      	movs	r1, #4
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f001 fbef 	bl	800e57e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800cda0:	4603      	mov	r3, r0
  }
 800cda2:	4618      	mov	r0, r3
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b082      	sub	sp, #8
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2104      	movs	r1, #4
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7fc fcde 	bl	8009778 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800cdbc:	4603      	mov	r3, r0
  }
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3708      	adds	r7, #8
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b082      	sub	sp, #8
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	2106      	movs	r1, #6
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f001 fc02 	bl	800e5de <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800cdda:	4603      	mov	r3, r0
  }
 800cddc:	4618      	mov	r0, r3
 800cdde:	3708      	adds	r7, #8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	210c      	movs	r1, #12
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f001 fc32 	bl	800e65a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800cdf6:	4603      	mov	r3, r0
  }
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<int32_t> *metadata_buffer() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_METADATA_BUFFER);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2110      	movs	r1, #16
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f001 fc34 	bl	800e67a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800ce12:	4603      	mov	r3, r0
  }
 800ce14:	4618      	mov	r0, r3
 800ce16:	3708      	adds	r7, #8
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	4a04      	ldr	r2, [pc, #16]	; (800ce38 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	601a      	str	r2, [r3, #0]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr
 800ce38:	0802c758 	.word	0x0802c758

0800ce3c <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f7ff ffe9 	bl	800ce1c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800ce4a:	2104      	movs	r1, #4
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f017 fde0 	bl	8024a12 <_ZdlPvj>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	4618      	mov	r0, r3
 800ce56:	3708      	adds	r7, #8
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	4a04      	ldr	r2, [pc, #16]	; (800ce78 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	601a      	str	r2, [r3, #0]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	0802c758 	.word	0x0802c758

0800ce7c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff ffe7 	bl	800ce5c <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 800ce8e:	4a05      	ldr	r2, [pc, #20]	; (800cea4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	605a      	str	r2, [r3, #4]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	0802c704 	.word	0x0802c704

0800cea8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6858      	ldr	r0, [r3, #4]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	330c      	adds	r3, #12
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	68b9      	ldr	r1, [r7, #8]
 800cec6:	4798      	blx	r3
 800cec8:	4603      	mov	r3, r0
  }
 800ceca:	4618      	mov	r0, r3
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 800ced2:	b480      	push	{r7}
 800ced4:	b083      	sub	sp, #12
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 800cedc:	bf00      	nop
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
 800cef4:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	601a      	str	r2, [r3, #0]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	605a      	str	r2, [r3, #4]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	683a      	ldr	r2, [r7, #0]
 800cf06:	609a      	str	r2, [r3, #8]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	69ba      	ldr	r2, [r7, #24]
 800cf0c:	60da      	str	r2, [r3, #12]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	4618      	mov	r0, r3
 800cf12:	3714      	adds	r7, #20
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b096      	sub	sp, #88	; 0x58
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
 800cf28:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d101      	bne.n	800cf34 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 800cf30:	f017 ffd9 	bl	8024ee6 <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 800cf34:	2300      	movs	r3, #0
 800cf36:	657b      	str	r3, [r7, #84]	; 0x54
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d267      	bcs.n	800d012 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6819      	ldr	r1, [r3, #0]
 800cf46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf48:	4613      	mov	r3, r2
 800cf4a:	005b      	lsls	r3, r3, #1
 800cf4c:	4413      	add	r3, r2
 800cf4e:	00db      	lsls	r3, r3, #3
 800cf50:	440b      	add	r3, r1
 800cf52:	63fb      	str	r3, [r7, #60]	; 0x3c
    current->output_ptr = &(eval_tensors[i].data.data);
 800cf54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf56:	4613      	mov	r3, r2
 800cf58:	005b      	lsls	r3, r3, #1
 800cf5a:	4413      	add	r3, r2
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	461a      	mov	r2, r3
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	4413      	add	r3, r2
 800cf64:	461a      	mov	r2, r3
 800cf66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf68:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 800cf6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	005b      	lsls	r3, r3, #1
 800cf70:	4413      	add	r3, r2
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	461a      	mov	r2, r3
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	4413      	add	r3, r2
 800cf7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf7c:	4611      	mov	r1, r2
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7ff fe17 	bl	800cbb2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800cf84:	4603      	mov	r3, r0
 800cf86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cf8a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d002      	beq.n	800cf98 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 800cf92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf96:	e117      	b.n	800d1c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ac>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 800cf98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf9e:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 800cfa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfa6:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800cfa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cfaa:	4613      	mov	r3, r2
 800cfac:	005b      	lsls	r3, r3, #1
 800cfae:	4413      	add	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d113      	bne.n	800cfe6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 800cfbe:	68b8      	ldr	r0, [r7, #8]
 800cfc0:	f7ff febb 	bl	800cd3a <_ZNK6tflite8SubGraph7tensorsEv>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f001 fbef 	bl	800e7ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7ff fe82 	bl	800ccda <_ZNK6tflite6Tensor11is_variableEv>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	f083 0301 	eor.w	r3, r3, #1
 800cfdc:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d001      	beq.n	800cfe6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	e000      	b.n	800cfe8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfea:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d007      	beq.n	800d002 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 800cff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	4413      	add	r3, r2
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cffe:	611a      	str	r2, [r3, #16]
 800d000:	e003      	b.n	800d00a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 800d002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d008:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800d00a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d00c:	3301      	adds	r3, #1
 800d00e:	657b      	str	r3, [r7, #84]	; 0x54
 800d010:	e792      	b.n	800cf38 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  uint32_t operators_size = NumSubgraphOperators(subgraph);
 800d012:	68b8      	ldr	r0, [r7, #8]
 800d014:	f7ff fb1a 	bl	800c64c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800d018:	6378      	str	r0, [r7, #52]	; 0x34

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800d01a:	2300      	movs	r3, #0
 800d01c:	653b      	str	r3, [r7, #80]	; 0x50
 800d01e:	68b8      	ldr	r0, [r7, #8]
 800d020:	f7ff fe99 	bl	800cd56 <_ZNK6tflite8SubGraph6inputsEv>
 800d024:	4603      	mov	r3, r0
 800d026:	4618      	mov	r0, r3
 800d028:	f7fc fbd8 	bl	80097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800d02c:	4602      	mov	r2, r0
 800d02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d030:	4293      	cmp	r3, r2
 800d032:	bf34      	ite	cc
 800d034:	2301      	movcc	r3, #1
 800d036:	2300      	movcs	r3, #0
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d018      	beq.n	800d070 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x154>
    const int tensor_index = subgraph->inputs()->Get(i);
 800d03e:	68b8      	ldr	r0, [r7, #8]
 800d040:	f7ff fe89 	bl	800cd56 <_ZNK6tflite8SubGraph6inputsEv>
 800d044:	4603      	mov	r3, r0
 800d046:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fc fbd5 	bl	80097f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800d04e:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6819      	ldr	r1, [r3, #0]
 800d054:	697a      	ldr	r2, [r7, #20]
 800d056:	4613      	mov	r3, r2
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	4413      	add	r3, r2
 800d05c:	00db      	lsls	r3, r3, #3
 800d05e:	440b      	add	r3, r1
 800d060:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	2200      	movs	r2, #0
 800d066:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800d068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d06a:	3301      	adds	r3, #1
 800d06c:	653b      	str	r3, [r7, #80]	; 0x50
 800d06e:	e7d6      	b.n	800d01e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x102>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800d070:	2300      	movs	r3, #0
 800d072:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d074:	68b8      	ldr	r0, [r7, #8]
 800d076:	f7ff fe7c 	bl	800cd72 <_ZNK6tflite8SubGraph7outputsEv>
 800d07a:	4603      	mov	r3, r0
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7fc fbad 	bl	80097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800d082:	4602      	mov	r2, r0
 800d084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d086:	4293      	cmp	r3, r2
 800d088:	bf34      	ite	cc
 800d08a:	2301      	movcc	r3, #1
 800d08c:	2300      	movcs	r3, #0
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	2b00      	cmp	r3, #0
 800d092:	d01a      	beq.n	800d0ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1ae>
    const int tensor_index = subgraph->outputs()->Get(i);
 800d094:	68b8      	ldr	r0, [r7, #8]
 800d096:	f7ff fe6c 	bl	800cd72 <_ZNK6tflite8SubGraph7outputsEv>
 800d09a:	4603      	mov	r3, r0
 800d09c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7fc fbaa 	bl	80097f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800d0a4:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	6819      	ldr	r1, [r3, #0]
 800d0aa:	69fa      	ldr	r2, [r7, #28]
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	005b      	lsls	r3, r3, #1
 800d0b0:	4413      	add	r3, r2
 800d0b2:	00db      	lsls	r3, r3, #3
 800d0b4:	440b      	add	r3, r1
 800d0b6:	61bb      	str	r3, [r7, #24]
    current->last_used = operators_size - 1;
 800d0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	461a      	mov	r2, r3
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800d0c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0c8:	e7d4      	b.n	800d074 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x158>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (operators_size - 1); i >= 0; --i) {
 800d0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	db77      	blt.n	800d1c6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2aa>
    const auto* op = subgraph->operators()->Get(i);
 800d0d6:	68b8      	ldr	r0, [r7, #8]
 800d0d8:	f7ff fa9c 	bl	800c614 <_ZNK6tflite8SubGraph9operatorsEv>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	f001 fb88 	bl	800e7f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800d0e8:	6338      	str	r0, [r7, #48]	; 0x30
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	647b      	str	r3, [r7, #68]	; 0x44
 800d0ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0f0:	f7ff fe07 	bl	800cd02 <_ZNK6tflite8Operator6inputsEv>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fc fb70 	bl	80097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d100:	4293      	cmp	r3, r2
 800d102:	bf34      	ite	cc
 800d104:	2301      	movcc	r3, #1
 800d106:	2300      	movcs	r3, #0
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d022      	beq.n	800d154 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x238>
      const int tensor_index = op->inputs()->Get(n);
 800d10e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d110:	f7ff fdf7 	bl	800cd02 <_ZNK6tflite8Operator6inputsEv>
 800d114:	4603      	mov	r3, r0
 800d116:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fc fb6d 	bl	80097f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800d11e:	6278      	str	r0, [r7, #36]	; 0x24
      AllocationInfo* current = &info_[tensor_index];
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6819      	ldr	r1, [r3, #0]
 800d124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d126:	4613      	mov	r3, r2
 800d128:	005b      	lsls	r3, r3, #1
 800d12a:	4413      	add	r3, r2
 800d12c:	00db      	lsls	r3, r3, #3
 800d12e:	440b      	add	r3, r1
 800d130:	623b      	str	r3, [r7, #32]
      if (((current->last_used == -1) || (current->last_used < i))) {
 800d132:	6a3b      	ldr	r3, [r7, #32]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d13a:	d004      	beq.n	800d146 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x22a>
 800d13c:	6a3b      	ldr	r3, [r7, #32]
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d142:	429a      	cmp	r2, r3
 800d144:	dd02      	ble.n	800d14c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x230>
        current->last_used = i;
 800d146:	6a3b      	ldr	r3, [r7, #32]
 800d148:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d14a:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800d14c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d14e:	3301      	adds	r3, #1
 800d150:	647b      	str	r3, [r7, #68]	; 0x44
 800d152:	e7cc      	b.n	800d0ee <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1d2>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800d154:	2300      	movs	r3, #0
 800d156:	643b      	str	r3, [r7, #64]	; 0x40
 800d158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d15a:	f7ff fde0 	bl	800cd1e <_ZNK6tflite8Operator7outputsEv>
 800d15e:	4603      	mov	r3, r0
 800d160:	4618      	mov	r0, r3
 800d162:	f7fc fb3b 	bl	80097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800d166:	4602      	mov	r2, r0
 800d168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d16a:	4293      	cmp	r3, r2
 800d16c:	bf34      	ite	cc
 800d16e:	2301      	movcc	r3, #1
 800d170:	2300      	movcs	r3, #0
 800d172:	b2db      	uxtb	r3, r3
 800d174:	2b00      	cmp	r3, #0
 800d176:	d022      	beq.n	800d1be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a2>
      const int tensor_index = op->outputs()->Get(n);
 800d178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d17a:	f7ff fdd0 	bl	800cd1e <_ZNK6tflite8Operator7outputsEv>
 800d17e:	4603      	mov	r3, r0
 800d180:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d182:	4618      	mov	r0, r3
 800d184:	f7fc fb38 	bl	80097f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800d188:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	6819      	ldr	r1, [r3, #0]
 800d18e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d190:	4613      	mov	r3, r2
 800d192:	005b      	lsls	r3, r3, #1
 800d194:	4413      	add	r3, r2
 800d196:	00db      	lsls	r3, r3, #3
 800d198:	440b      	add	r3, r1
 800d19a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((current->first_created == -1) || (current->first_created > i)) {
 800d19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1a4:	d004      	beq.n	800d1b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x294>
 800d1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	da02      	bge.n	800d1b6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x29a>
        current->first_created = i;
 800d1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1b4:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800d1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	643b      	str	r3, [r7, #64]	; 0x40
 800d1bc:	e7cc      	b.n	800d158 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23c>
  for (int i = (operators_size - 1); i >= 0; --i) {
 800d1be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1c4:	e784      	b.n	800d0d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
      }
    }
  }
  return kTfLiteOk;
 800d1c6:	2300      	movs	r3, #0
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3758      	adds	r7, #88	; 0x58
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b08c      	sub	sp, #48	; 0x30
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 800d1dc:	68b8      	ldr	r0, [r7, #8]
 800d1de:	f7ff fe0f 	bl	800ce00 <_ZNK6tflite5Model8metadataEv>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	bf14      	ite	ne
 800d1e8:	2301      	movne	r3, #1
 800d1ea:	2300      	moveq	r3, #0
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d060      	beq.n	800d2b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1f6:	68b8      	ldr	r0, [r7, #8]
 800d1f8:	f7ff fe02 	bl	800ce00 <_ZNK6tflite5Model8metadataEv>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	4618      	mov	r0, r3
 800d200:	f001 fb54 	bl	800e8ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800d204:	4602      	mov	r2, r0
 800d206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d208:	4293      	cmp	r3, r2
 800d20a:	bf34      	ite	cc
 800d20c:	2301      	movcc	r3, #1
 800d20e:	2300      	movcs	r3, #0
 800d210:	b2db      	uxtb	r3, r3
 800d212:	2b00      	cmp	r3, #0
 800d214:	d04e      	beq.n	800d2b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 800d216:	68b8      	ldr	r0, [r7, #8]
 800d218:	f7ff fdf2 	bl	800ce00 <_ZNK6tflite5Model8metadataEv>
 800d21c:	4603      	mov	r3, r0
 800d21e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d220:	4618      	mov	r0, r3
 800d222:	f001 fb51 	bl	800e8c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 800d226:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800d228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d22a:	f7ff fdbe 	bl	800cdaa <_ZNK6tflite8Metadata4nameEv>
 800d22e:	4603      	mov	r3, r0
 800d230:	4618      	mov	r0, r3
 800d232:	f7fb fba6 	bl	8008982 <_ZNK11flatbuffers6String5c_strEv>
 800d236:	4603      	mov	r3, r0
 800d238:	2217      	movs	r2, #23
 800d23a:	4921      	ldr	r1, [pc, #132]	; (800d2c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 800d23c:	4618      	mov	r0, r3
 800d23e:	f018 fb0d 	bl	802585c <strncmp>
 800d242:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 800d244:	2b00      	cmp	r3, #0
 800d246:	bf0c      	ite	eq
 800d248:	2301      	moveq	r3, #1
 800d24a:	2300      	movne	r3, #0
 800d24c:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d02c      	beq.n	800d2ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 800d252:	68b8      	ldr	r0, [r7, #8]
 800d254:	f7ff fdc6 	bl	800cde4 <_ZNK6tflite5Model7buffersEv>
 800d258:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 800d25a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d25c:	f7ff fdb3 	bl	800cdc6 <_ZNK6tflite8Metadata6bufferEv>
 800d260:	4603      	mov	r3, r0
 800d262:	4619      	mov	r1, r3
 800d264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d266:	f001 fb63 	bl	800e930 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800d26a:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 800d26c:	6a38      	ldr	r0, [r7, #32]
 800d26e:	f7ff fd8e 	bl	800cd8e <_ZNK6tflite6Buffer4dataEv>
 800d272:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 800d274:	69f8      	ldr	r0, [r7, #28]
 800d276:	f001 fb69 	bl	800e94c <_ZNK11flatbuffers6VectorIhE4dataEv>
 800d27a:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	3308      	adds	r3, #8
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	429a      	cmp	r2, r3
 800d296:	d009      	beq.n	800d2ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	68d8      	ldr	r0, [r3, #12]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	697a      	ldr	r2, [r7, #20]
 800d2a2:	4908      	ldr	r1, [pc, #32]	; (800d2c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 800d2a4:	f7fb fb2e 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e004      	b.n	800d2b6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800d2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2b2:	e7a0      	b.n	800d1f6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3730      	adds	r7, #48	; 0x30
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	0802c6e0 	.word	0x0802c6e0
 800d2c4:	0802794c 	.word	0x0802794c

0800d2c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 800d2c8:	b480      	push	{r7}
 800d2ca:	b089      	sub	sp, #36	; 0x24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	61fb      	str	r3, [r7, #28]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	69fa      	ldr	r2, [r7, #28]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d232      	bcs.n	800d350 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	69fa      	ldr	r2, [r7, #28]
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 800d2f4:	68ba      	ldr	r2, [r7, #8]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	69fa      	ldr	r2, [r7, #28]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	4413      	add	r3, r2
 800d308:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6819      	ldr	r1, [r3, #0]
 800d30e:	69fa      	ldr	r2, [r7, #28]
 800d310:	4613      	mov	r3, r2
 800d312:	005b      	lsls	r3, r3, #1
 800d314:	4413      	add	r3, r2
 800d316:	00db      	lsls	r3, r3, #3
 800d318:	440b      	add	r3, r1
 800d31a:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 800d31c:	697a      	ldr	r2, [r7, #20]
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	685a      	ldr	r2, [r3, #4]
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	685a      	ldr	r2, [r3, #4]
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d340:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	2201      	movs	r2, #1
 800d346:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	3301      	adds	r3, #1
 800d34c:	61fb      	str	r3, [r7, #28]
 800d34e:	e7c4      	b.n	800d2da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	3724      	adds	r7, #36	; 0x24
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr

0800d35e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        MicroMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800d35e:	b590      	push	{r4, r7, lr}
 800d360:	b08b      	sub	sp, #44	; 0x2c
 800d362:	af02      	add	r7, sp, #8
 800d364:	60f8      	str	r0, [r7, #12]
 800d366:	60b9      	str	r1, [r7, #8]
 800d368:	607a      	str	r2, [r7, #4]
 800d36a:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800d36c:	2300      	movs	r3, #0
 800d36e:	61fb      	str	r3, [r7, #28]
 800d370:	69fa      	ldr	r2, [r7, #28]
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	429a      	cmp	r2, r3
 800d376:	d24a      	bcs.n	800d40e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0xb0>
    const AllocationInfo* current = &allocation_info[i];
 800d378:	69fa      	ldr	r2, [r7, #28]
 800d37a:	4613      	mov	r3, r2
 800d37c:	005b      	lsls	r3, r3, #1
 800d37e:	4413      	add	r3, r2
 800d380:	00db      	lsls	r3, r3, #3
 800d382:	461a      	mov	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	4413      	add	r3, r2
 800d388:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	7d1b      	ldrb	r3, [r3, #20]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d039      	beq.n	800d406 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0xa8>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2110      	movs	r1, #16
 800d398:	4618      	mov	r0, r3
 800d39a:	f7ff fb22 	bl	800c9e2 <_ZN6tflite11AlignSizeUpEjj>
 800d39e:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	691b      	ldr	r3, [r3, #16]
 800d3a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3a8:	d114      	bne.n	800d3d4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	3308      	adds	r3, #8
 800d3b0:	681c      	ldr	r4, [r3, #0]
 800d3b2:	697a      	ldr	r2, [r7, #20]
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	6899      	ldr	r1, [r3, #8]
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	9300      	str	r3, [sp, #0]
 800d3be:	460b      	mov	r3, r1
 800d3c0:	68f9      	ldr	r1, [r7, #12]
 800d3c2:	68b8      	ldr	r0, [r7, #8]
 800d3c4:	47a0      	blx	r4
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	74bb      	strb	r3, [r7, #18]
 800d3ca:	7cbb      	ldrb	r3, [r7, #18]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d01a      	beq.n	800d406 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0xa8>
 800d3d0:	7cbb      	ldrb	r3, [r7, #18]
 800d3d2:	e01d      	b.n	800d410 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0xb2>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	330c      	adds	r3, #12
 800d3da:	681c      	ldr	r4, [r3, #0]
 800d3dc:	6979      	ldr	r1, [r7, #20]
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	6898      	ldr	r0, [r3, #8]
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	69ba      	ldr	r2, [r7, #24]
 800d3e8:	6912      	ldr	r2, [r2, #16]
 800d3ea:	9201      	str	r2, [sp, #4]
 800d3ec:	9300      	str	r3, [sp, #0]
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	460a      	mov	r2, r1
 800d3f2:	68f9      	ldr	r1, [r7, #12]
 800d3f4:	68b8      	ldr	r0, [r7, #8]
 800d3f6:	47a0      	blx	r4
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	74fb      	strb	r3, [r7, #19]
 800d3fc:	7cfb      	ldrb	r3, [r7, #19]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d001      	beq.n	800d406 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0xa8>
 800d402:	7cfb      	ldrb	r3, [r7, #19]
 800d404:	e004      	b.n	800d410 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0xb2>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	3301      	adds	r3, #1
 800d40a:	61fb      	str	r3, [r7, #28]
 800d40c:	e7b0      	b.n	800d370 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 800d40e:	2300      	movs	r3, #0
}
 800d410:	4618      	mov	r0, r3
 800d412:	3724      	adds	r7, #36	; 0x24
 800d414:	46bd      	mov	sp, r7
 800d416:	bd90      	pop	{r4, r7, pc}

0800d418 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter,
                        MicroMemoryPlanner* planner, uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800d418:	b590      	push	{r4, r7, lr}
 800d41a:	b08b      	sub	sp, #44	; 0x2c
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
 800d424:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800d42a:	2300      	movs	r3, #0
 800d42c:	623b      	str	r3, [r7, #32]
 800d42e:	6a3a      	ldr	r2, [r7, #32]
 800d430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d432:	429a      	cmp	r2, r3
 800d434:	d22e      	bcs.n	800d494 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 800d436:	6a3a      	ldr	r2, [r7, #32]
 800d438:	4613      	mov	r3, r2
 800d43a:	005b      	lsls	r3, r3, #1
 800d43c:	4413      	add	r3, r2
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	461a      	mov	r2, r3
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	4413      	add	r3, r2
 800d446:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 800d448:	69fb      	ldr	r3, [r7, #28]
 800d44a:	7d1b      	ldrb	r3, [r3, #20]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d01d      	beq.n	800d48c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 800d450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d454:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3318      	adds	r3, #24
 800d45c:	681c      	ldr	r4, [r3, #0]
 800d45e:	f107 0314 	add.w	r3, r7, #20
 800d462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d464:	68f9      	ldr	r1, [r7, #12]
 800d466:	68b8      	ldr	r0, [r7, #8]
 800d468:	47a0      	blx	r4
 800d46a:	4603      	mov	r3, r0
 800d46c:	76fb      	strb	r3, [r7, #27]
 800d46e:	7efb      	ldrb	r3, [r7, #27]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d001      	beq.n	800d478 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 800d474:	7efb      	ldrb	r3, [r7, #27]
 800d476:	e00e      	b.n	800d496 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	4619      	mov	r1, r3
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	440a      	add	r2, r1
 800d484:	601a      	str	r2, [r3, #0]
      ++planner_index;
 800d486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d488:	3301      	adds	r3, #1
 800d48a:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800d48c:	6a3b      	ldr	r3, [r7, #32]
 800d48e:	3301      	adds	r3, #1
 800d490:	623b      	str	r3, [r7, #32]
 800d492:	e7cc      	b.n	800d42e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 800d494:	2300      	movs	r3, #0
}
 800d496:	4618      	mov	r0, r3
 800d498:	372c      	adds	r7, #44	; 0x2c
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd90      	pop	{r4, r7, pc}

0800d49e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b086      	sub	sp, #24
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
 800d4a6:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f7ff fbf7 	bl	800cca0 <_ZNK6tflite6Tensor6bufferEv>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	6838      	ldr	r0, [r7, #0]
 800d4b8:	f001 fa3a 	bl	800e930 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800d4bc:	6138      	str	r0, [r7, #16]
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d015      	beq.n	800d4f0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 800d4c4:	6938      	ldr	r0, [r7, #16]
 800d4c6:	f7ff fc62 	bl	800cd8e <_ZNK6tflite6Buffer4dataEv>
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d00e      	beq.n	800d4f0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f001 f8e1 	bl	800e69a <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	bf14      	ite	ne
 800d4de:	2301      	movne	r3, #1
 800d4e0:	2300      	moveq	r3, #0
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d003      	beq.n	800d4f0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f001 fa2f 	bl	800e94c <_ZNK11flatbuffers6VectorIhE4dataEv>
 800d4ee:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 800d4f0:	697b      	ldr	r3, [r7, #20]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3718      	adds	r7, #24
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
	...

0800d4fc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 800d4fc:	b590      	push	{r4, r7, lr}
 800d4fe:	b08d      	sub	sp, #52	; 0x34
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	607a      	str	r2, [r7, #4]
 800d506:	603b      	str	r3, [r7, #0]
 800d508:	460b      	mov	r3, r1
 800d50a:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 800d50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d101      	bne.n	800d516 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 800d512:	f017 fce8 	bl	8024ee6 <abort>

  *result = {};
 800d516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d518:	4618      	mov	r0, r3
 800d51a:	2340      	movs	r3, #64	; 0x40
 800d51c:	461a      	mov	r2, r3
 800d51e:	2100      	movs	r1, #0
 800d520:	f017 fd80 	bl	8025024 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f7ff f9a3 	bl	800c870 <_ZNK6tflite6Tensor4typeEv>
 800d52a:	4603      	mov	r3, r0
 800d52c:	4618      	mov	r0, r3
 800d52e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d532:	4619      	mov	r1, r3
 800d534:	f7fb fcfa 	bl	8008f2c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800d538:	4603      	mov	r3, r0
 800d53a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d53e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d542:	2b00      	cmp	r3, #0
 800d544:	d002      	beq.n	800d54c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 800d546:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d54a:	e127      	b.n	800d79c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f7ff fbc4 	bl	800ccda <_ZNK6tflite6Tensor11is_variableEv>
 800d552:	4603      	mov	r3, r0
 800d554:	461a      	mov	r2, r3
 800d556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d558:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800d55c:	6839      	ldr	r1, [r7, #0]
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7ff ff9d 	bl	800d49e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800d564:	4602      	mov	r2, r0
 800d566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d568:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 800d56a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d103      	bne.n	800d57a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 800d572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d574:	2202      	movs	r2, #2
 800d576:	751a      	strb	r2, [r3, #20]
 800d578:	e002      	b.n	800d580 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 800d57a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d57c:	2201      	movs	r2, #1
 800d57e:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 800d580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d582:	f103 0118 	add.w	r1, r3, #24
 800d586:	f107 0210 	add.w	r2, r7, #16
 800d58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f7ff faaf 	bl	800caf0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 800d592:	4603      	mov	r3, r0
 800d594:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d598:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d002      	beq.n	800d5a6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 800d5a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d5a4:	e0fa      	b.n	800d79c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f7ff f954 	bl	800c854 <_ZNK6tflite6Tensor5shapeEv>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	bf0c      	ite	eq
 800d5b2:	2301      	moveq	r3, #1
 800d5b4:	2300      	movne	r3, #0
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d003      	beq.n	800d5c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800d5bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5be:	4a79      	ldr	r2, [pc, #484]	; (800d7a4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a8>)
 800d5c0:	609a      	str	r2, [r3, #8]
 800d5c2:	e013      	b.n	800d5ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7ff f945 	bl	800c854 <_ZNK6tflite6Tensor5shapeEv>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5ce:	3308      	adds	r3, #8
 800d5d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f001 f9c6 	bl	800e964 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800d5de:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d002      	beq.n	800d5ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 800d5e6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d5ea:	e0d7      	b.n	800d79c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7ff fb66 	bl	800ccbe <_ZNK6tflite6Tensor12quantizationEv>
 800d5f2:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d021      	beq.n	800d63e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 800d5fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5fc:	f7ff fb25 	bl	800cc4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d01b      	beq.n	800d63e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 800d606:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d608:	f7ff fb1f 	bl	800cc4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800d60c:	4603      	mov	r3, r0
 800d60e:	4618      	mov	r0, r3
 800d610:	f001 f851 	bl	800e6b6 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800d614:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 800d616:	2b00      	cmp	r3, #0
 800d618:	d011      	beq.n	800d63e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 800d61a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d61c:	f7ff fb23 	bl	800cc66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800d620:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00b      	beq.n	800d63e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 800d626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d628:	f7ff fb1d 	bl	800cc66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800d62c:	4603      	mov	r3, r0
 800d62e:	4618      	mov	r0, r3
 800d630:	f001 f878 	bl	800e724 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800d634:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 800d636:	2b00      	cmp	r3, #0
 800d638:	d001      	beq.n	800d63e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 800d63a:	2301      	movs	r3, #1
 800d63c:	e000      	b.n	800d640 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 800d63e:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 800d640:	2b00      	cmp	r3, #0
 800d642:	f000 80aa 	beq.w	800d79a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 800d646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d648:	f7ff faff 	bl	800cc4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2100      	movs	r1, #0
 800d650:	4618      	mov	r0, r3
 800d652:	f001 f83f 	bl	800e6d4 <_ZNK11flatbuffers6VectorIfE3GetEm>
 800d656:	eef0 7a40 	vmov.f32	s15, s0
 800d65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d65c:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 800d660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d662:	f7ff fb00 	bl	800cc66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800d666:	4603      	mov	r3, r0
 800d668:	2100      	movs	r1, #0
 800d66a:	4618      	mov	r0, r3
 800d66c:	f001 f868 	bl	800e740 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800d670:	4602      	mov	r2, r0
 800d672:	460b      	mov	r3, r1
    result->params.zero_point =
 800d674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d676:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 800d678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d67a:	f7ff fae6 	bl	800cc4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800d67e:	4603      	mov	r3, r0
 800d680:	4618      	mov	r0, r3
 800d682:	f001 f818 	bl	800e6b6 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800d686:	4603      	mov	r3, r0
 800d688:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 800d68a:	7afb      	ldrb	r3, [r7, #11]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d009      	beq.n	800d6a4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	3310      	adds	r3, #16
 800d696:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 800d698:	2204      	movs	r2, #4
 800d69a:	210c      	movs	r1, #12
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	4798      	blx	r3
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	e008      	b.n	800d6b6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	330c      	adds	r3, #12
 800d6aa:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateFromTail(
 800d6ac:	2204      	movs	r2, #4
 800d6ae:	210c      	movs	r1, #12
 800d6b0:	68f8      	ldr	r0, [r7, #12]
 800d6b2:	4798      	blx	r3
 800d6b4:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 800d6b6:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d105      	bne.n	800d6ca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ce>
      TF_LITE_REPORT_ERROR(error_reporter,
 800d6be:	493a      	ldr	r1, [pc, #232]	; (800d7a8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 800d6c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d6c2:	f7fb f91f 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e068      	b.n	800d79c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800d6ca:	7afb      	ldrb	r3, [r7, #11]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00d      	beq.n	800d6ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	3310      	adds	r3, #16
 800d6d6:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800d6d8:	6a38      	ldr	r0, [r7, #32]
 800d6da:	f7fb f887 	bl	80087ec <TfLiteIntArrayGetSizeInBytes>
 800d6de:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800d6e0:	2204      	movs	r2, #4
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	47a0      	blx	r4
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	e00c      	b.n	800d706 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20a>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	330c      	adds	r3, #12
 800d6f2:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800d6f4:	6a38      	ldr	r0, [r7, #32]
 800d6f6:	f7fb f879 	bl	80087ec <TfLiteIntArrayGetSizeInBytes>
 800d6fa:	4603      	mov	r3, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 800d6fc:	2204      	movs	r2, #4
 800d6fe:	4619      	mov	r1, r3
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	47a0      	blx	r4
 800d704:	4603      	mov	r3, r0
    quantization->zero_point =
 800d706:	69fa      	ldr	r2, [r7, #28]
 800d708:	6053      	str	r3, [r2, #4]
    if (quantization->zero_point == nullptr) {
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d105      	bne.n	800d71e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x222>
      TF_LITE_REPORT_ERROR(error_reporter,
 800d712:	4926      	ldr	r1, [pc, #152]	; (800d7ac <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 800d714:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d716:	f7fb f8f5 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 800d71a:	2301      	movs	r3, #1
 800d71c:	e03e      	b.n	800d79c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800d71e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d720:	f7ff fa93 	bl	800cc4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800d724:	4602      	mov	r2, r0
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f001 f933 	bl	800e996 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800d730:	4603      	mov	r3, r0
 800d732:	76fb      	strb	r3, [r7, #27]
 800d734:	7efb      	ldrb	r3, [r7, #27]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x242>
 800d73a:	7efb      	ldrb	r3, [r7, #27]
 800d73c:	e02e      	b.n	800d79c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	6a3a      	ldr	r2, [r7, #32]
 800d744:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	3304      	adds	r3, #4
 800d74c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 800d74e:	2300      	movs	r3, #0
 800d750:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d754:	6a3b      	ldr	r3, [r7, #32]
 800d756:	429a      	cmp	r2, r3
 800d758:	da12      	bge.n	800d780 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x284>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 800d75a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d75c:	f7ff fa83 	bl	800cc66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800d760:	4602      	mov	r2, r0
 800d762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d764:	4619      	mov	r1, r3
 800d766:	4610      	mov	r0, r2
 800d768:	f000 ffea 	bl	800e740 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800d76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	697a      	ldr	r2, [r7, #20]
 800d772:	4413      	add	r3, r2
 800d774:	4602      	mov	r2, r0
 800d776:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77a:	3301      	adds	r3, #1
 800d77c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d77e:	e7e8      	b.n	800d752 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x256>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 800d780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d782:	f7ff fa7e 	bl	800cc82 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 800d786:	4602      	mov	r2, r0
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 800d78c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d78e:	2201      	movs	r2, #1
 800d790:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800d794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d796:	69fa      	ldr	r2, [r7, #28]
 800d798:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 800d79a:	2300      	movs	r3, #0
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3734      	adds	r7, #52	; 0x34
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd90      	pop	{r4, r7, pc}
 800d7a4:	0802c6f8 	.word	0x0802c6f8
 800d7a8:	08027998 	.word	0x08027998
 800d7ac:	080279c8 	.word	0x080279c8

0800d7b0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	603b      	str	r3, [r7, #0]
  *result = {};
 800d7be:	6a3b      	ldr	r3, [r7, #32]
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	6053      	str	r3, [r2, #4]
 800d7c8:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800d7ca:	68b8      	ldr	r0, [r7, #8]
 800d7cc:	f7ff f850 	bl	800c870 <_ZNK6tflite6Tensor4typeEv>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	6a3b      	ldr	r3, [r7, #32]
 800d7d6:	3308      	adds	r3, #8
 800d7d8:	683a      	ldr	r2, [r7, #0]
 800d7da:	4619      	mov	r1, r3
 800d7dc:	f7fb fba6 	bl	8008f2c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	75fb      	strb	r3, [r7, #23]
 800d7e4:	7dfb      	ldrb	r3, [r7, #23]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d001      	beq.n	800d7ee <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 800d7ea:	7dfb      	ldrb	r3, [r7, #23]
 800d7ec:	e027      	b.n	800d83e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800d7ee:	6879      	ldr	r1, [r7, #4]
 800d7f0:	68b8      	ldr	r0, [r7, #8]
 800d7f2:	f7ff fe54 	bl	800d49e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	6a3b      	ldr	r3, [r7, #32]
 800d7fa:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 800d7fc:	68b8      	ldr	r0, [r7, #8]
 800d7fe:	f7ff f829 	bl	800c854 <_ZNK6tflite6Tensor5shapeEv>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	bf0c      	ite	eq
 800d808:	2301      	moveq	r3, #1
 800d80a:	2300      	movne	r3, #0
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d003      	beq.n	800d81a <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	4a0c      	ldr	r2, [pc, #48]	; (800d848 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 800d816:	605a      	str	r2, [r3, #4]
 800d818:	e010      	b.n	800d83c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800d81a:	68b8      	ldr	r0, [r7, #8]
 800d81c:	f7ff f81a 	bl	800c854 <_ZNK6tflite6Tensor5shapeEv>
 800d820:	4602      	mov	r2, r0
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	3304      	adds	r3, #4
 800d826:	6839      	ldr	r1, [r7, #0]
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f001 f89b 	bl	800e964 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800d82e:	4603      	mov	r3, r0
 800d830:	75bb      	strb	r3, [r7, #22]
 800d832:	7dbb      	ldrb	r3, [r7, #22]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d001      	beq.n	800d83c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 800d838:	7dbb      	ldrb	r3, [r7, #22]
 800d83a:	e000      	b.n	800d83e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3718      	adds	r7, #24
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	0802c6f8 	.word	0x0802c6f8

0800d84c <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 800d84c:	b480      	push	{r7}
 800d84e:	b085      	sub	sp, #20
 800d850:	af00      	add	r7, sp, #0
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	607a      	str	r2, [r7, #4]
 800d858:	603b      	str	r3, [r7, #0]
                               MicroMemoryPlanner* memory_planner,
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      memory_planner_(memory_planner),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 800d85a:	4a0e      	ldr	r2, [pc, #56]	; (800d894 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE+0x48>)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	601a      	str	r2, [r3, #0]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	68ba      	ldr	r2, [r7, #8]
 800d864:	605a      	str	r2, [r3, #4]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	60da      	str	r2, [r3, #12]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	611a      	str	r2, [r3, #16]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	751a      	strb	r2, [r3, #20]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2200      	movs	r2, #0
 800d87c:	619a      	str	r2, [r3, #24]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2200      	movs	r2, #0
 800d882:	61da      	str	r2, [r3, #28]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	4618      	mov	r0, r3
 800d888:	3714      	adds	r7, #20
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	0802c71c 	.word	0x0802c71c

0800d898 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 800d898:	b480      	push	{r7}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	4a04      	ldr	r2, [pc, #16]	; (800d8b4 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	601a      	str	r2, [r3, #0]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr
 800d8b4:	0802c71c 	.word	0x0802c71c

0800d8b8 <_ZN6tflite14MicroAllocatorD0Ev>:
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f7ff ffe9 	bl	800d898 <_ZN6tflite14MicroAllocatorD1Ev>
 800d8c6:	2120      	movs	r1, #32
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f017 f8a2 	bl	8024a12 <_ZdlPvj>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

  return Create(memory_allocator, memory_planner, error_reporter);
}

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 800d8d8:	b590      	push	{r4, r7, lr}
 800d8da:	b08b      	sub	sp, #44	; 0x2c
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 800d8e4:	2110      	movs	r1, #16
 800d8e6:	68f8      	ldr	r0, [r7, #12]
 800d8e8:	f7ff f84c 	bl	800c984 <_ZN6tflite14AlignPointerUpEPhj>
 800d8ec:	6278      	str	r0, [r7, #36]	; 0x24
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 800d8ee:	68fa      	ldr	r2, [r7, #12]
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	441a      	add	r2, r3
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	623b      	str	r3, [r7, #32]
  SimpleMemoryAllocator* memory_allocator = SimpleMemoryAllocator::Create(
 800d8fa:	6a3a      	ldr	r2, [r7, #32]
 800d8fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f003 f8c6 	bl	8010a90 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 800d904:	61f8      	str	r0, [r7, #28]
      error_reporter, aligned_arena, aligned_arena_size);

  // By default create GreedyMemoryPlanner.
  // If a different MemoryPlanner is needed, use the other api.
  uint8_t* memory_planner_buffer = memory_allocator->AllocateFromTail(
      sizeof(GreedyMemoryPlanner), alignof(GreedyMemoryPlanner));
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	330c      	adds	r3, #12
 800d90c:	681b      	ldr	r3, [r3, #0]
  uint8_t* memory_planner_buffer = memory_allocator->AllocateFromTail(
 800d90e:	2204      	movs	r2, #4
 800d910:	212c      	movs	r1, #44	; 0x2c
 800d912:	69f8      	ldr	r0, [r7, #28]
 800d914:	4798      	blx	r3
 800d916:	61b8      	str	r0, [r7, #24]
  GreedyMemoryPlanner* memory_planner =
      new (memory_planner_buffer) GreedyMemoryPlanner();
 800d918:	69bb      	ldr	r3, [r7, #24]
 800d91a:	4619      	mov	r1, r3
 800d91c:	202c      	movs	r0, #44	; 0x2c
 800d91e:	f7fb f824 	bl	800896a <_ZnwjPv>
 800d922:	4604      	mov	r4, r0
 800d924:	4620      	mov	r0, r4
 800d926:	f00a fae7 	bl	8017ef8 <_ZN6tflite19GreedyMemoryPlannerC1Ev>
 800d92a:	617c      	str	r4, [r7, #20]

  return Create(memory_allocator, memory_planner, error_reporter);
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	6979      	ldr	r1, [r7, #20]
 800d930:	69f8      	ldr	r0, [r7, #28]
 800d932:	f000 f805 	bl	800d940 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE>
 800d936:	4603      	mov	r3, r0
}
 800d938:	4618      	mov	r0, r3
 800d93a:	372c      	adds	r7, #44	; 0x2c
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd90      	pop	{r4, r7, pc}

0800d940 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       MicroMemoryPlanner* memory_planner,
                                       ErrorReporter* error_reporter) {
 800d940:	b590      	push	{r4, r7, lr}
 800d942:	b087      	sub	sp, #28
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(memory_allocator != nullptr);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d101      	bne.n	800d956 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE+0x16>
 800d952:	f017 fac8 	bl	8024ee6 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d101      	bne.n	800d960 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE+0x20>
 800d95c:	f017 fac3 	bl	8024ee6 <abort>
  TFLITE_DCHECK(memory_planner != nullptr);
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d101      	bne.n	800d96a <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE+0x2a>
 800d966:	f017 fabe 	bl	8024ee6 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	330c      	adds	r3, #12
 800d970:	681b      	ldr	r3, [r3, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 800d972:	2204      	movs	r2, #4
 800d974:	2120      	movs	r1, #32
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	4798      	blx	r3
 800d97a:	6178      	str	r0, [r7, #20]
  MicroAllocator* allocator = new (allocator_buffer)
      MicroAllocator(memory_allocator, memory_planner, error_reporter);
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	4619      	mov	r1, r3
 800d980:	2020      	movs	r0, #32
 800d982:	f7fa fff2 	bl	800896a <_ZnwjPv>
 800d986:	4604      	mov	r4, r0
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	68ba      	ldr	r2, [r7, #8]
 800d98c:	68f9      	ldr	r1, [r7, #12]
 800d98e:	4620      	mov	r0, r4
 800d990:	f7ff ff5c 	bl	800d84c <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE>
 800d994:	613c      	str	r4, [r7, #16]
  return allocator;
 800d996:	693b      	ldr	r3, [r7, #16]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	371c      	adds	r7, #28
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd90      	pop	{r4, r7, pc}

0800d9a0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 800d9a0:	b5b0      	push	{r4, r5, r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x14>
 800d9b0:	f017 fa99 	bl	8024ee6 <abort>

  if (model_is_allocating_) {
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	7d1b      	ldrb	r3, [r3, #20]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d007      	beq.n	800d9cc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	691b      	ldr	r3, [r3, #16]
 800d9c0:	4936      	ldr	r1, [pc, #216]	; (800da9c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xfc>)
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fa ff9e 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return nullptr;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	e063      	b.n	800da94 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  model_is_allocating_ = true;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	751a      	strb	r2, [r3, #20]

  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6858      	ldr	r0, [r3, #4]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	685b      	ldr	r3, [r3, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	330c      	adds	r3, #12
 800d9de:	681b      	ldr	r3, [r3, #0]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 800d9e0:	2204      	movs	r2, #4
 800d9e2:	2108      	movs	r1, #8
 800d9e4:	4798      	blx	r3
 800d9e6:	60f8      	str	r0, [r7, #12]
  builtin_data_allocator_ =
 800d9e8:	68fb      	ldr	r3, [r7, #12]
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	2008      	movs	r0, #8
 800d9ee:	f7fa ffbc 	bl	800896a <_ZnwjPv>
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f7ff fa3e 	bl	800ce7c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  builtin_data_allocator_ =
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	609c      	str	r4, [r3, #8]

  if (InitScratchBufferData() != kTfLiteOk) {
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 fd6b 	bl	800e4e0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	bf14      	ite	ne
 800da10:	2301      	movne	r3, #1
 800da12:	2300      	moveq	r3, #0
 800da14:	b2db      	uxtb	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d001      	beq.n	800da1e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x7e>
    return nullptr;
 800da1a:	2300      	movs	r3, #0
 800da1c:	e03a      	b.n	800da94 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  // Allocate struct to store eval tensors, nodes and registrations.
  SubgraphAllocations* output = reinterpret_cast<SubgraphAllocations*>(
      memory_allocator_->AllocateFromTail(
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	685d      	ldr	r5, [r3, #4]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	685b      	ldr	r3, [r3, #4]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
          alignof(SubgraphAllocations)));
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	330c      	adds	r3, #12
 800da2a:	681c      	ldr	r4, [r3, #0]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 800da2c:	6838      	ldr	r0, [r7, #0]
 800da2e:	f7fe fdff 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800da32:	4603      	mov	r3, r0
 800da34:	4618      	mov	r0, r3
 800da36:	f7fe fe6b 	bl	800c710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800da3a:	4603      	mov	r3, r0
 800da3c:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 800da3e:	2204      	movs	r2, #4
 800da40:	4619      	mov	r1, r3
 800da42:	4628      	mov	r0, r5
 800da44:	47a0      	blx	r4
 800da46:	60b8      	str	r0, [r7, #8]
  if (output == nullptr) {
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d104      	bne.n	800da58 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
    MicroPrintf("Failed to allocate memory for model metadata.");
 800da4e:	4814      	ldr	r0, [pc, #80]	; (800daa0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x100>)
 800da50:	f001 f9ee 	bl	800ee30 <_Z11MicroPrintfPKcz>
    return nullptr;
 800da54:	2300      	movs	r3, #0
 800da56:	e01d      	b.n	800da94 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	331c      	adds	r3, #28
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68ba      	ldr	r2, [r7, #8]
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	4798      	blx	r3
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d10a      	bne.n	800da84 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe4>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	3318      	adds	r3, #24
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	68ba      	ldr	r2, [r7, #8]
 800da78:	6839      	ldr	r1, [r7, #0]
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	4798      	blx	r3
 800da7e:	4603      	mov	r3, r0
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800da80:	2b00      	cmp	r3, #0
 800da82:	d001      	beq.n	800da88 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe8>
 800da84:	2301      	movs	r3, #1
 800da86:	e000      	b.n	800da8a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xea>
 800da88:	2300      	movs	r3, #0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d001      	beq.n	800da92 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf2>
    return nullptr;
 800da8e:	2300      	movs	r3, #0
 800da90:	e000      	b.n	800da94 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }
  return output;
 800da92:	68bb      	ldr	r3, [r7, #8]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3710      	adds	r7, #16
 800da98:	46bd      	mov	sp, r7
 800da9a:	bdb0      	pop	{r4, r5, r7, pc}
 800da9c:	080279f8 	.word	0x080279f8
 800daa0:	08027a50 	.word	0x08027a50

0800daa4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, SubgraphAllocations* subgraph_allocations,
    ScratchBufferHandle** scratch_buffer_handles) {
 800daa4:	b590      	push	{r4, r7, lr}
 800daa6:	b08b      	sub	sp, #44	; 0x2c
 800daa8:	af02      	add	r7, sp, #8
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
 800dab0:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	7d1b      	ldrb	r3, [r3, #20]
 800dab6:	f083 0301 	eor.w	r3, r3, #1
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d007      	beq.n	800dad0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	691b      	ldr	r3, [r3, #16]
 800dac4:	4936      	ldr	r1, [pc, #216]	; (800dba0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xfc>)
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fa ff1c 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 800dacc:	2301      	movs	r3, #1
 800dace:	e062      	b.n	800db96 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  }

  // TODO(b/187993197): Track scratch buffers for each subgraph.
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800dad0:	2300      	movs	r3, #0
 800dad2:	61fb      	str	r3, [r7, #28]
 800dad4:	68b8      	ldr	r0, [r7, #8]
 800dad6:	f7fe fdab 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800dada:	4603      	mov	r3, r0
 800dadc:	4618      	mov	r0, r3
 800dade:	f7fe fe17 	bl	800c710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800dae2:	4602      	mov	r2, r0
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	4293      	cmp	r3, r2
 800dae8:	bf34      	ite	cc
 800daea:	2301      	movcc	r3, #1
 800daec:	2300      	movcs	r3, #0
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d04c      	beq.n	800db8e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xea>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800daf4:	68b8      	ldr	r0, [r7, #8]
 800daf6:	f7fe fd9b 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800dafa:	4603      	mov	r3, r0
 800dafc:	69f9      	ldr	r1, [r7, #28]
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fe fe14 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800db04:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d101      	bne.n	800db10 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x6c>
 800db0c:	f017 f9eb 	bl	8024ee6 <abort>

    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	3330      	adds	r3, #48	; 0x30
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	6992      	ldr	r2, [r2, #24]
 800db1c:	6839      	ldr	r1, [r7, #0]
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	4798      	blx	r3
 800db22:	4603      	mov	r3, r0
 800db24:	75fb      	strb	r3, [r7, #23]
 800db26:	7dfb      	ldrb	r3, [r7, #23]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d001      	beq.n	800db30 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x8c>
 800db2c:	7dfb      	ldrb	r3, [r7, #23]
 800db2e:	e032      	b.n	800db96 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        scratch_buffer_handles, scratch_buffer_request_count_));
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	332c      	adds	r3, #44	; 0x2c
 800db36:	681c      	ldr	r4, [r3, #0]
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	00db      	lsls	r3, r3, #3
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	4413      	add	r3, r2
 800db40:	685a      	ldr	r2, [r3, #4]
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	6819      	ldr	r1, [r3, #0]
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	460b      	mov	r3, r1
 800db4c:	68b9      	ldr	r1, [r7, #8]
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	47a0      	blx	r4
 800db52:	4603      	mov	r3, r0
 800db54:	75bb      	strb	r3, [r7, #22]
 800db56:	7dbb      	ldrb	r3, [r7, #22]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d001      	beq.n	800db60 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbc>
 800db5c:	7dbb      	ldrb	r3, [r7, #22]
 800db5e:	e01a      	b.n	800db96 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        model, subgraph_allocations[subgraph_idx].tensors,
        *scratch_buffer_handles, subgraph_idx));
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3320      	adds	r3, #32
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	69fa      	ldr	r2, [r7, #28]
 800db6a:	00d2      	lsls	r2, r2, #3
 800db6c:	6879      	ldr	r1, [r7, #4]
 800db6e:	440a      	add	r2, r1
 800db70:	6852      	ldr	r2, [r2, #4]
 800db72:	69b9      	ldr	r1, [r7, #24]
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	4798      	blx	r3
 800db78:	4603      	mov	r3, r0
 800db7a:	757b      	strb	r3, [r7, #21]
 800db7c:	7d7b      	ldrb	r3, [r7, #21]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d001      	beq.n	800db86 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe2>
 800db82:	7d7b      	ldrb	r3, [r7, #21]
 800db84:	e007      	b.n	800db96 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	3301      	adds	r3, #1
 800db8a:	61fb      	str	r3, [r7, #28]
 800db8c:	e7a2      	b.n	800dad4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>
        subgraph, subgraph_allocations[subgraph_idx].tensors));
  }
  model_is_allocating_ = false;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2200      	movs	r2, #0
 800db92:	751a      	strb	r2, [r3, #20]
  return kTfLiteOk;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3724      	adds	r7, #36	; 0x24
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd90      	pop	{r4, r7, pc}
 800db9e:	bf00      	nop
 800dba0:	08027a80 	.word	0x08027a80

0800dba4 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6858      	ldr	r0, [r3, #4]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	330c      	adds	r3, #12
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2210      	movs	r2, #16
 800dbbe:	6839      	ldr	r1, [r7, #0]
 800dbc0:	4798      	blx	r3
 800dbc2:	4603      	mov	r3, r0
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b088      	sub	sp, #32
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
 800dbd8:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f000 fc9d 	bl	800e51a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800dbe0:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	61bb      	str	r3, [r7, #24]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	699b      	ldr	r3, [r3, #24]
 800dbee:	69ba      	ldr	r2, [r7, #24]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d20e      	bcs.n	800dc12 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x46>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	00db      	lsls	r3, r3, #3
 800dbf8:	697a      	ldr	r2, [r7, #20]
 800dbfa:	4413      	add	r3, r2
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc02:	d102      	bne.n	800dc0a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	3301      	adds	r3, #1
 800dc08:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	61bb      	str	r3, [r7, #24]
 800dc10:	e7eb      	b.n	800dbea <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1e>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	2b0b      	cmp	r3, #11
 800dc16:	d908      	bls.n	800dc2a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x5e>
    TF_LITE_REPORT_ERROR(
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	691b      	ldr	r3, [r3, #16]
 800dc1c:	220c      	movs	r2, #12
 800dc1e:	4913      	ldr	r1, [pc, #76]	; (800dc6c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xa0>)
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7fa fe6f 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 800dc26:	2301      	movs	r3, #1
 800dc28:	e01c      	b.n	800dc64 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x98>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	699b      	ldr	r3, [r3, #24]
 800dc2e:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 800dc30:	697a      	ldr	r2, [r7, #20]
 800dc32:	4413      	add	r3, r2
 800dc34:	613b      	str	r3, [r7, #16]
  *current_request = {};
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	461a      	mov	r2, r3
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	6013      	str	r3, [r2, #0]
 800dc3e:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	68ba      	ldr	r2, [r7, #8]
 800dc44:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc4c:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	699b      	ldr	r3, [r3, #24]
 800dc52:	461a      	mov	r2, r3
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	699b      	ldr	r3, [r3, #24]
 800dc5c:	1c5a      	adds	r2, r3, #1
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 800dc62:	2300      	movs	r3, #0
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3720      	adds	r7, #32
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	08027acc 	.word	0x08027acc

0800dc70 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b086      	sub	sp, #24
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	3308      	adds	r3, #8
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 fc47 	bl	800e51a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800dc8c:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800dc8e:	2300      	movs	r3, #0
 800dc90:	617b      	str	r3, [r7, #20]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	699b      	ldr	r3, [r3, #24]
 800dc96:	697a      	ldr	r2, [r7, #20]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d211      	bcs.n	800dcc0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	00db      	lsls	r3, r3, #3
 800dca0:	693a      	ldr	r2, [r7, #16]
 800dca2:	4413      	add	r3, r2
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcaa:	d105      	bne.n	800dcb8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	00db      	lsls	r3, r3, #3
 800dcb0:	693a      	ldr	r2, [r7, #16]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	683a      	ldr	r2, [r7, #0]
 800dcb6:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	3301      	adds	r3, #1
 800dcbc:	617b      	str	r3, [r7, #20]
 800dcbe:	e7e8      	b.n	800dc92 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6858      	ldr	r0, [r3, #4]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	3308      	adds	r3, #8
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	6992      	ldr	r2, [r2, #24]
 800dcd2:	320c      	adds	r2, #12
 800dcd4:	00d1      	lsls	r1, r2, #3
 800dcd6:	2204      	movs	r2, #4
 800dcd8:	4798      	blx	r3
 800dcda:	4603      	mov	r3, r0
 800dcdc:	73fb      	strb	r3, [r7, #15]
 800dcde:	7bfb      	ldrb	r3, [r7, #15]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d001      	beq.n	800dce8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 800dce4:	7bfb      	ldrb	r3, [r7, #15]
 800dce6:	e000      	b.n	800dcea <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800dce8:	2300      	movs	r3, #0
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3718      	adds	r7, #24
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
	...

0800dcf4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b088      	sub	sp, #32
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d101      	bne.n	800dd0a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800dd06:	f017 f8ee 	bl	8024ee6 <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	61fb      	str	r3, [r7, #28]
 800dd0e:	68b8      	ldr	r0, [r7, #8]
 800dd10:	f7fe fc8e 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800dd14:	4603      	mov	r3, r0
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fe fcfa 	bl	800c710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	4293      	cmp	r3, r2
 800dd22:	bf34      	ite	cc
 800dd24:	2301      	movcc	r3, #1
 800dd26:	2300      	movcs	r3, #0
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d034      	beq.n	800dd98 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800dd2e:	68b8      	ldr	r0, [r7, #8]
 800dd30:	f7fe fc7e 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800dd34:	4603      	mov	r3, r0
 800dd36:	69f9      	ldr	r1, [r7, #28]
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7fe fcf7 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800dd3e:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d101      	bne.n	800dd4a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800dd46:	f017 f8ce 	bl	8024ee6 <abort>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
 800dd4a:	69b8      	ldr	r0, [r7, #24]
 800dd4c:	f7fe fc7e 	bl	800c64c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800dd50:	6178      	str	r0, [r7, #20]

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6858      	ldr	r0, [r3, #4]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	685b      	ldr	r3, [r3, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	330c      	adds	r3, #12
 800dd5e:	681b      	ldr	r3, [r3, #0]
            sizeof(NodeAndRegistration) * operators_size,
 800dd60:	697a      	ldr	r2, [r7, #20]
 800dd62:	212c      	movs	r1, #44	; 0x2c
 800dd64:	fb01 f102 	mul.w	r1, r1, r2
        memory_allocator_->AllocateFromTail(
 800dd68:	2204      	movs	r2, #4
 800dd6a:	4798      	blx	r3
 800dd6c:	6138      	str	r0, [r7, #16]
    if (output == nullptr) {
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d107      	bne.n	800dd84 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x90>
      TF_LITE_REPORT_ERROR(
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	691b      	ldr	r3, [r3, #16]
 800dd78:	490a      	ldr	r1, [pc, #40]	; (800dda4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7fa fdc2 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
 800dd80:	2301      	movs	r3, #1
 800dd82:	e00a      	b.n	800dd9a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	00db      	lsls	r3, r3, #3
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	693a      	ldr	r2, [r7, #16]
 800dd8e:	601a      	str	r2, [r3, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	3301      	adds	r3, #1
 800dd94:	61fb      	str	r3, [r7, #28]
 800dd96:	e7ba      	b.n	800dd0e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 800dd98:	2300      	movs	r3, #0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3720      	adds	r7, #32
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	08027b04 	.word	0x08027b04

0800dda8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 800dda8:	b590      	push	{r4, r7, lr}
 800ddaa:	b089      	sub	sp, #36	; 0x24
 800ddac:	af02      	add	r7, sp, #8
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
 800ddb4:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800ddb6:	68b8      	ldr	r0, [r7, #8]
 800ddb8:	f7fe fc3a 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	4610      	mov	r0, r2
 800ddc4:	f7fe fcb2 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ddc8:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d101      	bne.n	800ddd4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 800ddd0:	f017 f889 	bl	8024ee6 <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	3324      	adds	r3, #36	; 0x24
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	68f8      	ldr	r0, [r7, #12]
 800ddde:	4798      	blx	r3
 800dde0:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3328      	adds	r3, #40	; 0x28
 800dde8:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
 800ddea:	2300      	movs	r3, #0
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	693a      	ldr	r2, [r7, #16]
 800ddf6:	68b9      	ldr	r1, [r7, #8]
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	47a0      	blx	r4
 800ddfc:	4603      	mov	r3, r0
          /*allocate_temp=*/false) != kTfLiteOk) {
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	bf14      	ite	ne
 800de02:	2301      	movne	r3, #1
 800de04:	2300      	moveq	r3, #0
 800de06:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d007      	beq.n	800de1c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	691b      	ldr	r3, [r3, #16]
 800de10:	4914      	ldr	r1, [pc, #80]	; (800de64 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>)
 800de12:	4618      	mov	r0, r3
 800de14:	f7fa fd76 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 800de18:	2300      	movs	r3, #0
 800de1a:	e01f      	b.n	800de5c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb4>
  }

  if (subgraph_allocations != nullptr) {
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d01b      	beq.n	800de5a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb2>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 800de22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de24:	00db      	lsls	r3, r3, #3
 800de26:	687a      	ldr	r2, [r7, #4]
 800de28:	4413      	add	r3, r2
 800de2a:	6859      	ldr	r1, [r3, #4]
 800de2c:	683a      	ldr	r2, [r7, #0]
 800de2e:	4613      	mov	r3, r2
 800de30:	005b      	lsls	r3, r3, #1
 800de32:	4413      	add	r3, r2
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	440b      	add	r3, r1
 800de38:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 800de3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de40:	00db      	lsls	r3, r3, #3
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	4413      	add	r3, r2
 800de46:	6859      	ldr	r1, [r3, #4]
 800de48:	683a      	ldr	r2, [r7, #0]
 800de4a:	4613      	mov	r3, r2
 800de4c:	005b      	lsls	r3, r3, #1
 800de4e:	4413      	add	r3, r2
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	440b      	add	r3, r1
 800de54:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 800de5a:	693b      	ldr	r3, [r7, #16]
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	371c      	adds	r7, #28
 800de60:	46bd      	mov	sp, r7
 800de62:	bd90      	pop	{r4, r7, pc}
 800de64:	08027b3c 	.word	0x08027b3c

0800de68 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 800de68:	b590      	push	{r4, r7, lr}
 800de6a:	b089      	sub	sp, #36	; 0x24
 800de6c:	af02      	add	r7, sp, #8
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	607a      	str	r2, [r7, #4]
 800de74:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800de76:	68b8      	ldr	r0, [r7, #8]
 800de78:	f7fe fbda 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800de7c:	4602      	mov	r2, r0
 800de7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de80:	4619      	mov	r1, r3
 800de82:	4610      	mov	r0, r2
 800de84:	f7fe fc52 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800de88:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d101      	bne.n	800de94 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 800de90:	f017 f829 	bl	8024ee6 <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6858      	ldr	r0, [r3, #4]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	3310      	adds	r3, #16
 800dea0:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800dea2:	2204      	movs	r2, #4
 800dea4:	2140      	movs	r1, #64	; 0x40
 800dea6:	4798      	blx	r3
 800dea8:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	3328      	adds	r3, #40	; 0x28
 800deb0:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800deb2:	2301      	movs	r3, #1
 800deb4:	9301      	str	r3, [sp, #4]
 800deb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	68b9      	ldr	r1, [r7, #8]
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	47a0      	blx	r4
 800dec4:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	bf14      	ite	ne
 800deca:	2301      	movne	r3, #1
 800decc:	2300      	moveq	r3, #0
 800dece:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d007      	beq.n	800dee4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7c>
    TF_LITE_REPORT_ERROR(
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	691b      	ldr	r3, [r3, #16]
 800ded8:	4914      	ldr	r1, [pc, #80]	; (800df2c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc4>)
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fa fd12 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 800dee0:	2300      	movs	r3, #0
 800dee2:	e01f      	b.n	800df24 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
  }

  if (subgraph_allocations != nullptr) {
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d01b      	beq.n	800df22 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xba>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 800deea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deec:	00db      	lsls	r3, r3, #3
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	4413      	add	r3, r2
 800def2:	6859      	ldr	r1, [r3, #4]
 800def4:	683a      	ldr	r2, [r7, #0]
 800def6:	4613      	mov	r3, r2
 800def8:	005b      	lsls	r3, r3, #1
 800defa:	4413      	add	r3, r2
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	440b      	add	r3, r1
 800df00:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 800df06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df08:	00db      	lsls	r3, r3, #3
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	4413      	add	r3, r2
 800df0e:	6859      	ldr	r1, [r3, #4]
 800df10:	683a      	ldr	r2, [r7, #0]
 800df12:	4613      	mov	r3, r2
 800df14:	005b      	lsls	r3, r3, #1
 800df16:	4413      	add	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	440b      	add	r3, r1
 800df1c:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 800df22:	693b      	ldr	r3, [r7, #16]
}
 800df24:	4618      	mov	r0, r3
 800df26:	371c      	adds	r7, #28
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd90      	pop	{r4, r7, pc}
 800df2c:	08027b88 	.word	0x08027b88

0800df30 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 800df30:	b580      	push	{r7, lr}
 800df32:	b082      	sub	sp, #8
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	685a      	ldr	r2, [r3, #4]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	3314      	adds	r3, #20
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4610      	mov	r0, r2
 800df48:	4798      	blx	r3
}
 800df4a:	bf00      	nop
 800df4c:	3708      	adds	r7, #8
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
	...

0800df54 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 800df54:	b5b0      	push	{r4, r5, r7, lr}
 800df56:	b08c      	sub	sp, #48	; 0x30
 800df58:	af02      	add	r7, sp, #8
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d101      	bne.n	800df6a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800df66:	f016 ffbe 	bl	8024ee6 <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800df6a:	2300      	movs	r3, #0
 800df6c:	627b      	str	r3, [r7, #36]	; 0x24
 800df6e:	68b8      	ldr	r0, [r7, #8]
 800df70:	f7fe fb5e 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800df74:	4603      	mov	r3, r0
 800df76:	4618      	mov	r0, r3
 800df78:	f7fe fbca 	bl	800c710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800df7c:	4602      	mov	r2, r0
 800df7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df80:	4293      	cmp	r3, r2
 800df82:	bf34      	ite	cc
 800df84:	2301      	movcc	r3, #1
 800df86:	2300      	movcs	r3, #0
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d076      	beq.n	800e07c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x128>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800df8e:	68b8      	ldr	r0, [r7, #8]
 800df90:	f7fe fb4e 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800df94:	4603      	mov	r3, r0
 800df96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df98:	4618      	mov	r0, r3
 800df9a:	f7fe fbc7 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800df9e:	61f8      	str	r0, [r7, #28]
    TFLITE_DCHECK(subgraph != nullptr);
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800dfa6:	f016 ff9e 	bl	8024ee6 <abort>

    size_t alloc_count = subgraph->tensors()->size();
 800dfaa:	69f8      	ldr	r0, [r7, #28]
 800dfac:	f7fe fec5 	bl	800cd3a <_ZNK6tflite8SubGraph7tensorsEv>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f000 fbec 	bl	800e790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800dfb8:	61b8      	str	r0, [r7, #24]
    TfLiteEvalTensor* tensors =
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6858      	ldr	r0, [r3, #4]
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	685b      	ldr	r3, [r3, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	330c      	adds	r3, #12
 800dfc6:	681c      	ldr	r4, [r3, #0]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800dfc8:	69ba      	ldr	r2, [r7, #24]
 800dfca:	4613      	mov	r3, r2
 800dfcc:	005b      	lsls	r3, r3, #1
 800dfce:	4413      	add	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	2204      	movs	r2, #4
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	47a0      	blx	r4
 800dfd8:	6178      	str	r0, [r7, #20]
    if (tensors == nullptr) {
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d10c      	bne.n	800dffa <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
      TF_LITE_REPORT_ERROR(
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6918      	ldr	r0, [r3, #16]
 800dfe4:	69ba      	ldr	r2, [r7, #24]
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	4413      	add	r3, r2
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	461a      	mov	r2, r3
 800dff0:	4925      	ldr	r1, [pc, #148]	; (800e088 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x134>)
 800dff2:	f7fa fc87 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for context->eval_tensors, "
          "%d bytes required",
          sizeof(TfLiteEvalTensor) * alloc_count);
      return kTfLiteError;
 800dff6:	2301      	movs	r3, #1
 800dff8:	e041      	b.n	800e07e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    }

    for (size_t i = 0; i < alloc_count; ++i) {
 800dffa:	2300      	movs	r3, #0
 800dffc:	623b      	str	r3, [r7, #32]
 800dffe:	6a3a      	ldr	r2, [r7, #32]
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	429a      	cmp	r2, r3
 800e004:	d230      	bcs.n	800e068 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	685c      	ldr	r4, [r3, #4]
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 800e00a:	69f8      	ldr	r0, [r7, #28]
 800e00c:	f7fe fe95 	bl	800cd3a <_ZNK6tflite8SubGraph7tensorsEv>
 800e010:	4603      	mov	r3, r0
 800e012:	6a39      	ldr	r1, [r7, #32]
 800e014:	4618      	mov	r0, r3
 800e016:	f000 fbc9 	bl	800e7ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800e01a:	4605      	mov	r5, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800e01c:	68b8      	ldr	r0, [r7, #8]
 800e01e:	f7fe fee1 	bl	800cde4 <_ZNK6tflite5Model7buffersEv>
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6919      	ldr	r1, [r3, #16]
          error_reporter_, &tensors[i]);
 800e026:	6a3a      	ldr	r2, [r7, #32]
 800e028:	4613      	mov	r3, r2
 800e02a:	005b      	lsls	r3, r3, #1
 800e02c:	4413      	add	r3, r2
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	461a      	mov	r2, r3
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	4413      	add	r3, r2
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	460b      	mov	r3, r1
 800e03a:	4602      	mov	r2, r0
 800e03c:	4629      	mov	r1, r5
 800e03e:	4620      	mov	r0, r4
 800e040:	f7ff fbb6 	bl	800d7b0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 800e044:	4603      	mov	r3, r0
 800e046:	74fb      	strb	r3, [r7, #19]
      if (status != kTfLiteOk) {
 800e048:	7cfb      	ldrb	r3, [r7, #19]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d008      	beq.n	800e060 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10c>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	691b      	ldr	r3, [r3, #16]
 800e052:	6a3a      	ldr	r2, [r7, #32]
 800e054:	490d      	ldr	r1, [pc, #52]	; (800e08c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x138>)
 800e056:	4618      	mov	r0, r3
 800e058:	f7fa fc54 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             i);
        return kTfLiteError;
 800e05c:	2301      	movs	r3, #1
 800e05e:	e00e      	b.n	800e07e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    for (size_t i = 0; i < alloc_count; ++i) {
 800e060:	6a3b      	ldr	r3, [r7, #32]
 800e062:	3301      	adds	r3, #1
 800e064:	623b      	str	r3, [r7, #32]
 800e066:	e7ca      	b.n	800dffe <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xaa>
      }
    }
    subgraph_allocations[subgraph_idx].tensors = tensors;
 800e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06a:	00db      	lsls	r3, r3, #3
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	4413      	add	r3, r2
 800e070:	697a      	ldr	r2, [r7, #20]
 800e072:	605a      	str	r2, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800e074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e076:	3301      	adds	r3, #1
 800e078:	627b      	str	r3, [r7, #36]	; 0x24
 800e07a:	e778      	b.n	800df6e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3728      	adds	r7, #40	; 0x28
 800e082:	46bd      	mov	sp, r7
 800e084:	bdb0      	pop	{r4, r5, r7, pc}
 800e086:	bf00      	nop
 800e088:	08027bcc 	.word	0x08027bcc
 800e08c:	08027c14 	.word	0x08027c14

0800e090 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 800e090:	b5b0      	push	{r4, r5, r7, lr}
 800e092:	b088      	sub	sp, #32
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800e09c:	2300      	movs	r3, #0
 800e09e:	61fb      	str	r3, [r7, #28]
 800e0a0:	68b8      	ldr	r0, [r7, #8]
 800e0a2:	f7fe fe4a 	bl	800cd3a <_ZNK6tflite8SubGraph7tensorsEv>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f000 fb71 	bl	800e790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800e0ae:	4602      	mov	r2, r0
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	bf34      	ite	cc
 800e0b6:	2301      	movcc	r3, #1
 800e0b8:	2300      	movcs	r3, #0
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d04f      	beq.n	800e160 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 800e0c0:	68b8      	ldr	r0, [r7, #8]
 800e0c2:	f7fe fe3a 	bl	800cd3a <_ZNK6tflite8SubGraph7tensorsEv>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	69f9      	ldr	r1, [r7, #28]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f000 fb6e 	bl	800e7ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800e0d0:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 800e0d2:	69b8      	ldr	r0, [r7, #24]
 800e0d4:	f7fe fe01 	bl	800ccda <_ZNK6tflite6Tensor11is_variableEv>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d03c      	beq.n	800e158 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800e0de:	69fa      	ldr	r2, [r7, #28]
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	005b      	lsls	r3, r3, #1
 800e0e4:	4413      	add	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	f107 0210 	add.w	r2, r7, #16
 800e0f2:	4611      	mov	r1, r2
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7fe fd5c 	bl	800cbb2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	75fb      	strb	r3, [r7, #23]
 800e0fe:	7dfb      	ldrb	r3, [r7, #23]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d001      	beq.n	800e108 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 800e104:	7dfb      	ldrb	r3, [r7, #23]
 800e106:	e02c      	b.n	800e162 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6858      	ldr	r0, [r3, #4]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	330c      	adds	r3, #12
 800e114:	681d      	ldr	r5, [r3, #0]
 800e116:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 800e118:	69fa      	ldr	r2, [r7, #28]
 800e11a:	4613      	mov	r3, r2
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	4413      	add	r3, r2
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	461a      	mov	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 800e128:	2210      	movs	r2, #16
 800e12a:	47a8      	blx	r5
 800e12c:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 800e12e:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 800e130:	69fa      	ldr	r2, [r7, #28]
 800e132:	4613      	mov	r3, r2
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	4413      	add	r3, r2
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	461a      	mov	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4413      	add	r3, r2
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d108      	bne.n	800e158 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	691b      	ldr	r3, [r3, #16]
 800e14a:	693a      	ldr	r2, [r7, #16]
 800e14c:	4907      	ldr	r1, [pc, #28]	; (800e16c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fa fbd8 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 800e154:	2301      	movs	r3, #1
 800e156:	e004      	b.n	800e162 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	3301      	adds	r3, #1
 800e15c:	61fb      	str	r3, [r7, #28]
 800e15e:	e79f      	b.n	800e0a0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3720      	adds	r7, #32
 800e166:	46bd      	mov	sp, r7
 800e168:	bdb0      	pop	{r4, r5, r7, pc}
 800e16a:	bf00      	nop
 800e16c:	08027c34 	.word	0x08027c34

0800e170 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6858      	ldr	r0, [r3, #4]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	330c      	adds	r3, #12
 800e184:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 800e186:	2204      	movs	r2, #4
 800e188:	2140      	movs	r1, #64	; 0x40
 800e18a:	4798      	blx	r3
 800e18c:	4603      	mov	r3, r0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
 800e196:	b5b0      	push	{r4, r5, r7, lr}
 800e198:	b086      	sub	sp, #24
 800e19a:	af02      	add	r7, sp, #8
 800e19c:	60f8      	str	r0, [r7, #12]
 800e19e:	60b9      	str	r1, [r7, #8]
 800e1a0:	607a      	str	r2, [r7, #4]
 800e1a2:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 800e1a8:	68b8      	ldr	r0, [r7, #8]
 800e1aa:	f7fe fa41 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	6a3b      	ldr	r3, [r7, #32]
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	4610      	mov	r0, r2
 800e1b6:	f7fe fab9 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fe fdbc 	bl	800cd3a <_ZNK6tflite8SubGraph7tensorsEv>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	f000 faef 	bl	800e7ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800e1ce:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800e1d0:	68b8      	ldr	r0, [r7, #8]
 800e1d2:	f7fe fe07 	bl	800cde4 <_ZNK6tflite5Model7buffersEv>
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	691b      	ldr	r3, [r3, #16]
 800e1da:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	9201      	str	r2, [sp, #4]
 800e1e2:	9300      	str	r3, [sp, #0]
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	462a      	mov	r2, r5
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f7ff f987 	bl	800d4fc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 800e1ee:	4603      	mov	r3, r0
      model->buffers(), error_reporter_, tensor);
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bdb0      	pop	{r4, r5, r7, pc}

0800e1f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
 800e1f8:	b5b0      	push	{r4, r5, r7, lr}
 800e1fa:	b098      	sub	sp, #96	; 0x60
 800e1fc:	af02      	add	r7, sp, #8
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	607a      	str	r2, [r7, #4]
 800e204:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 800e206:	2300      	movs	r3, #0
 800e208:	657b      	str	r3, [r7, #84]	; 0x54
  //
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800e20a:	68b8      	ldr	r0, [r7, #8]
 800e20c:	f7fe fa10 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800e210:	4602      	mov	r2, r0
 800e212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e214:	4619      	mov	r1, r3
 800e216:	4610      	mov	r0, r2
 800e218:	f7fe fa88 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800e21c:	6538      	str	r0, [r7, #80]	; 0x50
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 800e21e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e220:	f7fe fd8b 	bl	800cd3a <_ZNK6tflite8SubGraph7tensorsEv>
 800e224:	4603      	mov	r3, r0
 800e226:	4618      	mov	r0, r3
 800e228:	f000 fab2 	bl	800e790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800e22c:	4602      	mov	r2, r0
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	699b      	ldr	r3, [r3, #24]
 800e232:	4413      	add	r3, r2
 800e234:	64fb      	str	r3, [r7, #76]	; 0x4c
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 800e236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e238:	4613      	mov	r3, r2
 800e23a:	005b      	lsls	r3, r3, #1
 800e23c:	4413      	add	r3, r2
 800e23e:	00db      	lsls	r3, r3, #3
 800e240:	64bb      	str	r3, [r7, #72]	; 0x48

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6858      	ldr	r0, [r3, #4]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	3310      	adds	r3, #16
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2204      	movs	r2, #4
 800e252:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e254:	4798      	blx	r3
 800e256:	6478      	str	r0, [r7, #68]	; 0x44
  if (allocation_info == nullptr) {
 800e258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d108      	bne.n	800e270 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x78>
    TF_LITE_REPORT_ERROR(
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	691b      	ldr	r3, [r3, #16]
 800e262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e264:	4987      	ldr	r1, [pc, #540]	; (800e484 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x28c>)
 800e266:	4618      	mov	r0, r3
 800e268:	f7fa fb4c 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 800e26c:	2301      	movs	r3, #1
 800e26e:	e105      	b.n	800e47c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 800e270:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e272:	f7fe fd62 	bl	800cd3a <_ZNK6tflite8SubGraph7tensorsEv>
 800e276:	4603      	mov	r3, r0
 800e278:	4618      	mov	r0, r3
 800e27a:	f000 fa89 	bl	800e790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800e27e:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	699a      	ldr	r2, [r3, #24]
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	691b      	ldr	r3, [r3, #16]
 800e288:	f107 0014 	add.w	r0, r7, #20
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	4613      	mov	r3, r2
 800e290:	460a      	mov	r2, r1
 800e292:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e294:	f7fe fe28 	bl	800cee8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 800e298:	2300      	movs	r3, #0
 800e29a:	613b      	str	r3, [r7, #16]
  TF_LITE_ENSURE_STATUS(
 800e29c:	f107 0210 	add.w	r2, r7, #16
 800e2a0:	f107 0314 	add.w	r3, r7, #20
 800e2a4:	68b9      	ldr	r1, [r7, #8]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7fe ff92 	bl	800d1d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d002      	beq.n	800e2c0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xc8>
 800e2ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e2be:	e0dd      	b.n	800e47c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 800e2c0:	693a      	ldr	r2, [r7, #16]
 800e2c2:	f107 0014 	add.w	r0, r7, #20
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e2ca:	f7fe fe27 	bl	800cf1c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e2d4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d002      	beq.n	800e2e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xea>
 800e2dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800e2e0:	e0cc      	b.n	800e47c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f000 f919 	bl	800e51a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800e2e8:	63f8      	str	r0, [r7, #60]	; 0x3c

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 800e2ea:	f107 0314 	add.w	r3, r7, #20
 800e2ee:	683a      	ldr	r2, [r7, #0]
 800e2f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7fe ffe8 	bl	800d2c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e2fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e302:	2b00      	cmp	r3, #0
 800e304:	d002      	beq.n	800e30c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x114>
 800e306:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e30a:	e0b7      	b.n	800e47c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	2110      	movs	r1, #16
 800e312:	4618      	mov	r0, r3
 800e314:	f002 fcd2 	bl	8010cbc <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800e318:	6378      	str	r0, [r7, #52]	; 0x34
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6858      	ldr	r0, [r3, #4]
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3310      	adds	r3, #16
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2210      	movs	r2, #16
 800e32a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e32c:	4798      	blx	r3
 800e32e:	6338      	str	r0, [r7, #48]	; 0x30
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 800e330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e332:	2b00      	cmp	r3, #0
 800e334:	d10e      	bne.n	800e354 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x15c>
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6918      	ldr	r0, [r3, #16]
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	6919      	ldr	r1, [r3, #16]
 800e33e:	4b52      	ldr	r3, [pc, #328]	; (800e488 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x290>)
 800e340:	9301      	str	r3, [sp, #4]
 800e342:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	4b50      	ldr	r3, [pc, #320]	; (800e48c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x294>)
 800e34a:	4a51      	ldr	r2, [pc, #324]	; (800e490 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x298>)
 800e34c:	f7fa faf3 	bl	8008936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800e350:	2301      	movs	r3, #1
 800e352:	e093      	b.n	800e47c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
  memory_planner_->Init(planner_arena, remaining_arena_size);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	68d8      	ldr	r0, [r3, #12]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	68db      	ldr	r3, [r3, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	331c      	adds	r3, #28
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e366:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, memory_planner_,
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6918      	ldr	r0, [r3, #16]
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	68d9      	ldr	r1, [r3, #12]
 800e370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e374:	f7fe fff3 	bl	800d35e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj>
 800e378:	4603      	mov	r3, r0
 800e37a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e37e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e382:	2b00      	cmp	r3, #0
 800e384:	d002      	beq.n	800e38c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x194>
 800e386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e38a:	e077      	b.n	800e47c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
                                   allocation_info, allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	685a      	ldr	r2, [r3, #4]
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	3314      	adds	r3, #20
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4610      	mov	r0, r2
 800e39c:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	2110      	movs	r1, #16
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f002 fc89 	bl	8010cbc <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800e3aa:	62b8      	str	r0, [r7, #40]	; 0x28

  // Make sure we have enough arena size.
  if (memory_planner_->GetMaximumMemorySize() > actual_available_arena_size) {
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	68da      	ldr	r2, [r3, #12]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	3310      	adds	r3, #16
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4610      	mov	r0, r2
 800e3bc:	4798      	blx	r3
 800e3be:	4602      	mov	r2, r0
 800e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	bf34      	ite	cc
 800e3c6:	2301      	movcc	r3, #1
 800e3c8:	2300      	movcs	r3, #0
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d012      	beq.n	800e3f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1fe>
    TF_LITE_REPORT_ERROR(
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	691c      	ldr	r4, [r3, #16]
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	68da      	ldr	r2, [r3, #12]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	3310      	adds	r3, #16
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4610      	mov	r0, r2
 800e3e4:	4798      	blx	r3
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ea:	492a      	ldr	r1, [pc, #168]	; (800e494 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x29c>)
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f7fa fa89 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        memory_planner_->GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	e042      	b.n	800e47c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, memory_planner_,
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	691c      	ldr	r4, [r3, #16]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	68dd      	ldr	r5, [r3, #12]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	4618      	mov	r0, r3
 800e404:	f002 fc4e 	bl	8010ca4 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800e408:	4602      	mov	r2, r0
 800e40a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e40c:	9300      	str	r3, [sp, #0]
 800e40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e410:	4629      	mov	r1, r5
 800e412:	4620      	mov	r0, r4
 800e414:	f7ff f800 	bl	800d418 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj>
 800e418:	4603      	mov	r3, r0
 800e41a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e41e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e422:	2b00      	cmp	r3, #0
 800e424:	d002      	beq.n	800e42c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x234>
 800e426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e42a:	e027      	b.n	800e47c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
#ifdef TF_LITE_SHOW_MEMORY_USE
  memory_planner_->PrintMemoryPlan();
#endif
  head_usage = memory_planner_->GetMaximumMemorySize();
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	68da      	ldr	r2, [r3, #12]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	3310      	adds	r3, #16
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4610      	mov	r0, r2
 800e43c:	4798      	blx	r3
 800e43e:	6578      	str	r0, [r7, #84]	; 0x54
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	69db      	ldr	r3, [r3, #28]
 800e444:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e446:	429a      	cmp	r2, r3
 800e448:	d902      	bls.n	800e450 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x258>
    max_head_buffer_usage_ = head_usage;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e44e:	61da      	str	r2, [r3, #28]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6858      	ldr	r0, [r3, #4]
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	685b      	ldr	r3, [r3, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	3308      	adds	r3, #8
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	69d1      	ldr	r1, [r2, #28]
 800e462:	2210      	movs	r2, #16
 800e464:	4798      	blx	r3
 800e466:	4603      	mov	r3, r0
 800e468:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e46c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e470:	2b00      	cmp	r3, #0
 800e472:	d002      	beq.n	800e47a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x282>
 800e474:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e478:	e000      	b.n	800e47c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 800e47a:	2300      	movs	r3, #0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3758      	adds	r7, #88	; 0x58
 800e480:	46bd      	mov	sp, r7
 800e482:	bdb0      	pop	{r4, r5, r7, pc}
 800e484:	08027c64 	.word	0x08027c64
 800e488:	08027cfc 	.word	0x08027cfc
 800e48c:	08027ca8 	.word	0x08027ca8
 800e490:	08027ce4 	.word	0x08027ce4
 800e494:	08027d18 	.word	0x08027d18

0800e498 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d101      	bne.n	800e4ae <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 800e4aa:	f016 fd1c 	bl	8024ee6 <abort>

  if (scratch_buffer_request_count_ == 0) {
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	699b      	ldr	r3, [r3, #24]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d101      	bne.n	800e4ba <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	e00e      	b.n	800e4d8 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	6858      	ldr	r0, [r3, #4]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	330c      	adds	r3, #12
 800e4c6:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	0091      	lsls	r1, r2, #2
 800e4cc:	2204      	movs	r2, #4
 800e4ce:	4798      	blx	r3
 800e4d0:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 800e4d6:	2300      	movs	r3, #0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3710      	adds	r7, #16
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	619a      	str	r2, [r3, #24]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6858      	ldr	r0, [r3, #4]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	3308      	adds	r3, #8
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2204      	movs	r2, #4
 800e4fe:	2160      	movs	r1, #96	; 0x60
 800e500:	4798      	blx	r3
 800e502:	4603      	mov	r3, r0
 800e504:	73fb      	strb	r3, [r7, #15]
 800e506:	7bfb      	ldrb	r3, [r7, #15]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d001      	beq.n	800e510 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 800e50c:	7bfb      	ldrb	r3, [r7, #15]
 800e50e:	e000      	b.n	800e512 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800e510:	2300      	movs	r3, #0
}
 800e512:	4618      	mov	r0, r3
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}

0800e51a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b082      	sub	sp, #8
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	4618      	mov	r0, r3
 800e528:	f002 fbbc 	bl	8010ca4 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2104      	movs	r1, #4
 800e530:	4618      	mov	r0, r3
 800e532:	f7fe fa27 	bl	800c984 <_ZN6tflite14AlignPointerUpEPhj>
 800e536:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3708      	adds	r7, #8
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}

0800e540 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>:

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	607a      	str	r2, [r7, #4]
  return internal::FlatBufferVectorToTfLiteTypeArray(
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	6858      	ldr	r0, [r3, #4]
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6919      	ldr	r1, [r3, #16]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	68ba      	ldr	r2, [r7, #8]
 800e558:	f000 fa04 	bl	800e964 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800e55c:	4603      	mov	r3, r0
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}

0800e566 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
 800e566:	b480      	push	{r7}
 800e568:	b083      	sub	sp, #12
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
  return builtin_data_allocator_;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	689b      	ldr	r3, [r3, #8]
}
 800e572:	4618      	mov	r0, r3
 800e574:	370c      	adds	r7, #12
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800e57e:	b580      	push	{r7, lr}
 800e580:	b082      	sub	sp, #8
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
 800e586:	460b      	mov	r3, r1
 800e588:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800e58a:	887b      	ldrh	r3, [r7, #2]
 800e58c:	4619      	mov	r1, r3
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f000 fa1a 	bl	800e9c8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800e594:	4603      	mov	r3, r0
  }
 800e596:	4618      	mov	r0, r3
 800e598:	3708      	adds	r7, #8
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b082      	sub	sp, #8
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800e5aa:	887b      	ldrh	r3, [r7, #2]
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 fa2a 	bl	800ea08 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800e5b4:	4603      	mov	r3, r0
  }
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800e5be:	b580      	push	{r7, lr}
 800e5c0:	b082      	sub	sp, #8
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800e5ca:	887b      	ldrh	r3, [r7, #2]
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 fa3a 	bl	800ea48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800e5d4:	4603      	mov	r3, r0
  }
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3708      	adds	r7, #8
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}

0800e5de <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	b086      	sub	sp, #24
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	60f8      	str	r0, [r7, #12]
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	607a      	str	r2, [r7, #4]
 800e5ea:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800e5ec:	897b      	ldrh	r3, [r7, #10]
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	68f8      	ldr	r0, [r7, #12]
 800e5f2:	f7fa f9e3 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800e5fa:	8afb      	ldrh	r3, [r7, #22]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d007      	beq.n	800e610 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	8afb      	ldrh	r3, [r7, #22]
 800e604:	4413      	add	r3, r2
 800e606:	4618      	mov	r0, r3
 800e608:	f7fb f80f 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e60c:	4603      	mov	r3, r0
 800e60e:	e000      	b.n	800e612 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 800e610:	687b      	ldr	r3, [r7, #4]
  }
 800e612:	4618      	mov	r0, r3
 800e614:	3718      	adds	r7, #24
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}

0800e61a <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800e61a:	b580      	push	{r7, lr}
 800e61c:	b082      	sub	sp, #8
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
 800e622:	460b      	mov	r3, r1
 800e624:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800e626:	887b      	ldrh	r3, [r7, #2]
 800e628:	4619      	mov	r1, r3
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 fa2c 	bl	800ea88 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800e630:	4603      	mov	r3, r0
  }
 800e632:	4618      	mov	r0, r3
 800e634:	3708      	adds	r7, #8
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b082      	sub	sp, #8
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
 800e642:	460b      	mov	r3, r1
 800e644:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800e646:	887b      	ldrh	r3, [r7, #2]
 800e648:	4619      	mov	r1, r3
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 fa3c 	bl	800eac8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800e650:	4603      	mov	r3, r0
  }
 800e652:	4618      	mov	r0, r3
 800e654:	3708      	adds	r7, #8
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}

0800e65a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b082      	sub	sp, #8
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
 800e662:	460b      	mov	r3, r1
 800e664:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800e666:	887b      	ldrh	r3, [r7, #2]
 800e668:	4619      	mov	r1, r3
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 fa4c 	bl	800eb08 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800e670:	4603      	mov	r3, r0
  }
 800e672:	4618      	mov	r0, r3
 800e674:	3708      	adds	r7, #8
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}

0800e67a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800e67a:	b580      	push	{r7, lr}
 800e67c:	b082      	sub	sp, #8
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
 800e682:	460b      	mov	r3, r1
 800e684:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800e686:	887b      	ldrh	r3, [r7, #2]
 800e688:	4619      	mov	r1, r3
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 fa5c 	bl	800eb48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800e690:	4603      	mov	r3, r0
  }
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b082      	sub	sp, #8
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fa ff9a 	bl	80095e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 800e6b6:	b580      	push	{r7, lr}
 800e6b8:	b082      	sub	sp, #8
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7fa ff8c 	bl	80095e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
	...

0800e6d4 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f7ff ffe9 	bl	800e6b6 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d306      	bcc.n	800e6fa <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 800e6ec:	4b0a      	ldr	r3, [pc, #40]	; (800e718 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 800e6ee:	4a0b      	ldr	r2, [pc, #44]	; (800e71c <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 800e6f0:	f44f 7183 	mov.w	r1, #262	; 0x106
 800e6f4:	480a      	ldr	r0, [pc, #40]	; (800e720 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 800e6f6:	f016 fbfd 	bl	8024ef4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 fa66 	bl	800ebcc <_ZNK11flatbuffers6VectorIfE4DataEv>
 800e700:	4603      	mov	r3, r0
 800e702:	6839      	ldr	r1, [r7, #0]
 800e704:	4618      	mov	r0, r3
 800e706:	f000 fa4b 	bl	800eba0 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 800e70a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e70e:	eeb0 0a67 	vmov.f32	s0, s15
 800e712:	3708      	adds	r7, #8
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}
 800e718:	08027d68 	.word	0x08027d68
 800e71c:	08027d74 	.word	0x08027d74
 800e720:	08027e3c 	.word	0x08027e3c

0800e724 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	4618      	mov	r0, r3
 800e732:	f7fa ff55 	bl	80095e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800e736:	4603      	mov	r3, r0
 800e738:	4618      	mov	r0, r3
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f7ff ffea 	bl	800e724 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800e750:	4602      	mov	r2, r0
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	4293      	cmp	r3, r2
 800e756:	d306      	bcc.n	800e766 <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 800e758:	4b0a      	ldr	r3, [pc, #40]	; (800e784 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 800e75a:	4a0b      	ldr	r2, [pc, #44]	; (800e788 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 800e75c:	f44f 7183 	mov.w	r1, #262	; 0x106
 800e760:	480a      	ldr	r0, [pc, #40]	; (800e78c <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 800e762:	f016 fbc7 	bl	8024ef4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f000 fa52 	bl	800ec10 <_ZNK11flatbuffers6VectorIxE4DataEv>
 800e76c:	4603      	mov	r3, r0
 800e76e:	6839      	ldr	r1, [r7, #0]
 800e770:	4618      	mov	r0, r3
 800e772:	f000 fa37 	bl	800ebe4 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 800e776:	4602      	mov	r2, r0
 800e778:	460b      	mov	r3, r1
  }
 800e77a:	4610      	mov	r0, r2
 800e77c:	4619      	mov	r1, r3
 800e77e:	3708      	adds	r7, #8
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	08027d68 	.word	0x08027d68
 800e788:	08027ec0 	.word	0x08027ec0
 800e78c:	08027e3c 	.word	0x08027e3c

0800e790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7fa ff1f 	bl	80095e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3708      	adds	r7, #8
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7ff ffea 	bl	800e790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d306      	bcc.n	800e7d2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 800e7c4:	4b09      	ldr	r3, [pc, #36]	; (800e7ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 800e7c6:	4a0a      	ldr	r2, [pc, #40]	; (800e7f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 800e7c8:	f44f 7183 	mov.w	r1, #262	; 0x106
 800e7cc:	4809      	ldr	r0, [pc, #36]	; (800e7f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 800e7ce:	f016 fb91 	bl	8024ef4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 fa3c 	bl	800ec50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	6839      	ldr	r1, [r7, #0]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 fa23 	bl	800ec28 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 800e7e2:	4603      	mov	r3, r0
  }
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3708      	adds	r7, #8
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	08027d68 	.word	0x08027d68
 800e7f0:	08028068 	.word	0x08028068
 800e7f4:	08027e3c 	.word	0x08027e3c

0800e7f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7fd ff76 	bl	800c6f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800e808:	4602      	mov	r2, r0
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d306      	bcc.n	800e81e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 800e810:	4b09      	ldr	r3, [pc, #36]	; (800e838 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 800e812:	4a0a      	ldr	r2, [pc, #40]	; (800e83c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 800e814:	f44f 7183 	mov.w	r1, #262	; 0x106
 800e818:	4809      	ldr	r0, [pc, #36]	; (800e840 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 800e81a:	f016 fb6b 	bl	8024ef4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 fa36 	bl	800ec90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 800e824:	4603      	mov	r3, r0
 800e826:	6839      	ldr	r1, [r7, #0]
 800e828:	4618      	mov	r0, r3
 800e82a:	f000 fa1d 	bl	800ec68 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 800e82e:	4603      	mov	r3, r0
  }
 800e830:	4618      	mov	r0, r3
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}
 800e838:	08027d68 	.word	0x08027d68
 800e83c:	08028160 	.word	0x08028160
 800e840:	08027e3c 	.word	0x08027e3c

0800e844 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800e844:	b580      	push	{r7, lr}
 800e846:	b082      	sub	sp, #8
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4618      	mov	r0, r3
 800e852:	f7fa fec5 	bl	80095e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800e856:	4603      	mov	r3, r0
 800e858:	4618      	mov	r0, r3
 800e85a:	3708      	adds	r7, #8
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f7ff ffea 	bl	800e844 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 800e870:	4602      	mov	r2, r0
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	4293      	cmp	r3, r2
 800e876:	d306      	bcc.n	800e886 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 800e878:	4b09      	ldr	r3, [pc, #36]	; (800e8a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 800e87a:	4a0a      	ldr	r2, [pc, #40]	; (800e8a4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 800e87c:	f44f 7183 	mov.w	r1, #262	; 0x106
 800e880:	4809      	ldr	r0, [pc, #36]	; (800e8a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 800e882:	f016 fb37 	bl	8024ef4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 fa22 	bl	800ecd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 800e88c:	4603      	mov	r3, r0
 800e88e:	6839      	ldr	r1, [r7, #0]
 800e890:	4618      	mov	r0, r3
 800e892:	f000 fa09 	bl	800eca8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 800e896:	4603      	mov	r3, r0
  }
 800e898:	4618      	mov	r0, r3
 800e89a:	3708      	adds	r7, #8
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	08027d68 	.word	0x08027d68
 800e8a4:	08028358 	.word	0x08028358
 800e8a8:	08027e3c 	.word	0x08027e3c

0800e8ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fa fe91 	bl	80095e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f7ff ffea 	bl	800e8ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800e8d8:	4602      	mov	r2, r0
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d306      	bcc.n	800e8ee <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 800e8e0:	4b09      	ldr	r3, [pc, #36]	; (800e908 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 800e8e2:	4a0a      	ldr	r2, [pc, #40]	; (800e90c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 800e8e4:	f44f 7183 	mov.w	r1, #262	; 0x106
 800e8e8:	4809      	ldr	r0, [pc, #36]	; (800e910 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 800e8ea:	f016 fb03 	bl	8024ef4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 fa0e 	bl	800ed10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	6839      	ldr	r1, [r7, #0]
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f000 f9f5 	bl	800ece8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 800e8fe:	4603      	mov	r3, r0
  }
 800e900:	4618      	mov	r0, r3
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	08027d68 	.word	0x08027d68
 800e90c:	08028450 	.word	0x08028450
 800e910:	08027e3c 	.word	0x08027e3c

0800e914 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6039      	str	r1, [r7, #0]
 800e91e:	6839      	ldr	r1, [r7, #0]
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f7fd ff03 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800e926:	4603      	mov	r3, r0
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
 800e93a:	6839      	ldr	r1, [r7, #0]
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f7ff ff8f 	bl	800e860 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 800e942:	4603      	mov	r3, r0
 800e944:	4618      	mov	r0, r3
 800e946:	3708      	adds	r7, #8
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f000 f917 	bl	800eb88 <_ZNK11flatbuffers6VectorIhE4DataEv>
 800e95a:	4603      	mov	r3, r0
 800e95c:	4618      	mov	r0, r3
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	607a      	str	r2, [r7, #4]
 800e970:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d101      	bne.n	800e97c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800e978:	f016 fab5 	bl	8024ee6 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d101      	bne.n	800e986 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800e982:	f016 fab0 	bl	8024ee6 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800e98c:	2300      	movs	r3, #0
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3710      	adds	r7, #16
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}

0800e996 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800e996:	b580      	push	{r7, lr}
 800e998:	b084      	sub	sp, #16
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	60f8      	str	r0, [r7, #12]
 800e99e:	60b9      	str	r1, [r7, #8]
 800e9a0:	607a      	str	r2, [r7, #4]
 800e9a2:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d101      	bne.n	800e9ae <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800e9aa:	f016 fa9c 	bl	8024ee6 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d101      	bne.n	800e9b8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800e9b4:	f016 fa97 	bl	8024ee6 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800e9be:	2300      	movs	r3, #0
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3710      	adds	r7, #16
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e9d4:	887b      	ldrh	r3, [r7, #2]
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7f9 ffef 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	89fb      	ldrh	r3, [r7, #14]
 800e9e6:	4413      	add	r3, r2
 800e9e8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e9ea:	89fb      	ldrh	r3, [r7, #14]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d006      	beq.n	800e9fe <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 800e9f0:	68b8      	ldr	r0, [r7, #8]
 800e9f2:	f7fa fe1a 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	4413      	add	r3, r2
                        : nullptr;
 800e9fc:	e000      	b.n	800ea00 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e9fe:	2300      	movs	r3, #0
  }
 800ea00:	4618      	mov	r0, r3
 800ea02:	3710      	adds	r7, #16
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	460b      	mov	r3, r1
 800ea12:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800ea14:	887b      	ldrh	r3, [r7, #2]
 800ea16:	4619      	mov	r1, r3
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f7f9 ffcf 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	89fb      	ldrh	r3, [r7, #14]
 800ea26:	4413      	add	r3, r2
 800ea28:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ea2a:	89fb      	ldrh	r3, [r7, #14]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d006      	beq.n	800ea3e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 800ea30:	68b8      	ldr	r0, [r7, #8]
 800ea32:	f7fa fdfa 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ea36:	4602      	mov	r2, r0
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	4413      	add	r3, r2
                        : nullptr;
 800ea3c:	e000      	b.n	800ea40 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ea3e:	2300      	movs	r3, #0
  }
 800ea40:	4618      	mov	r0, r3
 800ea42:	3710      	adds	r7, #16
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	460b      	mov	r3, r1
 800ea52:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800ea54:	887b      	ldrh	r3, [r7, #2]
 800ea56:	4619      	mov	r1, r3
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f7f9 ffaf 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	89fb      	ldrh	r3, [r7, #14]
 800ea66:	4413      	add	r3, r2
 800ea68:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ea6a:	89fb      	ldrh	r3, [r7, #14]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d006      	beq.n	800ea7e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 800ea70:	68b8      	ldr	r0, [r7, #8]
 800ea72:	f7fa fdda 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ea76:	4602      	mov	r2, r0
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	4413      	add	r3, r2
                        : nullptr;
 800ea7c:	e000      	b.n	800ea80 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ea7e:	2300      	movs	r3, #0
  }
 800ea80:	4618      	mov	r0, r3
 800ea82:	3710      	adds	r7, #16
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	460b      	mov	r3, r1
 800ea92:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800ea94:	887b      	ldrh	r3, [r7, #2]
 800ea96:	4619      	mov	r1, r3
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f7f9 ff8f 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800eaa2:	687a      	ldr	r2, [r7, #4]
 800eaa4:	89fb      	ldrh	r3, [r7, #14]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800eaaa:	89fb      	ldrh	r3, [r7, #14]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d006      	beq.n	800eabe <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 800eab0:	68b8      	ldr	r0, [r7, #8]
 800eab2:	f7fa fdba 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800eab6:	4602      	mov	r2, r0
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	4413      	add	r3, r2
                        : nullptr;
 800eabc:	e000      	b.n	800eac0 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800eabe:	2300      	movs	r3, #0
  }
 800eac0:	4618      	mov	r0, r3
 800eac2:	3710      	adds	r7, #16
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	460b      	mov	r3, r1
 800ead2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800ead4:	887b      	ldrh	r3, [r7, #2]
 800ead6:	4619      	mov	r1, r3
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7f9 ff6f 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800eade:	4603      	mov	r3, r0
 800eae0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	89fb      	ldrh	r3, [r7, #14]
 800eae6:	4413      	add	r3, r2
 800eae8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800eaea:	89fb      	ldrh	r3, [r7, #14]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d006      	beq.n	800eafe <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 800eaf0:	68b8      	ldr	r0, [r7, #8]
 800eaf2:	f7fa fd9a 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	4413      	add	r3, r2
                        : nullptr;
 800eafc:	e000      	b.n	800eb00 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800eafe:	2300      	movs	r3, #0
  }
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	460b      	mov	r3, r1
 800eb12:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800eb14:	887b      	ldrh	r3, [r7, #2]
 800eb16:	4619      	mov	r1, r3
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f7f9 ff4f 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800eb22:	687a      	ldr	r2, [r7, #4]
 800eb24:	89fb      	ldrh	r3, [r7, #14]
 800eb26:	4413      	add	r3, r2
 800eb28:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800eb2a:	89fb      	ldrh	r3, [r7, #14]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d006      	beq.n	800eb3e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 800eb30:	68b8      	ldr	r0, [r7, #8]
 800eb32:	f7fa fd7a 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800eb36:	4602      	mov	r2, r0
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	4413      	add	r3, r2
                        : nullptr;
 800eb3c:	e000      	b.n	800eb40 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800eb3e:	2300      	movs	r3, #0
  }
 800eb40:	4618      	mov	r0, r3
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	460b      	mov	r3, r1
 800eb52:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800eb54:	887b      	ldrh	r3, [r7, #2]
 800eb56:	4619      	mov	r1, r3
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f7f9 ff2f 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	89fb      	ldrh	r3, [r7, #14]
 800eb66:	4413      	add	r3, r2
 800eb68:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800eb6a:	89fb      	ldrh	r3, [r7, #14]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d006      	beq.n	800eb7e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 800eb70:	68b8      	ldr	r0, [r7, #8]
 800eb72:	f7fa fd5a 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800eb76:	4602      	mov	r2, r0
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	4413      	add	r3, r2
                        : nullptr;
 800eb7c:	e000      	b.n	800eb80 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800eb7e:	2300      	movs	r3, #0
  }
 800eb80:	4618      	mov	r0, r3
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	3304      	adds	r3, #4
  }
 800eb94:	4618      	mov	r0, r3
 800eb96:	370c      	adds	r7, #12
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr

0800eba0 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	009b      	lsls	r3, r3, #2
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	edd3 7a00 	vldr	s15, [r3]
 800ebb6:	eeb0 0a67 	vmov.f32	s0, s15
 800ebba:	f7fb fbf6 	bl	800a3aa <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800ebbe:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ebc2:	eeb0 0a67 	vmov.f32	s0, s15
 800ebc6:	3708      	adds	r7, #8
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	3304      	adds	r3, #4
  }
 800ebd8:	4618      	mov	r0, r3
 800ebda:	370c      	adds	r7, #12
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	00db      	lsls	r3, r3, #3
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfa:	4610      	mov	r0, r2
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	f7fd fdbb 	bl	800c778 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 800ec02:	4602      	mov	r2, r0
 800ec04:	460b      	mov	r3, r1
  }
 800ec06:	4610      	mov	r0, r2
 800ec08:	4619      	mov	r1, r3
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	3304      	adds	r3, #4
  }
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	370c      	adds	r7, #12
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	009b      	lsls	r3, r3, #2
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	4413      	add	r3, r2
 800ec3a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f7fa fcf4 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ec42:	4602      	mov	r2, r0
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	4413      	add	r3, r2
  }
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	3304      	adds	r3, #4
  }
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	370c      	adds	r7, #12
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	009b      	lsls	r3, r3, #2
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	4413      	add	r3, r2
 800ec7a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f7fa fcd4 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ec82:	4602      	mov	r2, r0
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	4413      	add	r3, r2
  }
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3708      	adds	r7, #8
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 800ec90:	b480      	push	{r7}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	3304      	adds	r3, #4
  }
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	370c      	adds	r7, #12
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	4413      	add	r3, r2
 800ecba:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f7fa fcb4 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	4413      	add	r3, r2
  }
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	3304      	adds	r3, #4
  }
 800ecdc:	4618      	mov	r0, r3
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	4413      	add	r3, r2
 800ecfa:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f7fa fc94 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ed02:	4602      	mov	r2, r0
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	4413      	add	r3, r2
  }
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3708      	adds	r7, #8
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 800ed10:	b480      	push	{r7}
 800ed12:	b083      	sub	sp, #12
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	3304      	adds	r3, #4
  }
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	4a05      	ldr	r2, [pc, #20]	; (800ed48 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	601a      	str	r2, [r3, #0]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7fe f86f 	bl	800ce1c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4618      	mov	r0, r3
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	0802c704 	.word	0x0802c704

0800ed4c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f7ff ffe7 	bl	800ed28 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800ed5a:	2108      	movs	r1, #8
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f015 fe58 	bl	8024a12 <_ZdlPvj>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	4618      	mov	r0, r3
 800ed66:	3708      	adds	r7, #8
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	4a04      	ldr	r2, [pc, #16]	; (800ed88 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	601a      	str	r2, [r3, #0]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	370c      	adds	r7, #12
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr
 800ed88:	0802c784 	.word	0x0802c784

0800ed8c <_ZN6tflite13ErrorReporterD0Ev>:
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f7ff ffe9 	bl	800ed6c <_ZN6tflite13ErrorReporterD1Ev>
 800ed9a:	2104      	movs	r1, #4
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f015 fe38 	bl	8024a12 <_ZdlPvj>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4618      	mov	r0, r3
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	4a05      	ldr	r2, [pc, #20]	; (800edcc <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	601a      	str	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7ff ffd5 	bl	800ed6c <_ZN6tflite13ErrorReporterD1Ev>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	4618      	mov	r0, r3
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	0802c770 	.word	0x0802c770

0800edd0 <_ZN6tflite18MicroErrorReporterD0Ev>:
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f7ff ffe7 	bl	800edac <_ZN6tflite18MicroErrorReporterD1Ev>
 800edde:	2104      	movs	r1, #4
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f015 fe16 	bl	8024a12 <_ZdlPvj>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4618      	mov	r0, r3
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b0c2      	sub	sp, #264	; 0x108
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	1d3b      	adds	r3, r7, #4
 800edf8:	6018      	str	r0, [r3, #0]
 800edfa:	463b      	mov	r3, r7
 800edfc:	6019      	str	r1, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 800edfe:	463b      	mov	r3, r7
 800ee00:	1d3a      	adds	r2, r7, #4
 800ee02:	f107 0008 	add.w	r0, r7, #8
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	6812      	ldr	r2, [r2, #0]
 800ee0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ee0e:	f001 fc47 	bl	80106a0 <MicroVsnprintf>
  DebugLog(log_buffer);
 800ee12:	f107 0308 	add.w	r3, r7, #8
 800ee16:	4618      	mov	r0, r3
 800ee18:	f001 ffe0 	bl	8010ddc <DebugLog>
  DebugLog("\r\n");
 800ee1c:	4803      	ldr	r0, [pc, #12]	; (800ee2c <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x3c>)
 800ee1e:	f001 ffdd 	bl	8010ddc <DebugLog>
#endif
}
 800ee22:	bf00      	nop
 800ee24:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	0802854c 	.word	0x0802854c

0800ee30 <_Z11MicroPrintfPKcz>:

}  // namespace

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
void MicroPrintf(const char* format, ...) {
 800ee30:	b40f      	push	{r0, r1, r2, r3}
 800ee32:	b580      	push	{r7, lr}
 800ee34:	b082      	sub	sp, #8
 800ee36:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 800ee38:	f107 0314 	add.w	r3, r7, #20
 800ee3c:	607b      	str	r3, [r7, #4]
  Log(format, args);
 800ee3e:	6879      	ldr	r1, [r7, #4]
 800ee40:	6938      	ldr	r0, [r7, #16]
 800ee42:	f7ff ffd5 	bl	800edf0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  va_end(args);
}
 800ee46:	bf00      	nop
 800ee48:	3708      	adds	r7, #8
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ee50:	b004      	add	sp, #16
 800ee52:	4770      	bx	lr

0800ee54 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	607a      	str	r2, [r7, #4]
  Log(format, args);
 800ee60:	6879      	ldr	r1, [r7, #4]
 800ee62:	68b8      	ldr	r0, [r7, #8]
 800ee64:	f7ff ffc4 	bl	800edf0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}

0800ee72 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag, MicroProfiler* profiler)
 800ee72:	b580      	push	{r7, lr}
 800ee74:	b084      	sub	sp, #16
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	60f8      	str	r0, [r7, #12]
 800ee7a:	60b9      	str	r1, [r7, #8]
 800ee7c:	607a      	str	r2, [r7, #4]
      : profiler_(profiler) {
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2200      	movs	r2, #0
 800ee82:	601a      	str	r2, [r3, #0]
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d00c      	beq.n	800eeac <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	685a      	ldr	r2, [r3, #4]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	3308      	adds	r3, #8
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	68b9      	ldr	r1, [r7, #8]
 800eea2:	4610      	mov	r0, r2
 800eea4:	4798      	blx	r3
 800eea6:	4602      	mov	r2, r0
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	601a      	str	r2, [r3, #0]
    }
  }
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b082      	sub	sp, #8
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d00a      	beq.n	800eedc <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6858      	ldr	r0, [r3, #4]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	330c      	adds	r3, #12
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	6812      	ldr	r2, [r2, #0]
 800eed8:	4611      	mov	r1, r2
 800eeda:	4798      	blx	r3
    }
  }
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	4618      	mov	r0, r3
 800eee0:	3708      	adds	r7, #8
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 800eee6:	b580      	push	{r7, lr}
 800eee8:	b082      	sub	sp, #8
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	695b      	ldr	r3, [r3, #20]
 800eef2:	2b20      	cmp	r3, #32
 800eef4:	d102      	bne.n	800eefc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	699b      	ldr	r3, [r3, #24]
 800eefa:	e007      	b.n	800ef0c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	695b      	ldr	r3, [r3, #20]
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7fb ff18 	bl	800ad38 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	bf00      	nop
  }
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>:
#endif  // !defined(TF_LITE_STRIP_ERROR_STRINGS)

}  // namespace

MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b084      	sub	sp, #16
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]
 800ef20:	603b      	str	r3, [r7, #0]
                       MicroResourceVariables* resource_variables)
    : context_(context),
      model_(model),
      allocator_(allocator),
      current_subgraph_index_(0),
      resource_variables_(resource_variables) {
 800ef22:	4a11      	ldr	r2, [pc, #68]	; (800ef68 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x54>)
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	601a      	str	r2, [r3, #0]
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	68ba      	ldr	r2, [r7, #8]
 800ef2c:	605a      	str	r2, [r3, #4]
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	609a      	str	r2, [r3, #8]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	683a      	ldr	r2, [r7, #0]
 800ef38:	60da      	str	r2, [r3, #12]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	611a      	str	r2, [r3, #16]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2200      	movs	r2, #0
 800ef44:	615a      	str	r2, [r3, #20]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	69ba      	ldr	r2, [r7, #24]
 800ef4a:	619a      	str	r2, [r3, #24]
  if (model != nullptr) {
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d005      	beq.n	800ef5e <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x4a>
    subgraphs_ = model->subgraphs();
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f7fd fb6c 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800ef58:	4602      	mov	r2, r0
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	61da      	str	r2, [r3, #28]
  }
}
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	4618      	mov	r0, r3
 800ef62:	3710      	adds	r7, #16
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	0802c798 	.word	0x0802c798

0800ef6c <_ZN6tflite10MicroGraphD1Ev>:

MicroGraph::~MicroGraph() {}
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	4a04      	ldr	r2, [pc, #16]	; (800ef88 <_ZN6tflite10MicroGraphD1Ev+0x1c>)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	601a      	str	r2, [r3, #0]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr
 800ef88:	0802c798 	.word	0x0802c798

0800ef8c <_ZN6tflite10MicroGraphD0Ev>:
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f7ff ffe9 	bl	800ef6c <_ZN6tflite10MicroGraphD1Ev>
 800ef9a:	2120      	movs	r1, #32
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f015 fd38 	bl	8024a12 <_ZdlPvj>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	4618      	mov	r0, r3
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}

0800efac <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
 800efac:	b580      	push	{r7, lr}
 800efae:	b08a      	sub	sp, #40	; 0x28
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	695b      	ldr	r3, [r3, #20]
 800efb8:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800efba:	2300      	movs	r3, #0
 800efbc:	627b      	str	r3, [r7, #36]	; 0x24
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	69db      	ldr	r3, [r3, #28]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fd fba4 	bl	800c710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800efc8:	4602      	mov	r2, r0
 800efca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efcc:	4293      	cmp	r3, r2
 800efce:	bf34      	ite	cc
 800efd0:	2301      	movcc	r3, #1
 800efd2:	2300      	movcs	r3, #0
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d04f      	beq.n	800f07a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xce>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800efda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	689b      	ldr	r3, [r3, #8]
 800efe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efe6:	4611      	mov	r1, r2
 800efe8:	4618      	mov	r0, r3
 800efea:	f7fd fb4c 	bl	800c686 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800efee:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 800eff0:	2300      	movs	r3, #0
 800eff2:	623b      	str	r3, [r7, #32]
 800eff4:	6a3a      	ldr	r2, [r7, #32]
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d23a      	bcs.n	800f072 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xc6>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	691a      	ldr	r2, [r3, #16]
 800f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f002:	00db      	lsls	r3, r3, #3
 800f004:	4413      	add	r3, r2
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	6a3b      	ldr	r3, [r7, #32]
 800f00a:	212c      	movs	r1, #44	; 0x2c
 800f00c:	fb01 f303 	mul.w	r3, r1, r3
 800f010:	4413      	add	r3, r2
      TfLiteNode* node =
 800f012:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	691a      	ldr	r2, [r3, #16]
 800f018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01a:	00db      	lsls	r3, r3, #3
 800f01c:	4413      	add	r3, r2
              .node_and_registrations[i]
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	6a3b      	ldr	r3, [r7, #32]
 800f022:	212c      	movs	r1, #44	; 0x2c
 800f024:	fb01 f303 	mul.w	r3, r1, r3
 800f028:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 800f02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f02c:	60bb      	str	r3, [r7, #8]
              .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	695b      	ldr	r3, [r3, #20]
 800f032:	2b20      	cmp	r3, #32
 800f034:	d106      	bne.n	800f044 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x98>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	699b      	ldr	r3, [r3, #24]
 800f03a:	61bb      	str	r3, [r7, #24]
        init_data_size = node->custom_initial_data_size;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	69db      	ldr	r3, [r3, #28]
 800f040:	61fb      	str	r3, [r7, #28]
 800f042:	e004      	b.n	800f04e <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xa2>
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	695b      	ldr	r3, [r3, #20]
 800f048:	61bb      	str	r3, [r7, #24]
        init_data_size = 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	61fb      	str	r3, [r7, #28]
      }
      if (registration->init) {
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d009      	beq.n	800f06a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xbe>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	687a      	ldr	r2, [r7, #4]
 800f05c:	6850      	ldr	r0, [r2, #4]
 800f05e:	69fa      	ldr	r2, [r7, #28]
 800f060:	69b9      	ldr	r1, [r7, #24]
 800f062:	4798      	blx	r3
 800f064:	4602      	mov	r2, r0
        node->user_data =
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 800f06a:	6a3b      	ldr	r3, [r7, #32]
 800f06c:	3301      	adds	r3, #1
 800f06e:	623b      	str	r3, [r7, #32]
 800f070:	e7c0      	b.n	800eff4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800f072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f074:	3301      	adds	r3, #1
 800f076:	627b      	str	r3, [r7, #36]	; 0x24
 800f078:	e7a1      	b.n	800efbe <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	697a      	ldr	r2, [r7, #20]
 800f07e:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800f080:	2300      	movs	r3, #0
}
 800f082:	4618      	mov	r0, r3
 800f084:	3728      	adds	r7, #40	; 0x28
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
	...

0800f08c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:

TfLiteStatus MicroGraph::PrepareSubgraphs() {
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b08a      	sub	sp, #40	; 0x28
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	695b      	ldr	r3, [r3, #20]
 800f098:	61fb      	str	r3, [r7, #28]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800f09a:	2300      	movs	r3, #0
 800f09c:	627b      	str	r3, [r7, #36]	; 0x24
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	69db      	ldr	r3, [r3, #28]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7fd fb34 	bl	800c710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	bf34      	ite	cc
 800f0b0:	2301      	movcc	r3, #1
 800f0b2:	2300      	movcs	r3, #0
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d053      	beq.n	800f162 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xd6>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800f0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	689b      	ldr	r3, [r3, #8]
 800f0c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0c6:	4611      	mov	r1, r2
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7fd fadc 	bl	800c686 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800f0ce:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < operators_size; ++i) {
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	623b      	str	r3, [r7, #32]
 800f0d4:	6a3a      	ldr	r2, [r7, #32]
 800f0d6:	69bb      	ldr	r3, [r7, #24]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d23e      	bcs.n	800f15a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	691a      	ldr	r2, [r3, #16]
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e2:	00db      	lsls	r3, r3, #3
 800f0e4:	4413      	add	r3, r2
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	6a3b      	ldr	r3, [r7, #32]
 800f0ea:	212c      	movs	r1, #44	; 0x2c
 800f0ec:	fb01 f303 	mul.w	r3, r1, r3
 800f0f0:	4413      	add	r3, r2
      TfLiteNode* node =
 800f0f2:	617b      	str	r3, [r7, #20]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	691a      	ldr	r2, [r3, #16]
 800f0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fa:	00db      	lsls	r3, r3, #3
 800f0fc:	4413      	add	r3, r2
              .node_and_registrations[i]
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	6a3b      	ldr	r3, [r7, #32]
 800f102:	212c      	movs	r1, #44	; 0x2c
 800f104:	fb01 f303 	mul.w	r3, r1, r3
 800f108:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 800f10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f10c:	613b      	str	r3, [r7, #16]
              .registration;
      if (registration->prepare != nullptr) {
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d016      	beq.n	800f144 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	689b      	ldr	r3, [r3, #8]
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	6852      	ldr	r2, [r2, #4]
 800f11e:	6979      	ldr	r1, [r7, #20]
 800f120:	4610      	mov	r0, r2
 800f122:	4798      	blx	r3
 800f124:	4603      	mov	r3, r0
 800f126:	73fb      	strb	r3, [r7, #15]
        if (prepare_status != kTfLiteOk) {
 800f128:	7bfb      	ldrb	r3, [r7, #15]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d00a      	beq.n	800f144 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 800f12e:	6938      	ldr	r0, [r7, #16]
 800f130:	f7ff fed9 	bl	800eee6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800f134:	4601      	mov	r1, r0
 800f136:	7bfb      	ldrb	r3, [r7, #15]
 800f138:	6a3a      	ldr	r2, [r7, #32]
 800f13a:	480e      	ldr	r0, [pc, #56]	; (800f174 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe8>)
 800f13c:	f7ff fe78 	bl	800ee30 <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
 800f140:	2301      	movs	r3, #1
 800f142:	e012      	b.n	800f16a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xde>
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	6a3a      	ldr	r2, [r7, #32]
 800f14a:	4611      	mov	r1, r2
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7fe fd8f 	bl	800dc70 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
 800f152:	6a3b      	ldr	r3, [r7, #32]
 800f154:	3301      	adds	r3, #1
 800f156:	623b      	str	r3, [r7, #32]
 800f158:	e7bc      	b.n	800f0d4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800f15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15c:	3301      	adds	r3, #1
 800f15e:	627b      	str	r3, [r7, #36]	; 0x24
 800f160:	e79d      	b.n	800f09e <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x12>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	69fa      	ldr	r2, [r7, #28]
 800f166:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800f168:	2300      	movs	r3, #0
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3728      	adds	r7, #40	; 0x28
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop
 800f174:	08028c50 	.word	0x08028c50

0800f178 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:

TfLiteStatus MicroGraph::FreeSubgraphs() {
 800f178:	b580      	push	{r7, lr}
 800f17a:	b088      	sub	sp, #32
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	695b      	ldr	r3, [r3, #20]
 800f184:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800f186:	2300      	movs	r3, #0
 800f188:	61fb      	str	r3, [r7, #28]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	69db      	ldr	r3, [r3, #28]
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fd fabe 	bl	800c710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800f194:	4602      	mov	r2, r0
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	4293      	cmp	r3, r2
 800f19a:	bf34      	ite	cc
 800f19c:	2301      	movcc	r3, #1
 800f19e:	2300      	movcs	r3, #0
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d040      	beq.n	800f228 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb0>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800f1a6:	69fa      	ldr	r2, [r7, #28]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	689b      	ldr	r3, [r3, #8]
 800f1b0:	69fa      	ldr	r2, [r7, #28]
 800f1b2:	4611      	mov	r1, r2
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7fd fa66 	bl	800c686 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800f1ba:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 800f1bc:	2300      	movs	r3, #0
 800f1be:	61bb      	str	r3, [r7, #24]
 800f1c0:	69ba      	ldr	r2, [r7, #24]
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d22b      	bcs.n	800f220 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa8>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	691a      	ldr	r2, [r3, #16]
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	00db      	lsls	r3, r3, #3
 800f1d0:	4413      	add	r3, r2
 800f1d2:	681a      	ldr	r2, [r3, #0]
 800f1d4:	69bb      	ldr	r3, [r7, #24]
 800f1d6:	212c      	movs	r1, #44	; 0x2c
 800f1d8:	fb01 f303 	mul.w	r3, r1, r3
 800f1dc:	4413      	add	r3, r2
      TfLiteNode* node =
 800f1de:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	691a      	ldr	r2, [r3, #16]
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	00db      	lsls	r3, r3, #3
 800f1e8:	4413      	add	r3, r2
              .node_and_registrations[i]
 800f1ea:	681a      	ldr	r2, [r3, #0]
 800f1ec:	69bb      	ldr	r3, [r7, #24]
 800f1ee:	212c      	movs	r1, #44	; 0x2c
 800f1f0:	fb01 f303 	mul.w	r3, r1, r3
 800f1f4:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 800f1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1f8:	60bb      	str	r3, [r7, #8]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00b      	beq.n	800f218 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d007      	beq.n	800f218 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
        registration->free(context_, node->user_data);
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	687a      	ldr	r2, [r7, #4]
 800f20e:	6850      	ldr	r0, [r2, #4]
 800f210:	68fa      	ldr	r2, [r7, #12]
 800f212:	6912      	ldr	r2, [r2, #16]
 800f214:	4611      	mov	r1, r2
 800f216:	4798      	blx	r3
    for (size_t i = 0; i < operators_size; ++i) {
 800f218:	69bb      	ldr	r3, [r7, #24]
 800f21a:	3301      	adds	r3, #1
 800f21c:	61bb      	str	r3, [r7, #24]
 800f21e:	e7cf      	b.n	800f1c0 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	3301      	adds	r3, #1
 800f224:	61fb      	str	r3, [r7, #28]
 800f226:	e7b0      	b.n	800f18a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	697a      	ldr	r2, [r7, #20]
 800f22c:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800f22e:	2300      	movs	r3, #0
}
 800f230:	4618      	mov	r0, r3
 800f232:	3720      	adds	r7, #32
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 800f238:	b5b0      	push	{r4, r5, r7, lr}
 800f23a:	b08a      	sub	sp, #40	; 0x28
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6039      	str	r1, [r7, #0]
 800f242:	2400      	movs	r4, #0
  int previous_subgraph_idx = current_subgraph_index_;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	695b      	ldr	r3, [r3, #20]
 800f248:	623b      	str	r3, [r7, #32]
  current_subgraph_index_ = subgraph_idx;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	683a      	ldr	r2, [r7, #0]
 800f24e:	615a      	str	r2, [r3, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	69db      	ldr	r3, [r3, #28]
 800f254:	4618      	mov	r0, r3
 800f256:	f7fd fa5b 	bl	800c710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800f25a:	4602      	mov	r2, r0
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	429a      	cmp	r2, r3
 800f260:	bf94      	ite	ls
 800f262:	2301      	movls	r3, #1
 800f264:	2300      	movhi	r3, #0
 800f266:	b2db      	uxtb	r3, r3
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d00c      	beq.n	800f286 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x4e>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	69db      	ldr	r3, [r3, #28]
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 800f270:	4618      	mov	r0, r3
 800f272:	f7fd fa4d 	bl	800c710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800f276:	4603      	mov	r3, r0
 800f278:	461a      	mov	r2, r3
 800f27a:	6839      	ldr	r1, [r7, #0]
 800f27c:	483c      	ldr	r0, [pc, #240]	; (800f370 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x138>)
 800f27e:	f7ff fdd7 	bl	800ee30 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800f282:	2401      	movs	r4, #1
 800f284:	e06e      	b.n	800f364 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	689b      	ldr	r3, [r3, #8]
 800f28a:	6839      	ldr	r1, [r7, #0]
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fd f9fa 	bl	800c686 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800f292:	61f8      	str	r0, [r7, #28]
  for (size_t i = 0; i < operators_size; ++i) {
 800f294:	2300      	movs	r3, #0
 800f296:	627b      	str	r3, [r7, #36]	; 0x24
 800f298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d25d      	bcs.n	800f35c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x124>
    TfLiteNode* node =
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	691a      	ldr	r2, [r3, #16]
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	00db      	lsls	r3, r3, #3
 800f2a8:	4413      	add	r3, r2
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ae:	212c      	movs	r1, #44	; 0x2c
 800f2b0:	fb01 f303 	mul.w	r3, r1, r3
 800f2b4:	4413      	add	r3, r2
    TfLiteNode* node =
 800f2b6:	61bb      	str	r3, [r7, #24]
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	691a      	ldr	r2, [r3, #16]
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	00db      	lsls	r3, r3, #3
 800f2c0:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c6:	212c      	movs	r1, #44	; 0x2c
 800f2c8:	fb01 f303 	mul.w	r3, r1, r3
 800f2cc:	4413      	add	r3, r2
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 800f2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2d0:	617b      	str	r3, [r7, #20]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 800f2d2:	6978      	ldr	r0, [r7, #20]
 800f2d4:	f7ff fe07 	bl	800eee6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800f2d8:	4601      	mov	r1, r0
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2e0:	f107 0308 	add.w	r3, r7, #8
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7ff fdc4 	bl	800ee72 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>
#endif

    TFLITE_DCHECK(registration->invoke);
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d101      	bne.n	800f2f6 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xbe>
 800f2f2:	f015 fdf8 	bl	8024ee6 <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	6852      	ldr	r2, [r2, #4]
 800f2fe:	69b9      	ldr	r1, [r7, #24]
 800f300:	4610      	mov	r0, r2
 800f302:	4798      	blx	r3
 800f304:	4603      	mov	r3, r0
 800f306:	74fb      	strb	r3, [r7, #19]

    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_->ResetTempAllocations();
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	68da      	ldr	r2, [r3, #12]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	3308      	adds	r3, #8
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	4610      	mov	r0, r2
 800f318:	4798      	blx	r3

    if (invoke_status == kTfLiteError) {
 800f31a:	7cfb      	ldrb	r3, [r7, #19]
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d10b      	bne.n	800f338 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x100>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 800f320:	6978      	ldr	r0, [r7, #20]
 800f322:	f7ff fde0 	bl	800eee6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800f326:	4601      	mov	r1, r0
 800f328:	7cfb      	ldrb	r3, [r7, #19]
 800f32a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f32c:	4811      	ldr	r0, [pc, #68]	; (800f374 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x13c>)
 800f32e:	f7ff fd7f 	bl	800ee30 <_Z11MicroPrintfPKcz>
                  OpNameFromRegistration(registration), i, invoke_status);
      return kTfLiteError;
 800f332:	2401      	movs	r4, #1
 800f334:	2500      	movs	r5, #0
 800f336:	e006      	b.n	800f346 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
    } else if (invoke_status != kTfLiteOk) {
 800f338:	7cfb      	ldrb	r3, [r7, #19]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d002      	beq.n	800f344 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10c>
      return invoke_status;
 800f33e:	7cfc      	ldrb	r4, [r7, #19]
 800f340:	2500      	movs	r5, #0
 800f342:	e000      	b.n	800f346 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 800f344:	2501      	movs	r5, #1
 800f346:	f107 0308 	add.w	r3, r7, #8
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7ff fdb3 	bl	800eeb6 <_ZN6tflite19ScopedMicroProfilerD1Ev>
 800f350:	2d01      	cmp	r5, #1
 800f352:	d107      	bne.n	800f364 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  for (size_t i = 0; i < operators_size; ++i) {
 800f354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f356:	3301      	adds	r3, #1
 800f358:	627b      	str	r3, [r7, #36]	; 0x24
 800f35a:	e79d      	b.n	800f298 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x60>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6a3a      	ldr	r2, [r7, #32]
 800f360:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 800f362:	2400      	movs	r4, #0
 800f364:	4623      	mov	r3, r4
}
 800f366:	4618      	mov	r0, r3
 800f368:	3728      	adds	r7, #40	; 0x28
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bdb0      	pop	{r4, r5, r7, pc}
 800f36e:	bf00      	nop
 800f370:	08028c88 	.word	0x08028c88
 800f374:	08028cbc 	.word	0x08028cbc

0800f378 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroGraph::ResetVariableTensors() {
 800f378:	b580      	push	{r7, lr}
 800f37a:	b08a      	sub	sp, #40	; 0x28
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800f380:	2300      	movs	r3, #0
 800f382:	627b      	str	r3, [r7, #36]	; 0x24
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	69db      	ldr	r3, [r3, #28]
 800f388:	4618      	mov	r0, r3
 800f38a:	f7fd f9c1 	bl	800c710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800f38e:	4602      	mov	r2, r0
 800f390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f392:	4293      	cmp	r3, r2
 800f394:	bf34      	ite	cc
 800f396:	2301      	movcc	r3, #1
 800f398:	2300      	movcs	r3, #0
 800f39a:	b2db      	uxtb	r3, r3
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d077      	beq.n	800f490 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x118>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	69db      	ldr	r3, [r3, #28]
 800f3a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7ff fab4 	bl	800e914 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800f3ac:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	623b      	str	r3, [r7, #32]
 800f3b2:	69b8      	ldr	r0, [r7, #24]
 800f3b4:	f7fd fcc1 	bl	800cd3a <_ZNK6tflite8SubGraph7tensorsEv>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7ff f9e8 	bl	800e790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	6a3b      	ldr	r3, [r7, #32]
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	bf34      	ite	cc
 800f3c8:	2301      	movcc	r3, #1
 800f3ca:	2300      	movcs	r3, #0
 800f3cc:	b2db      	uxtb	r3, r3
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d05a      	beq.n	800f488 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x110>
      auto* tensor = subgraph->tensors()->Get(i);
 800f3d2:	69b8      	ldr	r0, [r7, #24]
 800f3d4:	f7fd fcb1 	bl	800cd3a <_ZNK6tflite8SubGraph7tensorsEv>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	6a39      	ldr	r1, [r7, #32]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7ff f9e5 	bl	800e7ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800f3e2:	6178      	str	r0, [r7, #20]
      if (tensor->is_variable()) {
 800f3e4:	6978      	ldr	r0, [r7, #20]
 800f3e6:	f7fd fc78 	bl	800ccda <_ZNK6tflite6Tensor11is_variableEv>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d047      	beq.n	800f480 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x108>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	691a      	ldr	r2, [r3, #16]
 800f3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f6:	00db      	lsls	r3, r3, #3
 800f3f8:	4413      	add	r3, r2
 800f3fa:	6859      	ldr	r1, [r3, #4]
 800f3fc:	6a3a      	ldr	r2, [r7, #32]
 800f3fe:	4613      	mov	r3, r2
 800f400:	005b      	lsls	r3, r3, #1
 800f402:	4413      	add	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	440b      	add	r3, r1
 800f408:	f107 020c 	add.w	r2, r7, #12
 800f40c:	4611      	mov	r1, r2
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fd fbcf 	bl	800cbb2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800f414:	4603      	mov	r3, r0
 800f416:	74fb      	strb	r3, [r7, #19]
 800f418:	7cfb      	ldrb	r3, [r7, #19]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d001      	beq.n	800f422 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
 800f41e:	7cfb      	ldrb	r3, [r7, #19]
 800f420:	e037      	b.n	800f492 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x11a>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
 800f422:	2300      	movs	r3, #0
 800f424:	61fb      	str	r3, [r7, #28]
        if (tensor->type() == tflite::TensorType_INT8) {
 800f426:	6978      	ldr	r0, [r7, #20]
 800f428:	f7fd fa22 	bl	800c870 <_ZNK6tflite6Tensor4typeEv>
 800f42c:	4603      	mov	r3, r0
 800f42e:	2b09      	cmp	r3, #9
 800f430:	bf0c      	ite	eq
 800f432:	2301      	moveq	r3, #1
 800f434:	2300      	movne	r3, #0
 800f436:	b2db      	uxtb	r3, r3
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d00f      	beq.n	800f45c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe4>
          value = tensor->quantization()->zero_point()->Get(0);
 800f43c:	6978      	ldr	r0, [r7, #20]
 800f43e:	f7fd fc3e 	bl	800ccbe <_ZNK6tflite6Tensor12quantizationEv>
 800f442:	4603      	mov	r3, r0
 800f444:	4618      	mov	r0, r3
 800f446:	f7fd fc0e 	bl	800cc66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2100      	movs	r1, #0
 800f44e:	4618      	mov	r0, r3
 800f450:	f7ff f976 	bl	800e740 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800f454:	4602      	mov	r2, r0
 800f456:	460b      	mov	r3, r1
 800f458:	4613      	mov	r3, r2
 800f45a:	61fb      	str	r3, [r7, #28]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	691a      	ldr	r2, [r3, #16]
 800f460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f462:	00db      	lsls	r3, r3, #3
 800f464:	4413      	add	r3, r2
 800f466:	6859      	ldr	r1, [r3, #4]
 800f468:	6a3a      	ldr	r2, [r7, #32]
 800f46a:	4613      	mov	r3, r2
 800f46c:	005b      	lsls	r3, r3, #1
 800f46e:	4413      	add	r3, r2
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	440b      	add	r3, r1
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	68fa      	ldr	r2, [r7, #12]
 800f478:	69f9      	ldr	r1, [r7, #28]
 800f47a:	4618      	mov	r0, r3
 800f47c:	f015 fdd2 	bl	8025024 <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800f480:	6a3b      	ldr	r3, [r7, #32]
 800f482:	3301      	adds	r3, #1
 800f484:	623b      	str	r3, [r7, #32]
 800f486:	e794      	b.n	800f3b2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800f488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48a:	3301      	adds	r3, #1
 800f48c:	627b      	str	r3, [r7, #36]	; 0x24
 800f48e:	e779      	b.n	800f384 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
               buffer_size);
      }
    }
  }

  return kTfLiteOk;
 800f490:	2300      	movs	r3, #0
}
 800f492:	4618      	mov	r0, r3
 800f494:	3728      	adds	r7, #40	; 0x28
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}

0800f49a <_ZN6tflite10MicroGraph12NumSubgraphsEv>:

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
 800f49a:	b580      	push	{r7, lr}
 800f49c:	b082      	sub	sp, #8
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	689b      	ldr	r3, [r3, #8]
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fd f8c2 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fd f92e 	bl	800c710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3708      	adds	r7, #8
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
 800f4be:	b480      	push	{r7}
 800f4c0:	b083      	sub	sp, #12
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
 800f4c6:	6039      	str	r1, [r7, #0]
  subgraph_allocations_ = subgraph_allocations;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	683a      	ldr	r2, [r7, #0]
 800f4cc:	611a      	str	r2, [r3, #16]
}
 800f4ce:	bf00      	nop
 800f4d0:	370c      	adds	r7, #12
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr

0800f4da <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:

size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 800f4da:	b580      	push	{r7, lr}
 800f4dc:	b082      	sub	sp, #8
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	6078      	str	r0, [r7, #4]
 800f4e2:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	689b      	ldr	r3, [r3, #8]
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7fd f8a1 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	4610      	mov	r0, r2
 800f4f6:	f7fd f919 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7fd fc2a 	bl	800cd56 <_ZNK6tflite8SubGraph6inputsEv>
 800f502:	4603      	mov	r3, r0
 800f504:	4618      	mov	r0, r3
 800f506:	f7fa f969 	bl	80097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f50a:	4603      	mov	r3, r0
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3708      	adds	r7, #8
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
 800f514:	b580      	push	{r7, lr}
 800f516:	b086      	sub	sp, #24
 800f518:	af00      	add	r7, sp, #0
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	4618      	mov	r0, r3
 800f526:	f7fd f883 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800f52a:	4602      	mov	r2, r0
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	4619      	mov	r1, r3
 800f530:	4610      	mov	r0, r2
 800f532:	f7fd f8fb 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f536:	4603      	mov	r3, r0
 800f538:	4618      	mov	r0, r3
 800f53a:	f7fd fc0c 	bl	800cd56 <_ZNK6tflite8SubGraph6inputsEv>
 800f53e:	4602      	mov	r2, r0
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4619      	mov	r1, r3
 800f544:	4610      	mov	r0, r2
 800f546:	f7fa f957 	bl	80097f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f54a:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	691a      	ldr	r2, [r3, #16]
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	00db      	lsls	r3, r3, #3
 800f554:	4413      	add	r3, r2
 800f556:	6859      	ldr	r1, [r3, #4]
 800f558:	697a      	ldr	r2, [r7, #20]
 800f55a:	4613      	mov	r3, r2
 800f55c:	005b      	lsls	r3, r3, #1
 800f55e:	4413      	add	r3, r2
 800f560:	009b      	lsls	r3, r3, #2
 800f562:	440b      	add	r3, r1
}
 800f564:	4618      	mov	r0, r3
 800f566:	3718      	adds	r7, #24
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}

0800f56c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	689b      	ldr	r3, [r3, #8]
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fd f858 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800f580:	4602      	mov	r2, r0
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	4619      	mov	r1, r3
 800f586:	4610      	mov	r0, r2
 800f588:	f7fd f8d0 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f58c:	4603      	mov	r3, r0
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fd fbef 	bl	800cd72 <_ZNK6tflite8SubGraph7outputsEv>
 800f594:	4603      	mov	r3, r0
 800f596:	4618      	mov	r0, r3
 800f598:	f7fa f920 	bl	80097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f59c:	4603      	mov	r3, r0
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3708      	adds	r7, #8
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}

0800f5a6 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
 800f5a6:	b580      	push	{r7, lr}
 800f5a8:	b086      	sub	sp, #24
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	60f8      	str	r0, [r7, #12]
 800f5ae:	60b9      	str	r1, [r7, #8]
 800f5b0:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	689b      	ldr	r3, [r3, #8]
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fd f83a 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	4610      	mov	r0, r2
 800f5c4:	f7fd f8b2 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7fd fbd1 	bl	800cd72 <_ZNK6tflite8SubGraph7outputsEv>
 800f5d0:	4602      	mov	r2, r0
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	4610      	mov	r0, r2
 800f5d8:	f7fa f90e 	bl	80097f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f5dc:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	691a      	ldr	r2, [r3, #16]
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	00db      	lsls	r3, r3, #3
 800f5e6:	4413      	add	r3, r2
 800f5e8:	6859      	ldr	r1, [r3, #4]
 800f5ea:	697a      	ldr	r2, [r7, #20]
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	005b      	lsls	r3, r3, #1
 800f5f0:	4413      	add	r3, r2
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	440b      	add	r3, r1
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3718      	adds	r7, #24
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}

0800f5fe <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 800f5fe:	b580      	push	{r7, lr}
 800f600:	b082      	sub	sp, #8
 800f602:	af00      	add	r7, sp, #0
 800f604:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2200      	movs	r2, #0
 800f60a:	2104      	movs	r1, #4
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7fe ffe6 	bl	800e5de <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800f612:	4603      	mov	r3, r0
  }
 800f614:	4618      	mov	r0, r3
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	210e      	movs	r1, #14
 800f628:	4618      	mov	r0, r3
 800f62a:	f7fe ffa8 	bl	800e57e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800f62e:	4603      	mov	r3, r0
  }
 800f630:	4618      	mov	r0, r3
 800f632:	3708      	adds	r7, #8
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <_ZNK6tflite8Operator13intermediatesEv>:
  const flatbuffers::Vector<int32_t> *intermediates() const {
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INTERMEDIATES);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2114      	movs	r1, #20
 800f644:	4618      	mov	r0, r3
 800f646:	f7fa f867 	bl	8009718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800f64a:	4603      	mov	r3, r0
  }
 800f64c:	4618      	mov	r0, r3
 800f64e:	3708      	adds	r7, #8
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2106      	movs	r1, #6
 800f660:	4618      	mov	r0, r3
 800f662:	f000 fd86 	bl	8010172 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800f666:	4603      	mov	r3, r0
  }
 800f668:	4618      	mov	r0, r3
 800f66a:	3708      	adds	r7, #8
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	695b      	ldr	r3, [r3, #20]
 800f67c:	4618      	mov	r0, r3
 800f67e:	370c      	adds	r7, #12
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <_ZN6tflite10MicroGraph14GetAllocationsEv>:

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	691b      	ldr	r3, [r3, #16]
 800f694:	4618      	mov	r0, r3
 800f696:	370c      	adds	r7, #12
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr

0800f6a0 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
  // values other than kTfLiteOk and kTfLiteError.
  // TODO(b/149795762): Add this to the TfLiteStatus enum.
  TfLiteStatus Invoke();

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->inputs()->size();
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7fc ffbf 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fd f838 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fd fb49 	bl	800cd56 <_ZNK6tflite8SubGraph6inputsEv>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fa f888 	bl	80097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f6cc:	4603      	mov	r3, r0
  }
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3708      	adds	r7, #8
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b082      	sub	sp, #8
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->inputs();
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fc ffa4 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7fd f81d 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7fd fb2e 	bl	800cd56 <_ZNK6tflite8SubGraph6inputsEv>
 800f6fa:	4603      	mov	r3, r0
  }
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->outputs()->size();
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4618      	mov	r0, r3
 800f712:	f7fc ff8d 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800f716:	4603      	mov	r3, r0
 800f718:	2100      	movs	r1, #0
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7fd f806 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f720:	4603      	mov	r3, r0
 800f722:	4618      	mov	r0, r3
 800f724:	f7fd fb25 	bl	800cd72 <_ZNK6tflite8SubGraph7outputsEv>
 800f728:	4603      	mov	r3, r0
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fa f856 	bl	80097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f730:	4603      	mov	r3, r0
  }
 800f732:	4618      	mov	r0, r3
 800f734:	3708      	adds	r7, #8
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}

0800f73a <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800f73a:	b580      	push	{r7, lr}
 800f73c:	b082      	sub	sp, #8
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->outputs();
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	4618      	mov	r0, r3
 800f748:	f7fc ff72 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800f74c:	4603      	mov	r3, r0
 800f74e:	2100      	movs	r1, #0
 800f750:	4618      	mov	r0, r3
 800f752:	f7fc ffeb 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f756:	4603      	mov	r3, r0
 800f758:	4618      	mov	r0, r3
 800f75a:	f7fd fb0a 	bl	800cd72 <_ZNK6tflite8SubGraph7outputsEv>
 800f75e:	4603      	mov	r3, r0
  }
 800f760:	4618      	mov	r0, r3
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>:
  // TODO(b/158263161): Consider switching to Create() function to enable better
  // error reporting during initialization.
  void Init(MicroProfiler* profiler);

  // Gets the current subgraph index used from within context methods.
  int get_subgraph_index() { return graph_.GetCurrentSubgraphIndex(); }
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	336c      	adds	r3, #108	; 0x6c
 800f774:	4618      	mov	r0, r3
 800f776:	f7ff ff7b 	bl	800f670 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800f77a:	4603      	mov	r3, r0
 800f77c:	4618      	mov	r0, r3
 800f77e:	3708      	adds	r7, #8
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
 800f784:	b580      	push	{r7, lr}
 800f786:	b086      	sub	sp, #24
 800f788:	af02      	add	r7, sp, #8
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	60b9      	str	r1, [r7, #8]
 800f78e:	607a      	str	r2, [r7, #4]
 800f790:	603b      	str	r3, [r7, #0]

      graph_(&context_, model, &allocator_, resource_variables),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	68ba      	ldr	r2, [r7, #8]
 800f796:	601a      	str	r2, [r3, #0]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	605a      	str	r2, [r3, #4]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	69fa      	ldr	r2, [r7, #28]
 800f7a2:	609a      	str	r2, [r3, #8]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	330c      	adds	r3, #12
 800f7a8:	225c      	movs	r2, #92	; 0x5c
 800f7aa:	2100      	movs	r1, #0
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f015 fc39 	bl	8025024 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800f7b2:	69fa      	ldr	r2, [r7, #28]
 800f7b4:	69b9      	ldr	r1, [r7, #24]
 800f7b6:	6838      	ldr	r0, [r7, #0]
 800f7b8:	f7fe f88e 	bl	800d8d8 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 800f7bc:	4602      	mov	r2, r0
      output_tensors_(nullptr) {
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	669a      	str	r2, [r3, #104]	; 0x68
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f103 010c 	add.w	r1, r3, #12
      graph_(&context_, model, &allocator_, resource_variables),
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
      output_tensors_(nullptr) {
 800f7d2:	6a3b      	ldr	r3, [r7, #32]
 800f7d4:	9300      	str	r3, [sp, #0]
 800f7d6:	4613      	mov	r3, r2
 800f7d8:	68ba      	ldr	r2, [r7, #8]
 800f7da:	f7ff fb9b 	bl	800ef14 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2200      	movs	r2, #0
 800f802:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  Init(profiler);
 800f806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f000 f825 	bl	800f858 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	4618      	mov	r0, r3
 800f812:	3710      	adds	r7, #16
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  if (graph_.GetAllocations() != nullptr) {
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	336c      	adds	r3, #108	; 0x6c
 800f824:	4618      	mov	r0, r3
 800f826:	f7ff ff2f 	bl	800f688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f82a:	4603      	mov	r3, r0
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	bf14      	ite	ne
 800f830:	2301      	movne	r3, #1
 800f832:	2300      	moveq	r3, #0
 800f834:	b2db      	uxtb	r3, r3
 800f836:	2b00      	cmp	r3, #0
 800f838:	d004      	beq.n	800f844 <_ZN6tflite16MicroInterpreterD1Ev+0x2c>
    graph_.FreeSubgraphs();
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	336c      	adds	r3, #108	; 0x6c
 800f83e:	4618      	mov	r0, r3
 800f840:	f7ff fc9a 	bl	800f178 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	336c      	adds	r3, #108	; 0x6c
 800f848:	4618      	mov	r0, r3
 800f84a:	f7ff fb8f 	bl	800ef6c <_ZN6tflite10MicroGraphD1Ev>
  }
}
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	4618      	mov	r0, r3
 800f852:	3708      	adds	r7, #8
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:

void MicroInterpreter::Init(MicroProfiler* profiler) {
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
  context_.impl_ = static_cast<void*>(this);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	619a      	str	r2, [r3, #24]
  context_.ReportError = ReportOpError;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	4a0d      	ldr	r2, [pc, #52]	; (800f8a0 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 800f86c:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4a0c      	ldr	r2, [pc, #48]	; (800f8a4 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 800f872:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.ReportError = ReportOpError;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a0a      	ldr	r2, [pc, #40]	; (800f8a0 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 800f878:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4a09      	ldr	r2, [pc, #36]	; (800f8a4 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 800f87e:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.GetEvalTensor = GetEvalTensor;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	4a09      	ldr	r2, [pc, #36]	; (800f8a8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x50>)
 800f884:	661a      	str	r2, [r3, #96]	; 0x60
  context_.profiler = profiler;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	683a      	ldr	r2, [r7, #0]
 800f88a:	641a      	str	r2, [r3, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2200      	movs	r2, #0
 800f890:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
}
 800f894:	bf00      	nop
 800f896:	370c      	adds	r7, #12
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr
 800f8a0:	08010085 	.word	0x08010085
 800f8a4:	080100bd 	.word	0x080100bd
 800f8a8:	0801010d 	.word	0x0801010d

0800f8ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:

TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 800f8ac:	b5b0      	push	{r4, r5, r7, lr}
 800f8ae:	b098      	sub	sp, #96	; 0x60
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	336c      	adds	r3, #108	; 0x6c
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7ff fdec 	bl	800f49a <_ZN6tflite10MicroGraph12NumSubgraphsEv>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	bfb4      	ite	lt
 800f8ca:	2301      	movlt	r3, #1
 800f8cc:	2300      	movge	r3, #0
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	f000 8189 	beq.w	800fbe8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33c>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fc fea8 	bl	800c630 <_ZNK6tflite5Model9subgraphsEv>
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	4610      	mov	r0, r2
 800f8e8:	f7fc ff20 	bl	800c72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f8ec:	64f8      	str	r0, [r7, #76]	; 0x4c
    TFLITE_DCHECK(subgraph != nullptr);
 800f8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d101      	bne.n	800f8f8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x4c>
 800f8f4:	f015 faf7 	bl	8024ee6 <abort>

    auto* opcodes = model_->operator_codes();
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7ff fea9 	bl	800f654 <_ZNK6tflite5Model14operator_codesEv>
 800f902:	64b8      	str	r0, [r7, #72]	; 0x48
    BuiltinDataAllocator* builtin_data_allocator =
        allocator_.GetBuiltinDataAllocator();
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f908:	4618      	mov	r0, r3
 800f90a:	f7fe fe2c 	bl	800e566 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 800f90e:	6478      	str	r0, [r7, #68]	; 0x44
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 800f910:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f912:	f7fc fe9b 	bl	800c64c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800f916:	6438      	str	r0, [r7, #64]	; 0x40
    for (size_t i = 0; i < operators_size; ++i) {
 800f918:	2300      	movs	r3, #0
 800f91a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f91c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f91e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f920:	429a      	cmp	r2, r3
 800f922:	f080 815d 	bcs.w	800fbe0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x334>
      const auto* op = subgraph->operators()->Get(i);
 800f926:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f928:	f7fc fe74 	bl	800c614 <_ZNK6tflite8SubGraph9operatorsEv>
 800f92c:	4603      	mov	r3, r0
 800f92e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f930:	4618      	mov	r0, r3
 800f932:	f7fe ff61 	bl	800e7f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800f936:	63f8      	str	r0, [r7, #60]	; 0x3c
      const size_t index = op->opcode_index();
 800f938:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f93a:	f7ff fe60 	bl	800f5fe <_ZNK6tflite8Operator12opcode_indexEv>
 800f93e:	63b8      	str	r0, [r7, #56]	; 0x38
      if (index >= opcodes->size()) {
 800f940:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f942:	f000 fc26 	bl	8010192 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800f946:	4602      	mov	r2, r0
 800f948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94a:	4293      	cmp	r3, r2
 800f94c:	bf2c      	ite	cs
 800f94e:	2301      	movcs	r3, #1
 800f950:	2300      	movcc	r3, #0
 800f952:	b2db      	uxtb	r3, r3
 800f954:	2b00      	cmp	r3, #0
 800f956:	d005      	beq.n	800f964 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 800f958:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f95a:	48a6      	ldr	r0, [pc, #664]	; (800fbf4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x348>)
 800f95c:	f7ff fa68 	bl	800ee30 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800f960:	2301      	movs	r3, #1
 800f962:	e142      	b.n	800fbea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
      }
      const auto* opcode = opcodes->Get(index);
 800f964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f966:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f968:	f000 fc22 	bl	80101b0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 800f96c:	6378      	str	r0, [r7, #52]	; 0x34
      TfLiteStatus status =
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	461d      	mov	r5, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	689c      	ldr	r4, [r3, #8]
                                    &(graph_.GetAllocations()[subgraph_idx]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	336c      	adds	r3, #108	; 0x6c
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7ff fe83 	bl	800f688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f982:	4602      	mov	r2, r0
 800f984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f986:	00db      	lsls	r3, r3, #3
 800f988:	4413      	add	r3, r2
                                          .node_and_registrations[i]
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f98e:	212c      	movs	r1, #44	; 0x2c
 800f990:	fb01 f303 	mul.w	r3, r1, r3
 800f994:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 800f996:	3328      	adds	r3, #40	; 0x28
 800f998:	4622      	mov	r2, r4
 800f99a:	4629      	mov	r1, r5
 800f99c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f99e:	f7fb fa0f 	bl	800adc0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                                          .registration));
      if (status != kTfLiteOk) {
 800f9a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d00e      	beq.n	800f9ce <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
        MicroPrintf("Failed to get registration from op code %s\n ",
 800f9b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9b2:	f014 fff6 	bl	80249a2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fb f9bd 	bl	800ad38 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	488d      	ldr	r0, [pc, #564]	; (800fbf8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x34c>)
 800f9c4:	f7ff fa34 	bl	800ee30 <_Z11MicroPrintfPKcz>
                    EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
        return status;
 800f9c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f9cc:	e10d      	b.n	800fbea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
      }
      const auto* registration = graph_.GetAllocations()[subgraph_idx]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	336c      	adds	r3, #108	; 0x6c
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7ff fe58 	bl	800f688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f9d8:	4602      	mov	r2, r0
 800f9da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9dc:	00db      	lsls	r3, r3, #3
 800f9de:	4413      	add	r3, r2
                                     .node_and_registrations[i]
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9e4:	212c      	movs	r1, #44	; 0x2c
 800f9e6:	fb01 f303 	mul.w	r3, r1, r3
 800f9ea:	4413      	add	r3, r2
                                     .registration;
 800f9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (registration == nullptr) {
 800f9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d105      	bne.n	800fa02 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 800f9f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9f8:	4880      	ldr	r0, [pc, #512]	; (800fbfc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x350>)
 800f9fa:	f7ff fa19 	bl	800ee30 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	e0f3      	b.n	800fbea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
      }
      BuiltinOperator op_type =
          static_cast<BuiltinOperator>(registration->builtin_code);
 800fa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa04:	695b      	ldr	r3, [r3, #20]
      BuiltinOperator op_type =
 800fa06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

      const char* custom_data = nullptr;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	657b      	str	r3, [r7, #84]	; 0x54
      size_t custom_data_size = 0;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	653b      	str	r3, [r7, #80]	; 0x50
      unsigned char* builtin_data = nullptr;
 800fa12:	2300      	movs	r3, #0
 800fa14:	617b      	str	r3, [r7, #20]

      if (op_type == BuiltinOperator_CUSTOM) {
 800fa16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fa1a:	2b20      	cmp	r3, #32
 800fa1c:	d11b      	bne.n	800fa56 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1aa>
        // Custom Ops may or may not have a non-null custom_options field.
        if (op->custom_options() != nullptr) {
 800fa1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fa20:	f7ff fdfc 	bl	800f61c <_ZNK6tflite8Operator14custom_optionsEv>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	bf14      	ite	ne
 800fa2a:	2301      	movne	r3, #1
 800fa2c:	2300      	moveq	r3, #0
 800fa2e:	b2db      	uxtb	r3, r3
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d054      	beq.n	800fade <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x232>
          custom_data =
              reinterpret_cast<const char*>(op->custom_options()->data());
 800fa34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fa36:	f7ff fdf1 	bl	800f61c <_ZNK6tflite8Operator14custom_optionsEv>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7fe ff85 	bl	800e94c <_ZNK11flatbuffers6VectorIhE4dataEv>
 800fa42:	6578      	str	r0, [r7, #84]	; 0x54
          custom_data_size = op->custom_options()->size();
 800fa44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fa46:	f7ff fde9 	bl	800f61c <_ZNK6tflite8Operator14custom_optionsEv>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7fe fe24 	bl	800e69a <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800fa52:	6538      	str	r0, [r7, #80]	; 0x50
 800fa54:	e043      	b.n	800fade <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x232>
        }
      } else {
        if (op->custom_options() != nullptr) {
 800fa56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fa58:	f7ff fde0 	bl	800f61c <_ZNK6tflite8Operator14custom_optionsEv>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	bf14      	ite	ne
 800fa62:	2301      	movne	r3, #1
 800fa64:	2300      	moveq	r3, #0
 800fa66:	b2db      	uxtb	r3, r3
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d00b      	beq.n	800fa84 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>
          MicroPrintf(
 800fa6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7fb f961 	bl	800ad38 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800fa76:	4603      	mov	r3, r0
 800fa78:	4619      	mov	r1, r3
 800fa7a:	4861      	ldr	r0, [pc, #388]	; (800fc00 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x354>)
 800fa7c:	f7ff f9d8 	bl	800ee30 <_Z11MicroPrintfPKcz>
              "Unsupported behavior: found builtin operator %s with custom "
              "options.\n",
              EnumNameBuiltinOperator(op_type));
          return kTfLiteError;
 800fa80:	2301      	movs	r3, #1
 800fa82:	e0b2      	b.n	800fbea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
        }

        MicroOpResolver::BuiltinParseFunction parser =
            op_resolver_.GetOpDataParser(op_type);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	685a      	ldr	r2, [r3, #4]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	3324      	adds	r3, #36	; 0x24
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800fa96:	4610      	mov	r0, r2
 800fa98:	4798      	blx	r3
 800fa9a:	6278      	str	r0, [r7, #36]	; 0x24
        if (parser == nullptr) {
 800fa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d10b      	bne.n	800faba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x20e>
          MicroPrintf("Did not find a parser for %s",
 800faa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fb f946 	bl	800ad38 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800faac:	4603      	mov	r3, r0
 800faae:	4619      	mov	r1, r3
 800fab0:	4854      	ldr	r0, [pc, #336]	; (800fc04 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x358>)
 800fab2:	f7ff f9bd 	bl	800ee30 <_Z11MicroPrintfPKcz>
                      EnumNameBuiltinOperator(op_type));

          return kTfLiteError;
 800fab6:	2301      	movs	r3, #1
 800fab8:	e097      	b.n	800fbea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
        }
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6899      	ldr	r1, [r3, #8]
 800fabe:	f107 0314 	add.w	r3, r7, #20
 800fac2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800fac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fac6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fac8:	47a0      	blx	r4
 800faca:	4603      	mov	r3, r0
 800facc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fad0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d002      	beq.n	800fade <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x232>
 800fad8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fadc:	e085      	b.n	800fbea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
                                     builtin_data_allocator,
                                     (void**)(&builtin_data)));
      }

      TfLiteIntArray* inputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800fae2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fae4:	f7fd f90d 	bl	800cd02 <_ZNK6tflite8Operator6inputsEv>
 800fae8:	4601      	mov	r1, r0
 800faea:	f107 0310 	add.w	r3, r7, #16
 800faee:	461a      	mov	r2, r3
 800faf0:	4620      	mov	r0, r4
 800faf2:	f7fe fd25 	bl	800e540 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800faf6:	4603      	mov	r3, r0
 800faf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800fafc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d002      	beq.n	800fb0a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x25e>
 800fb04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fb08:	e06f      	b.n	800fbea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
          op->inputs(), &inputs_array));

      TfLiteIntArray* outputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800fb0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fb10:	f7fd f905 	bl	800cd1e <_ZNK6tflite8Operator7outputsEv>
 800fb14:	4601      	mov	r1, r0
 800fb16:	f107 030c 	add.w	r3, r7, #12
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	f7fe fd0f 	bl	800e540 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800fb22:	4603      	mov	r3, r0
 800fb24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800fb28:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d002      	beq.n	800fb36 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x28a>
 800fb30:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fb34:	e059      	b.n	800fbea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
          op->outputs(), &outputs_array));

      TfLiteNode* node = &(
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	336c      	adds	r3, #108	; 0x6c
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7ff fda4 	bl	800f688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800fb40:	4602      	mov	r2, r0
 800fb42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb44:	00db      	lsls	r3, r3, #3
 800fb46:	4413      	add	r3, r2
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb4c:	212c      	movs	r1, #44	; 0x2c
 800fb4e:	fb01 f303 	mul.w	r3, r1, r3
 800fb52:	4413      	add	r3, r2
 800fb54:	61fb      	str	r3, [r7, #28]
      *node = {};
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	4618      	mov	r0, r3
 800fb5a:	2328      	movs	r3, #40	; 0x28
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	2100      	movs	r1, #0
 800fb60:	f015 fa60 	bl	8025024 <memset>
      node->inputs = inputs_array;
 800fb64:	693a      	ldr	r2, [r7, #16]
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	601a      	str	r2, [r3, #0]
      node->outputs = outputs_array;
 800fb6a:	68fa      	ldr	r2, [r7, #12]
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	605a      	str	r2, [r3, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 800fb70:	697a      	ldr	r2, [r7, #20]
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	615a      	str	r2, [r3, #20]
      node->custom_initial_data = custom_data;
 800fb76:	69fb      	ldr	r3, [r7, #28]
 800fb78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fb7a:	619a      	str	r2, [r3, #24]
      node->custom_initial_data_size = custom_data_size;
 800fb7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	61da      	str	r2, [r3, #28]

      if (op->intermediates() && (op->intermediates()->size() > 0)) {
 800fb82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fb84:	f7ff fd58 	bl	800f638 <_ZNK6tflite8Operator13intermediatesEv>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00b      	beq.n	800fba6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2fa>
 800fb8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fb90:	f7ff fd52 	bl	800f638 <_ZNK6tflite8Operator13intermediatesEv>
 800fb94:	4603      	mov	r3, r0
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7f9 fe20 	bl	80097dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d001      	beq.n	800fba6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2fa>
 800fba2:	2301      	movs	r3, #1
 800fba4:	e000      	b.n	800fba8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2fc>
 800fba6:	2300      	movs	r3, #0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d015      	beq.n	800fbd8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x32c>
        TfLiteIntArray* intermediates_array;
        TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800fbb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fbb2:	f7ff fd41 	bl	800f638 <_ZNK6tflite8Operator13intermediatesEv>
 800fbb6:	4601      	mov	r1, r0
 800fbb8:	f107 0308 	add.w	r3, r7, #8
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	f7fe fcbe 	bl	800e540 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	76fb      	strb	r3, [r7, #27]
 800fbc8:	7efb      	ldrb	r3, [r7, #27]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d001      	beq.n	800fbd2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x326>
 800fbce:	7efb      	ldrb	r3, [r7, #27]
        return kTfLiteError;
 800fbd0:	e00b      	b.n	800fbea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
            op->intermediates(), &intermediates_array));
        node->intermediates = intermediates_array;
 800fbd2:	68ba      	ldr	r2, [r7, #8]
 800fbd4:	69fb      	ldr	r3, [r7, #28]
 800fbd6:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < operators_size; ++i) {
 800fbd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fbda:	3301      	adds	r3, #1
 800fbdc:	65bb      	str	r3, [r7, #88]	; 0x58
 800fbde:	e69d      	b.n	800f91c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x70>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800fbe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fbe6:	e667      	b.n	800f8b8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
      }
    }
  }
  return kTfLiteOk;
 800fbe8:	2300      	movs	r3, #0
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3760      	adds	r7, #96	; 0x60
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bdb0      	pop	{r4, r5, r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	0802981c 	.word	0x0802981c
 800fbf8:	08029848 	.word	0x08029848
 800fbfc:	08029878 	.word	0x08029878
 800fc00:	0802989c 	.word	0x0802989c
 800fc04:	080298e4 	.word	0x080298e4

0800fc08 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 800fc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc0c:	b088      	sub	sp, #32
 800fc0e:	af02      	add	r7, sp, #8
 800fc10:	6078      	str	r0, [r7, #4]
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	4610      	mov	r0, r2
 800fc1e:	f7fd febf 	bl	800d9a0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
 800fc22:	60f8      	str	r0, [r7, #12]

  if (allocations == nullptr) {
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d10b      	bne.n	800fc42 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	689b      	ldr	r3, [r3, #8]
 800fc2e:	49a4      	ldr	r1, [pc, #656]	; (800fec0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b8>)
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7f8 fe67 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2201      	movs	r2, #1
 800fc3a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
    return kTfLiteError;
 800fc3e:	2301      	movs	r3, #1
 800fc40:	e139      	b.n	800feb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  graph_.SetSubgraphAllocations(allocations);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	336c      	adds	r3, #108	; 0x6c
 800fc46:	68f9      	ldr	r1, [r7, #12]
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7ff fc38 	bl	800f4be <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>

  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f7ff fe2c 	bl	800f8ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 800fc54:	4603      	mov	r3, r0
 800fc56:	72fb      	strb	r3, [r7, #11]
 800fc58:	7afb      	ldrb	r3, [r7, #11]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d001      	beq.n	800fc62 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5a>
 800fc5e:	7afb      	ldrb	r3, [r7, #11]
 800fc60:	e129      	b.n	800feb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	4a97      	ldr	r2, [pc, #604]	; (800fec4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2bc>)
 800fc66:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2200      	movs	r2, #0
 800fc72:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	4a94      	ldr	r2, [pc, #592]	; (800fec8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>)
 800fc78:	611a      	str	r2, [r3, #16]
  graph_.InitSubgraphs();
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	336c      	adds	r3, #108	; 0x6c
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7ff f994 	bl	800efac <_ZN6tflite10MicroGraph13InitSubgraphsEv>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	4a91      	ldr	r2, [pc, #580]	; (800fecc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c4>)
 800fc88:	64da      	str	r2, [r3, #76]	; 0x4c
  graph_.PrepareSubgraphs();
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	336c      	adds	r3, #108	; 0x6c
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7ff f9fc 	bl	800f08c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2200      	movs	r2, #0
 800fc98:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	4a8b      	ldr	r2, [pc, #556]	; (800fed0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c8>)
 800fca4:	651a      	str	r2, [r3, #80]	; 0x50

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681d      	ldr	r5, [r3, #0]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	336c      	adds	r3, #108	; 0x6c
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7ff fce8 	bl	800f688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	3390      	adds	r3, #144	; 0x90
 800fcbe:	4629      	mov	r1, r5
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f7fd feef 	bl	800daa4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	72bb      	strb	r3, [r7, #10]
 800fcca:	7abb      	ldrb	r3, [r7, #10]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d001      	beq.n	800fcd4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xcc>
 800fcd0:	7abb      	ldrb	r3, [r7, #10]
 800fcd2:	e0f0      	b.n	800feb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
                                   &scratch_buffer_handles_));

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	330c      	adds	r3, #12
 800fce0:	681c      	ldr	r4, [r3, #0]
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f7ff fcdc 	bl	800f6a0 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800fce8:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	4619      	mov	r1, r3
 800fcee:	4628      	mov	r0, r5
 800fcf0:	47a0      	blx	r4
 800fcf2:	4602      	mov	r2, r0
  input_tensors_ =
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if (input_tensors_ == nullptr) {
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d10d      	bne.n	800fd20 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
    TF_LITE_REPORT_ERROR(
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	689c      	ldr	r4, [r3, #8]
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f7ff fcc9 	bl	800f6a0 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	009b      	lsls	r3, r3, #2
 800fd12:	461a      	mov	r2, r3
 800fd14:	496f      	ldr	r1, [pc, #444]	; (800fed4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2cc>)
 800fd16:	4620      	mov	r0, r4
 800fd18:	f7f8 fdf4 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
    return kTfLiteError;
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	e0ca      	b.n	800feb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < inputs_size(); ++i) {
 800fd20:	2300      	movs	r3, #0
 800fd22:	617b      	str	r3, [r7, #20]
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f7ff fcbb 	bl	800f6a0 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	bf34      	ite	cc
 800fd32:	2301      	movcc	r3, #1
 800fd34:	2300      	movcs	r3, #0
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d03c      	beq.n	800fdb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	681d      	ldr	r5, [r3, #0]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	336c      	adds	r3, #108	; 0x6c
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7ff fc98 	bl	800f688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800fd58:	4680      	mov	r8, r0
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f7ff fcbb 	bl	800f6d6 <_ZNK6tflite16MicroInterpreter6inputsEv>
 800fd60:	4603      	mov	r3, r0
 800fd62:	6979      	ldr	r1, [r7, #20]
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7f9 fd47 	bl	80097f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800fd6a:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	009b      	lsls	r3, r3, #2
 800fd76:	18d4      	adds	r4, r2, r3
 800fd78:	2300      	movs	r3, #0
 800fd7a:	9300      	str	r3, [sp, #0]
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	4642      	mov	r2, r8
 800fd80:	6839      	ldr	r1, [r7, #0]
 800fd82:	4630      	mov	r0, r6
 800fd84:	47a8      	blx	r5
 800fd86:	4603      	mov	r3, r0
 800fd88:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	009b      	lsls	r3, r3, #2
 800fd94:	4413      	add	r3, r2
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d108      	bne.n	800fdae <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a6>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	697a      	ldr	r2, [r7, #20]
 800fda2:	494d      	ldr	r1, [pc, #308]	; (800fed8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d0>)
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7f8 fdad 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize input tensor %d", i);
      return kTfLiteError;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	e083      	b.n	800feb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < inputs_size(); ++i) {
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	617b      	str	r3, [r7, #20]
 800fdb4:	e7b6      	b.n	800fd24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11c>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	330c      	adds	r3, #12
 800fdc2:	681c      	ldr	r4, [r3, #0]
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7ff fc9d 	bl	800f704 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800fdca:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	4619      	mov	r1, r3
 800fdd0:	4628      	mov	r0, r5
 800fdd2:	47a0      	blx	r4
 800fdd4:	4602      	mov	r2, r0
  output_tensors_ =
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  if (output_tensors_ == nullptr) {
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d10d      	bne.n	800fe02 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fa>
    TF_LITE_REPORT_ERROR(
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	689c      	ldr	r4, [r3, #8]
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f7ff fc8a 	bl	800f704 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	009b      	lsls	r3, r3, #2
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	4939      	ldr	r1, [pc, #228]	; (800fedc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d4>)
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f7f8 fd83 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
    return kTfLiteError;
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e059      	b.n	800feb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 800fe02:	2300      	movs	r3, #0
 800fe04:	613b      	str	r3, [r7, #16]
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7ff fc7c 	bl	800f704 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	4293      	cmp	r3, r2
 800fe12:	bf34      	ite	cc
 800fe14:	2301      	movcc	r3, #1
 800fe16:	2300      	movcs	r3, #0
 800fe18:	b2db      	uxtb	r3, r3
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d03c      	beq.n	800fe98 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x290>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	681d      	ldr	r5, [r3, #0]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	336c      	adds	r3, #108	; 0x6c
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7ff fc27 	bl	800f688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800fe3a:	4680      	mov	r8, r0
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f7ff fc7c 	bl	800f73a <_ZNK6tflite16MicroInterpreter7outputsEv>
 800fe42:	4603      	mov	r3, r0
 800fe44:	6939      	ldr	r1, [r7, #16]
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7f9 fcd6 	bl	80097f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800fe4c:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	18d4      	adds	r4, r2, r3
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	9300      	str	r3, [sp, #0]
 800fe5e:	460b      	mov	r3, r1
 800fe60:	4642      	mov	r2, r8
 800fe62:	6839      	ldr	r1, [r7, #0]
 800fe64:	4630      	mov	r0, r6
 800fe66:	47a8      	blx	r5
 800fe68:	4603      	mov	r3, r0
 800fe6a:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	4413      	add	r3, r2
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d108      	bne.n	800fe90 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x288>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	689b      	ldr	r3, [r3, #8]
 800fe82:	693a      	ldr	r2, [r7, #16]
 800fe84:	4916      	ldr	r1, [pc, #88]	; (800fee0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d8>)
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7f8 fd3c 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize output tensor %d", i);
      return kTfLiteError;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	e012      	b.n	800feb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < outputs_size(); ++i) {
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	3301      	adds	r3, #1
 800fe94:	613b      	str	r3, [r7, #16]
 800fe96:	e7b6      	b.n	800fe06 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fe>
    }
  }

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 f89d 	bl	800ffd8 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	727b      	strb	r3, [r7, #9]
 800fea2:	7a7b      	ldrb	r3, [r7, #9]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d001      	beq.n	800feac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a4>
 800fea8:	7a7b      	ldrb	r3, [r7, #9]
 800feaa:	e004      	b.n	800feb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  tensors_allocated_ = true;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2201      	movs	r2, #1
 800feb0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
  return kTfLiteOk;
 800feb4:	2300      	movs	r3, #0
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3718      	adds	r7, #24
 800feba:	46bd      	mov	sp, r7
 800febc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fec0:	08029904 	.word	0x08029904
 800fec4:	0800fff5 	.word	0x0800fff5
 800fec8:	0801014b 	.word	0x0801014b
 800fecc:	08010021 	.word	0x08010021
 800fed0:	08010057 	.word	0x08010057
 800fed4:	08029928 	.word	0x08029928
 800fed8:	08029974 	.word	0x08029974
 800fedc:	0802999c 	.word	0x0802999c
 800fee0:	080299e8 	.word	0x080299e8

0800fee4 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d007      	beq.n	800ff06 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	689b      	ldr	r3, [r3, #8]
 800fefa:	4912      	ldr	r1, [pc, #72]	; (800ff44 <_ZN6tflite16MicroInterpreter6InvokeEv+0x60>)
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7f8 fd01 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 800ff02:	2301      	movs	r3, #1
 800ff04:	e019      	b.n	800ff3a <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ff0c:	f083 0301 	eor.w	r3, r3, #1
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d009      	beq.n	800ff2a <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f7ff fe76 	bl	800fc08 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	73fb      	strb	r3, [r7, #15]
 800ff20:	7bfb      	ldrb	r3, [r7, #15]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d001      	beq.n	800ff2a <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 800ff26:	7bfb      	ldrb	r3, [r7, #15]
 800ff28:	e007      	b.n	800ff3a <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }
  return graph_.InvokeSubgraph(0);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	336c      	adds	r3, #108	; 0x6c
 800ff2e:	2100      	movs	r1, #0
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7ff f981 	bl	800f238 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
 800ff36:	4603      	mov	r3, r0
 800ff38:	bf00      	nop
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3710      	adds	r7, #16
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	08029a10 	.word	0x08029a10

0800ff48 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f7ff fba4 	bl	800f6a0 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800ff58:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800ff5a:	683a      	ldr	r2, [r7, #0]
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d308      	bcc.n	800ff74 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6898      	ldr	r0, [r3, #8]
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	683a      	ldr	r2, [r7, #0]
 800ff6a:	4908      	ldr	r1, [pc, #32]	; (800ff8c <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
 800ff6c:	f7f8 fcca 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800ff70:	2300      	movs	r3, #0
 800ff72:	e006      	b.n	800ff82 <_ZN6tflite16MicroInterpreter5inputEj+0x3a>
  }
  return input_tensors_[index];
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	4413      	add	r3, r2
 800ff80:	681b      	ldr	r3, [r3, #0]
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3710      	adds	r7, #16
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	08029a40 	.word	0x08029a40

0800ff90 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f7ff fbb2 	bl	800f704 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800ffa0:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800ffa2:	683a      	ldr	r2, [r7, #0]
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d308      	bcc.n	800ffbc <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6898      	ldr	r0, [r3, #8]
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	683a      	ldr	r2, [r7, #0]
 800ffb2:	4908      	ldr	r1, [pc, #32]	; (800ffd4 <_ZN6tflite16MicroInterpreter6outputEj+0x44>)
 800ffb4:	f7f8 fca6 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	e006      	b.n	800ffca <_ZN6tflite16MicroInterpreter6outputEj+0x3a>
  }
  return output_tensors_[index];
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	009b      	lsls	r3, r3, #2
 800ffc6:	4413      	add	r3, r2
 800ffc8:	681b      	ldr	r3, [r3, #0]
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3710      	adds	r7, #16
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	08029a6c 	.word	0x08029a6c

0800ffd8 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  return graph_.ResetVariableTensors();
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	336c      	adds	r3, #108	; 0x6c
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7ff f9c7 	bl	800f378 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
 800ffea:	4603      	mov	r3, r0
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 8010002:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 8010008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	330c      	adds	r3, #12
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	6839      	ldr	r1, [r7, #0]
 8010012:	4610      	mov	r0, r2
 8010014:	4798      	blx	r3
 8010016:	4603      	mov	r3, r0
}
 8010018:	4618      	mov	r0, r3
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus MicroInterpreter::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                           size_t bytes,
                                                           int* buffer_idx) {
 8010020:	b590      	push	{r4, r7, lr}
 8010022:	b087      	sub	sp, #28
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	607a      	str	r2, [r7, #4]
  MicroInterpreter* interpreter =
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	68db      	ldr	r3, [r3, #12]
 8010030:	617b      	str	r3, [r7, #20]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  return interpreter->allocator_.RequestScratchBufferInArena(
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	336c      	adds	r3, #108	; 0x6c
 801003a:	4618      	mov	r0, r3
 801003c:	f7ff fb18 	bl	800f670 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8010040:	4602      	mov	r2, r0
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	68b9      	ldr	r1, [r7, #8]
 8010046:	4620      	mov	r0, r4
 8010048:	f7fd fdc0 	bl	800dbcc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 801004c:	4603      	mov	r3, r0
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}
 801004e:	4618      	mov	r0, r3
 8010050:	371c      	adds	r7, #28
 8010052:	46bd      	mov	sp, r7
 8010054:	bd90      	pop	{r4, r7, pc}

08010056 <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 8010056:	b480      	push	{r7}
 8010058:	b085      	sub	sp, #20
 801005a:	af00      	add	r7, sp, #0
 801005c:	6078      	str	r0, [r7, #4]
 801005e:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	009b      	lsls	r3, r3, #2
  ScratchBufferHandle* handle =
 8010070:	4413      	add	r3, r2
 8010072:	60bb      	str	r3, [r7, #8]
  return handle->data;
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	681b      	ldr	r3, [r3, #0]
}
 8010078:	4618      	mov	r0, r3
 801007a:	3714      	adds	r7, #20
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr

08010084 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:

void MicroInterpreter::ReportOpError(struct TfLiteContext* context,
                                     const char* format, ...) {
 8010084:	b40e      	push	{r1, r2, r3}
 8010086:	b580      	push	{r7, lr}
 8010088:	b085      	sub	sp, #20
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  MicroInterpreter* interpreter =
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	68db      	ldr	r3, [r3, #12]
 8010092:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  va_list args;
  va_start(args, format);
 8010094:	f107 0320 	add.w	r3, r7, #32
 8010098:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	6898      	ldr	r0, [r3, #8]
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	689b      	ldr	r3, [r3, #8]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	3308      	adds	r3, #8
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	68ba      	ldr	r2, [r7, #8]
 80100aa:	69f9      	ldr	r1, [r7, #28]
 80100ac:	4798      	blx	r3
  va_end(args);
#endif
}
 80100ae:	bf00      	nop
 80100b0:	3714      	adds	r7, #20
 80100b2:	46bd      	mov	sp, r7
 80100b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80100b8:	b003      	add	sp, #12
 80100ba:	4770      	bx	lr

080100bc <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
 80100bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100c0:	b086      	sub	sp, #24
 80100c2:	af02      	add	r7, sp, #8
 80100c4:	6078      	str	r0, [r7, #4]
 80100c6:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	3304      	adds	r3, #4
 80100da:	681c      	ldr	r4, [r3, #0]
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681e      	ldr	r6, [r3, #0]
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	336c      	adds	r3, #108	; 0x6c
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7ff facf 	bl	800f688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80100ea:	4680      	mov	r8, r0
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 80100ec:	68f8      	ldr	r0, [r7, #12]
 80100ee:	f7ff fb3b 	bl	800f768 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 80100f2:	4603      	mov	r3, r0
 80100f4:	9300      	str	r3, [sp, #0]
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	4642      	mov	r2, r8
 80100fa:	4631      	mov	r1, r6
 80100fc:	4628      	mov	r0, r5
 80100fe:	47a0      	blx	r4
 8010100:	4603      	mov	r3, r0
}
 8010102:	4618      	mov	r0, r3
 8010104:	3710      	adds	r7, #16
 8010106:	46bd      	mov	sp, r7
 8010108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801010c <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 801010c:	b590      	push	{r4, r7, lr}
 801010e:	b085      	sub	sp, #20
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	68db      	ldr	r3, [r3, #12]
 801011a:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	336c      	adds	r3, #108	; 0x6c
 8010120:	4618      	mov	r0, r3
 8010122:	f7ff fab1 	bl	800f688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8010126:	4604      	mov	r4, r0
 8010128:	68f8      	ldr	r0, [r7, #12]
 801012a:	f7ff fb1d 	bl	800f768 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 801012e:	4603      	mov	r3, r0
 8010130:	00db      	lsls	r3, r3, #3
 8010132:	4423      	add	r3, r4
              .tensors[tensor_idx];
 8010134:	6859      	ldr	r1, [r3, #4]
 8010136:	683a      	ldr	r2, [r7, #0]
 8010138:	4613      	mov	r3, r2
 801013a:	005b      	lsls	r3, r3, #1
 801013c:	4413      	add	r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	440b      	add	r3, r1
}
 8010142:	4618      	mov	r0, r3
 8010144:	3714      	adds	r7, #20
 8010146:	46bd      	mov	sp, r7
 8010148:	bd90      	pop	{r4, r7, pc}

0801014a <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
 801014a:	b480      	push	{r7}
 801014c:	b085      	sub	sp, #20
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
 8010152:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8010164:	2300      	movs	r3, #0
}
 8010166:	4618      	mov	r0, r3
 8010168:	3714      	adds	r7, #20
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr

08010172 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8010172:	b580      	push	{r7, lr}
 8010174:	b082      	sub	sp, #8
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
 801017a:	460b      	mov	r3, r1
 801017c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 801017e:	887b      	ldrh	r3, [r7, #2]
 8010180:	4619      	mov	r1, r3
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 f83a 	bl	80101fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8010188:	4603      	mov	r3, r0
  }
 801018a:	4618      	mov	r0, r3
 801018c:	3708      	adds	r7, #8
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8010192:	b580      	push	{r7, lr}
 8010194:	b082      	sub	sp, #8
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	4618      	mov	r0, r3
 80101a0:	f7f9 fa1e 	bl	80095e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80101a4:	4603      	mov	r3, r0
 80101a6:	4618      	mov	r0, r3
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
	...

080101b0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f7ff ffe9 	bl	8010192 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 80101c0:	4602      	mov	r2, r0
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d306      	bcc.n	80101d6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 80101c8:	4b09      	ldr	r3, [pc, #36]	; (80101f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 80101ca:	4a0a      	ldr	r2, [pc, #40]	; (80101f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 80101cc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80101d0:	4809      	ldr	r0, [pc, #36]	; (80101f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 80101d2:	f014 fe8f 	bl	8024ef4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 f844 	bl	8010264 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 80101dc:	4603      	mov	r3, r0
 80101de:	6839      	ldr	r1, [r7, #0]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f000 f82b 	bl	801023c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 80101e6:	4603      	mov	r3, r0
  }
 80101e8:	4618      	mov	r0, r3
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	08029a98 	.word	0x08029a98
 80101f4:	08029cf4 	.word	0x08029cf4
 80101f8:	08029b74 	.word	0x08029b74

080101fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	460b      	mov	r3, r1
 8010206:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8010208:	887b      	ldrh	r3, [r7, #2]
 801020a:	4619      	mov	r1, r3
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f7f8 fbd5 	bl	80089bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8010212:	4603      	mov	r3, r0
 8010214:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	89fb      	ldrh	r3, [r7, #14]
 801021a:	4413      	add	r3, r2
 801021c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801021e:	89fb      	ldrh	r3, [r7, #14]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d006      	beq.n	8010232 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 8010224:	68b8      	ldr	r0, [r7, #8]
 8010226:	f7f9 fa00 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 801022a:	4602      	mov	r2, r0
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	4413      	add	r3, r2
                        : nullptr;
 8010230:	e000      	b.n	8010234 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8010232:	2300      	movs	r3, #0
  }
 8010234:	4618      	mov	r0, r3
 8010236:	3710      	adds	r7, #16
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}

0801023c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	009b      	lsls	r3, r3, #2
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	4413      	add	r3, r2
 801024e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7f9 f9ea 	bl	800962a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8010256:	4602      	mov	r2, r0
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	4413      	add	r3, r2
  }
 801025c:	4618      	mov	r0, r3
 801025e:	3708      	adds	r7, #8
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 8010264:	b480      	push	{r7}
 8010266:	b083      	sub	sp, #12
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	3304      	adds	r3, #4
  }
 8010270:	4618      	mov	r0, r3
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 801027c:	b480      	push	{r7}
 801027e:	b087      	sub	sp, #28
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	3b01      	subs	r3, #1
 801028e:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 8010290:	697a      	ldr	r2, [r7, #20]
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	429a      	cmp	r2, r3
 8010296:	d20e      	bcs.n	80102b6 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	1c5a      	adds	r2, r3, #1
 80102a2:	617a      	str	r2, [r7, #20]
 80102a4:	693a      	ldr	r2, [r7, #16]
 80102a6:	7812      	ldrb	r2, [r2, #0]
 80102a8:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	1e5a      	subs	r2, r3, #1
 80102ae:	613a      	str	r2, [r7, #16]
 80102b0:	7bfa      	ldrb	r2, [r7, #15]
 80102b2:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 80102b4:	e7ec      	b.n	8010290 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 80102b6:	687b      	ldr	r3, [r7, #4]
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	371c      	adds	r7, #28
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr

080102c4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 80102c4:	b480      	push	{r7}
 80102c6:	b087      	sub	sp, #28
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	607a      	str	r2, [r7, #4]
  char* current = main;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d003      	beq.n	80102e4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	3301      	adds	r3, #1
 80102e0:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 80102e2:	e7f7      	b.n	80102d4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	3b01      	subs	r3, #1
 80102e8:	68fa      	ldr	r2, [r7, #12]
 80102ea:	4413      	add	r3, r2
 80102ec:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00e      	beq.n	8010314 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 80102f6:	697a      	ldr	r2, [r7, #20]
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d20a      	bcs.n	8010314 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	781a      	ldrb	r2, [r3, #0]
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	701a      	strb	r2, [r3, #0]
    ++current;
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	3301      	adds	r3, #1
 801030a:	617b      	str	r3, [r7, #20]
    ++to_append;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	3301      	adds	r3, #1
 8010310:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 8010312:	e7ec      	b.n	80102ee <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	2200      	movs	r2, #0
 8010318:	701a      	strb	r2, [r3, #0]
  return current;
 801031a:	697b      	ldr	r3, [r7, #20]
}
 801031c:	4618      	mov	r0, r3
 801031e:	371c      	adds	r7, #28
 8010320:	46bd      	mov	sp, r7
 8010322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010326:	4770      	bx	lr

08010328 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 8010328:	b580      	push	{r7, lr}
 801032a:	b088      	sub	sp, #32
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 8010338:	687a      	ldr	r2, [r7, #4]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010340:	fb02 f201 	mul.w	r2, r2, r1
 8010344:	1a9b      	subs	r3, r3, r2
 8010346:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	2b09      	cmp	r3, #9
 801034c:	dc04      	bgt.n	8010358 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	b2db      	uxtb	r3, r3
 8010352:	3330      	adds	r3, #48	; 0x30
 8010354:	77fb      	strb	r3, [r7, #31]
 8010356:	e003      	b.n	8010360 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	b2db      	uxtb	r3, r3
 801035c:	3357      	adds	r3, #87	; 0x57
 801035e:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	1c5a      	adds	r2, r3, #1
 8010364:	60ba      	str	r2, [r7, #8]
 8010366:	7ffa      	ldrb	r2, [r7, #31]
 8010368:	701a      	strb	r2, [r3, #0]
    i /= base;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	68fa      	ldr	r2, [r7, #12]
 801036e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010372:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d000      	beq.n	801037c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 801037a:	e7dd      	b.n	8010338 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	2200      	movs	r2, #0
 8010380:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 8010382:	68b9      	ldr	r1, [r7, #8]
 8010384:	69b8      	ldr	r0, [r7, #24]
 8010386:	f7ff ff79 	bl	801027c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 801038a:	68bb      	ldr	r3, [r7, #8]
}
 801038c:	4618      	mov	r0, r3
 801038e:	3720      	adds	r7, #32
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 8010394:	b580      	push	{r7, lr}
 8010396:	b084      	sub	sp, #16
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	da07      	bge.n	80103b8 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	1c5a      	adds	r2, r3, #1
 80103ac:	603a      	str	r2, [r7, #0]
 80103ae:	222d      	movs	r2, #45	; 0x2d
 80103b0:	701a      	strb	r2, [r3, #0]
    u = -u;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	425b      	negs	r3, r3
 80103b6:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 80103b8:	220a      	movs	r2, #10
 80103ba:	6839      	ldr	r1, [r7, #0]
 80103bc:	68f8      	ldr	r0, [r7, #12]
 80103be:	f7ff ffb3 	bl	8010328 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 80103c2:	4603      	mov	r3, r0
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3710      	adds	r7, #16
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b090      	sub	sp, #64	; 0x40
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	60f8      	str	r0, [r7, #12]
 80103d4:	60b9      	str	r1, [r7, #8]
 80103d6:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 80103d8:	f107 0310 	add.w	r3, r7, #16
 80103dc:	4619      	mov	r1, r3
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f7ff ffd8 	bl	8010394 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 80103e4:	f107 0310 	add.w	r3, r7, #16
 80103e8:	461a      	mov	r2, r3
 80103ea:	68b9      	ldr	r1, [r7, #8]
 80103ec:	68f8      	ldr	r0, [r7, #12]
 80103ee:	f7ff ff69 	bl	80102c4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80103f2:	4603      	mov	r3, r0
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3740      	adds	r7, #64	; 0x40
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b090      	sub	sp, #64	; 0x40
 8010400:	af00      	add	r7, sp, #0
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	60b9      	str	r1, [r7, #8]
 8010406:	607a      	str	r2, [r7, #4]
 8010408:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 801040a:	f107 0310 	add.w	r3, r7, #16
 801040e:	683a      	ldr	r2, [r7, #0]
 8010410:	4619      	mov	r1, r3
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f7ff ff88 	bl	8010328 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 8010418:	f107 0310 	add.w	r3, r7, #16
 801041c:	461a      	mov	r2, r3
 801041e:	68b9      	ldr	r1, [r7, #8]
 8010420:	68f8      	ldr	r0, [r7, #12]
 8010422:	f7ff ff4f 	bl	80102c4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8010426:	4603      	mov	r3, r0
}
 8010428:	4618      	mov	r0, r3
 801042a:	3740      	adds	r7, #64	; 0x40
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 8010430:	b590      	push	{r4, r7, lr}
 8010432:	b09b      	sub	sp, #108	; 0x6c
 8010434:	af00      	add	r7, sp, #0
 8010436:	ed87 0a01 	vstr	s0, [r7, #4]
 801043a:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	332f      	adds	r3, #47	; 0x2f
 8010444:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 8010446:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801044a:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 801044c:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8010450:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 8010452:	2317      	movs	r3, #23
 8010454:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 8010456:	237f      	movs	r3, #127	; 0x7f
 8010458:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 801045a:	4b6a      	ldr	r3, [pc, #424]	; (8010604 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 801045c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801045e:	687b      	ldr	r3, [r7, #4]
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 8010460:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 8010462:	69fb      	ldr	r3, [r7, #28]
 8010464:	0ddb      	lsrs	r3, r3, #23
 8010466:	b2db      	uxtb	r3, r3
 8010468:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 801046a:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010472:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	2b00      	cmp	r3, #0
 8010478:	da05      	bge.n	8010486 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 801047a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801047c:	222d      	movs	r2, #45	; 0x2d
 801047e:	701a      	strb	r2, [r3, #0]
    current += 1;
 8010480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010482:	3301      	adds	r3, #1
 8010484:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 8010486:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010488:	2200      	movs	r2, #0
 801048a:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 801048c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048e:	2b80      	cmp	r3, #128	; 0x80
 8010490:	d118      	bne.n	80104c4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 8010492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010494:	2b00      	cmp	r3, #0
 8010496:	d10a      	bne.n	80104ae <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 8010498:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801049a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801049c:	1ad3      	subs	r3, r2, r3
 801049e:	4a5a      	ldr	r2, [pc, #360]	; (8010608 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 80104a0:	4619      	mov	r1, r3
 80104a2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80104a4:	f7ff ff0e 	bl	80102c4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80104a8:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 80104aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104ac:	e0a5      	b.n	80105fa <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 80104ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80104b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104b2:	1ad3      	subs	r3, r2, r3
 80104b4:	4a55      	ldr	r2, [pc, #340]	; (801060c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 80104b6:	4619      	mov	r1, r3
 80104b8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80104ba:	f7ff ff03 	bl	80102c4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80104be:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 80104c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104c2:	e09a      	b.n	80105fa <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 80104c4:	230d      	movs	r3, #13
 80104c6:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 80104c8:	4b51      	ldr	r3, [pc, #324]	; (8010610 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 80104ca:	f107 040c 	add.w	r4, r7, #12
 80104ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80104d0:	c407      	stmia	r4!, {r0, r1, r2}
 80104d2:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 80104d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104d6:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 80104d8:	2300      	movs	r3, #0
 80104da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80104dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104de:	2b0c      	cmp	r3, #12
 80104e0:	dc0f      	bgt.n	8010502 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 80104e2:	f107 020c 	add.w	r2, r7, #12
 80104e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104e8:	4413      	add	r3, r2
 80104ea:	f993 3000 	ldrsb.w	r3, [r3]
 80104ee:	461a      	mov	r2, r3
 80104f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104f2:	40d3      	lsrs	r3, r2
 80104f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80104f6:	4413      	add	r3, r2
 80104f8:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 80104fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104fc:	3301      	adds	r3, #1
 80104fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010500:	e7ec      	b.n	80104dc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 8010502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010504:	2231      	movs	r2, #49	; 0x31
 8010506:	701a      	strb	r2, [r3, #0]
  current += 1;
 8010508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801050a:	3301      	adds	r3, #1
 801050c:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 801050e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010510:	222e      	movs	r2, #46	; 0x2e
 8010512:	701a      	strb	r2, [r3, #0]
  current += 1;
 8010514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010516:	3301      	adds	r3, #1
 8010518:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 801051a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801051c:	2200      	movs	r2, #0
 801051e:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 8010520:	2307      	movs	r3, #7
 8010522:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 8010524:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010528:	1ad3      	subs	r3, r2, r3
 801052a:	2b07      	cmp	r3, #7
 801052c:	dc01      	bgt.n	8010532 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 801052e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010530:	e063      	b.n	80105fa <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 8010532:	2301      	movs	r3, #1
 8010534:	65bb      	str	r3, [r7, #88]	; 0x58
 8010536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010538:	2b06      	cmp	r3, #6
 801053a:	dc08      	bgt.n	801054e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 801053c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801053e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010540:	4413      	add	r3, r2
 8010542:	2230      	movs	r2, #48	; 0x30
 8010544:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 8010546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010548:	3301      	adds	r3, #1
 801054a:	65bb      	str	r3, [r7, #88]	; 0x58
 801054c:	e7f3      	b.n	8010536 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 801054e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010550:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 8010552:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010556:	1ad1      	subs	r1, r2, r3
 8010558:	230a      	movs	r3, #10
 801055a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801055c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801055e:	f7ff ff4d 	bl	80103fc <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 8010562:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 8010564:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010568:	1ad3      	subs	r3, r2, r3
 801056a:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 801056c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056e:	f1c3 0307 	rsb	r3, r3, #7
 8010572:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 8010574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010576:	2230      	movs	r2, #48	; 0x30
 8010578:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 801057a:	6a3b      	ldr	r3, [r7, #32]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d018      	beq.n	80105b2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 8010580:	2300      	movs	r3, #0
 8010582:	657b      	str	r3, [r7, #84]	; 0x54
 8010584:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010588:	429a      	cmp	r2, r3
 801058a:	da0f      	bge.n	80105ac <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 801058c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801058e:	3b01      	subs	r3, #1
 8010590:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 8010592:	6a3b      	ldr	r3, [r7, #32]
 8010594:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010596:	4413      	add	r3, r2
 8010598:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801059a:	7812      	ldrb	r2, [r2, #0]
 801059c:	701a      	strb	r2, [r3, #0]
      *current = '0';
 801059e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105a0:	2230      	movs	r2, #48	; 0x30
 80105a2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 80105a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105a6:	3301      	adds	r3, #1
 80105a8:	657b      	str	r3, [r7, #84]	; 0x54
 80105aa:	e7eb      	b.n	8010584 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 80105ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105ae:	3307      	adds	r3, #7
 80105b0:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 80105b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105b4:	3b01      	subs	r3, #1
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	2b30      	cmp	r3, #48	; 0x30
 80105ba:	d108      	bne.n	80105ce <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 80105bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105be:	3b01      	subs	r3, #1
 80105c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d203      	bcs.n	80105ce <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 80105c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105c8:	3b01      	subs	r3, #1
 80105ca:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 80105cc:	e7f1      	b.n	80105b2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 80105ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105d0:	2200      	movs	r2, #0
 80105d2:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 80105d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80105d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105d8:	1ad3      	subs	r3, r2, r3
 80105da:	4a0e      	ldr	r2, [pc, #56]	; (8010614 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 80105dc:	4619      	mov	r1, r3
 80105de:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80105e0:	f7ff fe70 	bl	80102c4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80105e4:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 80105e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80105e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105ea:	1ad3      	subs	r3, r2, r3
 80105ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105ee:	4619      	mov	r1, r3
 80105f0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80105f2:	f7ff feeb 	bl	80103cc <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 80105f6:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 80105f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	376c      	adds	r7, #108	; 0x6c
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd90      	pop	{r4, r7, pc}
 8010602:	bf00      	nop
 8010604:	007fffff 	.word	0x007fffff
 8010608:	08029ef4 	.word	0x08029ef4
 801060c:	08029ef8 	.word	0x08029ef8
 8010610:	08029f00 	.word	0x08029f00
 8010614:	08029efc 	.word	0x08029efc

08010618 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 8010622:	6879      	ldr	r1, [r7, #4]
 8010624:	6838      	ldr	r0, [r7, #0]
 8010626:	f7ff feb5 	bl	8010394 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 801062a:	4602      	mov	r2, r0
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	1ad3      	subs	r3, r2, r3
}
 8010630:	4618      	mov	r0, r3
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 8010642:	220a      	movs	r2, #10
 8010644:	6879      	ldr	r1, [r7, #4]
 8010646:	6838      	ldr	r0, [r7, #0]
 8010648:	f7ff fe6e 	bl	8010328 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 801064c:	4602      	mov	r2, r0
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	1ad3      	subs	r3, r2, r3
}
 8010652:	4618      	mov	r0, r3
 8010654:	3708      	adds	r7, #8
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 801065a:	b580      	push	{r7, lr}
 801065c:	b082      	sub	sp, #8
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
 8010662:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 8010664:	2210      	movs	r2, #16
 8010666:	6879      	ldr	r1, [r7, #4]
 8010668:	6838      	ldr	r0, [r7, #0]
 801066a:	f7ff fe5d 	bl	8010328 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 801066e:	4602      	mov	r2, r0
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	1ad3      	subs	r3, r2, r3
}
 8010674:	4618      	mov	r0, r3
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}

0801067c <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	ed97 0a00 	vldr	s0, [r7]
 801068e:	f7ff fecf 	bl	8010430 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 8010692:	4602      	mov	r2, r0
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	1ad3      	subs	r3, r2, r3
}
 8010698:	4618      	mov	r0, r3
 801069a:	3708      	adds	r7, #8
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 80106a0:	b590      	push	{r4, r7, lr}
 80106a2:	b08b      	sub	sp, #44	; 0x2c
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60f8      	str	r0, [r7, #12]
 80106a8:	60b9      	str	r1, [r7, #8]
 80106aa:	607a      	str	r2, [r7, #4]
 80106ac:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	3b01      	subs	r3, #1
 80106ba:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 80106bc:	6a3b      	ldr	r3, [r7, #32]
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	f000 8151 	beq.w	8010968 <MicroVsnprintf+0x2c8>
 80106c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	429a      	cmp	r2, r3
 80106cc:	f280 814c 	bge.w	8010968 <MicroVsnprintf+0x2c8>
    if (*current == '%') {
 80106d0:	6a3b      	ldr	r3, [r7, #32]
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	2b25      	cmp	r3, #37	; 0x25
 80106d6:	f040 813b 	bne.w	8010950 <MicroVsnprintf+0x2b0>
      current++;
 80106da:	6a3b      	ldr	r3, [r7, #32]
 80106dc:	3301      	adds	r3, #1
 80106de:	623b      	str	r3, [r7, #32]
      switch (*current) {
 80106e0:	6a3b      	ldr	r3, [r7, #32]
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	2b25      	cmp	r3, #37	; 0x25
 80106e6:	f000 80e2 	beq.w	80108ae <MicroVsnprintf+0x20e>
 80106ea:	2b25      	cmp	r3, #37	; 0x25
 80106ec:	dbe6      	blt.n	80106bc <MicroVsnprintf+0x1c>
 80106ee:	2b78      	cmp	r3, #120	; 0x78
 80106f0:	dce4      	bgt.n	80106bc <MicroVsnprintf+0x1c>
 80106f2:	2b63      	cmp	r3, #99	; 0x63
 80106f4:	dbe2      	blt.n	80106bc <MicroVsnprintf+0x1c>
 80106f6:	3b63      	subs	r3, #99	; 0x63
 80106f8:	2b15      	cmp	r3, #21
 80106fa:	d8df      	bhi.n	80106bc <MicroVsnprintf+0x1c>
 80106fc:	a201      	add	r2, pc, #4	; (adr r2, 8010704 <MicroVsnprintf+0x64>)
 80106fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010702:	bf00      	nop
 8010704:	080108c7 	.word	0x080108c7
 8010708:	0801075d 	.word	0x0801075d
 801070c:	080106bd 	.word	0x080106bd
 8010710:	08010843 	.word	0x08010843
 8010714:	080106bd 	.word	0x080106bd
 8010718:	080106bd 	.word	0x080106bd
 801071c:	080106bd 	.word	0x080106bd
 8010720:	080106bd 	.word	0x080106bd
 8010724:	080106bd 	.word	0x080106bd
 8010728:	080106bd 	.word	0x080106bd
 801072c:	080106bd 	.word	0x080106bd
 8010730:	080106bd 	.word	0x080106bd
 8010734:	080106bd 	.word	0x080106bd
 8010738:	080106bd 	.word	0x080106bd
 801073c:	080106bd 	.word	0x080106bd
 8010740:	080106bd 	.word	0x080106bd
 8010744:	08010905 	.word	0x08010905
 8010748:	080106bd 	.word	0x080106bd
 801074c:	0801079f 	.word	0x0801079f
 8010750:	080106bd 	.word	0x080106bd
 8010754:	080106bd 	.word	0x080106bd
 8010758:	080107e1 	.word	0x080107e1
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 801075c:	69ba      	ldr	r2, [r7, #24]
 801075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010760:	1ad3      	subs	r3, r2, r3
 8010762:	2b0a      	cmp	r3, #10
 8010764:	dc09      	bgt.n	801077a <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
 8010766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010768:	1c5a      	adds	r2, r3, #1
 801076a:	627a      	str	r2, [r7, #36]	; 0x24
 801076c:	461a      	mov	r2, r3
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	4413      	add	r3, r2
 8010772:	2200      	movs	r2, #0
 8010774:	701a      	strb	r2, [r3, #0]
            return output_index;
 8010776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010778:	e0ff      	b.n	801097a <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 801077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801077c:	68fa      	ldr	r2, [r7, #12]
 801077e:	18d0      	adds	r0, r2, r3
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	1d1a      	adds	r2, r3, #4
 8010784:	603a      	str	r2, [r7, #0]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	4619      	mov	r1, r3
 801078a:	f7ff ff45 	bl	8010618 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 801078e:	4602      	mov	r2, r0
          output_index +=
 8010790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010792:	4413      	add	r3, r2
 8010794:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8010796:	6a3b      	ldr	r3, [r7, #32]
 8010798:	3301      	adds	r3, #1
 801079a:	623b      	str	r3, [r7, #32]
          break;
 801079c:	e0e3      	b.n	8010966 <MicroVsnprintf+0x2c6>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 801079e:	69ba      	ldr	r2, [r7, #24]
 80107a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a2:	1ad3      	subs	r3, r2, r3
 80107a4:	2b0a      	cmp	r3, #10
 80107a6:	dc09      	bgt.n	80107bc <MicroVsnprintf+0x11c>
            output[output_index++] = '\0';
 80107a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107aa:	1c5a      	adds	r2, r3, #1
 80107ac:	627a      	str	r2, [r7, #36]	; 0x24
 80107ae:	461a      	mov	r2, r3
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	4413      	add	r3, r2
 80107b4:	2200      	movs	r2, #0
 80107b6:	701a      	strb	r2, [r3, #0]
            return output_index;
 80107b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ba:	e0de      	b.n	801097a <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 80107bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107be:	68fa      	ldr	r2, [r7, #12]
 80107c0:	18d0      	adds	r0, r2, r3
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	1d1a      	adds	r2, r3, #4
 80107c6:	603a      	str	r2, [r7, #0]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	4619      	mov	r1, r3
 80107cc:	f7ff ff34 	bl	8010638 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 80107d0:	4602      	mov	r2, r0
          output_index +=
 80107d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d4:	4413      	add	r3, r2
 80107d6:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80107d8:	6a3b      	ldr	r3, [r7, #32]
 80107da:	3301      	adds	r3, #1
 80107dc:	623b      	str	r3, [r7, #32]
          break;
 80107de:	e0c2      	b.n	8010966 <MicroVsnprintf+0x2c6>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 80107e0:	69ba      	ldr	r2, [r7, #24]
 80107e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e4:	1ad3      	subs	r3, r2, r3
 80107e6:	2b09      	cmp	r3, #9
 80107e8:	dc09      	bgt.n	80107fe <MicroVsnprintf+0x15e>
            output[output_index++] = '\0';
 80107ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ec:	1c5a      	adds	r2, r3, #1
 80107ee:	627a      	str	r2, [r7, #36]	; 0x24
 80107f0:	461a      	mov	r2, r3
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	4413      	add	r3, r2
 80107f6:	2200      	movs	r2, #0
 80107f8:	701a      	strb	r2, [r3, #0]
            return output_index;
 80107fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107fc:	e0bd      	b.n	801097a <MicroVsnprintf+0x2da>
          }
          output[output_index++] = '0';
 80107fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010800:	1c5a      	adds	r2, r3, #1
 8010802:	627a      	str	r2, [r7, #36]	; 0x24
 8010804:	461a      	mov	r2, r3
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	4413      	add	r3, r2
 801080a:	2230      	movs	r2, #48	; 0x30
 801080c:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 801080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010810:	1c5a      	adds	r2, r3, #1
 8010812:	627a      	str	r2, [r7, #36]	; 0x24
 8010814:	461a      	mov	r2, r3
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	4413      	add	r3, r2
 801081a:	2278      	movs	r2, #120	; 0x78
 801081c:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 801081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010820:	68fa      	ldr	r2, [r7, #12]
 8010822:	18d0      	adds	r0, r2, r3
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	1d1a      	adds	r2, r3, #4
 8010828:	603a      	str	r2, [r7, #0]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4619      	mov	r1, r3
 801082e:	f7ff ff14 	bl	801065a <_ZN12_GLOBAL__N_19FormatHexEPcm>
 8010832:	4602      	mov	r2, r0
          output_index +=
 8010834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010836:	4413      	add	r3, r2
 8010838:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 801083a:	6a3b      	ldr	r3, [r7, #32]
 801083c:	3301      	adds	r3, #1
 801083e:	623b      	str	r3, [r7, #32]
          break;
 8010840:	e091      	b.n	8010966 <MicroVsnprintf+0x2c6>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 8010842:	69ba      	ldr	r2, [r7, #24]
 8010844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010846:	1ad3      	subs	r3, r2, r3
 8010848:	ee07 3a90 	vmov	s15, r3
 801084c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010850:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8010854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801085c:	d509      	bpl.n	8010872 <MicroVsnprintf+0x1d2>
            output[output_index++] = '\0';
 801085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010860:	1c5a      	adds	r2, r3, #1
 8010862:	627a      	str	r2, [r7, #36]	; 0x24
 8010864:	461a      	mov	r2, r3
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	4413      	add	r3, r2
 801086a:	2200      	movs	r2, #0
 801086c:	701a      	strb	r2, [r3, #0]
            return output_index;
 801086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010870:	e083      	b.n	801097a <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 8010872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010874:	68fa      	ldr	r2, [r7, #12]
 8010876:	18d4      	adds	r4, r2, r3
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	3307      	adds	r3, #7
 801087c:	f023 0307 	bic.w	r3, r3, #7
 8010880:	f103 0208 	add.w	r2, r3, #8
 8010884:	603a      	str	r2, [r7, #0]
 8010886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088a:	4610      	mov	r0, r2
 801088c:	4619      	mov	r1, r3
 801088e:	f7f0 f9a7 	bl	8000be0 <__aeabi_d2f>
 8010892:	4603      	mov	r3, r0
 8010894:	ee00 3a10 	vmov	s0, r3
 8010898:	4620      	mov	r0, r4
 801089a:	f7ff feef 	bl	801067c <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 801089e:	4602      	mov	r2, r0
          output_index +=
 80108a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a2:	4413      	add	r3, r2
 80108a4:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80108a6:	6a3b      	ldr	r3, [r7, #32]
 80108a8:	3301      	adds	r3, #1
 80108aa:	623b      	str	r3, [r7, #32]
          break;
 80108ac:	e05b      	b.n	8010966 <MicroVsnprintf+0x2c6>
        case '%':
          output[output_index++] = *current++;
 80108ae:	6a3b      	ldr	r3, [r7, #32]
 80108b0:	1c5a      	adds	r2, r3, #1
 80108b2:	623a      	str	r2, [r7, #32]
 80108b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108b6:	1c51      	adds	r1, r2, #1
 80108b8:	6279      	str	r1, [r7, #36]	; 0x24
 80108ba:	4611      	mov	r1, r2
 80108bc:	68fa      	ldr	r2, [r7, #12]
 80108be:	440a      	add	r2, r1
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	7013      	strb	r3, [r2, #0]
          break;
 80108c4:	e04f      	b.n	8010966 <MicroVsnprintf+0x2c6>
        case 'c':
          if (usable_length - output_index < 1) {
 80108c6:	69ba      	ldr	r2, [r7, #24]
 80108c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ca:	1ad3      	subs	r3, r2, r3
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	dc09      	bgt.n	80108e4 <MicroVsnprintf+0x244>
            output[output_index++] = '\0';
 80108d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d2:	1c5a      	adds	r2, r3, #1
 80108d4:	627a      	str	r2, [r7, #36]	; 0x24
 80108d6:	461a      	mov	r2, r3
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	4413      	add	r3, r2
 80108dc:	2200      	movs	r2, #0
 80108de:	701a      	strb	r2, [r3, #0]
            return output_index;
 80108e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e2:	e04a      	b.n	801097a <MicroVsnprintf+0x2da>
          }
          output[output_index++] = va_arg(args, int32_t);
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	1d1a      	adds	r2, r3, #4
 80108e8:	603a      	str	r2, [r7, #0]
 80108ea:	6819      	ldr	r1, [r3, #0]
 80108ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ee:	1c5a      	adds	r2, r3, #1
 80108f0:	627a      	str	r2, [r7, #36]	; 0x24
 80108f2:	461a      	mov	r2, r3
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	4413      	add	r3, r2
 80108f8:	b2ca      	uxtb	r2, r1
 80108fa:	701a      	strb	r2, [r3, #0]
          current++;
 80108fc:	6a3b      	ldr	r3, [r7, #32]
 80108fe:	3301      	adds	r3, #1
 8010900:	623b      	str	r3, [r7, #32]
          break;
 8010902:	e030      	b.n	8010966 <MicroVsnprintf+0x2c6>
        case 's':
          char* string = va_arg(args, char*);
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	1d1a      	adds	r2, r3, #4
 8010908:	603a      	str	r2, [r7, #0]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 801090e:	2300      	movs	r3, #0
 8010910:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 8010912:	69fa      	ldr	r2, [r7, #28]
 8010914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010916:	4413      	add	r3, r2
 8010918:	69ba      	ldr	r2, [r7, #24]
 801091a:	429a      	cmp	r2, r3
 801091c:	dd14      	ble.n	8010948 <MicroVsnprintf+0x2a8>
                 string[string_idx] != '\0') {
 801091e:	69fb      	ldr	r3, [r7, #28]
 8010920:	697a      	ldr	r2, [r7, #20]
 8010922:	4413      	add	r3, r2
 8010924:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 8010926:	2b00      	cmp	r3, #0
 8010928:	d00e      	beq.n	8010948 <MicroVsnprintf+0x2a8>
            output[output_index++] = string[string_idx++];
 801092a:	69fb      	ldr	r3, [r7, #28]
 801092c:	1c5a      	adds	r2, r3, #1
 801092e:	61fa      	str	r2, [r7, #28]
 8010930:	461a      	mov	r2, r3
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	441a      	add	r2, r3
 8010936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010938:	1c59      	adds	r1, r3, #1
 801093a:	6279      	str	r1, [r7, #36]	; 0x24
 801093c:	4619      	mov	r1, r3
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	440b      	add	r3, r1
 8010942:	7812      	ldrb	r2, [r2, #0]
 8010944:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 8010946:	e7e4      	b.n	8010912 <MicroVsnprintf+0x272>
          }
          current++;
 8010948:	6a3b      	ldr	r3, [r7, #32]
 801094a:	3301      	adds	r3, #1
 801094c:	623b      	str	r3, [r7, #32]
 801094e:	e6b5      	b.n	80106bc <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 8010950:	6a3b      	ldr	r3, [r7, #32]
 8010952:	1c5a      	adds	r2, r3, #1
 8010954:	623a      	str	r2, [r7, #32]
 8010956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010958:	1c51      	adds	r1, r2, #1
 801095a:	6279      	str	r1, [r7, #36]	; 0x24
 801095c:	4611      	mov	r1, r2
 801095e:	68fa      	ldr	r2, [r7, #12]
 8010960:	440a      	add	r2, r1
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 8010966:	e6a9      	b.n	80106bc <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 8010968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096a:	1c5a      	adds	r2, r3, #1
 801096c:	627a      	str	r2, [r7, #36]	; 0x24
 801096e:	461a      	mov	r2, r3
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	4413      	add	r3, r2
 8010974:	2200      	movs	r2, #0
 8010976:	701a      	strb	r2, [r3, #0]
  return output_index;
 8010978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801097a:	4618      	mov	r0, r3
 801097c:	372c      	adds	r7, #44	; 0x2c
 801097e:	46bd      	mov	sp, r7
 8010980:	bd90      	pop	{r4, r7, pc}
 8010982:	bf00      	nop

08010984 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/micro/memory_helpers.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 8010984:	b480      	push	{r7}
 8010986:	b085      	sub	sp, #20
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  int result = 1;
 801098c:	2301      	movs	r3, #1
 801098e:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 8010990:	2300      	movs	r3, #0
 8010992:	60bb      	str	r3, [r7, #8]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	68ba      	ldr	r2, [r7, #8]
 801099a:	429a      	cmp	r2, r3
 801099c:	da0c      	bge.n	80109b8 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 801099e:	687a      	ldr	r2, [r7, #4]
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	4413      	add	r3, r2
 80109a6:	685a      	ldr	r2, [r3, #4]
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	fb02 f303 	mul.w	r3, r2, r3
 80109ae:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	3301      	adds	r3, #1
 80109b4:	60bb      	str	r3, [r7, #8]
 80109b6:	e7ed      	b.n	8010994 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 80109b8:	68fb      	ldr	r3, [r7, #12]
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3714      	adds	r7, #20
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr
	...

080109c8 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 80109c8:	b480      	push	{r7}
 80109ca:	b083      	sub	sp, #12
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6039      	str	r1, [r7, #0]
 80109d2:	4a11      	ldr	r2, [pc, #68]	; (8010a18 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	601a      	str	r2, [r3, #0]
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	685a      	ldr	r2, [r3, #4]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	605a      	str	r2, [r3, #4]
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	689a      	ldr	r2, [r3, #8]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	609a      	str	r2, [r3, #8]
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	68da      	ldr	r2, [r3, #12]
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	60da      	str	r2, [r3, #12]
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	691a      	ldr	r2, [r3, #16]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	611a      	str	r2, [r3, #16]
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	695a      	ldr	r2, [r3, #20]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	615a      	str	r2, [r3, #20]
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	699a      	ldr	r2, [r3, #24]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	619a      	str	r2, [r3, #24]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	370c      	adds	r7, #12
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a14:	4770      	bx	lr
 8010a16:	bf00      	nop
 8010a18:	0802c7d0 	.word	0x0802c7d0

08010a1c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8010a1c:	b480      	push	{r7}
 8010a1e:	b085      	sub	sp, #20
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
 8010a28:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 8010a2a:	4a0e      	ldr	r2, [pc, #56]	; (8010a64 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	601a      	str	r2, [r3, #0]
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	68ba      	ldr	r2, [r7, #8]
 8010a34:	605a      	str	r2, [r3, #4]
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	609a      	str	r2, [r3, #8]
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	683a      	ldr	r2, [r7, #0]
 8010a40:	60da      	str	r2, [r3, #12]
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	687a      	ldr	r2, [r7, #4]
 8010a46:	611a      	str	r2, [r3, #16]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	683a      	ldr	r2, [r7, #0]
 8010a4c:	615a      	str	r2, [r3, #20]
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	689a      	ldr	r2, [r3, #8]
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	619a      	str	r2, [r3, #24]
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3714      	adds	r7, #20
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr
 8010a64:	0802c7d0 	.word	0x0802c7d0

08010a68 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	60b9      	str	r1, [r7, #8]
 8010a72:	607a      	str	r2, [r7, #4]
 8010a74:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 8010a76:	687a      	ldr	r2, [r7, #4]
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	4413      	add	r3, r2
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	68b9      	ldr	r1, [r7, #8]
 8010a80:	68f8      	ldr	r0, [r7, #12]
 8010a82:	f7ff ffcb 	bl	8010a1c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3710      	adds	r7, #16
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}

08010a90 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 8010a90:	b590      	push	{r4, r7, lr}
 8010a92:	b08d      	sub	sp, #52	; 0x34
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d101      	bne.n	8010aa6 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 8010aa2:	f014 fa20 	bl	8024ee6 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d101      	bne.n	8010ab0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 8010aac:	f014 fa1b 	bl	8024ee6 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8010ab0:	f107 0010 	add.w	r0, r7, #16
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	68ba      	ldr	r2, [r7, #8]
 8010ab8:	68f9      	ldr	r1, [r7, #12]
 8010aba:	f7ff ffd5 	bl	8010a68 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 8010abe:	f107 0310 	add.w	r3, r7, #16
 8010ac2:	2204      	movs	r2, #4
 8010ac4:	211c      	movs	r1, #28
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f000 f87c 	bl	8010bc4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 8010acc:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 8010ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	201c      	movs	r0, #28
 8010ad4:	f7f7 ff49 	bl	800896a <_ZnwjPv>
 8010ad8:	4604      	mov	r4, r0
 8010ada:	f107 0310 	add.w	r3, r7, #16
 8010ade:	4619      	mov	r1, r3
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	f7ff ff71 	bl	80109c8 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8010ae6:	f107 0310 	add.w	r3, r7, #16
 8010aea:	4618      	mov	r0, r3
 8010aec:	f000 f806 	bl	8010afc <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 8010af0:	4623      	mov	r3, r4
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3734      	adds	r7, #52	; 0x34
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd90      	pop	{r4, r7, pc}
	...

08010afc <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 8010afc:	b480      	push	{r7}
 8010afe:	b083      	sub	sp, #12
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	4a04      	ldr	r2, [pc, #16]	; (8010b18 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	601a      	str	r2, [r3, #0]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	370c      	adds	r7, #12
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr
 8010b18:	0802c7d0 	.word	0x0802c7d0

08010b1c <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b082      	sub	sp, #8
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	6878      	ldr	r0, [r7, #4]
 8010b26:	f7ff ffe9 	bl	8010afc <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8010b2a:	211c      	movs	r1, #28
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f013 ff70 	bl	8024a12 <_ZdlPvj>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	4618      	mov	r0, r3
 8010b36:	3708      	adds	r7, #8
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b088      	sub	sp, #32
 8010b40:	af02      	add	r7, sp, #8
 8010b42:	60f8      	str	r0, [r7, #12]
 8010b44:	60b9      	str	r1, [r7, #8]
 8010b46:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	691a      	ldr	r2, [r3, #16]
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	699b      	ldr	r3, [r3, #24]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d007      	beq.n	8010b64 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	4918      	ldr	r1, [pc, #96]	; (8010bbc <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7f7 fed2 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 8010b60:	2301      	movs	r3, #1
 8010b62:	e026      	b.n	8010bb2 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	689b      	ldr	r3, [r3, #8]
 8010b68:	6879      	ldr	r1, [r7, #4]
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fb ff0a 	bl	800c984 <_ZN6tflite14AlignPointerUpEPhj>
 8010b70:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	695a      	ldr	r2, [r3, #20]
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	1ad3      	subs	r3, r2, r3
 8010b7a:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8010b7c:	693a      	ldr	r2, [r7, #16]
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d20c      	bcs.n	8010b9e <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x62>
    TF_LITE_REPORT_ERROR(
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	6858      	ldr	r0, [r3, #4]
 8010b88:	68ba      	ldr	r2, [r7, #8]
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	1ad3      	subs	r3, r2, r3
 8010b8e:	9300      	str	r3, [sp, #0]
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	68ba      	ldr	r2, [r7, #8]
 8010b94:	490a      	ldr	r1, [pc, #40]	; (8010bc0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 8010b96:	f7f7 feb5 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	e009      	b.n	8010bb2 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }
  head_ = aligned_result + size;
 8010b9e:	697a      	ldr	r2, [r7, #20]
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	441a      	add	r2, r3
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	691a      	ldr	r2, [r3, #16]
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8010bb0:	2300      	movs	r3, #0
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3718      	adds	r7, #24
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	bf00      	nop
 8010bbc:	08029f24 	.word	0x08029f24
 8010bc0:	08029f7c 	.word	0x08029f7c

08010bc4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b088      	sub	sp, #32
 8010bc8:	af02      	add	r7, sp, #8
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	695a      	ldr	r2, [r3, #20]
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	425b      	negs	r3, r3
 8010bd8:	4413      	add	r3, r2
 8010bda:	6879      	ldr	r1, [r7, #4]
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7fb feea 	bl	800c9b6 <_ZN6tflite16AlignPointerDownEPhj>
 8010be2:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	691b      	ldr	r3, [r3, #16]
 8010be8:	697a      	ldr	r2, [r7, #20]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d212      	bcs.n	8010c14 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	691a      	ldr	r2, [r3, #16]
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	1ad3      	subs	r3, r2, r3
 8010bf6:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	6858      	ldr	r0, [r3, #4]
 8010bfc:	68ba      	ldr	r2, [r7, #8]
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	1ad2      	subs	r2, r2, r3
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	9300      	str	r3, [sp, #0]
 8010c06:	4613      	mov	r3, r2
 8010c08:	68ba      	ldr	r2, [r7, #8]
 8010c0a:	4906      	ldr	r1, [pc, #24]	; (8010c24 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 8010c0c:	f7f7 fe7a 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 8010c10:	2300      	movs	r3, #0
 8010c12:	e003      	b.n	8010c1c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	697a      	ldr	r2, [r7, #20]
 8010c18:	615a      	str	r2, [r3, #20]
  return aligned_result;
 8010c1a:	697b      	ldr	r3, [r7, #20]
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3718      	adds	r7, #24
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	08029fc0 	.word	0x08029fc0

08010c28 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b088      	sub	sp, #32
 8010c2c:	af02      	add	r7, sp, #8
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	699b      	ldr	r3, [r3, #24]
 8010c38:	6879      	ldr	r1, [r7, #4]
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7fb fea2 	bl	800c984 <_ZN6tflite14AlignPointerUpEPhj>
 8010c40:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	695a      	ldr	r2, [r3, #20]
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	1ad3      	subs	r3, r2, r3
 8010c4a:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8010c4c:	693a      	ldr	r2, [r7, #16]
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d20c      	bcs.n	8010c6e <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x46>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	6858      	ldr	r0, [r3, #4]
 8010c58:	68ba      	ldr	r2, [r7, #8]
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	1ad3      	subs	r3, r2, r3
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	68ba      	ldr	r2, [r7, #8]
 8010c64:	4907      	ldr	r1, [pc, #28]	; (8010c84 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 8010c66:	f7f7 fe4d 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	e005      	b.n	8010c7a <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x52>
  }
  temp_ = aligned_result + size;
 8010c6e:	697a      	ldr	r2, [r7, #20]
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	441a      	add	r2, r3
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	619a      	str	r2, [r3, #24]
  return aligned_result;
 8010c78:	697b      	ldr	r3, [r7, #20]
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3718      	adds	r7, #24
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop
 8010c84:	0802a00c 	.word	0x0802a00c

08010c88 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 8010c88:	b480      	push	{r7}
 8010c8a:	b083      	sub	sp, #12
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	691a      	ldr	r2, [r3, #16]
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	619a      	str	r2, [r3, #24]
 8010c98:	bf00      	nop
 8010c9a:	370c      	adds	r7, #12
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr

08010ca4 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 8010ca4:	b480      	push	{r7}
 8010ca6:	b083      	sub	sp, #12
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	689b      	ldr	r3, [r3, #8]
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	370c      	adds	r7, #12
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr

08010cbc <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b084      	sub	sp, #16
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	699b      	ldr	r3, [r3, #24]
 8010cca:	6839      	ldr	r1, [r7, #0]
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fb fe59 	bl	800c984 <_ZN6tflite14AlignPointerUpEPhj>
 8010cd2:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	695b      	ldr	r3, [r3, #20]
 8010cd8:	6839      	ldr	r1, [r7, #0]
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fb fe6b 	bl	800c9b6 <_ZN6tflite16AlignPointerDownEPhj>
 8010ce0:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 8010ce2:	68ba      	ldr	r2, [r7, #8]
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	1ad3      	subs	r3, r2, r3
}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	3710      	adds	r7, #16
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}

08010cf0 <_ZN6tflite16InitializeTargetEv>:
namespace tflite {

// To add an equivalent function for your own platform, create your own
// implementation file, and place it in a subfolder named after the target. See
// tensorflow/lite/micro/debug_log.cc for a similar example.
void InitializeTarget() {}
 8010cf0:	b480      	push	{r7}
 8010cf2:	af00      	add	r7, sp, #0
 8010cf4:	bf00      	nop
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfc:	4770      	bx	lr
	...

08010d00 <_ZN11flatbuffers11EndianCheckEv>:
inline void EndianCheck() {
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8010d06:	2301      	movs	r3, #1
 8010d08:	607b      	str	r3, [r7, #4]
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 8010d0a:	1d3b      	adds	r3, r7, #4
 8010d0c:	781b      	ldrb	r3, [r3, #0]
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d005      	beq.n	8010d1e <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8010d12:	4b05      	ldr	r3, [pc, #20]	; (8010d28 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8010d14:	4a05      	ldr	r2, [pc, #20]	; (8010d2c <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8010d16:	214e      	movs	r1, #78	; 0x4e
 8010d18:	4805      	ldr	r0, [pc, #20]	; (8010d30 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 8010d1a:	f014 f8eb 	bl	8024ef4 <__assert_func>
}
 8010d1e:	bf00      	nop
 8010d20:	3708      	adds	r7, #8
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	0802a058 	.word	0x0802a058
 8010d2c:	0802a09c 	.word	0x0802a09c
 8010d30:	0802a0bc 	.word	0x0802a0bc

08010d34 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 8010d34:	b480      	push	{r7}
 8010d36:	b087      	sub	sp, #28
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 8010d3c:	f04f 0201 	mov.w	r2, #1
 8010d40:	f04f 0300 	mov.w	r3, #0
 8010d44:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8010d48:	2300      	movs	r3, #0
 8010d4a:	60fb      	str	r3, [r7, #12]
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	68fa      	ldr	r2, [r7, #12]
 8010d52:	429a      	cmp	r2, r3
 8010d54:	da1b      	bge.n	8010d8e <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	009b      	lsls	r3, r3, #2
 8010d5c:	4413      	add	r3, r2
 8010d5e:	685b      	ldr	r3, [r3, #4]
 8010d60:	461a      	mov	r2, r3
 8010d62:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010d66:	6979      	ldr	r1, [r7, #20]
 8010d68:	fb02 f001 	mul.w	r0, r2, r1
 8010d6c:	6939      	ldr	r1, [r7, #16]
 8010d6e:	fb03 f101 	mul.w	r1, r3, r1
 8010d72:	4401      	add	r1, r0
 8010d74:	6938      	ldr	r0, [r7, #16]
 8010d76:	fba0 2302 	umull	r2, r3, r0, r2
 8010d7a:	4419      	add	r1, r3
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8010d82:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	3301      	adds	r3, #1
 8010d8a:	60fb      	str	r3, [r7, #12]
 8010d8c:	e7de      	b.n	8010d4c <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 8010d8e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8010d92:	4610      	mov	r0, r2
 8010d94:	4619      	mov	r1, r3
 8010d96:	371c      	adds	r7, #28
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr

08010da0 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f000 f805 	bl	8010db8 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8010dae:	4603      	mov	r3, r0
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3708      	adds	r7, #8
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}

08010db8 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b082      	sub	sp, #8
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8010dc0:	f7ff ff9e 	bl	8010d00 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7f8 fc09 	bl	80095e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	4413      	add	r3, r2
}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3708      	adds	r7, #8
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <DebugLog>:

void RegisterDebugLogCallback(void (*cb)(const char* s)) {
  debug_log_callback = cb;
}

void DebugLog(const char* s) {
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  if (debug_log_callback != nullptr) {
 8010de4:	4b05      	ldr	r3, [pc, #20]	; (8010dfc <DebugLog+0x20>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d003      	beq.n	8010df4 <DebugLog+0x18>
    debug_log_callback(s);
 8010dec:	4b03      	ldr	r3, [pc, #12]	; (8010dfc <DebugLog+0x20>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	4798      	blx	r3
  }
#endif
}
 8010df4:	bf00      	nop
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	20028050 	.word	0x20028050

08010e00 <_Z18RespondToDetectionPN6tflite13ErrorReporterEaa>:

// This dummy implementation writes person and no person scores to the error
// console. Real applications will want to take some custom action instead, and
// should implement their own versions of this function.
void RespondToDetection(tflite::ErrorReporter* error_reporter,
                        int8_t person_score, int8_t no_person_score) {
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	460b      	mov	r3, r1
 8010e0a:	70fb      	strb	r3, [r7, #3]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	70bb      	strb	r3, [r7, #2]
  TF_LITE_REPORT_ERROR(error_reporter, "person score:%d no person score %d",
 8010e10:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8010e14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010e18:	4903      	ldr	r1, [pc, #12]	; (8010e28 <_Z18RespondToDetectionPN6tflite13ErrorReporterEaa+0x28>)
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f7f7 fd72 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                       person_score, no_person_score);
}
 8010e20:	bf00      	nop
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	0802aa68 	.word	0x0802aa68

08010e2c <_Z8GetImagePN6tflite13ErrorReporterEiiiPa>:
#include "tensorflow/lite/micro/examples/person_detection/model_settings.h"

#include "app_main.h"

TfLiteStatus GetImage(tflite::ErrorReporter* error_reporter, int image_width,
                      int image_height, int channels, int8_t* image_data) {
 8010e2c:	b480      	push	{r7}
 8010e2e:	b087      	sub	sp, #28
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	60f8      	str	r0, [r7, #12]
 8010e34:	60b9      	str	r1, [r7, #8]
 8010e36:	607a      	str	r2, [r7, #4]
 8010e38:	603b      	str	r3, [r7, #0]
  for (int i = 0; i < image_width * image_height * channels; ++i) {
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	617b      	str	r3, [r7, #20]
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	687a      	ldr	r2, [r7, #4]
 8010e42:	fb02 f303 	mul.w	r3, r2, r3
 8010e46:	683a      	ldr	r2, [r7, #0]
 8010e48:	fb02 f303 	mul.w	r3, r2, r3
 8010e4c:	697a      	ldr	r2, [r7, #20]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	da0c      	bge.n	8010e6c <_Z8GetImagePN6tflite13ErrorReporterEiiiPa+0x40>
    image_data[i] = g_cam_gray_frame[i];
 8010e52:	4a0a      	ldr	r2, [pc, #40]	; (8010e7c <_Z8GetImagePN6tflite13ErrorReporterEiiiPa+0x50>)
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	4413      	add	r3, r2
 8010e58:	7819      	ldrb	r1, [r3, #0]
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	6a3a      	ldr	r2, [r7, #32]
 8010e5e:	4413      	add	r3, r2
 8010e60:	b24a      	sxtb	r2, r1
 8010e62:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < image_width * image_height * channels; ++i) {
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	3301      	adds	r3, #1
 8010e68:	617b      	str	r3, [r7, #20]
 8010e6a:	e7e8      	b.n	8010e3e <_Z8GetImagePN6tflite13ErrorReporterEiiiPa+0x12>
  }
  return kTfLiteOk;
 8010e6c:	2300      	movs	r3, #0
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	371c      	adds	r7, #28
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop
 8010e7c:	20025b38 	.word	0x20025b38

08010e80 <_ZNK6tflite5Model7versionEv>:
  uint32_t version() const {
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	2104      	movs	r1, #4
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7fd fba5 	bl	800e5de <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8010e94:	4603      	mov	r3, r0
  }
 8010e96:	4618      	mov	r0, r3
 8010e98:	3708      	adds	r7, #8
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}

08010e9e <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8010e9e:	b580      	push	{r7, lr}
 8010ea0:	b082      	sub	sp, #8
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f7ff ff7a 	bl	8010da0 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8010eac:	4603      	mov	r3, r0
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3708      	adds	r7, #8
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
	...

08010eb8 <__tcf_0>:
  tflite::InitializeTarget();

  // Set up logging. Google style is to avoid globals or statics because of
  // lifetime uncertainty, but since this has a trivial destructor it's okay.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroErrorReporter micro_error_reporter;
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	4801      	ldr	r0, [pc, #4]	; (8010ec4 <__tcf_0+0xc>)
 8010ebe:	f7fd ff75 	bl	800edac <_ZN6tflite18MicroErrorReporterD1Ev>
 8010ec2:	bd80      	pop	{r7, pc}
 8010ec4:	20000010 	.word	0x20000010

08010ec8 <__tcf_1>:
  // incur some penalty in code space for op implementations that are not
  // needed by this graph.
  //
  // tflite::AllOpsResolver resolver;
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	4801      	ldr	r0, [pc, #4]	; (8010ed4 <__tcf_1+0xc>)
 8010ece:	f000 faad 	bl	801142c <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>
 8010ed2:	bd80      	pop	{r7, pc}
 8010ed4:	20047868 	.word	0x20047868

08010ed8 <__tcf_2>:
  micro_op_resolver.AddSoftmax();

  // Build an interpreter to run the model with.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroInterpreter static_interpreter(
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	4801      	ldr	r0, [pc, #4]	; (8010ee4 <__tcf_2+0xc>)
 8010ede:	f7fe fc9b 	bl	800f818 <_ZN6tflite16MicroInterpreterD1Ev>
 8010ee2:	bd80      	pop	{r7, pc}
 8010ee4:	20047938 	.word	0x20047938

08010ee8 <setup>:
void setup() {
 8010ee8:	b590      	push	{r4, r7, lr}
 8010eea:	b097      	sub	sp, #92	; 0x5c
 8010eec:	af04      	add	r7, sp, #16
  tflite::InitializeTarget();
 8010eee:	f7ff feff 	bl	8010cf0 <_ZN6tflite16InitializeTargetEv>
  static tflite::MicroErrorReporter micro_error_reporter;
 8010ef2:	4b6a      	ldr	r3, [pc, #424]	; (801109c <setup+0x1b4>)
 8010ef4:	781b      	ldrb	r3, [r3, #0]
 8010ef6:	f3bf 8f5b 	dmb	ish
 8010efa:	b2db      	uxtb	r3, r3
 8010efc:	f003 0301 	and.w	r3, r3, #1
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	bf0c      	ite	eq
 8010f04:	2301      	moveq	r3, #1
 8010f06:	2300      	movne	r3, #0
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d010      	beq.n	8010f30 <setup+0x48>
 8010f0e:	4863      	ldr	r0, [pc, #396]	; (801109c <setup+0x1b4>)
 8010f10:	f013 fd81 	bl	8024a16 <__cxa_guard_acquire>
 8010f14:	4603      	mov	r3, r0
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	bf14      	ite	ne
 8010f1a:	2301      	movne	r3, #1
 8010f1c:	2300      	moveq	r3, #0
 8010f1e:	b2db      	uxtb	r3, r3
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d005      	beq.n	8010f30 <setup+0x48>
 8010f24:	485d      	ldr	r0, [pc, #372]	; (801109c <setup+0x1b4>)
 8010f26:	f013 fd82 	bl	8024a2e <__cxa_guard_release>
 8010f2a:	485d      	ldr	r0, [pc, #372]	; (80110a0 <setup+0x1b8>)
 8010f2c:	f014 f800 	bl	8024f30 <atexit>
  error_reporter = &micro_error_reporter;
 8010f30:	4b5c      	ldr	r3, [pc, #368]	; (80110a4 <setup+0x1bc>)
 8010f32:	4a5d      	ldr	r2, [pc, #372]	; (80110a8 <setup+0x1c0>)
 8010f34:	601a      	str	r2, [r3, #0]
  model = tflite::GetModel(g_person_detect_model_data);
 8010f36:	485d      	ldr	r0, [pc, #372]	; (80110ac <setup+0x1c4>)
 8010f38:	f7ff ffb1 	bl	8010e9e <_ZN6tflite8GetModelEPKv>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	4a5c      	ldr	r2, [pc, #368]	; (80110b0 <setup+0x1c8>)
 8010f40:	6013      	str	r3, [r2, #0]
  if (model->version() != TFLITE_SCHEMA_VERSION) {
 8010f42:	4b5b      	ldr	r3, [pc, #364]	; (80110b0 <setup+0x1c8>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7ff ff9a 	bl	8010e80 <_ZNK6tflite5Model7versionEv>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	2b03      	cmp	r3, #3
 8010f50:	bf14      	ite	ne
 8010f52:	2301      	movne	r3, #1
 8010f54:	2300      	moveq	r3, #0
 8010f56:	b2db      	uxtb	r3, r3
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d00d      	beq.n	8010f78 <setup+0x90>
    TF_LITE_REPORT_ERROR(error_reporter,
 8010f5c:	4b51      	ldr	r3, [pc, #324]	; (80110a4 <setup+0x1bc>)
 8010f5e:	681c      	ldr	r4, [r3, #0]
 8010f60:	4b53      	ldr	r3, [pc, #332]	; (80110b0 <setup+0x1c8>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7ff ff8b 	bl	8010e80 <_ZNK6tflite5Model7versionEv>
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	2303      	movs	r3, #3
 8010f6e:	4951      	ldr	r1, [pc, #324]	; (80110b4 <setup+0x1cc>)
 8010f70:	4620      	mov	r0, r4
 8010f72:	f7f7 fcc7 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
 8010f76:	e08e      	b.n	8011096 <setup+0x1ae>
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;
 8010f78:	4b4f      	ldr	r3, [pc, #316]	; (80110b8 <setup+0x1d0>)
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	f3bf 8f5b 	dmb	ish
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	f003 0301 	and.w	r3, r3, #1
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	bf0c      	ite	eq
 8010f8a:	2301      	moveq	r3, #1
 8010f8c:	2300      	movne	r3, #0
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d014      	beq.n	8010fbe <setup+0xd6>
 8010f94:	4848      	ldr	r0, [pc, #288]	; (80110b8 <setup+0x1d0>)
 8010f96:	f013 fd3e 	bl	8024a16 <__cxa_guard_acquire>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	bf14      	ite	ne
 8010fa0:	2301      	movne	r3, #1
 8010fa2:	2300      	moveq	r3, #0
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d009      	beq.n	8010fbe <setup+0xd6>
 8010faa:	2100      	movs	r1, #0
 8010fac:	4843      	ldr	r0, [pc, #268]	; (80110bc <setup+0x1d4>)
 8010fae:	f000 f8f7 	bl	80111a0 <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE>
 8010fb2:	4841      	ldr	r0, [pc, #260]	; (80110b8 <setup+0x1d0>)
 8010fb4:	f013 fd3b 	bl	8024a2e <__cxa_guard_release>
 8010fb8:	4841      	ldr	r0, [pc, #260]	; (80110c0 <setup+0x1d8>)
 8010fba:	f013 ffb9 	bl	8024f30 <atexit>
  micro_op_resolver.AddAveragePool2D();
 8010fbe:	483f      	ldr	r0, [pc, #252]	; (80110bc <setup+0x1d4>)
 8010fc0:	f000 f90e 	bl	80111e0 <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv>
  micro_op_resolver.AddConv2D();
 8010fc4:	1d3b      	adds	r3, r7, #4
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f004 fdb2 	bl	8015b30 <_ZN6tflite16Register_CONV_2DEv>
 8010fcc:	1d3b      	adds	r3, r7, #4
 8010fce:	4619      	mov	r1, r3
 8010fd0:	483a      	ldr	r0, [pc, #232]	; (80110bc <setup+0x1d4>)
 8010fd2:	f000 f91d 	bl	8011210 <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DERK18TfLiteRegistration>
  micro_op_resolver.AddDepthwiseConv2D();
 8010fd6:	4839      	ldr	r0, [pc, #228]	; (80110bc <setup+0x1d4>)
 8010fd8:	f000 f92c 	bl	8011234 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv>
  micro_op_resolver.AddReshape();
 8010fdc:	4837      	ldr	r0, [pc, #220]	; (80110bc <setup+0x1d4>)
 8010fde:	f000 f941 	bl	8011264 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv>
  micro_op_resolver.AddSoftmax();
 8010fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f006 fd2c 	bl	8017a44 <_ZN6tflite16Register_SOFTMAXEv>
 8010fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	4832      	ldr	r0, [pc, #200]	; (80110bc <setup+0x1d4>)
 8010ff4:	f000 f94e 	bl	8011294 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8010ff8:	4b32      	ldr	r3, [pc, #200]	; (80110c4 <setup+0x1dc>)
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	f3bf 8f5b 	dmb	ish
 8011000:	b2db      	uxtb	r3, r3
 8011002:	f003 0301 	and.w	r3, r3, #1
 8011006:	2b00      	cmp	r3, #0
 8011008:	bf0c      	ite	eq
 801100a:	2301      	moveq	r3, #1
 801100c:	2300      	movne	r3, #0
 801100e:	b2db      	uxtb	r3, r3
 8011010:	2b00      	cmp	r3, #0
 8011012:	d021      	beq.n	8011058 <setup+0x170>
 8011014:	482b      	ldr	r0, [pc, #172]	; (80110c4 <setup+0x1dc>)
 8011016:	f013 fcfe 	bl	8024a16 <__cxa_guard_acquire>
 801101a:	4603      	mov	r3, r0
 801101c:	2b00      	cmp	r3, #0
 801101e:	bf14      	ite	ne
 8011020:	2301      	movne	r3, #1
 8011022:	2300      	moveq	r3, #0
 8011024:	b2db      	uxtb	r3, r3
 8011026:	2b00      	cmp	r3, #0
 8011028:	d016      	beq.n	8011058 <setup+0x170>
 801102a:	4b21      	ldr	r3, [pc, #132]	; (80110b0 <setup+0x1c8>)
 801102c:	6819      	ldr	r1, [r3, #0]
 801102e:	4b1d      	ldr	r3, [pc, #116]	; (80110a4 <setup+0x1bc>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2200      	movs	r2, #0
 8011034:	9203      	str	r2, [sp, #12]
 8011036:	2200      	movs	r2, #0
 8011038:	9202      	str	r2, [sp, #8]
 801103a:	9301      	str	r3, [sp, #4]
 801103c:	f44f 33fc 	mov.w	r3, #129024	; 0x1f800
 8011040:	9300      	str	r3, [sp, #0]
 8011042:	4b21      	ldr	r3, [pc, #132]	; (80110c8 <setup+0x1e0>)
 8011044:	4a1d      	ldr	r2, [pc, #116]	; (80110bc <setup+0x1d4>)
 8011046:	4821      	ldr	r0, [pc, #132]	; (80110cc <setup+0x1e4>)
 8011048:	f7fe fb9c 	bl	800f784 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE>
 801104c:	481d      	ldr	r0, [pc, #116]	; (80110c4 <setup+0x1dc>)
 801104e:	f013 fcee 	bl	8024a2e <__cxa_guard_release>
 8011052:	481f      	ldr	r0, [pc, #124]	; (80110d0 <setup+0x1e8>)
 8011054:	f013 ff6c 	bl	8024f30 <atexit>
  interpreter = &static_interpreter;
 8011058:	4b1e      	ldr	r3, [pc, #120]	; (80110d4 <setup+0x1ec>)
 801105a:	4a1c      	ldr	r2, [pc, #112]	; (80110cc <setup+0x1e4>)
 801105c:	601a      	str	r2, [r3, #0]

  // Allocate memory from the tensor_arena for the model's tensors.
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
 801105e:	4b1d      	ldr	r3, [pc, #116]	; (80110d4 <setup+0x1ec>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	4618      	mov	r0, r3
 8011064:	f7fe fdd0 	bl	800fc08 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8011068:	4603      	mov	r3, r0
 801106a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (allocate_status != kTfLiteOk) {
 801106e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011072:	2b00      	cmp	r3, #0
 8011074:	d006      	beq.n	8011084 <setup+0x19c>
    TF_LITE_REPORT_ERROR(error_reporter, "AllocateTensors() failed");
 8011076:	4b0b      	ldr	r3, [pc, #44]	; (80110a4 <setup+0x1bc>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	4917      	ldr	r1, [pc, #92]	; (80110d8 <setup+0x1f0>)
 801107c:	4618      	mov	r0, r3
 801107e:	f7f7 fc41 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
 8011082:	e008      	b.n	8011096 <setup+0x1ae>
  }

  // Get information about the memory area to use for the model's input.
  input = interpreter->input(0);
 8011084:	4b13      	ldr	r3, [pc, #76]	; (80110d4 <setup+0x1ec>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	2100      	movs	r1, #0
 801108a:	4618      	mov	r0, r3
 801108c:	f7fe ff5c 	bl	800ff48 <_ZN6tflite16MicroInterpreter5inputEj>
 8011090:	4603      	mov	r3, r0
 8011092:	4a12      	ldr	r2, [pc, #72]	; (80110dc <setup+0x1f4>)
 8011094:	6013      	str	r3, [r2, #0]
}
 8011096:	374c      	adds	r7, #76	; 0x4c
 8011098:	46bd      	mov	sp, r7
 801109a:	bd90      	pop	{r4, r7, pc}
 801109c:	20047864 	.word	0x20047864
 80110a0:	08010eb9 	.word	0x08010eb9
 80110a4:	20028054 	.word	0x20028054
 80110a8:	20000010 	.word	0x20000010
 80110ac:	080310a0 	.word	0x080310a0
 80110b0:	20028058 	.word	0x20028058
 80110b4:	0802ab88 	.word	0x0802ab88
 80110b8:	20047934 	.word	0x20047934
 80110bc:	20047868 	.word	0x20047868
 80110c0:	08010ec9 	.word	0x08010ec9
 80110c4:	200479d4 	.word	0x200479d4
 80110c8:	20028064 	.word	0x20028064
 80110cc:	20047938 	.word	0x20047938
 80110d0:	08010ed9 	.word	0x08010ed9
 80110d4:	2002805c 	.word	0x2002805c
 80110d8:	0802abd0 	.word	0x0802abd0
 80110dc:	20028060 	.word	0x20028060

080110e0 <loop>:

// The name of this function is important for Arduino compatibility.
void loop() {
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af02      	add	r7, sp, #8
  // Get image from provider.
  if (kTfLiteOk != GetImage(error_reporter, kNumCols, kNumRows, kNumChannels,
 80110e6:	4b27      	ldr	r3, [pc, #156]	; (8011184 <loop+0xa4>)
 80110e8:	6818      	ldr	r0, [r3, #0]
 80110ea:	4b27      	ldr	r3, [pc, #156]	; (8011188 <loop+0xa8>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	9300      	str	r3, [sp, #0]
 80110f2:	2301      	movs	r3, #1
 80110f4:	2260      	movs	r2, #96	; 0x60
 80110f6:	2160      	movs	r1, #96	; 0x60
 80110f8:	f7ff fe98 	bl	8010e2c <_Z8GetImagePN6tflite13ErrorReporterEiiiPa>
 80110fc:	4603      	mov	r3, r0
 80110fe:	2b00      	cmp	r3, #0
 8011100:	bf14      	ite	ne
 8011102:	2301      	movne	r3, #1
 8011104:	2300      	moveq	r3, #0
 8011106:	b2db      	uxtb	r3, r3
 8011108:	2b00      	cmp	r3, #0
 801110a:	d005      	beq.n	8011118 <loop+0x38>
                            input->data.int8)) {
    TF_LITE_REPORT_ERROR(error_reporter, "Image capture failed.");
 801110c:	4b1d      	ldr	r3, [pc, #116]	; (8011184 <loop+0xa4>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	491e      	ldr	r1, [pc, #120]	; (801118c <loop+0xac>)
 8011112:	4618      	mov	r0, r3
 8011114:	f7f7 fbf6 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
  // Run the model on this input and make sure it succeeds.
  if (kTfLiteOk != interpreter->Invoke()) {
 8011118:	4b1d      	ldr	r3, [pc, #116]	; (8011190 <loop+0xb0>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4618      	mov	r0, r3
 801111e:	f7fe fee1 	bl	800fee4 <_ZN6tflite16MicroInterpreter6InvokeEv>
 8011122:	4603      	mov	r3, r0
 8011124:	2b00      	cmp	r3, #0
 8011126:	bf14      	ite	ne
 8011128:	2301      	movne	r3, #1
 801112a:	2300      	moveq	r3, #0
 801112c:	b2db      	uxtb	r3, r3
 801112e:	2b00      	cmp	r3, #0
 8011130:	d005      	beq.n	801113e <loop+0x5e>
    TF_LITE_REPORT_ERROR(error_reporter, "Invoke failed.");
 8011132:	4b14      	ldr	r3, [pc, #80]	; (8011184 <loop+0xa4>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	4917      	ldr	r1, [pc, #92]	; (8011194 <loop+0xb4>)
 8011138:	4618      	mov	r0, r3
 801113a:	f7f7 fbe3 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
  TfLiteTensor* output = interpreter->output(0);
 801113e:	4b14      	ldr	r3, [pc, #80]	; (8011190 <loop+0xb0>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	2100      	movs	r1, #0
 8011144:	4618      	mov	r0, r3
 8011146:	f7fe ff23 	bl	800ff90 <_ZN6tflite16MicroInterpreter6outputEj>
 801114a:	6078      	str	r0, [r7, #4]

  // Process the inference results.
  int8_t person_score = output->data.uint8[kPersonIndex];
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	3301      	adds	r3, #1
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	70fb      	strb	r3, [r7, #3]
  int8_t no_person_score = output->data.uint8[kNotAPersonIndex];
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	70bb      	strb	r3, [r7, #2]
  RespondToDetection(error_reporter, person_score, no_person_score);
 801115e:	4b09      	ldr	r3, [pc, #36]	; (8011184 <loop+0xa4>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8011166:	f997 1003 	ldrsb.w	r1, [r7, #3]
 801116a:	4618      	mov	r0, r3
 801116c:	f7ff fe48 	bl	8010e00 <_Z18RespondToDetectionPN6tflite13ErrorReporterEaa>

  g_person_score = person_score;
 8011170:	4a09      	ldr	r2, [pc, #36]	; (8011198 <loop+0xb8>)
 8011172:	78fb      	ldrb	r3, [r7, #3]
 8011174:	7013      	strb	r3, [r2, #0]
  g_no_person_score = no_person_score;
 8011176:	4a09      	ldr	r2, [pc, #36]	; (801119c <loop+0xbc>)
 8011178:	78bb      	ldrb	r3, [r7, #2]
 801117a:	7013      	strb	r3, [r2, #0]
}
 801117c:	bf00      	nop
 801117e:	3708      	adds	r7, #8
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	20028054 	.word	0x20028054
 8011188:	20028060 	.word	0x20028060
 801118c:	0802abec 	.word	0x0802abec
 8011190:	2002805c 	.word	0x2002805c
 8011194:	0802ac04 	.word	0x0802ac04
 8011198:	200000a0 	.word	0x200000a0
 801119c:	200000a1 	.word	0x200000a1

080111a0 <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE>:
template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7fb f9c9 	bl	800c544 <_ZN6tflite15MicroOpResolverC1Ev>
 80111b2:	4a0a      	ldr	r2, [pc, #40]	; (80111dc <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE+0x3c>)
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	601a      	str	r2, [r3, #0]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2200      	movs	r2, #0
 80111bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2200      	movs	r2, #0
 80111c4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	683a      	ldr	r2, [r7, #0]
 80111cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	4618      	mov	r0, r3
 80111d4:	3708      	adds	r7, #8
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	0802c7f0 	.word	0x0802c7f0

080111e0 <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv>:
  TfLiteStatus AddAssignVariable() {
    return AddBuiltin(BuiltinOperator_ASSIGN_VARIABLE,
                      tflite::Register_ASSIGN_VARIABLE(), ParseAssignVariable);
  }

  TfLiteStatus AddAveragePool2D() {
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b08a      	sub	sp, #40	; 0x28
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_AVERAGE_POOL_2D,
                      tflite::Register_AVERAGE_POOL_2D(), ParsePool);
 80111e8:	f107 0308 	add.w	r3, r7, #8
 80111ec:	4618      	mov	r0, r3
 80111ee:	f006 f859 	bl	80172a4 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>
 80111f2:	f107 0208 	add.w	r2, r7, #8
 80111f6:	4b05      	ldr	r3, [pc, #20]	; (801120c <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv+0x2c>)
 80111f8:	2101      	movs	r1, #1
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f000 f85c 	bl	80112b8 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8011200:	4603      	mov	r3, r0
  }
 8011202:	4618      	mov	r0, r3
 8011204:	3728      	adds	r7, #40	; 0x28
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}
 801120a:	bf00      	nop
 801120c:	080092e1 	.word	0x080092e1

08011210 <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DERK18TfLiteRegistration>:
    return AddBuiltin(BuiltinOperator_CONCATENATION,
                      tflite::ops::micro::Register_CONCATENATION(),
                      ParseConcatenation);
  }

  TfLiteStatus AddConv2D(
 8011210:	b580      	push	{r7, lr}
 8011212:	b082      	sub	sp, #8
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_CONV_2D()) {
    return AddBuiltin(BuiltinOperator_CONV_2D, registration, ParseConv2D);
 801121a:	4b05      	ldr	r3, [pc, #20]	; (8011230 <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DERK18TfLiteRegistration+0x20>)
 801121c:	683a      	ldr	r2, [r7, #0]
 801121e:	2103      	movs	r1, #3
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f000 f849 	bl	80112b8 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8011226:	4603      	mov	r3, r0
  }
 8011228:	4618      	mov	r0, r3
 801122a:	3708      	adds	r7, #8
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}
 8011230:	08009049 	.word	0x08009049

08011234 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv>:
  TfLiteStatus AddDepthToSpace() {
    return AddBuiltin(BuiltinOperator_DEPTH_TO_SPACE,
                      tflite::Register_DEPTH_TO_SPACE(), ParseDepthToSpace);
  }

  TfLiteStatus AddDepthwiseConv2D() {
 8011234:	b580      	push	{r7, lr}
 8011236:	b08a      	sub	sp, #40	; 0x28
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_DEPTHWISE_CONV_2D,
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
 801123c:	f107 0308 	add.w	r3, r7, #8
 8011240:	4618      	mov	r0, r3
 8011242:	f005 fd33 	bl	8016cac <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
 8011246:	f107 0208 	add.w	r2, r7, #8
 801124a:	4b05      	ldr	r3, [pc, #20]	; (8011260 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv+0x2c>)
 801124c:	2104      	movs	r1, #4
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f000 f832 	bl	80112b8 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8011254:	4603      	mov	r3, r0
  }
 8011256:	4618      	mov	r0, r3
 8011258:	3728      	adds	r7, #40	; 0x28
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	08009189 	.word	0x08009189

08011264 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv>:
  TfLiteStatus AddRelu6() {
    return AddBuiltin(BuiltinOperator_RELU6, tflite::Register_RELU6(),
                      ParseRelu6);
  }

  TfLiteStatus AddReshape() {
 8011264:	b580      	push	{r7, lr}
 8011266:	b08a      	sub	sp, #40	; 0x28
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RESHAPE,
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 801126c:	f107 0308 	add.w	r3, r7, #8
 8011270:	4618      	mov	r0, r3
 8011272:	f002 fc93 	bl	8013b9c <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 8011276:	f107 0208 	add.w	r2, r7, #8
 801127a:	4b05      	ldr	r3, [pc, #20]	; (8011290 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv+0x2c>)
 801127c:	2116      	movs	r1, #22
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f000 f81a 	bl	80112b8 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8011284:	4603      	mov	r3, r0
  }
 8011286:	4618      	mov	r0, r3
 8011288:	3728      	adds	r7, #40	; 0x28
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
 801128e:	bf00      	nop
 8011290:	08009421 	.word	0x08009421

08011294 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax(
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_SOFTMAX()) {
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
 801129e:	4b05      	ldr	r3, [pc, #20]	; (80112b4 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration+0x20>)
 80112a0:	683a      	ldr	r2, [r7, #0]
 80112a2:	2119      	movs	r1, #25
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f000 f807 	bl	80112b8 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80112aa:	4603      	mov	r3, r0
  }
 80112ac:	4618      	mov	r0, r3
 80112ae:	3708      	adds	r7, #8
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}
 80112b4:	0800951d 	.word	0x0800951d

080112b8 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 80112b8:	b5b0      	push	{r4, r5, r7, lr}
 80112ba:	b084      	sub	sp, #16
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	607a      	str	r2, [r7, #4]
 80112c2:	603b      	str	r3, [r7, #0]
 80112c4:	460b      	mov	r3, r1
 80112c6:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 80112c8:	7afb      	ldrb	r3, [r7, #11]
 80112ca:	2b20      	cmp	r3, #32
 80112cc:	d10d      	bne.n	80112ea <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x32>
      if (error_reporter_ != nullptr) {
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d006      	beq.n	80112e6 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80112de:	493a      	ldr	r1, [pc, #232]	; (80113c8 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x110>)
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7f7 fb0f 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 80112e6:	2301      	movs	r3, #1
 80112e8:	e069      	b.n	80113be <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    if (FindOp(op) != nullptr) {
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	331c      	adds	r3, #28
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	7afa      	ldrb	r2, [r7, #11]
 80112f4:	4611      	mov	r1, r2
 80112f6:	68f8      	ldr	r0, [r7, #12]
 80112f8:	4798      	blx	r3
 80112fa:	4603      	mov	r3, r0
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	bf14      	ite	ne
 8011300:	2301      	movne	r3, #1
 8011302:	2300      	moveq	r3, #0
 8011304:	b2db      	uxtb	r3, r3
 8011306:	2b00      	cmp	r3, #0
 8011308:	d00e      	beq.n	8011328 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x70>
      if (error_reporter_ != nullptr) {
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011310:	2b00      	cmp	r3, #0
 8011312:	d007      	beq.n	8011324 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801131a:	7afa      	ldrb	r2, [r7, #11]
 801131c:	492b      	ldr	r1, [pc, #172]	; (80113cc <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x114>)
 801131e:	4618      	mov	r0, r3
 8011320:	f7f7 faf0 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8011324:	2301      	movs	r3, #1
 8011326:	e04a      	b.n	80113be <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    if (registrations_len_ >= tOpCount) {
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801132e:	2b04      	cmp	r3, #4
 8011330:	d90e      	bls.n	8011350 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>
      if (error_reporter_) {
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011338:	2b00      	cmp	r3, #0
 801133a:	d007      	beq.n	801134c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8011342:	7afa      	ldrb	r2, [r7, #11]
 8011344:	2305      	movs	r3, #5
 8011346:	4922      	ldr	r1, [pc, #136]	; (80113d0 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x118>)
 8011348:	f7f7 fadc 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 801134c:	2301      	movs	r3, #1
 801134e:	e036      	b.n	80113be <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    registrations_[registrations_len_] = registration;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011356:	68fa      	ldr	r2, [r7, #12]
 8011358:	015b      	lsls	r3, r3, #5
 801135a:	4413      	add	r3, r2
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	1d1c      	adds	r4, r3, #4
 8011360:	4615      	mov	r5, r2
 8011362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011366:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801136a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011374:	7afa      	ldrb	r2, [r7, #11]
 8011376:	68f9      	ldr	r1, [r7, #12]
 8011378:	015b      	lsls	r3, r3, #5
 801137a:	440b      	add	r3, r1
 801137c:	3318      	adds	r3, #24
 801137e:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011386:	1c5a      	adds	r2, r3, #1
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    builtin_codes_[num_buitin_ops_] = op;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8011394:	68fa      	ldr	r2, [r7, #12]
 8011396:	4413      	add	r3, r2
 8011398:	7afa      	ldrb	r2, [r7, #11]
 801139a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    builtin_parsers_[num_buitin_ops_] = parser;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	322c      	adds	r2, #44	; 0x2c
 80113a8:	6839      	ldr	r1, [r7, #0]
 80113aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    num_buitin_ops_++;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80113b4:	1c5a      	adds	r2, r3, #1
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    return kTfLiteOk;
 80113bc:	2300      	movs	r3, #0
  }
 80113be:	4618      	mov	r0, r3
 80113c0:	3710      	adds	r7, #16
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bdb0      	pop	{r4, r5, r7, pc}
 80113c6:	bf00      	nop
 80113c8:	0802ac14 	.word	0x0802ac14
 80113cc:	0802ac5c 	.word	0x0802ac5c
 80113d0:	0802acac 	.word	0x0802acac

080113d4 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 80113d4:	b480      	push	{r7}
 80113d6:	b085      	sub	sp, #20
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	460b      	mov	r3, r1
 80113de:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 80113e0:	78fb      	ldrb	r3, [r7, #3]
 80113e2:	2b20      	cmp	r3, #32
 80113e4:	d101      	bne.n	80113ea <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x16>
 80113e6:	2300      	movs	r3, #0
 80113e8:	e019      	b.n	801141e <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80113ea:	2300      	movs	r3, #0
 80113ec:	60fb      	str	r3, [r7, #12]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80113f4:	68fa      	ldr	r2, [r7, #12]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d210      	bcs.n	801141c <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x48>
      const TfLiteRegistration& registration = registrations_[i];
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	015b      	lsls	r3, r3, #5
 80113fe:	687a      	ldr	r2, [r7, #4]
 8011400:	4413      	add	r3, r2
 8011402:	3304      	adds	r3, #4
 8011404:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	695a      	ldr	r2, [r3, #20]
 801140a:	78fb      	ldrb	r3, [r7, #3]
 801140c:	429a      	cmp	r2, r3
 801140e:	d101      	bne.n	8011414 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x40>
        return &registration;
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	e004      	b.n	801141e <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	3301      	adds	r3, #1
 8011418:	60fb      	str	r3, [r7, #12]
 801141a:	e7e8      	b.n	80113ee <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 801141c:	2300      	movs	r3, #0
  }
 801141e:	4618      	mov	r0, r3
 8011420:	3714      	adds	r7, #20
 8011422:	46bd      	mov	sp, r7
 8011424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011428:	4770      	bx	lr
	...

0801142c <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 801142c:	b580      	push	{r7, lr}
 801142e:	b082      	sub	sp, #8
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	4a05      	ldr	r2, [pc, #20]	; (801144c <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev+0x20>)
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	601a      	str	r2, [r3, #0]
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	4618      	mov	r0, r3
 801143e:	f7fb f82f 	bl	800c4a0 <_ZN6tflite15MicroOpResolverD1Ev>
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	4618      	mov	r0, r3
 8011446:	3708      	adds	r7, #8
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}
 801144c:	0802c7f0 	.word	0x0802c7f0

08011450 <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev>:
 8011450:	b580      	push	{r7, lr}
 8011452:	b082      	sub	sp, #8
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f7ff ffe7 	bl	801142c <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>
 801145e:	21cc      	movs	r1, #204	; 0xcc
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f013 fad6 	bl	8024a12 <_ZdlPvj>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	4618      	mov	r0, r3
 801146a:	3708      	adds	r7, #8
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 801147a:	2300      	movs	r3, #0
 801147c:	60fb      	str	r3, [r7, #12]
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011484:	68fa      	ldr	r2, [r7, #12]
 8011486:	429a      	cmp	r2, r3
 8011488:	d218      	bcs.n	80114bc <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x4c>
      const TfLiteRegistration& registration = registrations_[i];
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	015b      	lsls	r3, r3, #5
 801148e:	687a      	ldr	r2, [r7, #4]
 8011490:	4413      	add	r3, r2
 8011492:	3304      	adds	r3, #4
 8011494:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	695b      	ldr	r3, [r3, #20]
 801149a:	2b20      	cmp	r3, #32
 801149c:	d10a      	bne.n	80114b4 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x44>
          (strcmp(registration.custom_name, op) == 0)) {
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	699b      	ldr	r3, [r3, #24]
 80114a2:	6839      	ldr	r1, [r7, #0]
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7ee ff0b 	bl	80002c0 <strcmp>
 80114aa:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d101      	bne.n	80114b4 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x44>
        return &registration;
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	e004      	b.n	80114be <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	3301      	adds	r3, #1
 80114b8:	60fb      	str	r3, [r7, #12]
 80114ba:	e7e0      	b.n	801147e <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0xe>
    return nullptr;
 80114bc:	2300      	movs	r3, #0
  }
 80114be:	4618      	mov	r0, r3
 80114c0:	3710      	adds	r7, #16
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}

080114c6 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b084      	sub	sp, #16
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
 80114ce:	460b      	mov	r3, r1
 80114d0:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80114d8:	2b05      	cmp	r3, #5
 80114da:	d901      	bls.n	80114e0 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
 80114dc:	f013 fd03 	bl	8024ee6 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80114e0:	2300      	movs	r3, #0
 80114e2:	60fb      	str	r3, [r7, #12]
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80114ea:	68fa      	ldr	r2, [r7, #12]
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d211      	bcs.n	8011514 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	4413      	add	r3, r2
 80114f6:	33a8      	adds	r3, #168	; 0xa8
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	78fa      	ldrb	r2, [r7, #3]
 80114fc:	429a      	cmp	r2, r3
 80114fe:	d105      	bne.n	801150c <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x46>
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	68fa      	ldr	r2, [r7, #12]
 8011504:	322c      	adds	r2, #44	; 0x2c
 8011506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801150a:	e004      	b.n	8011516 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x50>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	3301      	adds	r3, #1
 8011510:	60fb      	str	r3, [r7, #12]
 8011512:	e7e7      	b.n	80114e4 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 8011514:	2300      	movs	r3, #0
  }
 8011516:	4618      	mov	r0, r3
 8011518:	3710      	adds	r7, #16
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}

0801151e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 801151e:	b580      	push	{r7, lr}
 8011520:	b084      	sub	sp, #16
 8011522:	af00      	add	r7, sp, #0
 8011524:	60f8      	str	r0, [r7, #12]
 8011526:	60b9      	str	r1, [r7, #8]
 8011528:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d101      	bne.n	8011534 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8011530:	f013 fcd9 	bl	8024ee6 <abort>
  TFLITE_DCHECK(node != nullptr);
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d101      	bne.n	801153e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801153a:	f013 fcd4 	bl	8024ee6 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	6819      	ldr	r1, [r3, #0]
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	009b      	lsls	r3, r3, #2
 801154a:	440b      	add	r3, r1
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	4619      	mov	r1, r3
 8011550:	68f8      	ldr	r0, [r7, #12]
 8011552:	4790      	blx	r2
 8011554:	4603      	mov	r3, r0
}
 8011556:	4618      	mov	r0, r3
 8011558:	3710      	adds	r7, #16
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}

0801155e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 801155e:	b580      	push	{r7, lr}
 8011560:	b084      	sub	sp, #16
 8011562:	af00      	add	r7, sp, #0
 8011564:	60f8      	str	r0, [r7, #12]
 8011566:	60b9      	str	r1, [r7, #8]
 8011568:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 801156a:	687a      	ldr	r2, [r7, #4]
 801156c:	68b9      	ldr	r1, [r7, #8]
 801156e:	68f8      	ldr	r0, [r7, #12]
 8011570:	f7ff ffd5 	bl	801151e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8011574:	4603      	mov	r3, r0
}
 8011576:	4618      	mov	r0, r3
 8011578:	3710      	adds	r7, #16
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}

0801157e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 801157e:	b580      	push	{r7, lr}
 8011580:	b084      	sub	sp, #16
 8011582:	af00      	add	r7, sp, #0
 8011584:	60f8      	str	r0, [r7, #12]
 8011586:	60b9      	str	r1, [r7, #8]
 8011588:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d101      	bne.n	8011594 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8011590:	f013 fca9 	bl	8024ee6 <abort>
  TFLITE_DCHECK(node != nullptr);
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d101      	bne.n	801159e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801159a:	f013 fca4 	bl	8024ee6 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	6859      	ldr	r1, [r3, #4]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	009b      	lsls	r3, r3, #2
 80115aa:	440b      	add	r3, r1
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	4619      	mov	r1, r3
 80115b0:	68f8      	ldr	r0, [r7, #12]
 80115b2:	4790      	blx	r2
 80115b4:	4603      	mov	r3, r0
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3710      	adds	r7, #16
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}

080115be <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80115be:	b580      	push	{r7, lr}
 80115c0:	b082      	sub	sp, #8
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d101      	bne.n	80115d0 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 80115cc:	f013 fc8b 	bl	8024ee6 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3708      	adds	r7, #8
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}

080115dc <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80115dc:	b480      	push	{r7}
 80115de:	b083      	sub	sp, #12
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d002      	beq.n	80115f0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	e000      	b.n	80115f2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 80115f0:	2300      	movs	r3, #0
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	370c      	adds	r7, #12
 80115f6:	46bd      	mov	sp, r7
 80115f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fc:	4770      	bx	lr

080115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80115fe:	b580      	push	{r7, lr}
 8011600:	b082      	sub	sp, #8
 8011602:	af00      	add	r7, sp, #0
 8011604:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d101      	bne.n	8011610 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 801160c:	f013 fc6b 	bl	8024ee6 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
}
 8011614:	4618      	mov	r0, r3
 8011616:	3708      	adds	r7, #8
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801161c:	b480      	push	{r7}
 801161e:	b083      	sub	sp, #12
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d002      	beq.n	8011630 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	e000      	b.n	8011632 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 8011630:	2300      	movs	r3, #0
}
 8011632:	4618      	mov	r0, r3
 8011634:	370c      	adds	r7, #12
 8011636:	46bd      	mov	sp, r7
 8011638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163c:	4770      	bx	lr

0801163e <_ZNK6tflite12RuntimeShape4DimsEi>:
  int32_t Dims(int i) const {
 801163e:	b580      	push	{r7, lr}
 8011640:	b082      	sub	sp, #8
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
 8011646:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	da01      	bge.n	8011652 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 801164e:	f013 fc4a 	bl	8024ee6 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	683a      	ldr	r2, [r7, #0]
 8011658:	429a      	cmp	r2, r3
 801165a:	db01      	blt.n	8011660 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 801165c:	f013 fc43 	bl	8024ee6 <abort>
    return dims_[i];
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	009b      	lsls	r3, r3, #2
 8011666:	4413      	add	r3, r2
 8011668:	685b      	ldr	r3, [r3, #4]
  }
 801166a:	4618      	mov	r0, r3
 801166c:	3708      	adds	r7, #8
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}

08011672 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  const int32_t* DimsData() const { return dims_; }
 8011672:	b480      	push	{r7}
 8011674:	b083      	sub	sp, #12
 8011676:	af00      	add	r7, sp, #0
 8011678:	6078      	str	r0, [r7, #4]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	3304      	adds	r3, #4
 801167e:	4618      	mov	r0, r3
 8011680:	370c      	adds	r7, #12
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr

0801168a <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
 801168a:	b580      	push	{r7, lr}
 801168c:	b086      	sub	sp, #24
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8011692:	2301      	movs	r3, #1
 8011694:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f7ff ffeb 	bl	8011672 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801169c:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 801169e:	2300      	movs	r3, #0
 80116a0:	613b      	str	r3, [r7, #16]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	693a      	ldr	r2, [r7, #16]
 80116a8:	429a      	cmp	r2, r3
 80116aa:	da0c      	bge.n	80116c6 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 80116ac:	693b      	ldr	r3, [r7, #16]
 80116ae:	009b      	lsls	r3, r3, #2
 80116b0:	68fa      	ldr	r2, [r7, #12]
 80116b2:	4413      	add	r3, r2
 80116b4:	681a      	ldr	r2, [r3, #0]
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	fb02 f303 	mul.w	r3, r2, r3
 80116bc:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	3301      	adds	r3, #1
 80116c2:	613b      	str	r3, [r7, #16]
 80116c4:	e7ed      	b.n	80116a2 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 80116c6:	697b      	ldr	r3, [r7, #20]
  }
 80116c8:	4618      	mov	r0, r3
 80116ca:	3718      	adds	r7, #24
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 80116d0:	b480      	push	{r7}
 80116d2:	b083      	sub	sp, #12
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	4618      	mov	r0, r3
 80116e0:	370c      	adds	r7, #12
 80116e2:	46bd      	mov	sp, r7
 80116e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e8:	4770      	bx	lr

080116ea <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 80116ea:	b480      	push	{r7}
 80116ec:	b083      	sub	sp, #12
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6078      	str	r0, [r7, #4]
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	4618      	mov	r0, r3
 80116fa:	370c      	adds	r7, #12
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr

08011704 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8011704:	b580      	push	{r7, lr}
 8011706:	b082      	sub	sp, #8
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d101      	bne.n	8011716 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8011712:	f013 fbe8 	bl	8024ee6 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
}
 801171a:	4618      	mov	r0, r3
 801171c:	3708      	adds	r7, #8
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}

08011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
// Since tensors with '0' in their shape are valid in TF, these offset functions
// allow that as long as the corresponding index is also 0. It is upto the
// calling ops to ensure that they perform verification checks on tensor shapes
// if they don't support a particular behavior.

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 8011722:	b580      	push	{r7, lr}
 8011724:	b086      	sub	sp, #24
 8011726:	af00      	add	r7, sp, #0
 8011728:	60f8      	str	r0, [r7, #12]
 801172a:	60b9      	str	r1, [r7, #8]
 801172c:	607a      	str	r2, [r7, #4]
 801172e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8011730:	68f8      	ldr	r0, [r7, #12]
 8011732:	f7fb f8d9 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011736:	4603      	mov	r3, r0
 8011738:	2b04      	cmp	r3, #4
 801173a:	d001      	beq.n	8011740 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 801173c:	f013 fbd3 	bl	8024ee6 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsData());
 8011740:	68f8      	ldr	r0, [r7, #12]
 8011742:	f7ff ff96 	bl	8011672 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8011746:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK((dims_data[0] == 0 && i0 == 0) ||
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d102      	bne.n	8011756 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x34>
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d009      	beq.n	801176a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x48>
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	2b00      	cmp	r3, #0
 801175a:	db04      	blt.n	8011766 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x44>
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	68ba      	ldr	r2, [r7, #8]
 8011762:	429a      	cmp	r2, r3
 8011764:	db01      	blt.n	801176a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x48>
 8011766:	f013 fbbe 	bl	8024ee6 <abort>
                (i0 >= 0 && i0 < dims_data[0]));
  TFLITE_DCHECK((dims_data[1] == 0 && i1 == 0) ||
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	3304      	adds	r3, #4
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d102      	bne.n	801177a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x58>
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d00a      	beq.n	8011790 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x6e>
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2b00      	cmp	r3, #0
 801177e:	db05      	blt.n	801178c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x6a>
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	3304      	adds	r3, #4
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	429a      	cmp	r2, r3
 801178a:	db01      	blt.n	8011790 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x6e>
 801178c:	f013 fbab 	bl	8024ee6 <abort>
                (i1 >= 0 && i1 < dims_data[1]));
  TFLITE_DCHECK((dims_data[2] == 0 && i2 == 0) ||
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	3308      	adds	r3, #8
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d102      	bne.n	80117a0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7e>
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d00a      	beq.n	80117b6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x94>
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	db05      	blt.n	80117b2 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x90>
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	3308      	adds	r3, #8
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	683a      	ldr	r2, [r7, #0]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	db01      	blt.n	80117b6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x94>
 80117b2:	f013 fb98 	bl	8024ee6 <abort>
                (i2 >= 0 && i2 < dims_data[2]));
  TFLITE_DCHECK((dims_data[3] == 0 && i3 == 0) ||
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	330c      	adds	r3, #12
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d102      	bne.n	80117c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa4>
 80117c0:	6a3b      	ldr	r3, [r7, #32]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d00a      	beq.n	80117dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xba>
 80117c6:	6a3b      	ldr	r3, [r7, #32]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	db05      	blt.n	80117d8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xb6>
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	330c      	adds	r3, #12
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	6a3a      	ldr	r2, [r7, #32]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	db01      	blt.n	80117dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xba>
 80117d8:	f013 fb85 	bl	8024ee6 <abort>
                (i3 >= 0 && i3 < dims_data[3]));
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	3304      	adds	r3, #4
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	68ba      	ldr	r2, [r7, #8]
 80117e4:	fb02 f203 	mul.w	r2, r2, r3
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4413      	add	r3, r2
 80117ec:	697a      	ldr	r2, [r7, #20]
 80117ee:	3208      	adds	r2, #8
 80117f0:	6812      	ldr	r2, [r2, #0]
 80117f2:	fb02 f203 	mul.w	r2, r2, r3
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	4413      	add	r3, r2
 80117fa:	697a      	ldr	r2, [r7, #20]
 80117fc:	320c      	adds	r2, #12
 80117fe:	6812      	ldr	r2, [r2, #0]
 8011800:	fb02 f203 	mul.w	r2, r2, r3
 8011804:	6a3b      	ldr	r3, [r7, #32]
 8011806:	4413      	add	r3, r2
}
 8011808:	4618      	mov	r0, r3
 801180a:	3718      	adds	r7, #24
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}

08011810 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8011810:	b580      	push	{r7, lr}
 8011812:	b082      	sub	sp, #8
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d101      	bne.n	8011822 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x12>
 801181e:	f013 fb62 	bl	8024ee6 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
}
 8011826:	4618      	mov	r0, r3
 8011828:	3708      	adds	r7, #8
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}

0801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 801182e:	b590      	push	{r4, r7, lr}
 8011830:	b087      	sub	sp, #28
 8011832:	af00      	add	r7, sp, #0
 8011834:	60f8      	str	r0, [r7, #12]
 8011836:	60b9      	str	r1, [r7, #8]
 8011838:	607a      	str	r2, [r7, #4]
 801183a:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 801183c:	68b9      	ldr	r1, [r7, #8]
 801183e:	68f8      	ldr	r0, [r7, #12]
 8011840:	f7ff fefd 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8011844:	4604      	mov	r4, r0
 8011846:	6839      	ldr	r1, [r7, #0]
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f7ff fef8 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 801184e:	4603      	mov	r3, r0
 8011850:	429c      	cmp	r4, r3
 8011852:	d001      	beq.n	8011858 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8011854:	f013 fb47 	bl	8024ee6 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8011858:	68b9      	ldr	r1, [r7, #8]
 801185a:	68f8      	ldr	r0, [r7, #12]
 801185c:	f7ff feef 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8011860:	4603      	mov	r3, r0
 8011862:	613b      	str	r3, [r7, #16]
 8011864:	6839      	ldr	r1, [r7, #0]
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f7ff fee9 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 801186c:	4603      	mov	r3, r0
 801186e:	617b      	str	r3, [r7, #20]
 8011870:	f107 0214 	add.w	r2, r7, #20
 8011874:	f107 0310 	add.w	r3, r7, #16
 8011878:	4611      	mov	r1, r2
 801187a:	4618      	mov	r0, r3
 801187c:	f7f9 fe8a 	bl	800b594 <_ZSt3minIlERKT_S2_S2_>
 8011880:	4603      	mov	r3, r0
 8011882:	681b      	ldr	r3, [r3, #0]
}
 8011884:	4618      	mov	r0, r3
 8011886:	371c      	adds	r7, #28
 8011888:	46bd      	mov	sp, r7
 801188a:	bd90      	pop	{r4, r7, pc}

0801188c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801188c:	b480      	push	{r7}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d002      	beq.n	80118a0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	e000      	b.n	80118a2 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 80118a0:	2300      	movs	r3, #0
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	370c      	adds	r7, #12
 80118a6:	46bd      	mov	sp, r7
 80118a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ac:	4770      	bx	lr
	...

080118b0 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 80118b0:	b480      	push	{r7}
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	4b04      	ldr	r3, [pc, #16]	; (80118c8 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 80118b6:	ee07 3a90 	vmov	s15, r3
 80118ba:	eeb0 0a67 	vmov.f32	s0, s15
 80118be:	46bd      	mov	sp, r7
 80118c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c4:	4770      	bx	lr
 80118c6:	bf00      	nop
 80118c8:	7f7fffff 	.word	0x7f7fffff

080118cc <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 80118cc:	b480      	push	{r7}
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80118d4:	ee07 3a90 	vmov	s15, r3
 80118d8:	eeb0 0a67 	vmov.f32	s0, s15
 80118dc:	46bd      	mov	sp, r7
 80118de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e2:	4770      	bx	lr

080118e4 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 80118e4:	b480      	push	{r7}
 80118e6:	b087      	sub	sp, #28
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	60f8      	str	r0, [r7, #12]
 80118ec:	60b9      	str	r1, [r7, #8]
 80118ee:	607a      	str	r2, [r7, #4]
 80118f0:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	3b01      	subs	r3, #1
 80118f6:	68ba      	ldr	r2, [r7, #8]
 80118f8:	fb02 f303 	mul.w	r3, r2, r3
 80118fc:	3301      	adds	r3, #1
 80118fe:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8011900:	6a3b      	ldr	r3, [r7, #32]
 8011902:	3b01      	subs	r3, #1
 8011904:	68fa      	ldr	r2, [r7, #12]
 8011906:	fb02 f203 	mul.w	r2, r2, r3
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	441a      	add	r2, r3
  int total_padding =
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	1ad3      	subs	r3, r2, r3
 8011912:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801191a:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	2b00      	cmp	r3, #0
 8011920:	f003 0301 	and.w	r3, r3, #1
 8011924:	bfb8      	it	lt
 8011926:	425b      	neglt	r3, r3
 8011928:	461a      	mov	r2, r3
 801192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801192c:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	0fda      	lsrs	r2, r3, #31
 8011932:	4413      	add	r3, r2
 8011934:	105b      	asrs	r3, r3, #1
}
 8011936:	4618      	mov	r0, r3
 8011938:	371c      	adds	r7, #28
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr

08011942 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8011942:	b480      	push	{r7}
 8011944:	b087      	sub	sp, #28
 8011946:	af00      	add	r7, sp, #0
 8011948:	60b9      	str	r1, [r7, #8]
 801194a:	607a      	str	r2, [r7, #4]
 801194c:	603b      	str	r3, [r7, #0]
 801194e:	4603      	mov	r3, r0
 8011950:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	3b01      	subs	r3, #1
 8011956:	6a3a      	ldr	r2, [r7, #32]
 8011958:	fb02 f303 	mul.w	r3, r2, r3
 801195c:	3301      	adds	r3, #1
 801195e:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d101      	bne.n	801196a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 8011966:	2300      	movs	r3, #0
 8011968:	e017      	b.n	801199a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 801196a:	7bfb      	ldrb	r3, [r7, #15]
 801196c:	2b01      	cmp	r3, #1
 801196e:	d002      	beq.n	8011976 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 8011970:	2b02      	cmp	r3, #2
 8011972:	d008      	beq.n	8011986 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 8011974:	e010      	b.n	8011998 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 8011976:	68ba      	ldr	r2, [r7, #8]
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	4413      	add	r3, r2
 801197c:	1e5a      	subs	r2, r3, #1
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	fb92 f3f3 	sdiv	r3, r2, r3
 8011984:	e009      	b.n	801199a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8011986:	68ba      	ldr	r2, [r7, #8]
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	441a      	add	r2, r3
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	1ad2      	subs	r2, r2, r3
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	fb92 f3f3 	sdiv	r3, r2, r3
 8011996:	e000      	b.n	801199a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 8011998:	2300      	movs	r3, #0
  }
}
 801199a:	4618      	mov	r0, r3
 801199c:	371c      	adds	r7, #28
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr

080119a6 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 80119a6:	b580      	push	{r7, lr}
 80119a8:	b088      	sub	sp, #32
 80119aa:	af02      	add	r7, sp, #8
 80119ac:	60f8      	str	r0, [r7, #12]
 80119ae:	60b9      	str	r1, [r7, #8]
 80119b0:	607a      	str	r2, [r7, #4]
 80119b2:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 80119b4:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 80119b8:	6a3b      	ldr	r3, [r7, #32]
 80119ba:	9300      	str	r3, [sp, #0]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80119c2:	f7ff ffbe 	bl	8011942 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 80119c6:	4602      	mov	r2, r0
 80119c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119ca:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 80119cc:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	9300      	str	r3, [sp, #0]
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80119da:	f7ff ffb2 	bl	8011942 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 80119de:	4602      	mov	r2, r0
 80119e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e2:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 80119e4:	2300      	movs	r3, #0
 80119e6:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 80119e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	f107 0214 	add.w	r2, r7, #20
 80119f0:	9201      	str	r2, [sp, #4]
 80119f2:	9300      	str	r3, [sp, #0]
 80119f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119f8:	6839      	ldr	r1, [r7, #0]
 80119fa:	68b8      	ldr	r0, [r7, #8]
 80119fc:	f7ff ff72 	bl	80118e4 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8011a00:	4602      	mov	r2, r0
  padding_values.height =
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 8011a06:	697a      	ldr	r2, [r7, #20]
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8011a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	f107 0214 	add.w	r2, r7, #20
 8011a14:	9201      	str	r2, [sp, #4]
 8011a16:	9300      	str	r3, [sp, #0]
 8011a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a1c:	6a39      	ldr	r1, [r7, #32]
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f7ff ff60 	bl	80118e4 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8011a24:	4602      	mov	r2, r0
  padding_values.width =
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 8011a2a:	697a      	ldr	r2, [r7, #20]
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	609a      	str	r2, [r3, #8]
  return padding_values;
 8011a30:	bf00      	nop
}
 8011a32:	68f8      	ldr	r0, [r7, #12]
 8011a34:	3718      	adds	r7, #24
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}

08011a3a <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
const int kConvQuantizedDimension = 0;

// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
 8011a3a:	b580      	push	{r7, lr}
 8011a3c:	b084      	sub	sp, #16
 8011a3e:	af00      	add	r7, sp, #0
 8011a40:	60f8      	str	r0, [r7, #12]
 8011a42:	60b9      	str	r1, [r7, #8]
 8011a44:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	7b18      	ldrb	r0, [r3, #12]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	3330      	adds	r3, #48	; 0x30
 8011a54:	4619      	mov	r1, r3
 8011a56:	f000 f97f 	bl	8011d58 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f000 fbbd 	bl	80121de <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8011a64:	4603      	mov	r3, r0
 8011a66:	461a      	mov	r2, r3
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	b21a      	sxth	r2, r3
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	685b      	ldr	r3, [r3, #4]
 8011a7a:	b21a      	sxth	r2, r3
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	b21a      	sxth	r2, r3
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	689b      	ldr	r3, [r3, #8]
 8011a8e:	b21a      	sxth	r2, r3
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	691b      	ldr	r3, [r3, #16]
 8011a98:	b21a      	sxth	r2, r3
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	695b      	ldr	r3, [r3, #20]
 8011aa2:	b21a      	sxth	r2, r3
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	821a      	strh	r2, [r3, #16]
  return op_params;
 8011aa8:	bf00      	nop
}
 8011aaa:	68f8      	ldr	r0, [r7, #12]
 8011aac:	3710      	adds	r7, #16
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}

08011ab2 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 8011ab2:	b580      	push	{r7, lr}
 8011ab4:	b084      	sub	sp, #16
 8011ab6:	af00      	add	r7, sp, #0
 8011ab8:	60f8      	str	r0, [r7, #12]
 8011aba:	60b9      	str	r1, [r7, #8]
 8011abc:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	691b      	ldr	r3, [r3, #16]
 8011ac2:	425a      	negs	r2, r3
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	695b      	ldr	r3, [r3, #20]
 8011acc:	425a      	negs	r2, r3
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	699a      	ldr	r2, [r3, #24]
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	69da      	ldr	r2, [r3, #28]
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6a1b      	ldr	r3, [r3, #32]
 8011ae6:	425a      	negs	r2, r3
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8011aec:	68bb      	ldr	r3, [r7, #8]
 8011aee:	781b      	ldrb	r3, [r3, #0]
 8011af0:	4618      	mov	r0, r3
 8011af2:	f000 fb74 	bl	80121de <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8011af6:	4603      	mov	r3, r0
 8011af8:	461a      	mov	r2, r3
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	b21a      	sxth	r2, r3
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	b21a      	sxth	r2, r3
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	689b      	ldr	r3, [r3, #8]
 8011b16:	b21a      	sxth	r2, r3
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	b21a      	sxth	r2, r3
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	695b      	ldr	r3, [r3, #20]
 8011b2a:	b21a      	sxth	r2, r3
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	691b      	ldr	r3, [r3, #16]
 8011b34:	b21a      	sxth	r2, r3
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	81da      	strh	r2, [r3, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 8011b4a:	bf00      	nop
}
 8011b4c:	68f8      	ldr	r0, [r7, #12]
 8011b4e:	3710      	adds	r7, #16
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}

08011b54 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 8011b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b56:	b09d      	sub	sp, #116	; 0x74
 8011b58:	af0a      	add	r7, sp, #40	; 0x28
 8011b5a:	6278      	str	r0, [r7, #36]	; 0x24
 8011b5c:	6239      	str	r1, [r7, #32]
 8011b5e:	61fa      	str	r2, [r7, #28]
 8011b60:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8011b62:	6a3b      	ldr	r3, [r7, #32]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	2b03      	cmp	r3, #3
 8011b6a:	bf0c      	ite	eq
 8011b6c:	2301      	moveq	r3, #1
 8011b6e:	2300      	movne	r3, #0
 8011b70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8011b74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011b78:	f083 0301 	eor.w	r3, r3, #1
 8011b7c:	b2db      	uxtb	r3, r3
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d00f      	beq.n	8011ba2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8011b82:	6a3b      	ldr	r3, [r7, #32]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	2b02      	cmp	r3, #2
 8011b8a:	d00a      	beq.n	8011ba2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8e:	695c      	ldr	r4, [r3, #20]
 8011b90:	4b68      	ldr	r3, [pc, #416]	; (8011d34 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>)
 8011b92:	9300      	str	r3, [sp, #0]
 8011b94:	2356      	movs	r3, #86	; 0x56
 8011b96:	4a68      	ldr	r2, [pc, #416]	; (8011d38 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8011b98:	4968      	ldr	r1, [pc, #416]	; (8011d3c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8011b9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b9c:	47a0      	blx	r4
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	e0c4      	b.n	8011d2c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8011ba2:	6a3b      	ldr	r3, [r7, #32]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	d012      	beq.n	8011bd2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 8011bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bae:	695c      	ldr	r4, [r3, #20]
 8011bb0:	6a3b      	ldr	r3, [r7, #32]
 8011bb2:	685b      	ldr	r3, [r3, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	2201      	movs	r2, #1
 8011bb8:	9203      	str	r2, [sp, #12]
 8011bba:	9302      	str	r3, [sp, #8]
 8011bbc:	4b60      	ldr	r3, [pc, #384]	; (8011d40 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ec>)
 8011bbe:	9301      	str	r3, [sp, #4]
 8011bc0:	4b60      	ldr	r3, [pc, #384]	; (8011d44 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 8011bc2:	9300      	str	r3, [sp, #0]
 8011bc4:	2357      	movs	r3, #87	; 0x57
 8011bc6:	4a5c      	ldr	r2, [pc, #368]	; (8011d38 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8011bc8:	495f      	ldr	r1, [pc, #380]	; (8011d48 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8011bca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011bcc:	47a0      	blx	r4
 8011bce:	2301      	movs	r3, #1
 8011bd0:	e0ac      	b.n	8011d2c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 8011bd2:	69fb      	ldr	r3, [r7, #28]
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 8011bda:	69fb      	ldr	r3, [r7, #28]
 8011bdc:	6899      	ldr	r1, [r3, #8]
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	685c      	ldr	r4, [r3, #4]
 8011be2:	69fb      	ldr	r3, [r7, #28]
 8011be4:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 8011be6:	69fb      	ldr	r3, [r7, #28]
 8011be8:	691b      	ldr	r3, [r3, #16]
      padding, &out_height, &out_width);
 8011bea:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8011bec:	f107 0008 	add.w	r0, r7, #8
 8011bf0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011bf4:	9207      	str	r2, [sp, #28]
 8011bf6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011bfa:	9206      	str	r2, [sp, #24]
 8011bfc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8011c00:	9205      	str	r2, [sp, #20]
 8011c02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011c04:	9204      	str	r2, [sp, #16]
 8011c06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011c08:	9203      	str	r2, [sp, #12]
 8011c0a:	69ba      	ldr	r2, [r7, #24]
 8011c0c:	9202      	str	r2, [sp, #8]
 8011c0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c10:	9201      	str	r2, [sp, #4]
 8011c12:	9300      	str	r3, [sp, #0]
 8011c14:	462b      	mov	r3, r5
 8011c16:	4622      	mov	r2, r4
 8011c18:	f7ff fec5 	bl	80119a6 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8011c1c:	4634      	mov	r4, r6
 8011c1e:	f107 0308 	add.w	r3, r7, #8
 8011c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8011c28:	2200      	movs	r2, #0
 8011c2a:	6a39      	ldr	r1, [r7, #32]
 8011c2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c2e:	f7f9 ff4d 	bl	800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8011c32:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 8011c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d10a      	bne.n	8011c50 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xfc>
 8011c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c3c:	695c      	ldr	r4, [r3, #20]
 8011c3e:	4b43      	ldr	r3, [pc, #268]	; (8011d4c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8011c40:	9300      	str	r3, [sp, #0]
 8011c42:	2361      	movs	r3, #97	; 0x61
 8011c44:	4a3c      	ldr	r2, [pc, #240]	; (8011d38 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8011c46:	493d      	ldr	r1, [pc, #244]	; (8011d3c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8011c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c4a:	47a0      	blx	r4
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e06d      	b.n	8011d2c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 8011c50:	2201      	movs	r2, #1
 8011c52:	6a39      	ldr	r1, [r7, #32]
 8011c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c56:	f7f9 ff39 	bl	800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8011c5a:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 8011c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d10a      	bne.n	8011c78 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x124>
 8011c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c64:	695c      	ldr	r4, [r3, #20]
 8011c66:	4b3a      	ldr	r3, [pc, #232]	; (8011d50 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	2363      	movs	r3, #99	; 0x63
 8011c6c:	4a32      	ldr	r2, [pc, #200]	; (8011d38 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8011c6e:	4933      	ldr	r1, [pc, #204]	; (8011d3c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8011c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c72:	47a0      	blx	r4
 8011c74:	2301      	movs	r3, #1
 8011c76:	e059      	b.n	8011d2c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 8011c78:	2202      	movs	r2, #2
 8011c7a:	6a39      	ldr	r1, [r7, #32]
 8011c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c7e:	f7f9 ff55 	bl	800bb2c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8011c82:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8011c84:	2200      	movs	r2, #0
 8011c86:	6a39      	ldr	r1, [r7, #32]
 8011c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c8a:	f7f9 ff2f 	bl	800baec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8011c8e:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 8011c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d10a      	bne.n	8011cac <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x158>
 8011c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c98:	695c      	ldr	r4, [r3, #20]
 8011c9a:	4b2e      	ldr	r3, [pc, #184]	; (8011d54 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 8011c9c:	9300      	str	r3, [sp, #0]
 8011c9e:	2367      	movs	r3, #103	; 0x67
 8011ca0:	4a25      	ldr	r2, [pc, #148]	; (8011d38 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8011ca2:	4926      	ldr	r1, [pc, #152]	; (8011d3c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8011ca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ca6:	47a0      	blx	r4
 8011ca8:	2301      	movs	r3, #1
 8011caa:	e03f      	b.n	8011d2c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8011cac:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011cb0:	2b01      	cmp	r3, #1
 8011cb2:	d02e      	beq.n	8011d12 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 8011cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cb6:	689b      	ldr	r3, [r3, #8]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8011cbc:	69fb      	ldr	r3, [r7, #28]
 8011cbe:	330c      	adds	r3, #12
 8011cc0:	607b      	str	r3, [r7, #4]
 8011cc2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011cc4:	321c      	adds	r2, #28
 8011cc6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011cc8:	3120      	adds	r1, #32
 8011cca:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8011ccc:	302c      	adds	r0, #44	; 0x2c
 8011cce:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8011cd0:	3430      	adds	r4, #48	; 0x30
 8011cd2:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8011cd4:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8011cd6:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8011cd8:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8011cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cdc:	9308      	str	r3, [sp, #32]
 8011cde:	9607      	str	r6, [sp, #28]
 8011ce0:	9506      	str	r5, [sp, #24]
 8011ce2:	9405      	str	r4, [sp, #20]
 8011ce4:	9004      	str	r0, [sp, #16]
 8011ce6:	9103      	str	r1, [sp, #12]
 8011ce8:	9202      	str	r2, [sp, #8]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	9301      	str	r3, [sp, #4]
 8011cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cf0:	9300      	str	r3, [sp, #0]
 8011cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011cf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cfa:	f7f9 ff27 	bl	800bb4c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011d04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d002      	beq.n	8011d12 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
 8011d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d10:	e00c      	b.n	8011d2c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier, data->per_channel_output_shift,
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 8011d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d14:	691a      	ldr	r2, [r3, #16]
 8011d16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d18:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 8011d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d1c:	691a      	ldr	r2, [r3, #16]
 8011d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d20:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 8011d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d24:	691a      	ldr	r2, [r3, #16]
 8011d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d28:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8011d2a:	2300      	movs	r3, #0
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	374c      	adds	r7, #76	; 0x4c
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d34:	0802ad48 	.word	0x0802ad48
 8011d38:	0802acf0 	.word	0x0802acf0
 8011d3c:	0802ad30 	.word	0x0802ad30
 8011d40:	0802ad88 	.word	0x0802ad88
 8011d44:	0802ad8c 	.word	0x0802ad8c
 8011d48:	0802ad6c 	.word	0x0802ad6c
 8011d4c:	0802ada0 	.word	0x0802ada0
 8011d50:	0802adb4 	.word	0x0802adb4
 8011d54:	0802adc8 	.word	0x0802adc8

08011d58 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b084      	sub	sp, #16
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	4603      	mov	r3, r0
 8011d60:	60b9      	str	r1, [r7, #8]
 8011d62:	607a      	str	r2, [r7, #4]
 8011d64:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8011d66:	7bfb      	ldrb	r3, [r7, #15]
 8011d68:	2b01      	cmp	r3, #1
 8011d6a:	d10b      	bne.n	8011d84 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	f04f 0200 	mov.w	r2, #0
 8011d72:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8011d74:	f7ff fd9c 	bl	80118b0 <_ZNSt14numeric_limitsIfE3maxEv>
 8011d78:	eef0 7a40 	vmov.f32	s15, s0
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8011d82:	e023      	b.n	8011dcc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8011d84:	7bfb      	ldrb	r3, [r7, #15]
 8011d86:	2b03      	cmp	r3, #3
 8011d88:	d107      	bne.n	8011d9a <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	f04f 0200 	mov.w	r2, #0
 8011d90:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	4a0f      	ldr	r2, [pc, #60]	; (8011dd4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8011d96:	601a      	str	r2, [r3, #0]
}
 8011d98:	e018      	b.n	8011dcc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8011d9a:	7bfb      	ldrb	r3, [r7, #15]
 8011d9c:	2b02      	cmp	r3, #2
 8011d9e:	d107      	bne.n	8011db0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	4a0d      	ldr	r2, [pc, #52]	; (8011dd8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8011da4:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011dac:	601a      	str	r2, [r3, #0]
}
 8011dae:	e00d      	b.n	8011dcc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8011db0:	f7ff fd8c 	bl	80118cc <_ZNSt14numeric_limitsIfE6lowestEv>
 8011db4:	eef0 7a40 	vmov.f32	s15, s0
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8011dbe:	f7ff fd77 	bl	80118b0 <_ZNSt14numeric_limitsIfE3maxEv>
 8011dc2:	eef0 7a40 	vmov.f32	s15, s0
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	edc3 7a00 	vstr	s15, [r3]
}
 8011dcc:	bf00      	nop
 8011dce:	3710      	adds	r7, #16
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}
 8011dd4:	40c00000 	.word	0x40c00000
 8011dd8:	bf800000 	.word	0xbf800000

08011ddc <_ZN6tflite11NumElementsEPK12TfLiteTensor>:
inline int64_t NumElements(const TfLiteTensor* t) {
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	689b      	ldr	r3, [r3, #8]
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7fe ffa3 	bl	8010d34 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 8011dee:	4602      	mov	r2, r0
 8011df0:	460b      	mov	r3, r1
}
 8011df2:	4610      	mov	r0, r2
 8011df4:	4619      	mov	r1, r3
 8011df6:	3708      	adds	r7, #8
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
const int kDepthwiseConvQuantizedDimension = 3;

// Returns a DepthwiseParams struct with all the parameters needed for a
// float computation.
DepthwiseParams DepthwiseConvParamsFloat(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	7c18      	ldrb	r0, [r3, #16]
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	3330      	adds	r3, #48	; 0x30
 8011e16:	4619      	mov	r1, r3
 8011e18:	f7ff ff9e 	bl	8011d58 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	4618      	mov	r0, r3
 8011e22:	f000 f9dc 	bl	80121de <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8011e26:	4603      	mov	r3, r0
 8011e28:	461a      	mov	r2, r3
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	b21a      	sxth	r2, r3
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	685b      	ldr	r3, [r3, #4]
 8011e3c:	b21a      	sxth	r2, r3
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	b21a      	sxth	r2, r3
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	689b      	ldr	r3, [r3, #8]
 8011e50:	b21a      	sxth	r2, r3
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	695b      	ldr	r3, [r3, #20]
 8011e5a:	b21a      	sxth	r2, r3
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	699b      	ldr	r3, [r3, #24]
 8011e64:	b21a      	sxth	r2, r3
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	821a      	strh	r2, [r3, #16]
  op_params.depth_multiplier = params.depth_multiplier;
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	68db      	ldr	r3, [r3, #12]
 8011e6e:	b21a      	sxth	r2, r3
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	825a      	strh	r2, [r3, #18]
  return op_params;
 8011e74:	bf00      	nop
}
 8011e76:	68f8      	ldr	r0, [r7, #12]
 8011e78:	3710      	adds	r7, #16
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}

08011e7e <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:

// Returns a DepthwiseParams struct with all the parameters needed for a
// quantized computation.
DepthwiseParams DepthwiseConvParamsQuantized(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 8011e7e:	b580      	push	{r7, lr}
 8011e80:	b084      	sub	sp, #16
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	60f8      	str	r0, [r7, #12]
 8011e86:	60b9      	str	r1, [r7, #8]
 8011e88:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  op_params.input_offset = -data.input_zero_point;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	691b      	ldr	r3, [r3, #16]
 8011e8e:	425a      	negs	r2, r3
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	695b      	ldr	r3, [r3, #20]
 8011e98:	425a      	negs	r2, r3
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	699a      	ldr	r2, [r3, #24]
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	69da      	ldr	r2, [r3, #28]
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6a1b      	ldr	r3, [r3, #32]
 8011eb2:	425a      	negs	r2, r3
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f000 f98e 	bl	80121de <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	b21a      	sxth	r2, r3
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	b21a      	sxth	r2, r3
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	689b      	ldr	r3, [r3, #8]
 8011ee2:	b21a      	sxth	r2, r3
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	b21a      	sxth	r2, r3
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	699b      	ldr	r3, [r3, #24]
 8011ef6:	b21a      	sxth	r2, r3
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	695b      	ldr	r3, [r3, #20]
 8011f00:	b21a      	sxth	r2, r3
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	81da      	strh	r2, [r3, #14]
  op_params.depth_multiplier = params.depth_multiplier;
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	68db      	ldr	r3, [r3, #12]
 8011f0a:	b21a      	sxth	r2, r3
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	825a      	strh	r2, [r3, #18]
  op_params.quantized_activation_min = data.output_activation_min;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 8011f20:	bf00      	nop
}
 8011f22:	68f8      	ldr	r0, [r7, #12]
 8011f24:	3710      	adds	r7, #16
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}
	...

08011f2c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
 8011f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f2e:	b09d      	sub	sp, #116	; 0x74
 8011f30:	af0a      	add	r7, sp, #40	; 0x28
 8011f32:	6278      	str	r0, [r7, #36]	; 0x24
 8011f34:	6239      	str	r1, [r7, #32]
 8011f36:	61fa      	str	r2, [r7, #28]
 8011f38:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8011f3a:	6a3b      	ldr	r3, [r7, #32]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	2b03      	cmp	r3, #3
 8011f42:	bf0c      	ite	eq
 8011f44:	2301      	moveq	r3, #1
 8011f46:	2300      	movne	r3, #0
 8011f48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8011f4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011f50:	f083 0301 	eor.w	r3, r3, #1
 8011f54:	b2db      	uxtb	r3, r3
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d00f      	beq.n	8011f7a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8011f5a:	6a3b      	ldr	r3, [r7, #32]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	2b02      	cmp	r3, #2
 8011f62:	d00a      	beq.n	8011f7a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8011f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f66:	695c      	ldr	r4, [r3, #20]
 8011f68:	4b6c      	ldr	r3, [pc, #432]	; (801211c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 8011f6a:	9300      	str	r3, [sp, #0]
 8011f6c:	2357      	movs	r3, #87	; 0x57
 8011f6e:	4a6c      	ldr	r2, [pc, #432]	; (8012120 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8011f70:	496c      	ldr	r1, [pc, #432]	; (8012124 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8011f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f74:	47a0      	blx	r4
 8011f76:	2301      	movs	r3, #1
 8011f78:	e0cc      	b.n	8012114 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8011f7a:	6a3b      	ldr	r3, [r7, #32]
 8011f7c:	685b      	ldr	r3, [r3, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	2b01      	cmp	r3, #1
 8011f82:	d012      	beq.n	8011faa <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 8011f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f86:	695c      	ldr	r4, [r3, #20]
 8011f88:	6a3b      	ldr	r3, [r7, #32]
 8011f8a:	685b      	ldr	r3, [r3, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	2201      	movs	r2, #1
 8011f90:	9203      	str	r2, [sp, #12]
 8011f92:	9302      	str	r3, [sp, #8]
 8011f94:	4b64      	ldr	r3, [pc, #400]	; (8012128 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 8011f96:	9301      	str	r3, [sp, #4]
 8011f98:	4b64      	ldr	r3, [pc, #400]	; (801212c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 8011f9a:	9300      	str	r3, [sp, #0]
 8011f9c:	2358      	movs	r3, #88	; 0x58
 8011f9e:	4a60      	ldr	r2, [pc, #384]	; (8012120 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8011fa0:	4963      	ldr	r1, [pc, #396]	; (8012130 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
 8011fa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fa4:	47a0      	blx	r4
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	e0b4      	b.n	8012114 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 8011faa:	69fb      	ldr	r3, [r7, #28]
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 8011fb2:	69fb      	ldr	r3, [r7, #28]
 8011fb4:	6899      	ldr	r1, [r3, #8]
 8011fb6:	69fb      	ldr	r3, [r7, #28]
 8011fb8:	685c      	ldr	r4, [r3, #4]
 8011fba:	69fb      	ldr	r3, [r7, #28]
 8011fbc:	699d      	ldr	r5, [r3, #24]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 8011fbe:	69fb      	ldr	r3, [r7, #28]
 8011fc0:	695b      	ldr	r3, [r3, #20]
      padding, &out_height, &out_width);
 8011fc2:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8011fc4:	f107 0008 	add.w	r0, r7, #8
 8011fc8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011fcc:	9207      	str	r2, [sp, #28]
 8011fce:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011fd2:	9206      	str	r2, [sp, #24]
 8011fd4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8011fd8:	9205      	str	r2, [sp, #20]
 8011fda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011fdc:	9204      	str	r2, [sp, #16]
 8011fde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011fe0:	9203      	str	r2, [sp, #12]
 8011fe2:	69ba      	ldr	r2, [r7, #24]
 8011fe4:	9202      	str	r2, [sp, #8]
 8011fe6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011fe8:	9201      	str	r2, [sp, #4]
 8011fea:	9300      	str	r3, [sp, #0]
 8011fec:	462b      	mov	r3, r5
 8011fee:	4622      	mov	r2, r4
 8011ff0:	f7ff fcd9 	bl	80119a6 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8011ff4:	4634      	mov	r4, r6
 8011ff6:	f107 0308 	add.w	r3, r7, #8
 8011ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8012000:	4b4c      	ldr	r3, [pc, #304]	; (8012134 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	461a      	mov	r2, r3
 8012006:	6a39      	ldr	r1, [r7, #32]
 8012008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801200a:	f7f9 fd5f 	bl	800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801200e:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 8012010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012012:	2b00      	cmp	r3, #0
 8012014:	d10a      	bne.n	801202c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x100>
 8012016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012018:	695c      	ldr	r4, [r3, #20]
 801201a:	4b47      	ldr	r3, [pc, #284]	; (8012138 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
 801201c:	9300      	str	r3, [sp, #0]
 801201e:	2362      	movs	r3, #98	; 0x62
 8012020:	4a3f      	ldr	r2, [pc, #252]	; (8012120 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8012022:	4940      	ldr	r1, [pc, #256]	; (8012124 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8012024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012026:	47a0      	blx	r4
 8012028:	2301      	movs	r3, #1
 801202a:	e073      	b.n	8012114 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 801202c:	4b43      	ldr	r3, [pc, #268]	; (801213c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	461a      	mov	r2, r3
 8012032:	6a39      	ldr	r1, [r7, #32]
 8012034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012036:	f7f9 fd49 	bl	800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801203a:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 801203c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801203e:	2b00      	cmp	r3, #0
 8012040:	d10a      	bne.n	8012058 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x12c>
 8012042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012044:	695c      	ldr	r4, [r3, #20]
 8012046:	4b3e      	ldr	r3, [pc, #248]	; (8012140 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
 8012048:	9300      	str	r3, [sp, #0]
 801204a:	2364      	movs	r3, #100	; 0x64
 801204c:	4a34      	ldr	r2, [pc, #208]	; (8012120 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 801204e:	4935      	ldr	r1, [pc, #212]	; (8012124 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8012050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012052:	47a0      	blx	r4
 8012054:	2301      	movs	r3, #1
 8012056:	e05d      	b.n	8012114 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 8012058:	4b3a      	ldr	r3, [pc, #232]	; (8012144 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	461a      	mov	r2, r3
 801205e:	6a39      	ldr	r1, [r7, #32]
 8012060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012062:	f7f9 fd63 	bl	800bb2c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8012066:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8012068:	4b37      	ldr	r3, [pc, #220]	; (8012148 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	461a      	mov	r2, r3
 801206e:	6a39      	ldr	r1, [r7, #32]
 8012070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012072:	f7f9 fd3b 	bl	800baec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8012076:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 8012078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801207a:	2b00      	cmp	r3, #0
 801207c:	d10a      	bne.n	8012094 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x168>
 801207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012080:	695c      	ldr	r4, [r3, #20]
 8012082:	4b32      	ldr	r3, [pc, #200]	; (801214c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x220>)
 8012084:	9300      	str	r3, [sp, #0]
 8012086:	2368      	movs	r3, #104	; 0x68
 8012088:	4a25      	ldr	r2, [pc, #148]	; (8012120 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 801208a:	4926      	ldr	r1, [pc, #152]	; (8012124 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 801208c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801208e:	47a0      	blx	r4
 8012090:	2301      	movs	r3, #1
 8012092:	e03f      	b.n	8012114 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8012094:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8012098:	2b01      	cmp	r3, #1
 801209a:	d02e      	beq.n	80120fa <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 801209c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801209e:	689b      	ldr	r3, [r3, #8]
 80120a0:	691b      	ldr	r3, [r3, #16]
 80120a2:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 80120a4:	69fb      	ldr	r3, [r7, #28]
 80120a6:	3310      	adds	r3, #16
 80120a8:	607b      	str	r3, [r7, #4]
 80120aa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80120ac:	321c      	adds	r2, #28
 80120ae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80120b0:	3120      	adds	r1, #32
 80120b2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80120b4:	302c      	adds	r0, #44	; 0x2c
 80120b6:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80120b8:	3430      	adds	r4, #48	; 0x30
 80120ba:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 80120bc:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 80120be:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 80120c0:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 80120c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c4:	9308      	str	r3, [sp, #32]
 80120c6:	9607      	str	r6, [sp, #28]
 80120c8:	9506      	str	r5, [sp, #24]
 80120ca:	9405      	str	r4, [sp, #20]
 80120cc:	9004      	str	r0, [sp, #16]
 80120ce:	9103      	str	r1, [sp, #12]
 80120d0:	9202      	str	r2, [sp, #8]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	9301      	str	r3, [sp, #4]
 80120d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120d8:	9300      	str	r3, [sp, #0]
 80120da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80120de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80120e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120e2:	f7f9 fd33 	bl	800bb4c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
 80120e6:	4603      	mov	r3, r0
 80120e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d002      	beq.n	80120fa <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
 80120f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120f8:	e00c      	b.n	8012114 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier, data->per_channel_output_shift,
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 80120fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120fc:	691a      	ldr	r2, [r3, #16]
 80120fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012100:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 8012102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012104:	691a      	ldr	r2, [r3, #16]
 8012106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012108:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 801210a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801210c:	691a      	ldr	r2, [r3, #16]
 801210e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012110:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8012112:	2300      	movs	r3, #0
}
 8012114:	4618      	mov	r0, r3
 8012116:	374c      	adds	r7, #76	; 0x4c
 8012118:	46bd      	mov	sp, r7
 801211a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801211c:	0802af40 	.word	0x0802af40
 8012120:	0802aedc 	.word	0x0802aedc
 8012124:	0802af28 	.word	0x0802af28
 8012128:	0802af80 	.word	0x0802af80
 801212c:	0802af84 	.word	0x0802af84
 8012130:	0802af64 	.word	0x0802af64
 8012134:	08031020 	.word	0x08031020
 8012138:	0802af98 	.word	0x0802af98
 801213c:	08031024 	.word	0x08031024
 8012140:	0802afac 	.word	0x0802afac
 8012144:	08031028 	.word	0x08031028
 8012148:	0803102c 	.word	0x0803102c
 801214c:	0802afc0 	.word	0x0802afc0

08012150 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d101      	bne.n	8012162 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 801215e:	f012 fec2 	bl	8024ee6 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681b      	ldr	r3, [r3, #0]
}
 8012166:	4618      	mov	r0, r3
 8012168:	3708      	adds	r7, #8
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}

0801216e <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801216e:	b480      	push	{r7}
 8012170:	b083      	sub	sp, #12
 8012172:	af00      	add	r7, sp, #0
 8012174:	6078      	str	r0, [r7, #4]
 8012176:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012184:	429a      	cmp	r2, r3
 8012186:	da01      	bge.n	801218c <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	e000      	b.n	801218e <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 801218c:	687b      	ldr	r3, [r7, #4]
    }
 801218e:	4618      	mov	r0, r3
 8012190:	370c      	adds	r7, #12
 8012192:	46bd      	mov	sp, r7
 8012194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012198:	4770      	bx	lr

0801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 801219a:	b580      	push	{r7, lr}
 801219c:	b086      	sub	sp, #24
 801219e:	af00      	add	r7, sp, #0
 80121a0:	6078      	str	r0, [r7, #4]
 80121a2:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d003      	beq.n	80121b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d103      	bne.n	80121ba <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f7fa fb6c 	bl	800c890 <_ZN6tflite12RuntimeShapeC1Ev>
 80121b8:	e00d      	b.n	80121d6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	685b      	ldr	r3, [r3, #4]
 80121be:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 80121c0:	697b      	ldr	r3, [r7, #20]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	3304      	adds	r3, #4
 80121ca:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 80121cc:	68fa      	ldr	r2, [r7, #12]
 80121ce:	6939      	ldr	r1, [r7, #16]
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f7fa fb6b 	bl	800c8ac <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	3718      	adds	r7, #24
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}

080121de <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 80121de:	b480      	push	{r7}
 80121e0:	b083      	sub	sp, #12
 80121e2:	af00      	add	r7, sp, #0
 80121e4:	4603      	mov	r3, r0
 80121e6:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 80121e8:	79fb      	ldrb	r3, [r7, #7]
 80121ea:	2b01      	cmp	r3, #1
 80121ec:	d002      	beq.n	80121f4 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 80121ee:	2b02      	cmp	r3, #2
 80121f0:	d002      	beq.n	80121f8 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 80121f2:	e003      	b.n	80121fc <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 80121f4:	2301      	movs	r3, #1
 80121f6:	e002      	b.n	80121fe <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 80121f8:	2302      	movs	r3, #2
 80121fa:	e000      	b.n	80121fe <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 80121fc:	2300      	movs	r3, #0
  }
}
 80121fe:	4618      	mov	r0, r3
 8012200:	370c      	adds	r7, #12
 8012202:	46bd      	mov	sp, r7
 8012204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012208:	4770      	bx	lr

0801220a <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 801220a:	b580      	push	{r7, lr}
 801220c:	b084      	sub	sp, #16
 801220e:	af00      	add	r7, sp, #0
 8012210:	ed87 0a03 	vstr	s0, [r7, #12]
 8012214:	edc7 0a02 	vstr	s1, [r7, #8]
 8012218:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 801221c:	f107 0208 	add.w	r2, r7, #8
 8012220:	f107 030c 	add.w	r3, r7, #12
 8012224:	4611      	mov	r1, r2
 8012226:	4618      	mov	r0, r3
 8012228:	f7f9 f806 	bl	800b238 <_ZSt3maxIfERKT_S2_S2_>
 801222c:	4602      	mov	r2, r0
 801222e:	1d3b      	adds	r3, r7, #4
 8012230:	4619      	mov	r1, r3
 8012232:	4610      	mov	r0, r2
 8012234:	f7f8 ffe7 	bl	800b206 <_ZSt3minIfERKT_S2_S2_>
 8012238:	4603      	mov	r3, r0
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	ee07 3a90 	vmov	s15, r3
}
 8012240:	eeb0 0a67 	vmov.f32	s0, s15
 8012244:	3710      	adds	r7, #16
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}

0801224a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 801224a:	b580      	push	{r7, lr}
 801224c:	b086      	sub	sp, #24
 801224e:	af00      	add	r7, sp, #0
 8012250:	6078      	str	r0, [r7, #4]
 8012252:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7fa fb47 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801225a:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	2b00      	cmp	r3, #0
 8012260:	db03      	blt.n	801226a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8012262:	683a      	ldr	r2, [r7, #0]
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	429a      	cmp	r2, r3
 8012268:	db01      	blt.n	801226e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 801226a:	f012 fe3c 	bl	8024ee6 <abort>
  const auto* dims_data = shape.DimsData();
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7ff f9ff 	bl	8011672 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8012274:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8012276:	2301      	movs	r3, #1
 8012278:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801227a:	2300      	movs	r3, #0
 801227c:	613b      	str	r3, [r7, #16]
 801227e:	693a      	ldr	r2, [r7, #16]
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	429a      	cmp	r2, r3
 8012284:	da12      	bge.n	80122ac <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8012286:	693a      	ldr	r2, [r7, #16]
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	429a      	cmp	r2, r3
 801228c:	d005      	beq.n	801229a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	009b      	lsls	r3, r3, #2
 8012292:	68ba      	ldr	r2, [r7, #8]
 8012294:	4413      	add	r3, r2
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	e000      	b.n	801229c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 801229a:	2301      	movs	r3, #1
 801229c:	697a      	ldr	r2, [r7, #20]
 801229e:	fb03 f302 	mul.w	r3, r3, r2
 80122a2:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80122a4:	693b      	ldr	r3, [r7, #16]
 80122a6:	3301      	adds	r3, #1
 80122a8:	613b      	str	r3, [r7, #16]
 80122aa:	e7e8      	b.n	801227e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 80122ac:	697b      	ldr	r3, [r7, #20]
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	3718      	adds	r7, #24
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bd80      	pop	{r7, pc}

080122b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 80122b6:	b590      	push	{r4, r7, lr}
 80122b8:	b087      	sub	sp, #28
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	60f8      	str	r0, [r7, #12]
 80122be:	60b9      	str	r1, [r7, #8]
 80122c0:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 80122c2:	68f8      	ldr	r0, [r7, #12]
 80122c4:	f7fa fb10 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80122c8:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 80122ca:	2300      	movs	r3, #0
 80122cc:	617b      	str	r3, [r7, #20]
 80122ce:	697a      	ldr	r2, [r7, #20]
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	429a      	cmp	r2, r3
 80122d4:	da15      	bge.n	8012302 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 80122d6:	697a      	ldr	r2, [r7, #20]
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	429a      	cmp	r2, r3
 80122dc:	d00d      	beq.n	80122fa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 80122de:	6979      	ldr	r1, [r7, #20]
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	f7ff f9ac 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 80122e6:	4604      	mov	r4, r0
 80122e8:	6979      	ldr	r1, [r7, #20]
 80122ea:	6878      	ldr	r0, [r7, #4]
 80122ec:	f7ff f9a7 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 80122f0:	4603      	mov	r3, r0
 80122f2:	429c      	cmp	r4, r3
 80122f4:	d001      	beq.n	80122fa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 80122f6:	f012 fdf6 	bl	8024ee6 <abort>
  for (int i = 0; i < dims_count; ++i) {
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	3301      	adds	r3, #1
 80122fe:	617b      	str	r3, [r7, #20]
 8012300:	e7e5      	b.n	80122ce <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8012302:	68b9      	ldr	r1, [r7, #8]
 8012304:	68f8      	ldr	r0, [r7, #12]
 8012306:	f7ff ffa0 	bl	801224a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801230a:	4603      	mov	r3, r0
}
 801230c:	4618      	mov	r0, r3
 801230e:	371c      	adds	r7, #28
 8012310:	46bd      	mov	sp, r7
 8012312:	bd90      	pop	{r4, r7, pc}

08012314 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8012314:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012318:	b08b      	sub	sp, #44	; 0x2c
 801231a:	af00      	add	r7, sp, #0
 801231c:	6078      	str	r0, [r7, #4]
 801231e:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 8012320:	6879      	ldr	r1, [r7, #4]
 8012322:	4608      	mov	r0, r1
 8012324:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8012328:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 801232c:	6839      	ldr	r1, [r7, #0]
 801232e:	4608      	mov	r0, r1
 8012330:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8012334:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 8012338:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801233c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012340:	eb18 0a00 	adds.w	sl, r8, r0
 8012344:	eb49 0b01 	adc.w	fp, r9, r1
 8012348:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 801234c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012350:	2800      	cmp	r0, #0
 8012352:	f171 0100 	sbcs.w	r1, r1, #0
 8012356:	db04      	blt.n	8012362 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 8012358:	f04f 0001 	mov.w	r0, #1
 801235c:	f04f 0100 	mov.w	r1, #0
 8012360:	e003      	b.n	801236a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 8012362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012366:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801236a:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 801236e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8012372:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012376:	eb18 0400 	adds.w	r4, r8, r0
 801237a:	eb49 0501 	adc.w	r5, r9, r1
 801237e:	0fe9      	lsrs	r1, r5, #31
 8012380:	4608      	mov	r0, r1
 8012382:	f04f 0100 	mov.w	r1, #0
 8012386:	1902      	adds	r2, r0, r4
 8012388:	eb41 0305 	adc.w	r3, r1, r5
 801238c:	f04f 0000 	mov.w	r0, #0
 8012390:	f04f 0100 	mov.w	r1, #0
 8012394:	0850      	lsrs	r0, r2, #1
 8012396:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 801239a:	1059      	asrs	r1, r3, #1
 801239c:	4602      	mov	r2, r0
 801239e:	460b      	mov	r3, r1
 80123a0:	4613      	mov	r3, r2
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	372c      	adds	r7, #44	; 0x2c
 80123a6:	46bd      	mov	sp, r7
 80123a8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80123ac:	4770      	bx	lr

080123ae <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80123ae:	b580      	push	{r7, lr}
 80123b0:	b084      	sub	sp, #16
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80123b6:	f107 030c 	add.w	r3, r7, #12
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7f9 f998 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80123c0:	4602      	mov	r2, r0
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6013      	str	r3, [r2, #0]
    return retval;
 80123c6:	68fb      	ldr	r3, [r7, #12]
  }
 80123c8:	4618      	mov	r0, r3
 80123ca:	3710      	adds	r7, #16
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b08a      	sub	sp, #40	; 0x28
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 80123d8:	f000 f9f7 	bl	80127ca <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 80123dc:	4603      	mov	r3, r0
 80123de:	4619      	mov	r1, r3
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f000 f9fd 	bl	80127e0 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80123e6:	4603      	mov	r3, r0
 80123e8:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 80123ea:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 80123ee:	f000 fa29 	bl	8012844 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 80123f2:	4603      	mov	r3, r0
 80123f4:	4618      	mov	r0, r3
 80123f6:	f000 fa11 	bl	801281c <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80123fa:	4603      	mov	r3, r0
 80123fc:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 80123fe:	4823      	ldr	r0, [pc, #140]	; (801248c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8012400:	f000 fa20 	bl	8012844 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8012404:	4603      	mov	r3, r0
 8012406:	4618      	mov	r0, r3
 8012408:	f000 fa08 	bl	801281c <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801240c:	4603      	mov	r3, r0
 801240e:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8012410:	69b9      	ldr	r1, [r7, #24]
 8012412:	6a38      	ldr	r0, [r7, #32]
 8012414:	f000 fa23 	bl	801285e <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012418:	4603      	mov	r3, r0
 801241a:	4619      	mov	r1, r3
 801241c:	69f8      	ldr	r0, [r7, #28]
 801241e:	f000 fa40 	bl	80128a2 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012422:	4603      	mov	r3, r0
 8012424:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8012426:	2300      	movs	r3, #0
 8012428:	627b      	str	r3, [r7, #36]	; 0x24
 801242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242c:	2b02      	cmp	r3, #2
 801242e:	dc21      	bgt.n	8012474 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8012430:	6979      	ldr	r1, [r7, #20]
 8012432:	6a38      	ldr	r0, [r7, #32]
 8012434:	f000 fa13 	bl	801285e <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012438:	4603      	mov	r3, r0
 801243a:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 801243c:	f000 fa4f 	bl	80128de <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8012440:	4603      	mov	r3, r0
 8012442:	6939      	ldr	r1, [r7, #16]
 8012444:	4618      	mov	r0, r3
 8012446:	f000 fa53 	bl	80128f0 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801244a:	4603      	mov	r3, r0
 801244c:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 801244e:	68f9      	ldr	r1, [r7, #12]
 8012450:	6978      	ldr	r0, [r7, #20]
 8012452:	f000 fa6b 	bl	801292c <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012456:	4603      	mov	r3, r0
 8012458:	4618      	mov	r0, r3
 801245a:	f000 fa89 	bl	8012970 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801245e:	4603      	mov	r3, r0
 8012460:	4619      	mov	r1, r3
 8012462:	6978      	ldr	r0, [r7, #20]
 8012464:	f000 fa1d 	bl	80128a2 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012468:	4603      	mov	r3, r0
 801246a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246e:	3301      	adds	r3, #1
 8012470:	627b      	str	r3, [r7, #36]	; 0x24
 8012472:	e7da      	b.n	801242a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 8012474:	6978      	ldr	r0, [r7, #20]
 8012476:	f000 fa95 	bl	80129a4 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 801247a:	4603      	mov	r3, r0
 801247c:	4618      	mov	r0, r3
 801247e:	f000 faa7 	bl	80129d0 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012482:	4603      	mov	r3, r0
}
 8012484:	4618      	mov	r0, r3
 8012486:	3728      	adds	r7, #40	; 0x28
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}
 801248c:	c3c3c3c4 	.word	0xc3c3c3c4

08012490 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8012490:	b580      	push	{r7, lr}
 8012492:	b084      	sub	sp, #16
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8012498:	f107 030c 	add.w	r3, r7, #12
 801249c:	4618      	mov	r0, r3
 801249e:	f000 f989 	bl	80127b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80124a2:	4602      	mov	r2, r0
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6013      	str	r3, [r2, #0]
    return retval;
 80124a8:	68fb      	ldr	r3, [r7, #12]
  }
 80124aa:	4618      	mov	r0, r3
 80124ac:	3710      	adds	r7, #16
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}
	...

080124b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 80124b4:	b590      	push	{r4, r7, lr}
 80124b6:	b091      	sub	sp, #68	; 0x44
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 80124bc:	f000 faa2 	bl	8012a04 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 80124c0:	4603      	mov	r3, r0
 80124c2:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 80124c4:	2001      	movs	r0, #1
 80124c6:	f000 faa6 	bl	8012a16 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 80124ca:	4603      	mov	r3, r0
 80124cc:	4619      	mov	r1, r3
 80124ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80124d0:	f000 fab5 	bl	8012a3e <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80124d4:	4603      	mov	r3, r0
 80124d6:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 80124d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f000 facd 	bl	8012a7a <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80124e0:	4603      	mov	r3, r0
 80124e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80124e4:	4618      	mov	r0, r3
 80124e6:	f000 faaa 	bl	8012a3e <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80124ea:	4603      	mov	r3, r0
 80124ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 80124ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124f0:	f000 fae1 	bl	8012ab6 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80124f4:	4603      	mov	r3, r0
 80124f6:	4618      	mov	r0, r3
 80124f8:	f000 faf8 	bl	8012aec <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 80124fc:	4603      	mov	r3, r0
 80124fe:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8012500:	6879      	ldr	r1, [r7, #4]
 8012502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012504:	f000 fa9b 	bl	8012a3e <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012508:	4603      	mov	r3, r0
 801250a:	63bb      	str	r3, [r7, #56]	; 0x38
 801250c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012510:	4618      	mov	r0, r3
 8012512:	f000 f94f 	bl	80127b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012516:	4603      	mov	r3, r0
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 801251c:	4883      	ldr	r0, [pc, #524]	; (801272c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 801251e:	f7f9 f906 	bl	800b72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012522:	4603      	mov	r3, r0
 8012524:	4618      	mov	r0, r3
 8012526:	f7f9 f8ee 	bl	800b706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801252a:	4603      	mov	r3, r0
 801252c:	627b      	str	r3, [r7, #36]	; 0x24
 801252e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8012532:	f7f9 f909 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012536:	4603      	mov	r3, r0
 8012538:	4619      	mov	r1, r3
 801253a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801253c:	f7f9 f90f 	bl	800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012540:	4603      	mov	r3, r0
 8012542:	4618      	mov	r0, r3
 8012544:	f7f9 f978 	bl	800b838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012548:	4604      	mov	r4, r0
 801254a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801254c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801254e:	f000 fb2f 	bl	8012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012552:	4603      	mov	r3, r0
 8012554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012556:	4619      	mov	r1, r3
 8012558:	4620      	mov	r0, r4
 801255a:	f000 fb4b 	bl	8012bf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801255e:	4603      	mov	r3, r0
 8012560:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8012562:	4873      	ldr	r0, [pc, #460]	; (8012730 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8012564:	f7f9 f8e3 	bl	800b72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012568:	4603      	mov	r3, r0
 801256a:	4618      	mov	r0, r3
 801256c:	f7f9 f8cb 	bl	800b706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012570:	4603      	mov	r3, r0
 8012572:	623b      	str	r3, [r7, #32]
 8012574:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8012578:	f7f9 f8e6 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801257c:	4603      	mov	r3, r0
 801257e:	4619      	mov	r1, r3
 8012580:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012582:	f7f9 f8ec 	bl	800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012586:	4603      	mov	r3, r0
 8012588:	4618      	mov	r0, r3
 801258a:	f7f9 f955 	bl	800b838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801258e:	4604      	mov	r4, r0
 8012590:	6a39      	ldr	r1, [r7, #32]
 8012592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012594:	f000 fb0c 	bl	8012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012598:	4603      	mov	r3, r0
 801259a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801259c:	4619      	mov	r1, r3
 801259e:	4620      	mov	r0, r4
 80125a0:	f000 fb28 	bl	8012bf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80125a4:	4603      	mov	r3, r0
 80125a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 80125a8:	4862      	ldr	r0, [pc, #392]	; (8012734 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 80125aa:	f7f9 f8c0 	bl	800b72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80125ae:	4603      	mov	r3, r0
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7f9 f8a8 	bl	800b706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80125b6:	4603      	mov	r3, r0
 80125b8:	61fb      	str	r3, [r7, #28]
 80125ba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80125be:	f7f9 f8c3 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80125c2:	4603      	mov	r3, r0
 80125c4:	4619      	mov	r1, r3
 80125c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80125c8:	f7f9 f8c9 	bl	800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80125cc:	4603      	mov	r3, r0
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7f9 f932 	bl	800b838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80125d4:	4604      	mov	r4, r0
 80125d6:	69f9      	ldr	r1, [r7, #28]
 80125d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125da:	f000 fae9 	bl	8012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80125de:	4603      	mov	r3, r0
 80125e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125e2:	4619      	mov	r1, r3
 80125e4:	4620      	mov	r0, r4
 80125e6:	f000 fb05 	bl	8012bf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80125ea:	4603      	mov	r3, r0
 80125ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 80125ee:	4852      	ldr	r0, [pc, #328]	; (8012738 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 80125f0:	f7f9 f89d 	bl	800b72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80125f4:	4603      	mov	r3, r0
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7f9 f885 	bl	800b706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80125fc:	4603      	mov	r3, r0
 80125fe:	61bb      	str	r3, [r7, #24]
 8012600:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8012604:	f7f9 f8a0 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012608:	4603      	mov	r3, r0
 801260a:	4619      	mov	r1, r3
 801260c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801260e:	f7f9 f8a6 	bl	800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012612:	4603      	mov	r3, r0
 8012614:	4618      	mov	r0, r3
 8012616:	f7f9 f90f 	bl	800b838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801261a:	4604      	mov	r4, r0
 801261c:	69b9      	ldr	r1, [r7, #24]
 801261e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012620:	f000 fac6 	bl	8012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012624:	4603      	mov	r3, r0
 8012626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012628:	4619      	mov	r1, r3
 801262a:	4620      	mov	r0, r4
 801262c:	f000 fae2 	bl	8012bf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012630:	4603      	mov	r3, r0
 8012632:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8012634:	4841      	ldr	r0, [pc, #260]	; (801273c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8012636:	f7f9 f87a 	bl	800b72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801263a:	4603      	mov	r3, r0
 801263c:	4618      	mov	r0, r3
 801263e:	f7f9 f862 	bl	800b706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012642:	4603      	mov	r3, r0
 8012644:	617b      	str	r3, [r7, #20]
 8012646:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801264a:	f7f9 f87d 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801264e:	4603      	mov	r3, r0
 8012650:	4619      	mov	r1, r3
 8012652:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012654:	f7f9 f883 	bl	800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012658:	4603      	mov	r3, r0
 801265a:	4618      	mov	r0, r3
 801265c:	f7f9 f8ec 	bl	800b838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012660:	4604      	mov	r4, r0
 8012662:	6979      	ldr	r1, [r7, #20]
 8012664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012666:	f000 faa3 	bl	8012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801266a:	4603      	mov	r3, r0
 801266c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801266e:	4619      	mov	r1, r3
 8012670:	4620      	mov	r0, r4
 8012672:	f000 fabf 	bl	8012bf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012676:	4603      	mov	r3, r0
 8012678:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 801267a:	4831      	ldr	r0, [pc, #196]	; (8012740 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 801267c:	f7f9 f857 	bl	800b72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012680:	4603      	mov	r3, r0
 8012682:	4618      	mov	r0, r3
 8012684:	f7f9 f83f 	bl	800b706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012688:	4603      	mov	r3, r0
 801268a:	613b      	str	r3, [r7, #16]
 801268c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8012690:	f7f9 f85a 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012694:	4603      	mov	r3, r0
 8012696:	4619      	mov	r1, r3
 8012698:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801269a:	f7f9 f860 	bl	800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801269e:	4603      	mov	r3, r0
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7f9 f8c9 	bl	800b838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80126a6:	4604      	mov	r4, r0
 80126a8:	6939      	ldr	r1, [r7, #16]
 80126aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126ac:	f000 fa80 	bl	8012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80126b0:	4603      	mov	r3, r0
 80126b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126b4:	4619      	mov	r1, r3
 80126b6:	4620      	mov	r0, r4
 80126b8:	f000 fa9c 	bl	8012bf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80126bc:	4603      	mov	r3, r0
 80126be:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 80126c0:	20f2      	movs	r0, #242	; 0xf2
 80126c2:	f7f9 f834 	bl	800b72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80126c6:	4603      	mov	r3, r0
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7f9 f81c 	bl	800b706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80126ce:	4603      	mov	r3, r0
 80126d0:	60fb      	str	r3, [r7, #12]
 80126d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80126d6:	f7f9 f837 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80126da:	4603      	mov	r3, r0
 80126dc:	4619      	mov	r1, r3
 80126de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80126e0:	f7f9 f83d 	bl	800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80126e4:	4603      	mov	r3, r0
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7f9 f8a6 	bl	800b838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80126ec:	4604      	mov	r4, r0
 80126ee:	68f9      	ldr	r1, [r7, #12]
 80126f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126f2:	f000 fa5d 	bl	8012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80126f6:	4603      	mov	r3, r0
 80126f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126fa:	4619      	mov	r1, r3
 80126fc:	4620      	mov	r0, r4
 80126fe:	f000 fa79 	bl	8012bf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012702:	4603      	mov	r3, r0
 8012704:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f000 fa95 	bl	8012c36 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 801270c:	4604      	mov	r4, r0
 801270e:	f000 f85c 	bl	80127ca <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8012712:	4603      	mov	r3, r0
 8012714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012716:	4619      	mov	r1, r3
 8012718:	4620      	mov	r0, r4
 801271a:	f000 fa6b 	bl	8012bf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801271e:	4603      	mov	r3, r0
 8012720:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8012722:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8012724:	4618      	mov	r0, r3
 8012726:	3744      	adds	r7, #68	; 0x44
 8012728:	46bd      	mov	sp, r7
 801272a:	bd90      	pop	{r4, r7, pc}
 801272c:	63afbe7b 	.word	0x63afbe7b
 8012730:	4da2cbf2 	.word	0x4da2cbf2
 8012734:	2f16ac6c 	.word	0x2f16ac6c
 8012738:	1152aaa4 	.word	0x1152aaa4
 801273c:	02582ab7 	.word	0x02582ab7
 8012740:	000afe11 	.word	0x000afe11

08012744 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8012744:	b5b0      	push	{r4, r5, r7, lr}
 8012746:	b084      	sub	sp, #16
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801274c:	1d3b      	adds	r3, r7, #4
 801274e:	4618      	mov	r0, r3
 8012750:	f7f8 ffce 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012754:	4603      	mov	r3, r0
 8012756:	681d      	ldr	r5, [r3, #0]
 8012758:	f107 030c 	add.w	r3, r7, #12
 801275c:	4618      	mov	r0, r3
 801275e:	f000 fa7c 	bl	8012c5a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8012762:	4604      	mov	r4, r0
 8012764:	4628      	mov	r0, r5
 8012766:	f000 fa83 	bl	8012c70 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 801276a:	4603      	mov	r3, r0
 801276c:	6023      	str	r3, [r4, #0]
  return result;
 801276e:	68fb      	ldr	r3, [r7, #12]
}
 8012770:	4618      	mov	r0, r3
 8012772:	3710      	adds	r7, #16
 8012774:	46bd      	mov	sp, r7
 8012776:	bdb0      	pop	{r4, r5, r7, pc}

08012778 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8012778:	b590      	push	{r4, r7, lr}
 801277a:	b083      	sub	sp, #12
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	6039      	str	r1, [r7, #0]
 8012782:	1d3b      	adds	r3, r7, #4
 8012784:	4618      	mov	r0, r3
 8012786:	f000 fa68 	bl	8012c5a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801278a:	4603      	mov	r3, r0
 801278c:	681c      	ldr	r4, [r3, #0]
 801278e:	463b      	mov	r3, r7
 8012790:	4618      	mov	r0, r3
 8012792:	f000 fa62 	bl	8012c5a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8012796:	4603      	mov	r3, r0
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	4619      	mov	r1, r3
 801279c:	4620      	mov	r0, r4
 801279e:	f7f9 f80f 	bl	800b7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80127a2:	4603      	mov	r3, r0
 80127a4:	4618      	mov	r0, r3
 80127a6:	f000 fa6f 	bl	8012c88 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 80127aa:	4603      	mov	r3, r0
 80127ac:	4618      	mov	r0, r3
 80127ae:	370c      	adds	r7, #12
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd90      	pop	{r4, r7, pc}

080127b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 80127b4:	b480      	push	{r7}
 80127b6:	b083      	sub	sp, #12
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	4618      	mov	r0, r3
 80127c0:	370c      	adds	r7, #12
 80127c2:	46bd      	mov	sp, r7
 80127c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c8:	4770      	bx	lr

080127ca <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 80127ca:	b580      	push	{r7, lr}
 80127cc:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 80127ce:	f000 fa82 	bl	8012cd6 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 80127d2:	4603      	mov	r3, r0
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7f8 ff96 	bl	800b706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80127da:	4603      	mov	r3, r0
  }
 80127dc:	4618      	mov	r0, r3
 80127de:	bd80      	pop	{r7, pc}

080127e0 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 80127e0:	b590      	push	{r4, r7, lr}
 80127e2:	b083      	sub	sp, #12
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	6039      	str	r1, [r7, #0]
 80127ea:	1d3b      	adds	r3, r7, #4
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7f8 ff7f 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80127f2:	4603      	mov	r3, r0
 80127f4:	681c      	ldr	r4, [r3, #0]
 80127f6:	463b      	mov	r3, r7
 80127f8:	4618      	mov	r0, r3
 80127fa:	f7f8 ff79 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80127fe:	4603      	mov	r3, r0
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	4619      	mov	r1, r3
 8012804:	4620      	mov	r0, r4
 8012806:	f7ff fd85 	bl	8012314 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 801280a:	4603      	mov	r3, r0
 801280c:	4618      	mov	r0, r3
 801280e:	f7ff fdce 	bl	80123ae <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8012812:	4603      	mov	r3, r0
 8012814:	4618      	mov	r0, r3
 8012816:	370c      	adds	r7, #12
 8012818:	46bd      	mov	sp, r7
 801281a:	bd90      	pop	{r4, r7, pc}

0801281c <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801281c:	b590      	push	{r4, r7, lr}
 801281e:	b085      	sub	sp, #20
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8012824:	f107 030c 	add.w	r3, r7, #12
 8012828:	4618      	mov	r0, r3
 801282a:	f000 fa5b 	bl	8012ce4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801282e:	4604      	mov	r4, r0
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f7f8 ff89 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012836:	4603      	mov	r3, r0
 8012838:	6023      	str	r3, [r4, #0]
    return retval;
 801283a:	68fb      	ldr	r3, [r7, #12]
  }
 801283c:	4618      	mov	r0, r3
 801283e:	3714      	adds	r7, #20
 8012840:	46bd      	mov	sp, r7
 8012842:	bd90      	pop	{r4, r7, pc}

08012844 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801284c:	2100      	movs	r1, #0
 801284e:	6878      	ldr	r0, [r7, #4]
 8012850:	f7f8 fec8 	bl	800b5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8012854:	4603      	mov	r3, r0
}
 8012856:	4618      	mov	r0, r3
 8012858:	3708      	adds	r7, #8
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}

0801285e <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801285e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012860:	b085      	sub	sp, #20
 8012862:	af00      	add	r7, sp, #0
 8012864:	6078      	str	r0, [r7, #4]
 8012866:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8012868:	1d3b      	adds	r3, r7, #4
 801286a:	4618      	mov	r0, r3
 801286c:	f7f8 ff40 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012870:	4603      	mov	r3, r0
 8012872:	681d      	ldr	r5, [r3, #0]
 8012874:	463b      	mov	r3, r7
 8012876:	4618      	mov	r0, r3
 8012878:	f000 fa34 	bl	8012ce4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801287c:	4603      	mov	r3, r0
 801287e:	681e      	ldr	r6, [r3, #0]
 8012880:	f107 030c 	add.w	r3, r7, #12
 8012884:	4618      	mov	r0, r3
 8012886:	f000 fa2d 	bl	8012ce4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801288a:	4604      	mov	r4, r0
 801288c:	4631      	mov	r1, r6
 801288e:	4628      	mov	r0, r5
 8012890:	f7f8 fd50 	bl	800b334 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8012894:	4603      	mov	r3, r0
 8012896:	6023      	str	r3, [r4, #0]
  return c;
 8012898:	68fb      	ldr	r3, [r7, #12]
}
 801289a:	4618      	mov	r0, r3
 801289c:	3714      	adds	r7, #20
 801289e:	46bd      	mov	sp, r7
 80128a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080128a2 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80128a2:	b590      	push	{r4, r7, lr}
 80128a4:	b083      	sub	sp, #12
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
 80128aa:	6039      	str	r1, [r7, #0]
 80128ac:	1d3b      	adds	r3, r7, #4
 80128ae:	4618      	mov	r0, r3
 80128b0:	f000 fa18 	bl	8012ce4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80128b4:	4603      	mov	r3, r0
 80128b6:	681c      	ldr	r4, [r3, #0]
 80128b8:	463b      	mov	r3, r7
 80128ba:	4618      	mov	r0, r3
 80128bc:	f000 fa12 	bl	8012ce4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80128c0:	4603      	mov	r3, r0
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	4619      	mov	r1, r3
 80128c6:	4620      	mov	r0, r4
 80128c8:	f7f8 ff7a 	bl	800b7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80128cc:	4603      	mov	r3, r0
 80128ce:	4618      	mov	r0, r3
 80128d0:	f000 fa13 	bl	8012cfa <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 80128d4:	4603      	mov	r3, r0
 80128d6:	4618      	mov	r0, r3
 80128d8:	370c      	adds	r7, #12
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd90      	pop	{r4, r7, pc}

080128de <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 80128de:	b580      	push	{r7, lr}
 80128e0:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 80128e2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80128e6:	f7ff ff99 	bl	801281c <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80128ea:	4603      	mov	r3, r0
  }
 80128ec:	4618      	mov	r0, r3
 80128ee:	bd80      	pop	{r7, pc}

080128f0 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 80128f0:	b590      	push	{r4, r7, lr}
 80128f2:	b083      	sub	sp, #12
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	6039      	str	r1, [r7, #0]
 80128fa:	1d3b      	adds	r3, r7, #4
 80128fc:	4618      	mov	r0, r3
 80128fe:	f000 f9f1 	bl	8012ce4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012902:	4603      	mov	r3, r0
 8012904:	681c      	ldr	r4, [r3, #0]
 8012906:	463b      	mov	r3, r7
 8012908:	4618      	mov	r0, r3
 801290a:	f000 f9eb 	bl	8012ce4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801290e:	4603      	mov	r3, r0
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	4619      	mov	r1, r3
 8012914:	4620      	mov	r0, r4
 8012916:	f7f8 ff81 	bl	800b81c <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801291a:	4603      	mov	r3, r0
 801291c:	4618      	mov	r0, r3
 801291e:	f000 f9ec 	bl	8012cfa <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8012922:	4603      	mov	r3, r0
 8012924:	4618      	mov	r0, r3
 8012926:	370c      	adds	r7, #12
 8012928:	46bd      	mov	sp, r7
 801292a:	bd90      	pop	{r4, r7, pc}

0801292c <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801292c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801292e:	b085      	sub	sp, #20
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8012936:	1d3b      	adds	r3, r7, #4
 8012938:	4618      	mov	r0, r3
 801293a:	f000 f9d3 	bl	8012ce4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801293e:	4603      	mov	r3, r0
 8012940:	681d      	ldr	r5, [r3, #0]
 8012942:	463b      	mov	r3, r7
 8012944:	4618      	mov	r0, r3
 8012946:	f000 f9cd 	bl	8012ce4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801294a:	4603      	mov	r3, r0
 801294c:	681e      	ldr	r6, [r3, #0]
 801294e:	f107 030c 	add.w	r3, r7, #12
 8012952:	4618      	mov	r0, r3
 8012954:	f000 f9e2 	bl	8012d1c <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8012958:	4604      	mov	r4, r0
 801295a:	4631      	mov	r1, r6
 801295c:	4628      	mov	r0, r5
 801295e:	f7f8 fce9 	bl	800b334 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8012962:	4603      	mov	r3, r0
 8012964:	6023      	str	r3, [r4, #0]
  return c;
 8012966:	68fb      	ldr	r3, [r7, #12]
}
 8012968:	4618      	mov	r0, r3
 801296a:	3714      	adds	r7, #20
 801296c:	46bd      	mov	sp, r7
 801296e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012970 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8012970:	b5b0      	push	{r4, r5, r7, lr}
 8012972:	b084      	sub	sp, #16
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8012978:	1d3b      	adds	r3, r7, #4
 801297a:	4618      	mov	r0, r3
 801297c:	f000 f9ce 	bl	8012d1c <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8012980:	4603      	mov	r3, r0
 8012982:	681d      	ldr	r5, [r3, #0]
 8012984:	f107 030c 	add.w	r3, r7, #12
 8012988:	4618      	mov	r0, r3
 801298a:	f000 f9ab 	bl	8012ce4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801298e:	4604      	mov	r4, r0
 8012990:	4628      	mov	r0, r5
 8012992:	f000 f9ce 	bl	8012d32 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 8012996:	4603      	mov	r3, r0
 8012998:	6023      	str	r3, [r4, #0]
  return result;
 801299a:	68fb      	ldr	r3, [r7, #12]
}
 801299c:	4618      	mov	r0, r3
 801299e:	3710      	adds	r7, #16
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bdb0      	pop	{r4, r5, r7, pc}

080129a4 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 80129a4:	b590      	push	{r4, r7, lr}
 80129a6:	b085      	sub	sp, #20
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 80129ac:	1d3b      	adds	r3, r7, #4
 80129ae:	4618      	mov	r0, r3
 80129b0:	f000 f998 	bl	8012ce4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80129b4:	4604      	mov	r4, r0
 80129b6:	f107 030c 	add.w	r3, r7, #12
 80129ba:	4618      	mov	r0, r3
 80129bc:	f000 f9c5 	bl	8012d4a <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 80129c0:	4602      	mov	r2, r0
 80129c2:	6823      	ldr	r3, [r4, #0]
 80129c4:	6013      	str	r3, [r2, #0]
  return c;
 80129c6:	68fb      	ldr	r3, [r7, #12]
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3714      	adds	r7, #20
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd90      	pop	{r4, r7, pc}

080129d0 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80129d0:	b5b0      	push	{r4, r5, r7, lr}
 80129d2:	b084      	sub	sp, #16
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80129d8:	1d3b      	adds	r3, r7, #4
 80129da:	4618      	mov	r0, r3
 80129dc:	f000 f9b5 	bl	8012d4a <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 80129e0:	4603      	mov	r3, r0
 80129e2:	681d      	ldr	r5, [r3, #0]
 80129e4:	f107 030c 	add.w	r3, r7, #12
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7f8 fe81 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80129ee:	4604      	mov	r4, r0
 80129f0:	4628      	mov	r0, r5
 80129f2:	f000 f9b5 	bl	8012d60 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 80129f6:	4603      	mov	r3, r0
 80129f8:	6023      	str	r3, [r4, #0]
  return result;
 80129fa:	68fb      	ldr	r3, [r7, #12]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3710      	adds	r7, #16
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bdb0      	pop	{r4, r5, r7, pc}

08012a04 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8012a04:	b580      	push	{r7, lr}
 8012a06:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8012a08:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8012a0c:	f000 f803 	bl	8012a16 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8012a10:	4603      	mov	r3, r0
  }
 8012a12:	4618      	mov	r0, r3
 8012a14:	bd80      	pop	{r7, pc}

08012a16 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8012a16:	b590      	push	{r4, r7, lr}
 8012a18:	b085      	sub	sp, #20
 8012a1a:	af00      	add	r7, sp, #0
 8012a1c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8012a1e:	f107 030c 	add.w	r3, r7, #12
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7ff fec6 	bl	80127b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012a28:	4604      	mov	r4, r0
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f7f8 fe8c 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012a30:	4603      	mov	r3, r0
 8012a32:	6023      	str	r3, [r4, #0]
    return retval;
 8012a34:	68fb      	ldr	r3, [r7, #12]
  }
 8012a36:	4618      	mov	r0, r3
 8012a38:	3714      	adds	r7, #20
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd90      	pop	{r4, r7, pc}

08012a3e <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8012a3e:	b590      	push	{r4, r7, lr}
 8012a40:	b083      	sub	sp, #12
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	6078      	str	r0, [r7, #4]
 8012a46:	6039      	str	r1, [r7, #0]
 8012a48:	1d3b      	adds	r3, r7, #4
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7ff feb2 	bl	80127b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012a50:	4603      	mov	r3, r0
 8012a52:	681c      	ldr	r4, [r3, #0]
 8012a54:	463b      	mov	r3, r7
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7ff feac 	bl	80127b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	4619      	mov	r1, r3
 8012a62:	4620      	mov	r0, r4
 8012a64:	f7f8 feda 	bl	800b81c <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f7ff fd10 	bl	8012490 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8012a70:	4603      	mov	r3, r0
 8012a72:	4618      	mov	r0, r3
 8012a74:	370c      	adds	r7, #12
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd90      	pop	{r4, r7, pc}

08012a7a <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 8012a7a:	b590      	push	{r4, r7, lr}
 8012a7c:	b083      	sub	sp, #12
 8012a7e:	af00      	add	r7, sp, #0
 8012a80:	6078      	str	r0, [r7, #4]
 8012a82:	6039      	str	r1, [r7, #0]
 8012a84:	1d3b      	adds	r3, r7, #4
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7ff fe94 	bl	80127b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	681c      	ldr	r4, [r3, #0]
 8012a90:	463b      	mov	r3, r7
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7ff fe8e 	bl	80127b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f7f8 fe5d 	bl	800b75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7ff fcf2 	bl	8012490 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8012aac:	4603      	mov	r3, r0
 8012aae:	4618      	mov	r0, r3
 8012ab0:	370c      	adds	r7, #12
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd90      	pop	{r4, r7, pc}

08012ab6 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8012ab6:	b5b0      	push	{r4, r5, r7, lr}
 8012ab8:	b084      	sub	sp, #16
 8012aba:	af00      	add	r7, sp, #0
 8012abc:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8012abe:	1d3b      	adds	r3, r7, #4
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7ff fe77 	bl	80127b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	681d      	ldr	r5, [r3, #0]
 8012aca:	f107 030c 	add.w	r3, r7, #12
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f7f8 fe0e 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	f000 f94e 	bl	8012d78 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 8012adc:	4603      	mov	r3, r0
 8012ade:	6023      	str	r3, [r4, #0]
  return result;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3710      	adds	r7, #16
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012aec <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b08a      	sub	sp, #40	; 0x28
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8012af4:	482c      	ldr	r0, [pc, #176]	; (8012ba8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8012af6:	f7f8 fe1a 	bl	800b72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012afa:	4603      	mov	r3, r0
 8012afc:	4618      	mov	r0, r3
 8012afe:	f7f8 fe02 	bl	800b706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012b02:	4603      	mov	r3, r0
 8012b04:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 8012b06:	4829      	ldr	r0, [pc, #164]	; (8012bac <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 8012b08:	f7f8 fe11 	bl	800b72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7f8 fdf9 	bl	800b706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012b14:	4603      	mov	r3, r0
 8012b16:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 8012b18:	f000 f93a 	bl	8012d90 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	4619      	mov	r1, r3
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f000 f93e 	bl	8012da2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012b26:	4603      	mov	r3, r0
 8012b28:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 8012b2a:	69f9      	ldr	r1, [r7, #28]
 8012b2c:	69f8      	ldr	r0, [r7, #28]
 8012b2e:	f000 f83f 	bl	8012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012b32:	4603      	mov	r3, r0
 8012b34:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 8012b36:	69f9      	ldr	r1, [r7, #28]
 8012b38:	69b8      	ldr	r0, [r7, #24]
 8012b3a:	f000 f839 	bl	8012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 8012b42:	69b9      	ldr	r1, [r7, #24]
 8012b44:	69b8      	ldr	r0, [r7, #24]
 8012b46:	f000 f833 	bl	8012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8012b4e:	6938      	ldr	r0, [r7, #16]
 8012b50:	f000 f945 	bl	8012dde <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8012b54:	4603      	mov	r3, r0
 8012b56:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8012b58:	6979      	ldr	r1, [r7, #20]
 8012b5a:	68f8      	ldr	r0, [r7, #12]
 8012b5c:	f000 f921 	bl	8012da2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012b60:	4603      	mov	r3, r0
 8012b62:	6a39      	ldr	r1, [r7, #32]
 8012b64:	4618      	mov	r0, r3
 8012b66:	f000 f823 	bl	8012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	69b9      	ldr	r1, [r7, #24]
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f000 f917 	bl	8012da2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012b74:	4603      	mov	r3, r0
 8012b76:	4618      	mov	r0, r3
 8012b78:	f000 f947 	bl	8012e0a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8012b80:	68b9      	ldr	r1, [r7, #8]
 8012b82:	69f8      	ldr	r0, [r7, #28]
 8012b84:	f000 f90d 	bl	8012da2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b8e:	f000 f80f 	bl	8012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012b92:	4603      	mov	r3, r0
 8012b94:	4619      	mov	r1, r3
 8012b96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b98:	f000 f94d 	bl	8012e36 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012b9c:	4603      	mov	r3, r0
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3728      	adds	r7, #40	; 0x28
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	70f5a894 	.word	0x70f5a894
 8012bac:	2aaaaaab 	.word	0x2aaaaaab

08012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8012bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bb2:	b085      	sub	sp, #20
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8012bba:	1d3b      	adds	r3, r7, #4
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7f8 fd97 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	681d      	ldr	r5, [r3, #0]
 8012bc6:	463b      	mov	r3, r7
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7f8 fd91 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	681e      	ldr	r6, [r3, #0]
 8012bd2:	f107 030c 	add.w	r3, r7, #12
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7f8 fd8a 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012bdc:	4604      	mov	r4, r0
 8012bde:	4631      	mov	r1, r6
 8012be0:	4628      	mov	r0, r5
 8012be2:	f7f8 fba7 	bl	800b334 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8012be6:	4603      	mov	r3, r0
 8012be8:	6023      	str	r3, [r4, #0]
  return c;
 8012bea:	68fb      	ldr	r3, [r7, #12]
}
 8012bec:	4618      	mov	r0, r3
 8012bee:	3714      	adds	r7, #20
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012bf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8012bf4:	b590      	push	{r4, r7, lr}
 8012bf6:	b085      	sub	sp, #20
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	60b9      	str	r1, [r7, #8]
 8012bfe:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8012c00:	f107 0308 	add.w	r3, r7, #8
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7f8 fd73 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012c0a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8012c0c:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8012c0e:	1d3b      	adds	r3, r7, #4
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7f8 fd6d 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012c16:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	461a      	mov	r2, r3
 8012c1c:	4621      	mov	r1, r4
 8012c1e:	68f8      	ldr	r0, [r7, #12]
 8012c20:	f7f8 fe7a 	bl	800b918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012c24:	4603      	mov	r3, r0
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7ff fbc1 	bl	80123ae <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8012c2c:	4603      	mov	r3, r0
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3714      	adds	r7, #20
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd90      	pop	{r4, r7, pc}

08012c36 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 8012c36:	b580      	push	{r7, lr}
 8012c38:	b082      	sub	sp, #8
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	6078      	str	r0, [r7, #4]
 8012c3e:	1d3b      	adds	r3, r7, #4
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7ff fdb7 	bl	80127b4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012c46:	4603      	mov	r3, r0
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f000 f911 	bl	8012e72 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 8012c50:	4603      	mov	r3, r0
 8012c52:	4618      	mov	r0, r3
 8012c54:	3708      	adds	r7, #8
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}

08012c5a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8012c5a:	b480      	push	{r7}
 8012c5c:	b083      	sub	sp, #12
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	6078      	str	r0, [r7, #4]
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	4618      	mov	r0, r3
 8012c66:	370c      	adds	r7, #12
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr

08012c70 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b082      	sub	sp, #8
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f000 f90c 	bl	8012e96 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 8012c7e:	4603      	mov	r3, r0
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	3708      	adds	r7, #8
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8012c90:	f107 030c 	add.w	r3, r7, #12
 8012c94:	4618      	mov	r0, r3
 8012c96:	f7ff ffe0 	bl	8012c5a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8012c9a:	4602      	mov	r2, r0
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6013      	str	r3, [r2, #0]
    return retval;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
  }
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3710      	adds	r7, #16
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}

08012caa <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8012caa:	b480      	push	{r7}
 8012cac:	b083      	sub	sp, #12
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	6078      	str	r0, [r7, #4]
 8012cb2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f993 2000 	ldrsb.w	r2, [r3]
 8012cba:	683b      	ldr	r3, [r7, #0]
 8012cbc:	f993 3000 	ldrsb.w	r3, [r3]
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	da01      	bge.n	8012cc8 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	e000      	b.n	8012cca <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 8012cc8:	687b      	ldr	r3, [r7, #4]
    }
 8012cca:	4618      	mov	r0, r3
 8012ccc:	370c      	adds	r7, #12
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd4:	4770      	bx	lr

08012cd6 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 8012cd6:	b580      	push	{r7, lr}
 8012cd8:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 8012cda:	f7f8 f912 	bl	800af02 <_ZNSt14numeric_limitsIlE3maxEv>
 8012cde:	4603      	mov	r3, r0
  }
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	bd80      	pop	{r7, pc}

08012ce4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 8012ce4:	b480      	push	{r7}
 8012ce6:	b083      	sub	sp, #12
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	4618      	mov	r0, r3
 8012cf0:	370c      	adds	r7, #12
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf8:	4770      	bx	lr

08012cfa <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8012cfa:	b580      	push	{r7, lr}
 8012cfc:	b084      	sub	sp, #16
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8012d02:	f107 030c 	add.w	r3, r7, #12
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7ff ffec 	bl	8012ce4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012d0c:	4602      	mov	r2, r0
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6013      	str	r3, [r2, #0]
    return retval;
 8012d12:	68fb      	ldr	r3, [r7, #12]
  }
 8012d14:	4618      	mov	r0, r3
 8012d16:	3710      	adds	r7, #16
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}

08012d1c <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 8012d1c:	b480      	push	{r7}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	4618      	mov	r0, r3
 8012d28:	370c      	adds	r7, #12
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d30:	4770      	bx	lr

08012d32 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8012d32:	b580      	push	{r7, lr}
 8012d34:	b082      	sub	sp, #8
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f000 f8b8 	bl	8012eb0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 8012d40:	4603      	mov	r3, r0
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3708      	adds	r7, #8
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}

08012d4a <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 8012d4a:	b480      	push	{r7}
 8012d4c:	b083      	sub	sp, #12
 8012d4e:	af00      	add	r7, sp, #0
 8012d50:	6078      	str	r0, [r7, #4]
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	4618      	mov	r0, r3
 8012d56:	370c      	adds	r7, #12
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5e:	4770      	bx	lr

08012d60 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f000 f8e3 	bl	8012f34 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 8012d6e:	4603      	mov	r3, r0
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3708      	adds	r7, #8
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}

08012d78 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b082      	sub	sp, #8
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f000 f919 	bl	8012fb8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 8012d86:	4603      	mov	r3, r0
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3708      	adds	r7, #8
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}

08012d90 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8012d90:	b580      	push	{r7, lr}
 8012d92:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8012d94:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8012d98:	f7f8 fcb5 	bl	800b706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012d9c:	4603      	mov	r3, r0
  }
 8012d9e:	4618      	mov	r0, r3
 8012da0:	bd80      	pop	{r7, pc}

08012da2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8012da2:	b590      	push	{r4, r7, lr}
 8012da4:	b083      	sub	sp, #12
 8012da6:	af00      	add	r7, sp, #0
 8012da8:	6078      	str	r0, [r7, #4]
 8012daa:	6039      	str	r1, [r7, #0]
 8012dac:	1d3b      	adds	r3, r7, #4
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7f8 fc9e 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012db4:	4603      	mov	r3, r0
 8012db6:	681c      	ldr	r4, [r3, #0]
 8012db8:	463b      	mov	r3, r7
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7f8 fc98 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	4619      	mov	r1, r3
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	f7f8 fcfa 	bl	800b7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7ff faed 	bl	80123ae <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	370c      	adds	r7, #12
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd90      	pop	{r4, r7, pc}

08012dde <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8012dde:	b580      	push	{r7, lr}
 8012de0:	b082      	sub	sp, #8
 8012de2:	af00      	add	r7, sp, #0
 8012de4:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8012de6:	1d3b      	adds	r3, r7, #4
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7f8 fc81 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012dee:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	4618      	mov	r0, r3
 8012df4:	f000 f922 	bl	801303c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7ff fad7 	bl	80123ae <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8012e00:	4603      	mov	r3, r0
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3708      	adds	r7, #8
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}

08012e0a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8012e0a:	b580      	push	{r7, lr}
 8012e0c:	b082      	sub	sp, #8
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8012e12:	1d3b      	adds	r3, r7, #4
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7f8 fc6b 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012e1a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7f8 fcf0 	bl	800b804 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 8012e24:	4603      	mov	r3, r0
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7ff fac1 	bl	80123ae <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8012e2c:	4603      	mov	r3, r0
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3708      	adds	r7, #8
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}

08012e36 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 8012e36:	b590      	push	{r4, r7, lr}
 8012e38:	b083      	sub	sp, #12
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	6078      	str	r0, [r7, #4]
 8012e3e:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8012e40:	1d3b      	adds	r3, r7, #4
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7f8 fc54 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012e48:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8012e4a:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8012e4c:	463b      	mov	r3, r7
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7f8 fc4e 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012e54:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	4619      	mov	r1, r3
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	f000 f8fa 	bl	8013054 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 8012e60:	4603      	mov	r3, r0
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7ff faa3 	bl	80123ae <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8012e68:	4603      	mov	r3, r0
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	370c      	adds	r7, #12
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd90      	pop	{r4, r7, pc}

08012e72 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8012e72:	b580      	push	{r7, lr}
 8012e74:	b082      	sub	sp, #8
 8012e76:	af00      	add	r7, sp, #0
 8012e78:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	bf0c      	ite	eq
 8012e80:	2301      	moveq	r3, #1
 8012e82:	2300      	movne	r3, #0
 8012e84:	b2db      	uxtb	r3, r3
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7f8 fcd6 	bl	800b838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012e8c:	4603      	mov	r3, r0
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3708      	adds	r7, #8
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}

08012e96 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b082      	sub	sp, #8
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8012e9e:	210c      	movs	r1, #12
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f7f8 fb9f 	bl	800b5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8012ea6:	4603      	mov	r3, r0
  }
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3708      	adds	r7, #8
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b08a      	sub	sp, #40	; 0x28
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8012eb8:	f7f8 fa23 	bl	800b302 <_ZNSt14numeric_limitsIlE3minEv>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7f8 fc42 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012ec4:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8012ec6:	f7f8 f81c 	bl	800af02 <_ZNSt14numeric_limitsIlE3maxEv>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7f8 fc3b 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012ed2:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8012ed4:	2320      	movs	r3, #32
 8012ed6:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8012ed8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012edc:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8012ede:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 8012ee2:	f7f8 fc31 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	4619      	mov	r1, r3
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f7f8 fc76 	bl	800b7dc <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8012ef0:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8012ef2:	480f      	ldr	r0, [pc, #60]	; (8012f30 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 8012ef4:	f7f8 fc28 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	4619      	mov	r1, r3
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f7f8 fc4b 	bl	800b798 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8012f02:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8012f04:	2102      	movs	r1, #2
 8012f06:	6878      	ldr	r0, [r7, #4]
 8012f08:	f7f8 fcc0 	bl	800b88c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8012f0c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8012f0e:	68fa      	ldr	r2, [r7, #12]
 8012f10:	6a39      	ldr	r1, [r7, #32]
 8012f12:	6978      	ldr	r0, [r7, #20]
 8012f14:	f7f8 fd00 	bl	800b918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012f18:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8012f1a:	68fa      	ldr	r2, [r7, #12]
 8012f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f1e:	6938      	ldr	r0, [r7, #16]
 8012f20:	f7f8 fcfa 	bl	800b918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012f24:	60f8      	str	r0, [r7, #12]
    return result;
 8012f26:	68fb      	ldr	r3, [r7, #12]
  }
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3728      	adds	r7, #40	; 0x28
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}
 8012f30:	e0000001 	.word	0xe0000001

08012f34 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b08a      	sub	sp, #40	; 0x28
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8012f3c:	f7f8 f9e1 	bl	800b302 <_ZNSt14numeric_limitsIlE3minEv>
 8012f40:	4603      	mov	r3, r0
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7f8 fc00 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012f48:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8012f4a:	f7f7 ffda 	bl	800af02 <_ZNSt14numeric_limitsIlE3maxEv>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7f8 fbf9 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012f56:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8012f58:	2320      	movs	r3, #32
 8012f5a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8012f5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012f60:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8012f62:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8012f66:	f7f8 fbef 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	4619      	mov	r1, r3
 8012f6e:	6878      	ldr	r0, [r7, #4]
 8012f70:	f7f8 fc34 	bl	800b7dc <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8012f74:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8012f76:	480f      	ldr	r0, [pc, #60]	; (8012fb4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 8012f78:	f7f8 fbe6 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	4619      	mov	r1, r3
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f7f8 fc09 	bl	800b798 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8012f86:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8012f88:	2101      	movs	r1, #1
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f7f8 fc7e 	bl	800b88c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8012f90:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8012f92:	68fa      	ldr	r2, [r7, #12]
 8012f94:	6a39      	ldr	r1, [r7, #32]
 8012f96:	6978      	ldr	r0, [r7, #20]
 8012f98:	f7f8 fcbe 	bl	800b918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012f9c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8012f9e:	68fa      	ldr	r2, [r7, #12]
 8012fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012fa2:	6938      	ldr	r0, [r7, #16]
 8012fa4:	f7f8 fcb8 	bl	800b918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012fa8:	60f8      	str	r0, [r7, #12]
    return result;
 8012faa:	68fb      	ldr	r3, [r7, #12]
  }
 8012fac:	4618      	mov	r0, r3
 8012fae:	3728      	adds	r7, #40	; 0x28
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}
 8012fb4:	c0000001 	.word	0xc0000001

08012fb8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b08a      	sub	sp, #40	; 0x28
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8012fc0:	f7f8 f99f 	bl	800b302 <_ZNSt14numeric_limitsIlE3minEv>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7f8 fbbe 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012fcc:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8012fce:	f7f7 ff98 	bl	800af02 <_ZNSt14numeric_limitsIlE3maxEv>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7f8 fbb7 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012fda:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8012fdc:	2320      	movs	r3, #32
 8012fde:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8012fe0:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8012fe4:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8012fe6:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 8012fea:	f7f8 fbad 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f7f8 fbf2 	bl	800b7dc <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8012ff8:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8012ffa:	480f      	ldr	r0, [pc, #60]	; (8013038 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 8012ffc:	f7f8 fba4 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013000:	4603      	mov	r3, r0
 8013002:	4619      	mov	r1, r3
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f7f8 fbc7 	bl	800b798 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801300a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801300c:	2105      	movs	r1, #5
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f7f8 fc3c 	bl	800b88c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013014:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8013016:	68fa      	ldr	r2, [r7, #12]
 8013018:	6a39      	ldr	r1, [r7, #32]
 801301a:	6978      	ldr	r0, [r7, #20]
 801301c:	f7f8 fc7c 	bl	800b918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013020:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8013022:	68fa      	ldr	r2, [r7, #12]
 8013024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013026:	6938      	ldr	r0, [r7, #16]
 8013028:	f7f8 fc76 	bl	800b918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801302c:	60f8      	str	r0, [r7, #12]
    return result;
 801302e:	68fb      	ldr	r3, [r7, #12]
  }
 8013030:	4618      	mov	r0, r3
 8013032:	3728      	adds	r7, #40	; 0x28
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}
 8013038:	fc000001 	.word	0xfc000001

0801303c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801303c:	b580      	push	{r7, lr}
 801303e:	b082      	sub	sp, #8
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f000 f813 	bl	8013070 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 801304a:	4603      	mov	r3, r0
}
 801304c:	4618      	mov	r0, r3
 801304e:	3708      	adds	r7, #8
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
 801305c:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 801305e:	6839      	ldr	r1, [r7, #0]
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f000 f812 	bl	801308a <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 8013066:	4603      	mov	r3, r0
}
 8013068:	4618      	mov	r0, r3
 801306a:	3708      	adds	r7, #8
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}

08013070 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8013078:	2102      	movs	r1, #2
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f7f8 fab2 	bl	800b5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013080:	4603      	mov	r3, r0
  }
 8013082:	4618      	mov	r0, r3
 8013084:	3708      	adds	r7, #8
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}

0801308a <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 801308a:	b580      	push	{r7, lr}
 801308c:	b082      	sub	sp, #8
 801308e:	af00      	add	r7, sp, #0
 8013090:	6078      	str	r0, [r7, #4]
 8013092:	6039      	str	r1, [r7, #0]
 8013094:	6839      	ldr	r1, [r7, #0]
 8013096:	6878      	ldr	r0, [r7, #4]
 8013098:	f7f8 fb92 	bl	800b7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801309c:	4603      	mov	r3, r0
 801309e:	4618      	mov	r0, r3
 80130a0:	3708      	adds	r7, #8
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}

080130a6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
 80130a6:	b590      	push	{r4, r7, lr}
 80130a8:	ed2d 8b02 	vpush	{d8}
 80130ac:	b0a7      	sub	sp, #156	; 0x9c
 80130ae:	af02      	add	r7, sp, #8
 80130b0:	60f8      	str	r0, [r7, #12]
 80130b2:	60b9      	str	r1, [r7, #8]
 80130b4:	607a      	str	r2, [r7, #4]
 80130b6:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80130b8:	68b8      	ldr	r0, [r7, #8]
 80130ba:	f7f9 fc15 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b04      	cmp	r3, #4
 80130c2:	d001      	beq.n	80130c8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 80130c4:	f011 ff0f 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80130c8:	6838      	ldr	r0, [r7, #0]
 80130ca:	f7f9 fc0d 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80130ce:	4603      	mov	r3, r0
 80130d0:	2b04      	cmp	r3, #4
 80130d2:	d001      	beq.n	80130d8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 80130d4:	f011 ff07 	bl	8024ee6 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80130d8:	2300      	movs	r3, #0
 80130da:	683a      	ldr	r2, [r7, #0]
 80130dc:	2100      	movs	r1, #0
 80130de:	68b8      	ldr	r0, [r7, #8]
 80130e0:	f7fe fba5 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80130e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80130e6:	2303      	movs	r3, #3
 80130e8:	683a      	ldr	r2, [r7, #0]
 80130ea:	2103      	movs	r1, #3
 80130ec:	68b8      	ldr	r0, [r7, #8]
 80130ee:	f7fe fb9e 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80130f2:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 80130f4:	2101      	movs	r1, #1
 80130f6:	68b8      	ldr	r0, [r7, #8]
 80130f8:	f7fe faa1 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 80130fc:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 80130fe:	2102      	movs	r1, #2
 8013100:	68b8      	ldr	r0, [r7, #8]
 8013102:	f7fe fa9c 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8013106:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8013108:	2101      	movs	r1, #1
 801310a:	6838      	ldr	r0, [r7, #0]
 801310c:	f7fe fa97 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8013110:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8013112:	2102      	movs	r1, #2
 8013114:	6838      	ldr	r0, [r7, #0]
 8013116:	f7fe fa92 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 801311a:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	68db      	ldr	r3, [r3, #12]
 8013120:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	691b      	ldr	r3, [r3, #16]
 8013126:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8013128:	2300      	movs	r3, #0
 801312a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801312e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013134:	429a      	cmp	r2, r3
 8013136:	f280 80f9 	bge.w	801332c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x286>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801313a:	2300      	movs	r3, #0
 801313c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013140:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013146:	429a      	cmp	r2, r3
 8013148:	f280 80ea 	bge.w	8013320 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x27a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801314c:	2300      	movs	r3, #0
 801314e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013152:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013158:	429a      	cmp	r2, r3
 801315a:	f280 80db 	bge.w	8013314 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x26e>
        for (int channel = 0; channel < depth; ++channel) {
 801315e:	2300      	movs	r3, #0
 8013160:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013164:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801316a:	429a      	cmp	r2, r3
 801316c:	f280 80cc 	bge.w	8013308 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x262>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8013170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013174:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013176:	fb02 f303 	mul.w	r3, r2, r3
 801317a:	68fa      	ldr	r2, [r7, #12]
 801317c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8013180:	1a9b      	subs	r3, r3, r2
 8013182:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8013184:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013188:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801318a:	fb02 f303 	mul.w	r3, r2, r3
 801318e:	68fa      	ldr	r2, [r7, #12]
 8013190:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8013194:	1a9b      	subs	r3, r3, r2
 8013196:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8013198:	2300      	movs	r3, #0
 801319a:	617b      	str	r3, [r7, #20]
 801319c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801319e:	425b      	negs	r3, r3
 80131a0:	61bb      	str	r3, [r7, #24]
 80131a2:	f107 0218 	add.w	r2, r7, #24
 80131a6:	f107 0314 	add.w	r3, r7, #20
 80131aa:	4611      	mov	r1, r2
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7f9 f8b1 	bl	800c314 <_ZSt3maxIiERKT_S2_S2_>
 80131b2:	4603      	mov	r3, r0
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	f103 0018 	add.w	r0, r3, #24
 80131be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80131c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131c2:	1ad3      	subs	r3, r2, r3
 80131c4:	61fb      	str	r3, [r7, #28]
 80131c6:	f107 031c 	add.w	r3, r7, #28
 80131ca:	4619      	mov	r1, r3
 80131cc:	f7f8 fc0e 	bl	800b9ec <_ZSt3minIiERKT_S2_S2_>
 80131d0:	4603      	mov	r3, r0
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 80131d6:	2300      	movs	r3, #0
 80131d8:	623b      	str	r3, [r7, #32]
 80131da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131dc:	425b      	negs	r3, r3
 80131de:	627b      	str	r3, [r7, #36]	; 0x24
 80131e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80131e4:	f107 0320 	add.w	r3, r7, #32
 80131e8:	4611      	mov	r1, r2
 80131ea:	4618      	mov	r0, r3
 80131ec:	f7f9 f892 	bl	800c314 <_ZSt3maxIiERKT_S2_S2_>
 80131f0:	4603      	mov	r3, r0
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	f103 0014 	add.w	r0, r3, #20
 80131fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80131fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013200:	1ad3      	subs	r3, r2, r3
 8013202:	62bb      	str	r3, [r7, #40]	; 0x28
 8013204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013208:	4619      	mov	r1, r3
 801320a:	f7f8 fbef 	bl	800b9ec <_ZSt3minIiERKT_S2_S2_>
 801320e:	4603      	mov	r3, r0
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	63bb      	str	r3, [r7, #56]	; 0x38
          float total = 0.f;
 8013214:	f04f 0300 	mov.w	r3, #0
 8013218:	67fb      	str	r3, [r7, #124]	; 0x7c
          float filter_count = 0;
 801321a:	f04f 0300 	mov.w	r3, #0
 801321e:	67bb      	str	r3, [r7, #120]	; 0x78
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8013220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013222:	677b      	str	r3, [r7, #116]	; 0x74
 8013224:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013228:	429a      	cmp	r2, r3
 801322a:	da33      	bge.n	8013294 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ee>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801322c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801322e:	673b      	str	r3, [r7, #112]	; 0x70
 8013230:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013234:	429a      	cmp	r2, r3
 8013236:	da29      	bge.n	801328c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1e6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8013238:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801323a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801323c:	4413      	add	r3, r2
 801323e:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8013240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013244:	4413      	add	r3, r2
 8013246:	633b      	str	r3, [r7, #48]	; 0x30
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8013248:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801324c:	9300      	str	r3, [sp, #0]
 801324e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013252:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8013256:	68b8      	ldr	r0, [r7, #8]
 8013258:	f7fe fa63 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801325c:	4603      	mov	r3, r0
 801325e:	009b      	lsls	r3, r3, #2
 8013260:	687a      	ldr	r2, [r7, #4]
 8013262:	4413      	add	r3, r2
 8013264:	edd3 7a00 	vldr	s15, [r3]
              total +=
 8013268:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801326c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013270:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              filter_count++;
 8013274:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8013278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801327c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013280:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8013284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013286:	3301      	adds	r3, #1
 8013288:	673b      	str	r3, [r7, #112]	; 0x70
 801328a:	e7d1      	b.n	8013230 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801328c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801328e:	3301      	adds	r3, #1
 8013290:	677b      	str	r3, [r7, #116]	; 0x74
 8013292:	e7c7      	b.n	8013224 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17e>
            }
          }
          if (filter_count == 0) return false;
 8013294:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8013298:	eef5 7a40 	vcmp.f32	s15, #0.0
 801329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a0:	d101      	bne.n	80132a6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x200>
 80132a2:	2300      	movs	r3, #0
 80132a4:	e043      	b.n	801332e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x288>
          const float average = total / filter_count;
 80132a6:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80132aa:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80132ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80132b2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
                                           params.float_activation_max);
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	edd3 8a0a 	vldr	s17, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80132c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80132c6:	9300      	str	r3, [sp, #0]
 80132c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80132cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80132d0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80132d4:	6838      	ldr	r0, [r7, #0]
 80132d6:	f7fe fa24 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80132da:	4603      	mov	r3, r0
 80132dc:	009b      	lsls	r3, r3, #2
 80132de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80132e2:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 80132e4:	eeb0 1a68 	vmov.f32	s2, s17
 80132e8:	eef0 0a48 	vmov.f32	s1, s16
 80132ec:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80132f0:	f7fe ff8b 	bl	801220a <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 80132f4:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80132f8:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 80132fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013300:	3301      	adds	r3, #1
 8013302:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013306:	e72d      	b.n	8013164 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xbe>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8013308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801330c:	3301      	adds	r3, #1
 801330e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013312:	e71e      	b.n	8013152 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xac>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8013314:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013318:	3301      	adds	r3, #1
 801331a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801331e:	e70f      	b.n	8013140 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8013320:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013324:	3301      	adds	r3, #1
 8013326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801332a:	e700      	b.n	801312e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
  return true;
 801332c:	2301      	movs	r3, #1
}
 801332e:	4618      	mov	r0, r3
 8013330:	3794      	adds	r7, #148	; 0x94
 8013332:	46bd      	mov	sp, r7
 8013334:	ecbd 8b02 	vpop	{d8}
 8013338:	bd90      	pop	{r4, r7, pc}

0801333a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 801333a:	b590      	push	{r4, r7, lr}
 801333c:	ed2d 8b04 	vpush	{d8-d9}
 8013340:	b0a5      	sub	sp, #148	; 0x94
 8013342:	af02      	add	r7, sp, #8
 8013344:	60f8      	str	r0, [r7, #12]
 8013346:	60b9      	str	r1, [r7, #8]
 8013348:	607a      	str	r2, [r7, #4]
 801334a:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801334c:	68b8      	ldr	r0, [r7, #8]
 801334e:	f7f9 facb 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013352:	4603      	mov	r3, r0
 8013354:	2b04      	cmp	r3, #4
 8013356:	d001      	beq.n	801335c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8013358:	f011 fdc5 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801335c:	6838      	ldr	r0, [r7, #0]
 801335e:	f7f9 fac3 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013362:	4603      	mov	r3, r0
 8013364:	2b04      	cmp	r3, #4
 8013366:	d001      	beq.n	801336c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8013368:	f011 fdbd 	bl	8024ee6 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801336c:	2300      	movs	r3, #0
 801336e:	683a      	ldr	r2, [r7, #0]
 8013370:	2100      	movs	r1, #0
 8013372:	68b8      	ldr	r0, [r7, #8]
 8013374:	f7fe fa5b 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013378:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801337a:	2303      	movs	r3, #3
 801337c:	683a      	ldr	r2, [r7, #0]
 801337e:	2103      	movs	r1, #3
 8013380:	68b8      	ldr	r0, [r7, #8]
 8013382:	f7fe fa54 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013386:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8013388:	2101      	movs	r1, #1
 801338a:	68b8      	ldr	r0, [r7, #8]
 801338c:	f7fe f957 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8013390:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8013392:	2102      	movs	r1, #2
 8013394:	68b8      	ldr	r0, [r7, #8]
 8013396:	f7fe f952 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 801339a:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 801339c:	2101      	movs	r1, #1
 801339e:	6838      	ldr	r0, [r7, #0]
 80133a0:	f7fe f94d 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 80133a4:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 80133a6:	2102      	movs	r1, #2
 80133a8:	6838      	ldr	r0, [r7, #0]
 80133aa:	f7fe f948 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 80133ae:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	68db      	ldr	r3, [r3, #12]
 80133b4:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	691b      	ldr	r3, [r3, #16]
 80133ba:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 80133bc:	2300      	movs	r3, #0
 80133be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80133c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80133c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80133c8:	429a      	cmp	r2, r3
 80133ca:	f280 80d4 	bge.w	8013576 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80133ce:	2300      	movs	r3, #0
 80133d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80133d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80133d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133da:	429a      	cmp	r2, r3
 80133dc:	f280 80c5 	bge.w	801356a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80133e0:	2300      	movs	r3, #0
 80133e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80133e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80133e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80133e8:	429a      	cmp	r2, r3
 80133ea:	f280 80b8 	bge.w	801355e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x224>
        for (int channel = 0; channel < depth; ++channel) {
 80133ee:	2300      	movs	r3, #0
 80133f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80133f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80133f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80133f6:	429a      	cmp	r2, r3
 80133f8:	f280 80ad 	bge.w	8013556 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 80133fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80133fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013400:	fb02 f303 	mul.w	r3, r2, r3
 8013404:	68fa      	ldr	r2, [r7, #12]
 8013406:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 801340a:	1a9b      	subs	r3, r3, r2
 801340c:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 801340e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013412:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013414:	fb02 f303 	mul.w	r3, r2, r3
 8013418:	68fa      	ldr	r2, [r7, #12]
 801341a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 801341e:	1a9b      	subs	r3, r3, r2
 8013420:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8013422:	2300      	movs	r3, #0
 8013424:	61bb      	str	r3, [r7, #24]
 8013426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013428:	425b      	negs	r3, r3
 801342a:	61fb      	str	r3, [r7, #28]
 801342c:	f107 021c 	add.w	r2, r7, #28
 8013430:	f107 0318 	add.w	r3, r7, #24
 8013434:	4611      	mov	r1, r2
 8013436:	4618      	mov	r0, r3
 8013438:	f7f8 ff6c 	bl	800c314 <_ZSt3maxIiERKT_S2_S2_>
 801343c:	4603      	mov	r3, r0
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	f103 0018 	add.w	r0, r3, #24
 8013448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801344a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801344c:	1ad3      	subs	r3, r2, r3
 801344e:	623b      	str	r3, [r7, #32]
 8013450:	f107 0320 	add.w	r3, r7, #32
 8013454:	4619      	mov	r1, r3
 8013456:	f7f8 fac9 	bl	800b9ec <_ZSt3minIiERKT_S2_S2_>
 801345a:	4603      	mov	r3, r0
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8013460:	2300      	movs	r3, #0
 8013462:	627b      	str	r3, [r7, #36]	; 0x24
 8013464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013466:	425b      	negs	r3, r3
 8013468:	62bb      	str	r3, [r7, #40]	; 0x28
 801346a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801346e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013472:	4611      	mov	r1, r2
 8013474:	4618      	mov	r0, r3
 8013476:	f7f8 ff4d 	bl	800c314 <_ZSt3maxIiERKT_S2_S2_>
 801347a:	4603      	mov	r3, r0
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	f103 0014 	add.w	r0, r3, #20
 8013486:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801348a:	1ad3      	subs	r3, r2, r3
 801348c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801348e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013492:	4619      	mov	r1, r3
 8013494:	f7f8 faaa 	bl	800b9ec <_ZSt3minIiERKT_S2_S2_>
 8013498:	4603      	mov	r3, r0
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 801349e:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80134a2:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80134a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134a6:	677b      	str	r3, [r7, #116]	; 0x74
 80134a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80134aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ac:	429a      	cmp	r2, r3
 80134ae:	da2b      	bge.n	8013508 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ce>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80134b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134b2:	673b      	str	r3, [r7, #112]	; 0x70
 80134b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80134b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134b8:	429a      	cmp	r2, r3
 80134ba:	da21      	bge.n	8013500 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 80134bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80134be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80134c0:	4413      	add	r3, r2
 80134c2:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 80134c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80134c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80134c8:	4413      	add	r3, r2
 80134ca:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 80134cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80134ce:	9300      	str	r3, [sp, #0]
 80134d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134d4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80134d8:	68b8      	ldr	r0, [r7, #8]
 80134da:	f7fe f922 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80134de:	4603      	mov	r3, r0
 80134e0:	009b      	lsls	r3, r3, #2
 80134e2:	687a      	ldr	r2, [r7, #4]
 80134e4:	441a      	add	r2, r3
 80134e6:	f107 0314 	add.w	r3, r7, #20
 80134ea:	4611      	mov	r1, r2
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7f7 fea3 	bl	800b238 <_ZSt3maxIfERKT_S2_S2_>
 80134f2:	4603      	mov	r3, r0
              max = std::max(
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80134f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80134fa:	3301      	adds	r3, #1
 80134fc:	673b      	str	r3, [r7, #112]	; 0x70
 80134fe:	e7d9      	b.n	80134b4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8013500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013502:	3301      	adds	r3, #1
 8013504:	677b      	str	r3, [r7, #116]	; 0x74
 8013506:	e7cf      	b.n	80134a8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16e>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8013508:	ed97 8a05 	vldr	s16, [r7, #20]
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8013518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801351a:	9300      	str	r3, [sp, #0]
 801351c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801351e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013522:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8013526:	6838      	ldr	r0, [r7, #0]
 8013528:	f7fe f8fb 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801352c:	4603      	mov	r3, r0
 801352e:	009b      	lsls	r3, r3, #2
 8013530:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013534:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8013536:	eeb0 1a49 	vmov.f32	s2, s18
 801353a:	eef0 0a68 	vmov.f32	s1, s17
 801353e:	eeb0 0a48 	vmov.f32	s0, s16
 8013542:	f7fe fe62 	bl	801220a <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8013546:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801354a:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 801354e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013550:	3301      	adds	r3, #1
 8013552:	67bb      	str	r3, [r7, #120]	; 0x78
 8013554:	e74d      	b.n	80133f2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8013556:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013558:	3301      	adds	r3, #1
 801355a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801355c:	e742      	b.n	80133e4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801355e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013562:	3301      	adds	r3, #1
 8013564:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013568:	e734      	b.n	80133d4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 801356a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801356e:	3301      	adds	r3, #1
 8013570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013574:	e725      	b.n	80133c2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8013576:	bf00      	nop
 8013578:	378c      	adds	r7, #140	; 0x8c
 801357a:	46bd      	mov	sp, r7
 801357c:	ecbd 8b04 	vpop	{d8-d9}
 8013580:	bd90      	pop	{r4, r7, pc}

08013582 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:

TfLiteStatus CalculateOpDataPooling(const TfLiteContext* context,
                                    const TfLitePoolParams* params,
                                    const TfLiteTensor* input,
                                    const TfLiteTensor* output,
                                    OpDataPooling* data) {
 8013582:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013584:	b097      	sub	sp, #92	; 0x5c
 8013586:	af08      	add	r7, sp, #32
 8013588:	6278      	str	r0, [r7, #36]	; 0x24
 801358a:	6239      	str	r1, [r7, #32]
 801358c:	61fa      	str	r2, [r7, #28]
 801358e:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 8013590:	2101      	movs	r1, #1
 8013592:	69f8      	ldr	r0, [r7, #28]
 8013594:	f7f8 fa19 	bl	800b9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8013598:	6378      	str	r0, [r7, #52]	; 0x34
  int width = SizeOfDimension(input, 2);
 801359a:	2102      	movs	r1, #2
 801359c:	69f8      	ldr	r0, [r7, #28]
 801359e:	f7f8 fa14 	bl	800b9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80135a2:	6338      	str	r0, [r7, #48]	; 0x30

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 80135a4:	6a3b      	ldr	r3, [r7, #32]
 80135a6:	689d      	ldr	r5, [r3, #8]
 80135a8:	6a3b      	ldr	r3, [r7, #32]
 80135aa:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 80135ac:	6a3b      	ldr	r3, [r7, #32]
 80135ae:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 80135b0:	6a3a      	ldr	r2, [r7, #32]
 80135b2:	68d2      	ldr	r2, [r2, #12]
 80135b4:	6a39      	ldr	r1, [r7, #32]
 80135b6:	7809      	ldrb	r1, [r1, #0]
 80135b8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80135ba:	6078      	str	r0, [r7, #4]
 80135bc:	f107 0408 	add.w	r4, r7, #8
 80135c0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80135c4:	9007      	str	r0, [sp, #28]
 80135c6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80135ca:	9006      	str	r0, [sp, #24]
 80135cc:	9105      	str	r1, [sp, #20]
 80135ce:	9204      	str	r2, [sp, #16]
 80135d0:	9303      	str	r3, [sp, #12]
 80135d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d4:	9302      	str	r3, [sp, #8]
 80135d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135d8:	9301      	str	r3, [sp, #4]
 80135da:	2301      	movs	r3, #1
 80135dc:	9300      	str	r3, [sp, #0]
 80135de:	2301      	movs	r3, #1
 80135e0:	4632      	mov	r2, r6
 80135e2:	4629      	mov	r1, r5
 80135e4:	4620      	mov	r0, r4
 80135e6:	f7fe f9de 	bl	80119a6 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 80135ea:	687c      	ldr	r4, [r7, #4]
 80135ec:	f107 0308 	add.w	r3, r7, #8
 80135f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80135f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return kTfLiteOk;
 80135f6:	2300      	movs	r3, #0
}
 80135f8:	4618      	mov	r0, r3
 80135fa:	373c      	adds	r7, #60	; 0x3c
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013600 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
 8013600:	b590      	push	{r4, r7, lr}
 8013602:	b08b      	sub	sp, #44	; 0x2c
 8013604:	af02      	add	r7, sp, #8
 8013606:	6078      	str	r0, [r7, #4]
 8013608:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	695b      	ldr	r3, [r3, #20]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d101      	bne.n	8013616 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8013612:	f011 fc68 	bl	8024ee6 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8013616:	683b      	ldr	r3, [r7, #0]
 8013618:	695b      	ldr	r3, [r3, #20]
 801361a:	61fb      	str	r3, [r7, #28]

  TFLITE_DCHECK(node->user_data != nullptr);
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	691b      	ldr	r3, [r3, #16]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d101      	bne.n	8013628 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8013624:	f011 fc5f 	bl	8024ee6 <abort>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	691b      	ldr	r3, [r3, #16]
 801362c:	61bb      	str	r3, [r7, #24]

  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
 801362e:	2200      	movs	r2, #0
 8013630:	6839      	ldr	r1, [r7, #0]
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f7f8 fa4a 	bl	800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013638:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 801363a:	697b      	ldr	r3, [r7, #20]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d10a      	bne.n	8013656 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x56>
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	695c      	ldr	r4, [r3, #20]
 8013644:	4b28      	ldr	r3, [pc, #160]	; (80136e8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 8013646:	9300      	str	r3, [sp, #0]
 8013648:	233a      	movs	r3, #58	; 0x3a
 801364a:	4a28      	ldr	r2, [pc, #160]	; (80136ec <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 801364c:	4928      	ldr	r1, [pc, #160]	; (80136f0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 801364e:	6878      	ldr	r0, [r7, #4]
 8013650:	47a0      	blx	r4
 8013652:	2301      	movs	r3, #1
 8013654:	e043      	b.n	80136de <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xde>
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
 8013656:	2200      	movs	r2, #0
 8013658:	6839      	ldr	r1, [r7, #0]
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f7f8 fa46 	bl	800baec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013660:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, output != nullptr);
 8013662:	693b      	ldr	r3, [r7, #16]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d10a      	bne.n	801367e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	695c      	ldr	r4, [r3, #20]
 801366c:	4b21      	ldr	r3, [pc, #132]	; (80136f4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 801366e:	9300      	str	r3, [sp, #0]
 8013670:	233c      	movs	r3, #60	; 0x3c
 8013672:	4a1e      	ldr	r2, [pc, #120]	; (80136ec <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 8013674:	491e      	ldr	r1, [pc, #120]	; (80136f0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	47a0      	blx	r4
 801367a:	2301      	movs	r3, #1
 801367c:	e02f      	b.n	80136de <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xde>

  TF_LITE_ENSURE_STATUS(
 801367e:	69bb      	ldr	r3, [r7, #24]
 8013680:	9300      	str	r3, [sp, #0]
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	697a      	ldr	r2, [r7, #20]
 8013686:	69f9      	ldr	r1, [r7, #28]
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f7ff ff7a 	bl	8013582 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
 801368e:	4603      	mov	r3, r0
 8013690:	73fb      	strb	r3, [r7, #15]
 8013692:	7bfb      	ldrb	r3, [r7, #15]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d001      	beq.n	801369c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x9c>
 8013698:	7bfb      	ldrb	r3, [r7, #15]
 801369a:	e020      	b.n	80136de <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xde>
      CalculateOpDataPooling(context, params, input, output, data));

  if (input->type == kTfLiteFloat32) {
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	781b      	ldrb	r3, [r3, #0]
 80136a0:	2b01      	cmp	r3, #1
 80136a2:	d10a      	bne.n	80136ba <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xba>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 80136a4:	69fb      	ldr	r3, [r7, #28]
 80136a6:	7d18      	ldrb	r0, [r3, #20]
 80136a8:	69bb      	ldr	r3, [r7, #24]
 80136aa:	f103 0118 	add.w	r1, r3, #24
 80136ae:	69bb      	ldr	r3, [r7, #24]
 80136b0:	331c      	adds	r3, #28
 80136b2:	461a      	mov	r2, r3
 80136b4:	f7fe fb50 	bl	8011d58 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
 80136b8:	e010      	b.n	80136dc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xdc>
                             &data->activation_max_f32);
  } else if (input->type == kTfLiteInt8) {
 80136ba:	697b      	ldr	r3, [r7, #20]
 80136bc:	781b      	ldrb	r3, [r3, #0]
 80136be:	2b09      	cmp	r3, #9
 80136c0:	d10c      	bne.n	80136dc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xdc>
    CalculateActivationRangeQuantized(context, params->activation, output,
 80136c2:	69fb      	ldr	r3, [r7, #28]
 80136c4:	7d19      	ldrb	r1, [r3, #20]
 80136c6:	69bb      	ldr	r3, [r7, #24]
 80136c8:	f103 0210 	add.w	r2, r3, #16
 80136cc:	69bb      	ldr	r3, [r7, #24]
 80136ce:	3314      	adds	r3, #20
 80136d0:	9300      	str	r3, [sp, #0]
 80136d2:	4613      	mov	r3, r2
 80136d4:	693a      	ldr	r2, [r7, #16]
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f7f8 fdc4 	bl	800c264 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
                                      &data->activation_min,
                                      &data->activation_max);
  }

  return kTfLiteOk;
 80136dc:	2300      	movs	r3, #0
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3724      	adds	r7, #36	; 0x24
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd90      	pop	{r4, r7, pc}
 80136e6:	bf00      	nop
 80136e8:	0802b138 	.word	0x0802b138
 80136ec:	0802b0dc 	.word	0x0802b0dc
 80136f0:	0802b120 	.word	0x0802b120
 80136f4:	0802b14c 	.word	0x0802b14c

080136f8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalFloat(const TfLiteContext* context,
                             const TfLiteNode* node,
                             const TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
 80136f8:	b590      	push	{r4, r7, lr}
 80136fa:	b09f      	sub	sp, #124	; 0x7c
 80136fc:	af02      	add	r7, sp, #8
 80136fe:	60f8      	str	r0, [r7, #12]
 8013700:	60b9      	str	r1, [r7, #8]
 8013702:	607a      	str	r2, [r7, #4]
 8013704:	603b      	str	r3, [r7, #0]
  PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	689b      	ldr	r3, [r3, #8]
 801370a:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	691b      	ldr	r3, [r3, #16]
 8013716:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	685b      	ldr	r3, [r3, #4]
 8013722:	b21b      	sxth	r3, r3
 8013724:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	b21b      	sxth	r3, r3
 801372c:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = data->activation_min_f32;
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	699b      	ldr	r3, [r3, #24]
 8013732:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = data->activation_max_f32;
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	69db      	ldr	r3, [r3, #28]
 8013738:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 801373a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801373e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8013742:	4618      	mov	r0, r3
 8013744:	f7fe fd29 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8013748:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801374c:	f7fd ff37 	bl	80115be <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8013750:	4604      	mov	r4, r0
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
 8013752:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013756:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801375a:	4618      	mov	r0, r3
 801375c:	f7fe fd1d 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8013760:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8013764:	f7fd ff3a 	bl	80115dc <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8013768:	4602      	mov	r2, r0
 801376a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801376e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8013772:	f107 0014 	add.w	r0, r7, #20
 8013776:	9200      	str	r2, [sp, #0]
 8013778:	4622      	mov	r2, r4
 801377a:	f7ff fc94 	bl	80130a6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                             tflite::micro::GetTensorShape(output),
 801377e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013782:	4618      	mov	r0, r3
 8013784:	f7f9 f8a5 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8013788:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801378c:	4618      	mov	r0, r3
 801378e:	f7f9 f8a0 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<float>(output));
}
 8013792:	bf00      	nop
 8013794:	3774      	adds	r7, #116	; 0x74
 8013796:	46bd      	mov	sp, r7
 8013798:	bd90      	pop	{r4, r7, pc}

0801379a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:
}

void MaxPoolingEvalFloat(TfLiteContext* context, TfLiteNode* node,
                         TfLitePoolParams* params, const OpDataPooling* data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
 801379a:	b590      	push	{r4, r7, lr}
 801379c:	b09f      	sub	sp, #124	; 0x7c
 801379e:	af02      	add	r7, sp, #8
 80137a0:	60f8      	str	r0, [r7, #12]
 80137a2:	60b9      	str	r1, [r7, #8]
 80137a4:	607a      	str	r2, [r7, #4]
 80137a6:	603b      	str	r3, [r7, #0]
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	689b      	ldr	r3, [r3, #8]
 80137ac:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	685b      	ldr	r3, [r3, #4]
 80137b2:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	691b      	ldr	r3, [r3, #16]
 80137b8:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	68db      	ldr	r3, [r3, #12]
 80137be:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	b21b      	sxth	r3, r3
 80137c6:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	b21b      	sxth	r3, r3
 80137ce:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = data->activation_min_f32;
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	699b      	ldr	r3, [r3, #24]
 80137d4:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = data->activation_max_f32;
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	69db      	ldr	r3, [r3, #28]
 80137da:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 80137dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80137e0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7fe fcd8 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80137ea:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80137ee:	f7fd fee6 	bl	80115be <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80137f2:	4604      	mov	r4, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
 80137f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80137f8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80137fc:	4618      	mov	r0, r3
 80137fe:	f7fe fccc 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8013802:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8013806:	f7fd fee9 	bl	80115dc <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801380a:	4602      	mov	r2, r0
 801380c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013810:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8013814:	f107 0014 	add.w	r0, r7, #20
 8013818:	9200      	str	r2, [sp, #0]
 801381a:	4622      	mov	r2, r4
 801381c:	f7ff fd8d 	bl	801333a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorShape(output),
 8013820:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013824:	4618      	mov	r0, r3
 8013826:	f7f9 f854 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 801382a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801382e:	4618      	mov	r0, r3
 8013830:	f7f9 f84f 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<float>(output));
}
 8013834:	bf00      	nop
 8013836:	3774      	adds	r7, #116	; 0x74
 8013838:	46bd      	mov	sp, r7
 801383a:	bd90      	pop	{r4, r7, pc}

0801383c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 801383c:	b5b0      	push	{r4, r5, r7, lr}
 801383e:	b08e      	sub	sp, #56	; 0x38
 8013840:	af04      	add	r7, sp, #16
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8013846:	2200      	movs	r2, #0
 8013848:	6839      	ldr	r1, [r7, #0]
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f7f8 f93e 	bl	800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013850:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 8013852:	69bb      	ldr	r3, [r7, #24]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d10a      	bne.n	801386e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	695c      	ldr	r4, [r3, #20]
 801385c:	4b62      	ldr	r3, [pc, #392]	; (80139e8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 801385e:	9300      	str	r3, [sp, #0]
 8013860:	2323      	movs	r3, #35	; 0x23
 8013862:	4a62      	ldr	r2, [pc, #392]	; (80139ec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8013864:	4962      	ldr	r1, [pc, #392]	; (80139f0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	47a0      	blx	r4
 801386a:	2301      	movs	r3, #1
 801386c:	e0b8      	b.n	80139e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801386e:	2200      	movs	r2, #0
 8013870:	6839      	ldr	r1, [r7, #0]
 8013872:	6878      	ldr	r0, [r7, #4]
 8013874:	f7f8 f93a 	bl	800baec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013878:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d10a      	bne.n	8013896 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	695c      	ldr	r4, [r3, #20]
 8013884:	4b5b      	ldr	r3, [pc, #364]	; (80139f4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 8013886:	9300      	str	r3, [sp, #0]
 8013888:	2325      	movs	r3, #37	; 0x25
 801388a:	4a58      	ldr	r2, [pc, #352]	; (80139ec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 801388c:	4958      	ldr	r1, [pc, #352]	; (80139f0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	47a0      	blx	r4
 8013892:	2301      	movs	r3, #1
 8013894:	e0a4      	b.n	80139e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 8013896:	69b8      	ldr	r0, [r7, #24]
 8013898:	f7fe faa0 	bl	8011ddc <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 801389c:	4602      	mov	r2, r0
 801389e:	460b      	mov	r3, r1
 80138a0:	4613      	mov	r3, r2
 80138a2:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 80138a4:	697b      	ldr	r3, [r7, #20]
 80138a6:	689b      	ldr	r3, [r3, #8]
 80138a8:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 80138aa:	6838      	ldr	r0, [r7, #0]
 80138ac:	f7fd ff10 	bl	80116d0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80138b0:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 80138b2:	2b01      	cmp	r3, #1
 80138b4:	d109      	bne.n	80138ca <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 80138ba:	2b01      	cmp	r3, #1
 80138bc:	d105      	bne.n	80138ca <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d101      	bne.n	80138ca <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 80138c6:	2301      	movs	r3, #1
 80138c8:	e000      	b.n	80138cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 80138ca:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d002      	beq.n	80138d6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	2200      	movs	r2, #0
 80138d4:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 80138d6:	2301      	movs	r3, #1
 80138d8:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 80138da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138de:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 80138e0:	2300      	movs	r3, #0
 80138e2:	61fb      	str	r3, [r7, #28]
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	69fa      	ldr	r2, [r7, #28]
 80138ea:	429a      	cmp	r2, r3
 80138ec:	da2b      	bge.n	8013946 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 80138ee:	68fa      	ldr	r2, [r7, #12]
 80138f0:	69fb      	ldr	r3, [r7, #28]
 80138f2:	009b      	lsls	r3, r3, #2
 80138f4:	4413      	add	r3, r2
 80138f6:	685b      	ldr	r3, [r3, #4]
 80138f8:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 80138fa:	68bb      	ldr	r3, [r7, #8]
 80138fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013900:	d118      	bne.n	8013934 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 8013902:	6a3b      	ldr	r3, [r7, #32]
 8013904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013908:	d011      	beq.n	801392e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	695c      	ldr	r4, [r3, #20]
 801390e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013912:	9303      	str	r3, [sp, #12]
 8013914:	6a3b      	ldr	r3, [r7, #32]
 8013916:	9302      	str	r3, [sp, #8]
 8013918:	4b37      	ldr	r3, [pc, #220]	; (80139f8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 801391a:	9301      	str	r3, [sp, #4]
 801391c:	4b37      	ldr	r3, [pc, #220]	; (80139fc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 801391e:	9300      	str	r3, [sp, #0]
 8013920:	233a      	movs	r3, #58	; 0x3a
 8013922:	4a32      	ldr	r2, [pc, #200]	; (80139ec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8013924:	4936      	ldr	r1, [pc, #216]	; (8013a00 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	47a0      	blx	r4
 801392a:	2301      	movs	r3, #1
 801392c:	e058      	b.n	80139e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 801392e:	69fb      	ldr	r3, [r7, #28]
 8013930:	623b      	str	r3, [r7, #32]
 8013932:	e004      	b.n	801393e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 8013934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013936:	68ba      	ldr	r2, [r7, #8]
 8013938:	fb02 f303 	mul.w	r3, r2, r3
 801393c:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 801393e:	69fb      	ldr	r3, [r7, #28]
 8013940:	3301      	adds	r3, #1
 8013942:	61fb      	str	r3, [r7, #28]
 8013944:	e7ce      	b.n	80138e4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 8013946:	6a3b      	ldr	r3, [r7, #32]
 8013948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801394c:	d011      	beq.n	8013972 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 801394e:	693a      	ldr	r2, [r7, #16]
 8013950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013952:	fb92 f2f3 	sdiv	r2, r2, r3
 8013956:	68f9      	ldr	r1, [r7, #12]
 8013958:	6a3b      	ldr	r3, [r7, #32]
 801395a:	009b      	lsls	r3, r3, #2
 801395c:	440b      	add	r3, r1
 801395e:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 8013960:	68fa      	ldr	r2, [r7, #12]
 8013962:	6a3b      	ldr	r3, [r7, #32]
 8013964:	009b      	lsls	r3, r3, #2
 8013966:	4413      	add	r3, r2
 8013968:	685a      	ldr	r2, [r3, #4]
 801396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396c:	fb02 f303 	mul.w	r3, r2, r3
 8013970:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8013972:	69bb      	ldr	r3, [r7, #24]
 8013974:	781a      	ldrb	r2, [r3, #0]
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	429a      	cmp	r2, r3
 801397c:	d01a      	beq.n	80139b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	695c      	ldr	r4, [r3, #20]
 8013982:	69bb      	ldr	r3, [r7, #24]
 8013984:	781b      	ldrb	r3, [r3, #0]
 8013986:	4618      	mov	r0, r3
 8013988:	f7f4 ff40 	bl	800880c <TfLiteTypeGetName>
 801398c:	4605      	mov	r5, r0
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	4618      	mov	r0, r3
 8013994:	f7f4 ff3a 	bl	800880c <TfLiteTypeGetName>
 8013998:	4603      	mov	r3, r0
 801399a:	9303      	str	r3, [sp, #12]
 801399c:	9502      	str	r5, [sp, #8]
 801399e:	4b19      	ldr	r3, [pc, #100]	; (8013a04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 80139a0:	9301      	str	r3, [sp, #4]
 80139a2:	4b19      	ldr	r3, [pc, #100]	; (8013a08 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 80139a4:	9300      	str	r3, [sp, #0]
 80139a6:	2345      	movs	r3, #69	; 0x45
 80139a8:	4a10      	ldr	r2, [pc, #64]	; (80139ec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 80139aa:	4918      	ldr	r1, [pc, #96]	; (8013a0c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	47a0      	blx	r4
 80139b0:	2301      	movs	r3, #1
 80139b2:	e015      	b.n	80139e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 80139b4:	693a      	ldr	r2, [r7, #16]
 80139b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d010      	beq.n	80139de <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	695c      	ldr	r4, [r3, #20]
 80139c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c2:	9303      	str	r3, [sp, #12]
 80139c4:	693b      	ldr	r3, [r7, #16]
 80139c6:	9302      	str	r3, [sp, #8]
 80139c8:	4b11      	ldr	r3, [pc, #68]	; (8013a10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 80139ca:	9301      	str	r3, [sp, #4]
 80139cc:	4b11      	ldr	r3, [pc, #68]	; (8013a14 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 80139ce:	9300      	str	r3, [sp, #0]
 80139d0:	2346      	movs	r3, #70	; 0x46
 80139d2:	4a06      	ldr	r2, [pc, #24]	; (80139ec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 80139d4:	490a      	ldr	r1, [pc, #40]	; (8013a00 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 80139d6:	6878      	ldr	r0, [r7, #4]
 80139d8:	47a0      	blx	r4
 80139da:	2301      	movs	r3, #1
 80139dc:	e000      	b.n	80139e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 80139de:	2300      	movs	r3, #0
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3728      	adds	r7, #40	; 0x28
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bdb0      	pop	{r4, r5, r7, pc}
 80139e8:	0802b1c8 	.word	0x0802b1c8
 80139ec:	0802b174 	.word	0x0802b174
 80139f0:	0802b1b0 	.word	0x0802b1b0
 80139f4:	0802b1dc 	.word	0x0802b1dc
 80139f8:	0802b20c 	.word	0x0802b20c
 80139fc:	0802b210 	.word	0x0802b210
 8013a00:	0802b1f0 	.word	0x0802b1f0
 8013a04:	0802b238 	.word	0x0802b238
 8013a08:	0802b248 	.word	0x0802b248
 8013a0c:	0802b21c 	.word	0x0802b21c
 8013a10:	0802b254 	.word	0x0802b254
 8013a14:	0802b268 	.word	0x0802b268

08013a18 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8013a18:	b590      	push	{r4, r7, lr}
 8013a1a:	b087      	sub	sp, #28
 8013a1c:	af04      	add	r7, sp, #16
 8013a1e:	6078      	str	r0, [r7, #4]
 8013a20:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 8013a22:	6838      	ldr	r0, [r7, #0]
 8013a24:	f7fd fe54 	bl	80116d0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	2b01      	cmp	r3, #1
 8013a2c:	d007      	beq.n	8013a3e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8013a2e:	6838      	ldr	r0, [r7, #0]
 8013a30:	f7fd fe4e 	bl	80116d0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013a34:	4603      	mov	r3, r0
 8013a36:	2b02      	cmp	r3, #2
 8013a38:	d001      	beq.n	8013a3e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	e000      	b.n	8013a40 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8013a3e:	2300      	movs	r3, #0
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d00a      	beq.n	8013a5a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	695c      	ldr	r4, [r3, #20]
 8013a48:	4b27      	ldr	r3, [pc, #156]	; (8013ae8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8013a4a:	9300      	str	r3, [sp, #0]
 8013a4c:	234b      	movs	r3, #75	; 0x4b
 8013a4e:	4a27      	ldr	r2, [pc, #156]	; (8013aec <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013a50:	4927      	ldr	r1, [pc, #156]	; (8013af0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	47a0      	blx	r4
 8013a56:	2301      	movs	r3, #1
 8013a58:	e041      	b.n	8013ade <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8013a5a:	6838      	ldr	r0, [r7, #0]
 8013a5c:	f7fd fe45 	bl	80116ea <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8013a60:	4603      	mov	r3, r0
 8013a62:	2b01      	cmp	r3, #1
 8013a64:	bf14      	ite	ne
 8013a66:	2301      	movne	r3, #1
 8013a68:	2300      	moveq	r3, #0
 8013a6a:	b2db      	uxtb	r3, r3
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d013      	beq.n	8013a98 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	695c      	ldr	r4, [r3, #20]
 8013a74:	6838      	ldr	r0, [r7, #0]
 8013a76:	f7fd fe38 	bl	80116ea <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	9203      	str	r2, [sp, #12]
 8013a80:	9302      	str	r3, [sp, #8]
 8013a82:	4b1c      	ldr	r3, [pc, #112]	; (8013af4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 8013a84:	9301      	str	r3, [sp, #4]
 8013a86:	4b1c      	ldr	r3, [pc, #112]	; (8013af8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 8013a88:	9300      	str	r3, [sp, #0]
 8013a8a:	234c      	movs	r3, #76	; 0x4c
 8013a8c:	4a17      	ldr	r2, [pc, #92]	; (8013aec <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013a8e:	491b      	ldr	r1, [pc, #108]	; (8013afc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	47a0      	blx	r4
 8013a94:	2301      	movs	r3, #1
 8013a96:	e022      	b.n	8013ade <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 8013a98:	6839      	ldr	r1, [r7, #0]
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	f7ff fece 	bl	801383c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	bf14      	ite	ne
 8013aa6:	2301      	movne	r3, #1
 8013aa8:	2300      	moveq	r3, #0
 8013aaa:	b2db      	uxtb	r3, r3
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d015      	beq.n	8013adc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	695c      	ldr	r4, [r3, #20]
 8013ab4:	6839      	ldr	r1, [r7, #0]
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f7ff fec0 	bl	801383c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8013abc:	4603      	mov	r3, r0
 8013abe:	461a      	mov	r2, r3
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	9303      	str	r3, [sp, #12]
 8013ac4:	9202      	str	r2, [sp, #8]
 8013ac6:	4b0e      	ldr	r3, [pc, #56]	; (8013b00 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 8013ac8:	9301      	str	r3, [sp, #4]
 8013aca:	4b0e      	ldr	r3, [pc, #56]	; (8013b04 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 8013acc:	9300      	str	r3, [sp, #0]
 8013ace:	234d      	movs	r3, #77	; 0x4d
 8013ad0:	4a06      	ldr	r2, [pc, #24]	; (8013aec <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013ad2:	490a      	ldr	r1, [pc, #40]	; (8013afc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	47a0      	blx	r4
 8013ad8:	2301      	movs	r3, #1
 8013ada:	e000      	b.n	8013ade <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 8013adc:	2300      	movs	r3, #0
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	370c      	adds	r7, #12
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd90      	pop	{r4, r7, pc}
 8013ae6:	bf00      	nop
 8013ae8:	0802b27c 	.word	0x0802b27c
 8013aec:	0802b174 	.word	0x0802b174
 8013af0:	0802b1b0 	.word	0x0802b1b0
 8013af4:	0802b2ac 	.word	0x0802b2ac
 8013af8:	0802b2b0 	.word	0x0802b2b0
 8013afc:	0802b1f0 	.word	0x0802b1f0
 8013b00:	0802b2c4 	.word	0x0802b2c4
 8013b04:	0802b2d0 	.word	0x0802b2d0

08013b08 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b088      	sub	sp, #32
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
 8013b10:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8013b12:	2200      	movs	r2, #0
 8013b14:	6839      	ldr	r1, [r7, #0]
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f7fd fd21 	bl	801155e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8013b1c:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8013b1e:	2200      	movs	r2, #0
 8013b20:	6839      	ldr	r1, [r7, #0]
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	f7fd fd2b 	bl	801157e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8013b28:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 8013b2a:	69bb      	ldr	r3, [r7, #24]
 8013b2c:	7a1b      	ldrb	r3, [r3, #8]
 8013b2e:	f107 020c 	add.w	r2, r7, #12
 8013b32:	4611      	mov	r1, r2
 8013b34:	4618      	mov	r0, r3
 8013b36:	f7f8 ff6b 	bl	800ca10 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	74fb      	strb	r3, [r7, #19]
 8013b3e:	7cfb      	ldrb	r3, [r7, #19]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d001      	beq.n	8013b48 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 8013b44:	7cfb      	ldrb	r3, [r7, #19]
 8013b46:	e024      	b.n	8013b92 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	685b      	ldr	r3, [r3, #4]
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7fc ff19 	bl	8010984 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 8013b52:	4602      	mov	r2, r0
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	fb02 f303 	mul.w	r3, r2, r3
 8013b5a:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 8013b5c:	69bb      	ldr	r3, [r7, #24]
 8013b5e:	681a      	ldr	r2, [r3, #0]
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	429a      	cmp	r2, r3
 8013b66:	d013      	beq.n	8013b90 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 8013b68:	2300      	movs	r3, #0
 8013b6a:	61fb      	str	r3, [r7, #28]
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	69fa      	ldr	r2, [r7, #28]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d20d      	bcs.n	8013b90 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 8013b74:	69bb      	ldr	r3, [r7, #24]
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	69fb      	ldr	r3, [r7, #28]
 8013b7a:	441a      	add	r2, r3
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	6819      	ldr	r1, [r3, #0]
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	440b      	add	r3, r1
 8013b84:	7812      	ldrb	r2, [r2, #0]
 8013b86:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 8013b88:	69fb      	ldr	r3, [r7, #28]
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	61fb      	str	r3, [r7, #28]
 8013b8e:	e7ed      	b.n	8013b6c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 8013b90:	2300      	movs	r3, #0
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	3720      	adds	r7, #32
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
	...

08013b9c <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 8013b9c:	b4b0      	push	{r4, r5, r7}
 8013b9e:	b083      	sub	sp, #12
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	4a07      	ldr	r2, [pc, #28]	; (8013bc4 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 8013ba8:	461c      	mov	r4, r3
 8013baa:	4615      	mov	r5, r2
 8013bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013bb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013bb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	370c      	adds	r7, #12
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bcb0      	pop	{r4, r5, r7}
 8013bc0:	4770      	bx	lr
 8013bc2:	bf00      	nop
 8013bc4:	0802b2f0 	.word	0x0802b2f0

08013bc8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8013bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013bcc:	b090      	sub	sp, #64	; 0x40
 8013bce:	af06      	add	r7, sp, #24
 8013bd0:	60f8      	str	r0, [r7, #12]
 8013bd2:	60b9      	str	r1, [r7, #8]
 8013bd4:	607a      	str	r2, [r7, #4]
 8013bd6:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8013bd8:	68bb      	ldr	r3, [r7, #8]
 8013bda:	781b      	ldrb	r3, [r3, #0]
 8013bdc:	2b09      	cmp	r3, #9
 8013bde:	d004      	beq.n	8013bea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	781b      	ldrb	r3, [r3, #0]
 8013be4:	2b07      	cmp	r3, #7
 8013be6:	f040 81b6 	bne.w	8013f56 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	781b      	ldrb	r3, [r3, #0]
 8013bee:	2b07      	cmp	r3, #7
 8013bf0:	d156      	bne.n	8013ca0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	691b      	ldr	r3, [r3, #16]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d011      	beq.n	8013c1e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	695c      	ldr	r4, [r3, #20]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	691b      	ldr	r3, [r3, #16]
 8013c02:	2200      	movs	r2, #0
 8013c04:	9203      	str	r2, [sp, #12]
 8013c06:	9302      	str	r3, [sp, #8]
 8013c08:	4ba1      	ldr	r3, [pc, #644]	; (8013e90 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8013c0a:	9301      	str	r3, [sp, #4]
 8013c0c:	4ba1      	ldr	r3, [pc, #644]	; (8013e94 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8013c0e:	9300      	str	r3, [sp, #0]
 8013c10:	2325      	movs	r3, #37	; 0x25
 8013c12:	4aa1      	ldr	r2, [pc, #644]	; (8013e98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013c14:	49a1      	ldr	r1, [pc, #644]	; (8013e9c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8013c16:	68f8      	ldr	r0, [r7, #12]
 8013c18:	47a0      	blx	r4
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	e1e0      	b.n	8013fe0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	edd3 7a03 	vldr	s15, [r3, #12]
 8013c24:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8013ea0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8013c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c30:	dd07      	ble.n	8013c42 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	edd3 7a03 	vldr	s15, [r3, #12]
 8013c38:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8013ea0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8013c3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c40:	e006      	b.n	8013c50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	edd3 7a03 	vldr	s15, [r3, #12]
 8013c48:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8013ea0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8013c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c50:	edc7 7a08 	vstr	s15, [r7, #32]
 8013c54:	edd7 7a08 	vldr	s15, [r7, #32]
 8013c58:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8013ea4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 8013c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c64:	f340 80dd 	ble.w	8013e22 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	695c      	ldr	r4, [r3, #20]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	68db      	ldr	r3, [r3, #12]
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7ec fc9b 	bl	80005ac <__aeabi_f2d>
 8013c76:	4602      	mov	r2, r0
 8013c78:	460b      	mov	r3, r1
 8013c7a:	f04f 0000 	mov.w	r0, #0
 8013c7e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8013c82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013c8a:	4b87      	ldr	r3, [pc, #540]	; (8013ea8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 8013c8c:	9301      	str	r3, [sp, #4]
 8013c8e:	4b87      	ldr	r3, [pc, #540]	; (8013eac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8013c90:	9300      	str	r3, [sp, #0]
 8013c92:	2326      	movs	r3, #38	; 0x26
 8013c94:	4a80      	ldr	r2, [pc, #512]	; (8013e98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013c96:	4986      	ldr	r1, [pc, #536]	; (8013eb0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8013c98:	68f8      	ldr	r0, [r7, #12]
 8013c9a:	47a0      	blx	r4
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	e19f      	b.n	8013fe0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	781b      	ldrb	r3, [r3, #0]
 8013ca4:	2b09      	cmp	r3, #9
 8013ca6:	d018      	beq.n	8013cda <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	695c      	ldr	r4, [r3, #20]
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	781b      	ldrb	r3, [r3, #0]
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f7f4 fdab 	bl	800880c <TfLiteTypeGetName>
 8013cb6:	4605      	mov	r5, r0
 8013cb8:	2009      	movs	r0, #9
 8013cba:	f7f4 fda7 	bl	800880c <TfLiteTypeGetName>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	9303      	str	r3, [sp, #12]
 8013cc2:	9502      	str	r5, [sp, #8]
 8013cc4:	4b7b      	ldr	r3, [pc, #492]	; (8013eb4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8013cc6:	9301      	str	r3, [sp, #4]
 8013cc8:	4b7b      	ldr	r3, [pc, #492]	; (8013eb8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 8013cca:	9300      	str	r3, [sp, #0]
 8013ccc:	2329      	movs	r3, #41	; 0x29
 8013cce:	4a72      	ldr	r2, [pc, #456]	; (8013e98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013cd0:	497a      	ldr	r1, [pc, #488]	; (8013ebc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8013cd2:	68f8      	ldr	r0, [r7, #12]
 8013cd4:	47a0      	blx	r4
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	e182      	b.n	8013fe0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	781b      	ldrb	r3, [r3, #0]
 8013cde:	2b07      	cmp	r3, #7
 8013ce0:	d155      	bne.n	8013d8e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	691b      	ldr	r3, [r3, #16]
 8013ce6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013cea:	d011      	beq.n	8013d10 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	695c      	ldr	r4, [r3, #20]
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	691b      	ldr	r3, [r3, #16]
 8013cf4:	4a72      	ldr	r2, [pc, #456]	; (8013ec0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8013cf6:	9203      	str	r2, [sp, #12]
 8013cf8:	9302      	str	r3, [sp, #8]
 8013cfa:	4b72      	ldr	r3, [pc, #456]	; (8013ec4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 8013cfc:	9301      	str	r3, [sp, #4]
 8013cfe:	4b65      	ldr	r3, [pc, #404]	; (8013e94 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8013d00:	9300      	str	r3, [sp, #0]
 8013d02:	232b      	movs	r3, #43	; 0x2b
 8013d04:	4a64      	ldr	r2, [pc, #400]	; (8013e98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013d06:	4965      	ldr	r1, [pc, #404]	; (8013e9c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8013d08:	68f8      	ldr	r0, [r7, #12]
 8013d0a:	47a0      	blx	r4
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	e167      	b.n	8013fe0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	edd3 7a03 	vldr	s15, [r3, #12]
 8013d16:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8013ec8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8013d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d22:	dd07      	ble.n	8013d34 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	edd3 7a03 	vldr	s15, [r3, #12]
 8013d2a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013ec8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8013d2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d32:	e006      	b.n	8013d42 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	edd3 7a03 	vldr	s15, [r3, #12]
 8013d3a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8013ec8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8013d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d42:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8013d46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013d4a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8013ecc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 8013d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d56:	dd64      	ble.n	8013e22 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	695c      	ldr	r4, [r3, #20]
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	68db      	ldr	r3, [r3, #12]
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7ec fc23 	bl	80005ac <__aeabi_f2d>
 8013d66:	4602      	mov	r2, r0
 8013d68:	460b      	mov	r3, r1
 8013d6a:	f04f 0000 	mov.w	r0, #0
 8013d6e:	4958      	ldr	r1, [pc, #352]	; (8013ed0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 8013d70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013d74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013d78:	4b56      	ldr	r3, [pc, #344]	; (8013ed4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 8013d7a:	9301      	str	r3, [sp, #4]
 8013d7c:	4b4b      	ldr	r3, [pc, #300]	; (8013eac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8013d7e:	9300      	str	r3, [sp, #0]
 8013d80:	232c      	movs	r3, #44	; 0x2c
 8013d82:	4a45      	ldr	r2, [pc, #276]	; (8013e98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013d84:	494a      	ldr	r1, [pc, #296]	; (8013eb0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8013d86:	68f8      	ldr	r0, [r7, #12]
 8013d88:	47a0      	blx	r4
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	e128      	b.n	8013fe0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	781b      	ldrb	r3, [r3, #0]
 8013d92:	2b09      	cmp	r3, #9
 8013d94:	d018      	beq.n	8013dc8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	695c      	ldr	r4, [r3, #20]
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	781b      	ldrb	r3, [r3, #0]
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f7f4 fd34 	bl	800880c <TfLiteTypeGetName>
 8013da4:	4605      	mov	r5, r0
 8013da6:	2009      	movs	r0, #9
 8013da8:	f7f4 fd30 	bl	800880c <TfLiteTypeGetName>
 8013dac:	4603      	mov	r3, r0
 8013dae:	9303      	str	r3, [sp, #12]
 8013db0:	9502      	str	r5, [sp, #8]
 8013db2:	4b40      	ldr	r3, [pc, #256]	; (8013eb4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8013db4:	9301      	str	r3, [sp, #4]
 8013db6:	4b48      	ldr	r3, [pc, #288]	; (8013ed8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8013db8:	9300      	str	r3, [sp, #0]
 8013dba:	232f      	movs	r3, #47	; 0x2f
 8013dbc:	4a36      	ldr	r2, [pc, #216]	; (8013e98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013dbe:	493f      	ldr	r1, [pc, #252]	; (8013ebc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8013dc0:	68f8      	ldr	r0, [r7, #12]
 8013dc2:	47a0      	blx	r4
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	e10b      	b.n	8013fe0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	691b      	ldr	r3, [r3, #16]
 8013dcc:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8013dd0:	d012      	beq.n	8013df8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	695c      	ldr	r4, [r3, #20]
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	691b      	ldr	r3, [r3, #16]
 8013dda:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8013dde:	9203      	str	r2, [sp, #12]
 8013de0:	9302      	str	r3, [sp, #8]
 8013de2:	4b3e      	ldr	r3, [pc, #248]	; (8013edc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 8013de4:	9301      	str	r3, [sp, #4]
 8013de6:	4b2b      	ldr	r3, [pc, #172]	; (8013e94 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8013de8:	9300      	str	r3, [sp, #0]
 8013dea:	2330      	movs	r3, #48	; 0x30
 8013dec:	4a2a      	ldr	r2, [pc, #168]	; (8013e98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013dee:	492b      	ldr	r1, [pc, #172]	; (8013e9c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8013df0:	68f8      	ldr	r0, [r7, #12]
 8013df2:	47a0      	blx	r4
 8013df4:	2301      	movs	r3, #1
 8013df6:	e0f3      	b.n	8013fe0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	edd3 7a03 	vldr	s15, [r3, #12]
 8013dfe:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013ee0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 8013e02:	eef4 7a47 	vcmp.f32	s15, s14
 8013e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e0a:	d00a      	beq.n	8013e22 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	695c      	ldr	r4, [r3, #20]
 8013e10:	4b34      	ldr	r3, [pc, #208]	; (8013ee4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 8013e12:	9300      	str	r3, [sp, #0]
 8013e14:	2331      	movs	r3, #49	; 0x31
 8013e16:	4a20      	ldr	r2, [pc, #128]	; (8013e98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013e18:	4933      	ldr	r1, [pc, #204]	; (8013ee8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 8013e1a:	68f8      	ldr	r0, [r7, #12]
 8013e1c:	47a0      	blx	r4
 8013e1e:	2301      	movs	r3, #1
 8013e20:	e0de      	b.n	8013fe0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 8013e22:	68bb      	ldr	r3, [r7, #8]
 8013e24:	781b      	ldrb	r3, [r3, #0]
 8013e26:	2b07      	cmp	r3, #7
 8013e28:	d160      	bne.n	8013eec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	68db      	ldr	r3, [r3, #12]
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7ec fbbc 	bl	80005ac <__aeabi_f2d>
 8013e34:	4604      	mov	r4, r0
 8013e36:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7ec fbb5 	bl	80005ac <__aeabi_f2d>
 8013e42:	4602      	mov	r2, r0
 8013e44:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 8013e46:	4620      	mov	r0, r4
 8013e48:	4629      	mov	r1, r5
 8013e4a:	f7ec fc07 	bl	800065c <__aeabi_dmul>
 8013e4e:	4602      	mov	r2, r0
 8013e50:	460b      	mov	r3, r1
 8013e52:	4610      	mov	r0, r2
 8013e54:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 8013e56:	a30c      	add	r3, pc, #48	; (adr r3, 8013e88 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8013e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e5c:	f7ec fd28 	bl	80008b0 <__aeabi_ddiv>
 8013e60:	4602      	mov	r2, r0
 8013e62:	460b      	mov	r3, r1
 8013e64:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 8013e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e6a:	3308      	adds	r3, #8
 8013e6c:	f107 0214 	add.w	r2, r7, #20
 8013e70:	4611      	mov	r1, r2
 8013e72:	4618      	mov	r0, r3
 8013e74:	ed97 0b06 	vldr	d0, [r7, #24]
 8013e78:	f7f7 f84c 	bl	800af14 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 8013e7c:	697a      	ldr	r2, [r7, #20]
 8013e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e80:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 8013e82:	e0ac      	b.n	8013fde <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 8013e84:	f3af 8000 	nop.w
 8013e88:	00140014 	.word	0x00140014
 8013e8c:	3f240014 	.word	0x3f240014
 8013e90:	0802b370 	.word	0x0802b370
 8013e94:	0802b374 	.word	0x0802b374
 8013e98:	0802b310 	.word	0x0802b310
 8013e9c:	0802b354 	.word	0x0802b354
 8013ea0:	38000000 	.word	0x38000000
 8013ea4:	3303126f 	.word	0x3303126f
 8013ea8:	0802b3b0 	.word	0x0802b3b0
 8013eac:	0802b3bc 	.word	0x0802b3bc
 8013eb0:	0802b390 	.word	0x0802b390
 8013eb4:	0802b3f0 	.word	0x0802b3f0
 8013eb8:	0802b3fc 	.word	0x0802b3fc
 8013ebc:	0802b3d4 	.word	0x0802b3d4
 8013ec0:	ffff8000 	.word	0xffff8000
 8013ec4:	0802b408 	.word	0x0802b408
 8013ec8:	37800000 	.word	0x37800000
 8013ecc:	3283126f 	.word	0x3283126f
 8013ed0:	3ef00000 	.word	0x3ef00000
 8013ed4:	0802b410 	.word	0x0802b410
 8013ed8:	0802b41c 	.word	0x0802b41c
 8013edc:	0802b42c 	.word	0x0802b42c
 8013ee0:	3b800000 	.word	0x3b800000
 8013ee4:	0802b44c 	.word	0x0802b44c
 8013ee8:	0802b434 	.word	0x0802b434
          static_cast<double>(params->beta),
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7ec fb5b 	bl	80005ac <__aeabi_f2d>
 8013ef6:	4680      	mov	r8, r0
 8013ef8:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8013efa:	68bb      	ldr	r3, [r7, #8]
 8013efc:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7ec fb54 	bl	80005ac <__aeabi_f2d>
 8013f04:	4682      	mov	sl, r0
 8013f06:	468b      	mov	fp, r1
 8013f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f0a:	3308      	adds	r3, #8
 8013f0c:	f107 0210 	add.w	r2, r7, #16
 8013f10:	4619      	mov	r1, r3
 8013f12:	2005      	movs	r0, #5
 8013f14:	ec4b ab11 	vmov	d1, sl, fp
 8013f18:	ec49 8b10 	vmov	d0, r8, r9
 8013f1c:	f7f7 f8c4 	bl	800b0a8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 8013f20:	693a      	ldr	r2, [r7, #16]
 8013f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f24:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 8013f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f28:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8013f2a:	221f      	movs	r2, #31
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	2005      	movs	r0, #5
 8013f30:	f7f7 f902 	bl	800b138 <_ZN6tflite20CalculateInputRadiusEiii>
 8013f34:	4603      	mov	r3, r0
 8013f36:	4618      	mov	r0, r3
 8013f38:	f7ec fb26 	bl	8000588 <__aeabi_i2d>
 8013f3c:	4602      	mov	r2, r0
 8013f3e:	460b      	mov	r3, r1
 8013f40:	4614      	mov	r4, r2
 8013f42:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 8013f46:	4620      	mov	r0, r4
 8013f48:	4629      	mov	r1, r5
 8013f4a:	f7ec fe21 	bl	8000b90 <__aeabi_d2iz>
 8013f4e:	4602      	mov	r2, r0
 8013f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f52:	619a      	str	r2, [r3, #24]
    }
 8013f54:	e043      	b.n	8013fde <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	781b      	ldrb	r3, [r3, #0]
 8013f5a:	2b01      	cmp	r3, #1
 8013f5c:	d018      	beq.n	8013f90 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	695c      	ldr	r4, [r3, #20]
 8013f62:	68bb      	ldr	r3, [r7, #8]
 8013f64:	781b      	ldrb	r3, [r3, #0]
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7f4 fc50 	bl	800880c <TfLiteTypeGetName>
 8013f6c:	4605      	mov	r5, r0
 8013f6e:	2001      	movs	r0, #1
 8013f70:	f7f4 fc4c 	bl	800880c <TfLiteTypeGetName>
 8013f74:	4603      	mov	r3, r0
 8013f76:	9303      	str	r3, [sp, #12]
 8013f78:	9502      	str	r5, [sp, #8]
 8013f7a:	4b1c      	ldr	r3, [pc, #112]	; (8013fec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 8013f7c:	9301      	str	r3, [sp, #4]
 8013f7e:	4b1c      	ldr	r3, [pc, #112]	; (8013ff0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 8013f80:	9300      	str	r3, [sp, #0]
 8013f82:	234e      	movs	r3, #78	; 0x4e
 8013f84:	4a1b      	ldr	r2, [pc, #108]	; (8013ff4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8013f86:	491c      	ldr	r1, [pc, #112]	; (8013ff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8013f88:	68f8      	ldr	r0, [r7, #12]
 8013f8a:	47a0      	blx	r4
 8013f8c:	2301      	movs	r3, #1
 8013f8e:	e027      	b.n	8013fe0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	2b01      	cmp	r3, #1
 8013f96:	d018      	beq.n	8013fca <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	695c      	ldr	r4, [r3, #20]
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	781b      	ldrb	r3, [r3, #0]
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f7f4 fc33 	bl	800880c <TfLiteTypeGetName>
 8013fa6:	4605      	mov	r5, r0
 8013fa8:	2001      	movs	r0, #1
 8013faa:	f7f4 fc2f 	bl	800880c <TfLiteTypeGetName>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	9303      	str	r3, [sp, #12]
 8013fb2:	9502      	str	r5, [sp, #8]
 8013fb4:	4b0d      	ldr	r3, [pc, #52]	; (8013fec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 8013fb6:	9301      	str	r3, [sp, #4]
 8013fb8:	4b10      	ldr	r3, [pc, #64]	; (8013ffc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 8013fba:	9300      	str	r3, [sp, #0]
 8013fbc:	234f      	movs	r3, #79	; 0x4f
 8013fbe:	4a0d      	ldr	r2, [pc, #52]	; (8013ff4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8013fc0:	490d      	ldr	r1, [pc, #52]	; (8013ff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8013fc2:	68f8      	ldr	r0, [r7, #12]
 8013fc4:	47a0      	blx	r4
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	e00a      	b.n	8013fe0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f7ec faec 	bl	80005ac <__aeabi_f2d>
 8013fd4:	4602      	mov	r2, r0
 8013fd6:	460b      	mov	r3, r1
 8013fd8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013fda:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8013fde:	2300      	movs	r3, #0
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3728      	adds	r7, #40	; 0x28
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013fea:	bf00      	nop
 8013fec:	0802b470 	.word	0x0802b470
 8013ff0:	0802b3fc 	.word	0x0802b3fc
 8013ff4:	0802b310 	.word	0x0802b310
 8013ff8:	0802b3d4 	.word	0x0802b3d4
 8013ffc:	0802b41c 	.word	0x0802b41c

08014000 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 8014000:	b580      	push	{r7, lr}
 8014002:	b084      	sub	sp, #16
 8014004:	af00      	add	r7, sp, #0
 8014006:	60f8      	str	r0, [r7, #12]
 8014008:	60b9      	str	r1, [r7, #8]
 801400a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014010:	2b00      	cmp	r3, #0
 8014012:	d101      	bne.n	8014018 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 8014014:	f010 ff67 	bl	8024ee6 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801401c:	2138      	movs	r1, #56	; 0x38
 801401e:	68f8      	ldr	r0, [r7, #12]
 8014020:	4798      	blx	r3
 8014022:	4603      	mov	r3, r0
}
 8014024:	4618      	mov	r0, r3
 8014026:	3710      	adds	r7, #16
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}

0801402c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut<float, int16_t, int16_t>(
        [](float value) { return std::exp(value); }, -10.0f, 0.0f, -1.0f, 1.0f,
 801402c:	b580      	push	{r7, lr}
 801402e:	b082      	sub	sp, #8
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
 8014034:	ed87 0a00 	vstr	s0, [r7]
 8014038:	ed97 0a00 	vldr	s0, [r7]
 801403c:	f7f7 f96a 	bl	800b314 <_ZSt3expf>
 8014040:	eef0 7a40 	vmov.f32	s15, s0
 8014044:	eeb0 0a67 	vmov.f32	s0, s15
 8014048:	3708      	adds	r7, #8
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}

0801404e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 801404e:	b580      	push	{r7, lr}
 8014050:	b082      	sub	sp, #8
 8014052:	af00      	add	r7, sp, #0
 8014054:	ed87 0a01 	vstr	s0, [r7, #4]
 8014058:	ed97 0a01 	vldr	s0, [r7, #4]
 801405c:	2000      	movs	r0, #0
 801405e:	f7ff ffe5 	bl	801402c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 8014062:	eef0 7a40 	vmov.f32	s15, s0
 8014066:	eeb0 0a67 	vmov.f32	s0, s15
 801406a:	3708      	adds	r7, #8
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}

08014070 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 8014070:	b480      	push	{r7}
 8014072:	b083      	sub	sp, #12
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	4b03      	ldr	r3, [pc, #12]	; (8014088 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 801407a:	4618      	mov	r0, r3
 801407c:	370c      	adds	r7, #12
 801407e:	46bd      	mov	sp, r7
 8014080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014084:	4770      	bx	lr
 8014086:	bf00      	nop
 8014088:	0801404f 	.word	0x0801404f

0801408c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
        op_data->exp_lut);
    gen_lut<float, int16_t, int16_t>(
        [](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f, -1.0f,
 801408c:	b480      	push	{r7}
 801408e:	b083      	sub	sp, #12
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	ed87 0a00 	vstr	s0, [r7]
 8014098:	edd7 7a00 	vldr	s15, [r7]
 801409c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80140a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80140a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80140a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80140ac:	eef0 7a66 	vmov.f32	s15, s13
 80140b0:	eeb0 0a67 	vmov.f32	s0, s15
 80140b4:	370c      	adds	r7, #12
 80140b6:	46bd      	mov	sp, r7
 80140b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140bc:	4770      	bx	lr

080140be <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 80140be:	b580      	push	{r7, lr}
 80140c0:	b082      	sub	sp, #8
 80140c2:	af00      	add	r7, sp, #0
 80140c4:	ed87 0a01 	vstr	s0, [r7, #4]
 80140c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80140cc:	2000      	movs	r0, #0
 80140ce:	f7ff ffdd 	bl	801408c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 80140d2:	eef0 7a40 	vmov.f32	s15, s0
 80140d6:	eeb0 0a67 	vmov.f32	s0, s15
 80140da:	3708      	adds	r7, #8
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}

080140e0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 80140e0:	b480      	push	{r7}
 80140e2:	b083      	sub	sp, #12
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
 80140e8:	4b03      	ldr	r3, [pc, #12]	; (80140f8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 80140ea:	4618      	mov	r0, r3
 80140ec:	370c      	adds	r7, #12
 80140ee:	46bd      	mov	sp, r7
 80140f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f4:	4770      	bx	lr
 80140f6:	bf00      	nop
 80140f8:	080140bf 	.word	0x080140bf

080140fc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 80140fc:	b590      	push	{r4, r7, lr}
 80140fe:	b08f      	sub	sp, #60	; 0x3c
 8014100:	af04      	add	r7, sp, #16
 8014102:	6078      	str	r0, [r7, #4]
 8014104:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8014106:	6838      	ldr	r0, [r7, #0]
 8014108:	f7fd fae2 	bl	80116d0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801410c:	4603      	mov	r3, r0
 801410e:	2b01      	cmp	r3, #1
 8014110:	bf14      	ite	ne
 8014112:	2301      	movne	r3, #1
 8014114:	2300      	moveq	r3, #0
 8014116:	b2db      	uxtb	r3, r3
 8014118:	2b00      	cmp	r3, #0
 801411a:	d013      	beq.n	8014144 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	695c      	ldr	r4, [r3, #20]
 8014120:	6838      	ldr	r0, [r7, #0]
 8014122:	f7fd fad5 	bl	80116d0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8014126:	4603      	mov	r3, r0
 8014128:	2201      	movs	r2, #1
 801412a:	9203      	str	r2, [sp, #12]
 801412c:	9302      	str	r3, [sp, #8]
 801412e:	4b7c      	ldr	r3, [pc, #496]	; (8014320 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8014130:	9301      	str	r3, [sp, #4]
 8014132:	4b7c      	ldr	r3, [pc, #496]	; (8014324 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 8014134:	9300      	str	r3, [sp, #0]
 8014136:	235d      	movs	r3, #93	; 0x5d
 8014138:	4a7b      	ldr	r2, [pc, #492]	; (8014328 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801413a:	497c      	ldr	r1, [pc, #496]	; (801432c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	47a0      	blx	r4
 8014140:	2301      	movs	r3, #1
 8014142:	e14e      	b.n	80143e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8014144:	6838      	ldr	r0, [r7, #0]
 8014146:	f7fd fad0 	bl	80116ea <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801414a:	4603      	mov	r3, r0
 801414c:	2b01      	cmp	r3, #1
 801414e:	bf14      	ite	ne
 8014150:	2301      	movne	r3, #1
 8014152:	2300      	moveq	r3, #0
 8014154:	b2db      	uxtb	r3, r3
 8014156:	2b00      	cmp	r3, #0
 8014158:	d013      	beq.n	8014182 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	695c      	ldr	r4, [r3, #20]
 801415e:	6838      	ldr	r0, [r7, #0]
 8014160:	f7fd fac3 	bl	80116ea <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8014164:	4603      	mov	r3, r0
 8014166:	2201      	movs	r2, #1
 8014168:	9203      	str	r2, [sp, #12]
 801416a:	9302      	str	r3, [sp, #8]
 801416c:	4b6c      	ldr	r3, [pc, #432]	; (8014320 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801416e:	9301      	str	r3, [sp, #4]
 8014170:	4b6f      	ldr	r3, [pc, #444]	; (8014330 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 8014172:	9300      	str	r3, [sp, #0]
 8014174:	235e      	movs	r3, #94	; 0x5e
 8014176:	4a6c      	ldr	r2, [pc, #432]	; (8014328 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014178:	496c      	ldr	r1, [pc, #432]	; (801432c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	47a0      	blx	r4
 801417e:	2301      	movs	r3, #1
 8014180:	e12f      	b.n	80143e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 8014182:	2200      	movs	r2, #0
 8014184:	6839      	ldr	r1, [r7, #0]
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f7f7 fca0 	bl	800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801418c:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 801418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014190:	2b00      	cmp	r3, #0
 8014192:	d10a      	bne.n	80141aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	695c      	ldr	r4, [r3, #20]
 8014198:	4b66      	ldr	r3, [pc, #408]	; (8014334 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801419a:	9300      	str	r3, [sp, #0]
 801419c:	2360      	movs	r3, #96	; 0x60
 801419e:	4a62      	ldr	r2, [pc, #392]	; (8014328 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80141a0:	4965      	ldr	r1, [pc, #404]	; (8014338 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	47a0      	blx	r4
 80141a6:	2301      	movs	r3, #1
 80141a8:	e11b      	b.n	80143e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 80141aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141ac:	f7f7 fc00 	bl	800b9b0 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80141b0:	4603      	mov	r3, r0
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	bfd4      	ite	le
 80141b6:	2301      	movle	r3, #1
 80141b8:	2300      	movgt	r3, #0
 80141ba:	b2db      	uxtb	r3, r3
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d00a      	beq.n	80141d6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	695c      	ldr	r4, [r3, #20]
 80141c4:	4b5d      	ldr	r3, [pc, #372]	; (801433c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80141c6:	9300      	str	r3, [sp, #0]
 80141c8:	2361      	movs	r3, #97	; 0x61
 80141ca:	4a57      	ldr	r2, [pc, #348]	; (8014328 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80141cc:	495a      	ldr	r1, [pc, #360]	; (8014338 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	47a0      	blx	r4
 80141d2:	2301      	movs	r3, #1
 80141d4:	e105      	b.n	80143e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 80141d6:	2200      	movs	r2, #0
 80141d8:	6839      	ldr	r1, [r7, #0]
 80141da:	6878      	ldr	r0, [r7, #4]
 80141dc:	f7f7 fc86 	bl	800baec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80141e0:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 80141e2:	6a3b      	ldr	r3, [r7, #32]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d10a      	bne.n	80141fe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	695c      	ldr	r4, [r3, #20]
 80141ec:	4b54      	ldr	r3, [pc, #336]	; (8014340 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80141ee:	9300      	str	r3, [sp, #0]
 80141f0:	2363      	movs	r3, #99	; 0x63
 80141f2:	4a4d      	ldr	r2, [pc, #308]	; (8014328 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80141f4:	4950      	ldr	r1, [pc, #320]	; (8014338 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	47a0      	blx	r4
 80141fa:	2301      	movs	r3, #1
 80141fc:	e0f1      	b.n	80143e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	691b      	ldr	r3, [r3, #16]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d10a      	bne.n	801421c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	695c      	ldr	r4, [r3, #20]
 801420a:	4b4e      	ldr	r3, [pc, #312]	; (8014344 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801420c:	9300      	str	r3, [sp, #0]
 801420e:	2365      	movs	r3, #101	; 0x65
 8014210:	4a45      	ldr	r2, [pc, #276]	; (8014328 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014212:	4949      	ldr	r1, [pc, #292]	; (8014338 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	47a0      	blx	r4
 8014218:	2301      	movs	r3, #1
 801421a:	e0e2      	b.n	80143e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 801421c:	683b      	ldr	r3, [r7, #0]
 801421e:	691b      	ldr	r3, [r3, #16]
 8014220:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 8014222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014224:	781b      	ldrb	r3, [r3, #0]
 8014226:	2b07      	cmp	r3, #7
 8014228:	d12f      	bne.n	801428a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801422e:	f240 4102 	movw	r1, #1026	; 0x402
 8014232:	6878      	ldr	r0, [r7, #4]
 8014234:	4798      	blx	r3
 8014236:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 8014238:	69bb      	ldr	r3, [r7, #24]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d10a      	bne.n	8014254 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	695c      	ldr	r4, [r3, #20]
 8014242:	4b41      	ldr	r3, [pc, #260]	; (8014348 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 8014244:	9300      	str	r3, [sp, #0]
 8014246:	236b      	movs	r3, #107	; 0x6b
 8014248:	4a37      	ldr	r2, [pc, #220]	; (8014328 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801424a:	493b      	ldr	r1, [pc, #236]	; (8014338 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	47a0      	blx	r4
 8014250:	2301      	movs	r3, #1
 8014252:	e0c6      	b.n	80143e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 8014254:	69fb      	ldr	r3, [r7, #28]
 8014256:	69ba      	ldr	r2, [r7, #24]
 8014258:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801425e:	f240 4102 	movw	r1, #1026	; 0x402
 8014262:	6878      	ldr	r0, [r7, #4]
 8014264:	4798      	blx	r3
 8014266:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d10a      	bne.n	8014284 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	695c      	ldr	r4, [r3, #20]
 8014272:	4b36      	ldr	r3, [pc, #216]	; (801434c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8014274:	9300      	str	r3, [sp, #0]
 8014276:	236f      	movs	r3, #111	; 0x6f
 8014278:	4a2b      	ldr	r2, [pc, #172]	; (8014328 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801427a:	492f      	ldr	r1, [pc, #188]	; (8014338 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	47a0      	blx	r4
 8014280:	2301      	movs	r3, #1
 8014282:	e0ae      	b.n	80143e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
    op_data->one_over_one_plus_x_lut =
 8014284:	69fb      	ldr	r3, [r7, #28]
 8014286:	697a      	ldr	r2, [r7, #20]
 8014288:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 801428a:	6a3b      	ldr	r3, [r7, #32]
 801428c:	781b      	ldrb	r3, [r3, #0]
 801428e:	2b07      	cmp	r3, #7
 8014290:	d112      	bne.n	80142b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 8014292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014294:	781b      	ldrb	r3, [r3, #0]
 8014296:	2b09      	cmp	r3, #9
 8014298:	d028      	beq.n	80142ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429c:	781b      	ldrb	r3, [r3, #0]
 801429e:	2b07      	cmp	r3, #7
 80142a0:	d024      	beq.n	80142ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	695c      	ldr	r4, [r3, #20]
 80142a6:	4b2a      	ldr	r3, [pc, #168]	; (8014350 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 80142a8:	9300      	str	r3, [sp, #0]
 80142aa:	2375      	movs	r3, #117	; 0x75
 80142ac:	4a1e      	ldr	r2, [pc, #120]	; (8014328 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80142ae:	4922      	ldr	r1, [pc, #136]	; (8014338 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	47a0      	blx	r4
 80142b4:	2301      	movs	r3, #1
 80142b6:	e094      	b.n	80143e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 80142b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ba:	781a      	ldrb	r2, [r3, #0]
 80142bc:	6a3b      	ldr	r3, [r7, #32]
 80142be:	781b      	ldrb	r3, [r3, #0]
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d013      	beq.n	80142ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	695c      	ldr	r4, [r3, #20]
 80142c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	461a      	mov	r2, r3
 80142ce:	6a3b      	ldr	r3, [r7, #32]
 80142d0:	781b      	ldrb	r3, [r3, #0]
 80142d2:	9303      	str	r3, [sp, #12]
 80142d4:	9202      	str	r2, [sp, #8]
 80142d6:	4b1f      	ldr	r3, [pc, #124]	; (8014354 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 80142d8:	9301      	str	r3, [sp, #4]
 80142da:	4b1f      	ldr	r3, [pc, #124]	; (8014358 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 80142dc:	9300      	str	r3, [sp, #0]
 80142de:	2378      	movs	r3, #120	; 0x78
 80142e0:	4a11      	ldr	r2, [pc, #68]	; (8014328 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80142e2:	4912      	ldr	r1, [pc, #72]	; (801432c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	47a0      	blx	r4
 80142e8:	2301      	movs	r3, #1
 80142ea:	e07a      	b.n	80143e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  if (input->type == kTfLiteInt16) {
 80142ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ee:	781b      	ldrb	r3, [r3, #0]
 80142f0:	2b07      	cmp	r3, #7
 80142f2:	d169      	bne.n	80143c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 80142f4:	6a3b      	ldr	r3, [r7, #32]
 80142f6:	691b      	ldr	r3, [r3, #16]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d035      	beq.n	8014368 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	695c      	ldr	r4, [r3, #20]
 8014300:	6a3b      	ldr	r3, [r7, #32]
 8014302:	691b      	ldr	r3, [r3, #16]
 8014304:	2200      	movs	r2, #0
 8014306:	9203      	str	r2, [sp, #12]
 8014308:	9302      	str	r3, [sp, #8]
 801430a:	4b14      	ldr	r3, [pc, #80]	; (801435c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801430c:	9301      	str	r3, [sp, #4]
 801430e:	4b14      	ldr	r3, [pc, #80]	; (8014360 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8014310:	9300      	str	r3, [sp, #0]
 8014312:	237d      	movs	r3, #125	; 0x7d
 8014314:	4a04      	ldr	r2, [pc, #16]	; (8014328 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014316:	4905      	ldr	r1, [pc, #20]	; (801432c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	47a0      	blx	r4
 801431c:	2301      	movs	r3, #1
 801431e:	e060      	b.n	80143e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
 8014320:	0802b480 	.word	0x0802b480
 8014324:	0802b484 	.word	0x0802b484
 8014328:	0802b310 	.word	0x0802b310
 801432c:	0802b354 	.word	0x0802b354
 8014330:	0802b494 	.word	0x0802b494
 8014334:	0802b4a8 	.word	0x0802b4a8
 8014338:	0802b434 	.word	0x0802b434
 801433c:	0802b4bc 	.word	0x0802b4bc
 8014340:	0802b4d8 	.word	0x0802b4d8
 8014344:	0802b4ec 	.word	0x0802b4ec
 8014348:	0802b508 	.word	0x0802b508
 801434c:	0802b520 	.word	0x0802b520
 8014350:	0802b544 	.word	0x0802b544
 8014354:	0802b41c 	.word	0x0802b41c
 8014358:	0802b3fc 	.word	0x0802b3fc
 801435c:	0802b370 	.word	0x0802b370
 8014360:	0802b374 	.word	0x0802b374
 8014364:	00000000 	.word	0x00000000
    gen_lut<float, int16_t, int16_t>(
 8014368:	f107 0308 	add.w	r3, r7, #8
 801436c:	4618      	mov	r0, r3
 801436e:	f7ff fe7f 	bl	8014070 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 8014372:	4602      	mov	r2, r0
 8014374:	69fb      	ldr	r3, [r7, #28]
 8014376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014378:	4619      	mov	r1, r3
 801437a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 801437e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8014382:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8014364 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8014386:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 801438a:	4610      	mov	r0, r2
 801438c:	f000 f82e 	bl	80143ec <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_>
    gen_lut<float, int16_t, int16_t>(
 8014390:	f107 030c 	add.w	r3, r7, #12
 8014394:	4618      	mov	r0, r3
 8014396:	f7ff fea3 	bl	80140e0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 801439a:	4602      	mov	r2, r0
 801439c:	69fb      	ldr	r3, [r7, #28]
 801439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a0:	4619      	mov	r1, r3
 80143a2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80143a6:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80143aa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80143ae:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 8014364 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 80143b2:	4610      	mov	r0, r2
 80143b4:	f000 f81a 	bl	80143ec <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_>
        1.0f, op_data->one_over_one_plus_x_lut);
    op_data->zero_point = output->params.zero_point;
 80143b8:	6a3b      	ldr	r3, [r7, #32]
 80143ba:	691a      	ldr	r2, [r3, #16]
 80143bc:	69fb      	ldr	r3, [r7, #28]
 80143be:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 80143c0:	6a3b      	ldr	r3, [r7, #32]
 80143c2:	68da      	ldr	r2, [r3, #12]
 80143c4:	69fb      	ldr	r3, [r7, #28]
 80143c6:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	695b      	ldr	r3, [r3, #20]
 80143cc:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 80143ce:	69fb      	ldr	r3, [r7, #28]
 80143d0:	9300      	str	r3, [sp, #0]
 80143d2:	693b      	ldr	r3, [r7, #16]
 80143d4:	6a3a      	ldr	r2, [r7, #32]
 80143d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f7ff fbf5 	bl	8013bc8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 80143de:	4603      	mov	r3, r0
 80143e0:	bf00      	nop
}
 80143e2:	4618      	mov	r0, r3
 80143e4:	372c      	adds	r7, #44	; 0x2c
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd90      	pop	{r4, r7, pc}
 80143ea:	bf00      	nop

080143ec <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_>:
// - input_min, input_max: range of the func inputs
// - output_min, output_max: range of the func outputs
// - lut: pointer to the LUT table to fill, the table must be of size
// lut_size<LutInT>()
template <typename FloatT, typename LutInT, typename LutOutT>
inline void gen_lut(FloatT (*func)(FloatT), FloatT input_min, FloatT input_max,
 80143ec:	b590      	push	{r4, r7, lr}
 80143ee:	ed2d 8b02 	vpush	{d8}
 80143f2:	b099      	sub	sp, #100	; 0x64
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6178      	str	r0, [r7, #20]
 80143f8:	ed87 0a04 	vstr	s0, [r7, #16]
 80143fc:	edc7 0a03 	vstr	s1, [r7, #12]
 8014400:	ed87 1a02 	vstr	s2, [r7, #8]
 8014404:	edc7 1a01 	vstr	s3, [r7, #4]
 8014408:	6039      	str	r1, [r7, #0]
                    std::is_same<LutOutT, int16_t>::value,
                "Only LUTs with int8 or int16 outputs are supported.");
  static_assert(std::is_floating_point<FloatT>::value,
                "FloatT must be a floating-point type.");

  const int nb_steps = std::is_same<LutInT, int8_t>::value ? 256 : 512;
 801440a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801440e:	65bb      	str	r3, [r7, #88]	; 0x58
  const FloatT step = (input_max - input_min) / nb_steps;
 8014410:	ed97 7a03 	vldr	s14, [r7, #12]
 8014414:	edd7 7a04 	vldr	s15, [r7, #16]
 8014418:	ee37 7a67 	vsub.f32	s14, s14, s15
 801441c:	eddf 6a8b 	vldr	s13, [pc, #556]	; 801464c <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_+0x260>
 8014420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014424:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  const FloatT half_step = step / 2;
 8014428:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801442c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014434:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  const FloatT output_scaling_inv =
      static_cast<FloatT>(std::numeric_limits<LutOutT>::max() -
 8014438:	f7f6 ff5a 	bl	800b2f0 <_ZNSt14numeric_limitsIsE3maxEv>
 801443c:	4603      	mov	r3, r0
 801443e:	461c      	mov	r4, r3
                          std::numeric_limits<LutOutT>::min() + 1) /
 8014440:	f7f6 ff4c 	bl	800b2dc <_ZNSt14numeric_limitsIsE3minEv>
 8014444:	4603      	mov	r3, r0
      static_cast<FloatT>(std::numeric_limits<LutOutT>::max() -
 8014446:	1ae3      	subs	r3, r4, r3
                          std::numeric_limits<LutOutT>::min() + 1) /
 8014448:	3301      	adds	r3, #1
 801444a:	ee07 3a90 	vmov	s15, r3
 801444e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      (output_max - output_min);
 8014452:	ed97 7a01 	vldr	s14, [r7, #4]
 8014456:	edd7 7a02 	vldr	s15, [r7, #8]
 801445a:	ee37 7a67 	vsub.f32	s14, s14, s15
  const FloatT output_scaling_inv =
 801445e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014462:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
  const FloatT table_min =
 8014466:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801446a:	61fb      	str	r3, [r7, #28]
      static_cast<FloatT>(std::numeric_limits<LutOutT>::min());
  const FloatT table_max =
 801446c:	4b78      	ldr	r3, [pc, #480]	; (8014650 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_+0x264>)
 801446e:	61bb      	str	r3, [r7, #24]
      static_cast<FloatT>(std::numeric_limits<LutOutT>::max());

  for (int i = 0; i < nb_steps; i++) {
 8014470:	2300      	movs	r3, #0
 8014472:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801447a:	f280 80b0 	bge.w	80145de <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_+0x1f2>
    const FloatT val = func(input_min + i * step);
 801447e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014480:	ee07 3a90 	vmov	s15, r3
 8014484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014488:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801448c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014490:	edd7 7a04 	vldr	s15, [r7, #16]
 8014494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014498:	697b      	ldr	r3, [r7, #20]
 801449a:	eeb0 0a67 	vmov.f32	s0, s15
 801449e:	4798      	blx	r3
 80144a0:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
    const FloatT val_midpoint = func(input_min + i * step + half_step);
 80144a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80144a6:	ee07 3a90 	vmov	s15, r3
 80144aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80144ae:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80144b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80144b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80144ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80144be:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80144c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144c6:	697b      	ldr	r3, [r7, #20]
 80144c8:	eeb0 0a67 	vmov.f32	s0, s15
 80144cc:	4798      	blx	r3
 80144ce:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
    const FloatT val_next = func(input_min + (i + 1) * step);
 80144d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80144d4:	3301      	adds	r3, #1
 80144d6:	ee07 3a90 	vmov	s15, r3
 80144da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80144de:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80144e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80144e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80144ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	eeb0 0a67 	vmov.f32	s0, s15
 80144f4:	4798      	blx	r3
 80144f6:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

    const FloatT sample_val = TfLiteRound(val * output_scaling_inv);
 80144fa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80144fe:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8014502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014506:	eeb0 0a67 	vmov.f32	s0, s15
 801450a:	f7f6 fec2 	bl	800b292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801450e:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    const FloatT midpoint_interp_val =
        TfLiteRound((val_next * output_scaling_inv +
 8014512:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014516:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801451a:	ee27 8a27 	vmul.f32	s16, s14, s15
                     TfLiteRound(val * output_scaling_inv)) /
 801451e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014522:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8014526:	ee67 7a27 	vmul.f32	s15, s14, s15
 801452a:	eeb0 0a67 	vmov.f32	s0, s15
 801452e:	f7f6 feb0 	bl	800b292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8014532:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((val_next * output_scaling_inv +
 8014536:	ee78 7a27 	vadd.f32	s15, s16, s15
 801453a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801453e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014542:	eeb0 0a47 	vmov.f32	s0, s14
 8014546:	f7f6 fea4 	bl	800b292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801454a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
                    2);
    const FloatT midpoint_val = TfLiteRound(val_midpoint * output_scaling_inv);
 801454e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8014552:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8014556:	ee67 7a27 	vmul.f32	s15, s14, s15
 801455a:	eeb0 0a67 	vmov.f32	s0, s15
 801455e:	f7f6 fe98 	bl	800b292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8014562:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    const FloatT midpoint_err = midpoint_interp_val - midpoint_val;
 8014566:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801456a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801456e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014572:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    const FloatT bias = TfLiteRound(midpoint_err / 2);
 8014576:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801457a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801457e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014582:	eeb0 0a47 	vmov.f32	s0, s14
 8014586:	f7f6 fe84 	bl	800b292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801458a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    lut[i] = static_cast<LutOutT>(std::min<FloatT>(
        std::max<FloatT>(sample_val - bias, table_min), table_max));
 801458e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014592:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014596:	ee77 7a67 	vsub.f32	s15, s14, s15
 801459a:	edc7 7a08 	vstr	s15, [r7, #32]
    lut[i] = static_cast<LutOutT>(std::min<FloatT>(
 801459e:	f107 021c 	add.w	r2, r7, #28
 80145a2:	f107 0320 	add.w	r3, r7, #32
 80145a6:	4611      	mov	r1, r2
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7f6 fe45 	bl	800b238 <_ZSt3maxIfERKT_S2_S2_>
 80145ae:	4602      	mov	r2, r0
 80145b0:	f107 0318 	add.w	r3, r7, #24
 80145b4:	4619      	mov	r1, r3
 80145b6:	4610      	mov	r0, r2
 80145b8:	f7f6 fe25 	bl	800b206 <_ZSt3minIfERKT_S2_S2_>
 80145bc:	4603      	mov	r3, r0
 80145be:	edd3 7a00 	vldr	s15, [r3]
 80145c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80145c4:	005b      	lsls	r3, r3, #1
 80145c6:	683a      	ldr	r2, [r7, #0]
 80145c8:	4413      	add	r3, r2
 80145ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80145ce:	ee17 2a90 	vmov	r2, s15
 80145d2:	b212      	sxth	r2, r2
 80145d4:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < nb_steps; i++) {
 80145d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80145d8:	3301      	adds	r3, #1
 80145da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80145dc:	e74a      	b.n	8014474 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_+0x88>
  }

  const bool with_extra_interpolation_value =
 80145de:	2301      	movs	r3, #1
 80145e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      std::is_same<LutInT, int16_t>::value;
  if (with_extra_interpolation_value) {
    lut[nb_steps] = static_cast<LutOutT>(std::min<FloatT>(
        std::max<FloatT>(TfLiteRound(func(input_max) * output_scaling_inv),
 80145e4:	697b      	ldr	r3, [r7, #20]
 80145e6:	ed97 0a03 	vldr	s0, [r7, #12]
 80145ea:	4798      	blx	r3
 80145ec:	eeb0 7a40 	vmov.f32	s14, s0
 80145f0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80145f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80145f8:	eeb0 0a67 	vmov.f32	s0, s15
 80145fc:	f7f6 fe49 	bl	800b292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8014600:	eef0 7a40 	vmov.f32	s15, s0
 8014604:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    lut[nb_steps] = static_cast<LutOutT>(std::min<FloatT>(
 8014608:	f107 021c 	add.w	r2, r7, #28
 801460c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014610:	4611      	mov	r1, r2
 8014612:	4618      	mov	r0, r3
 8014614:	f7f6 fe10 	bl	800b238 <_ZSt3maxIfERKT_S2_S2_>
 8014618:	4602      	mov	r2, r0
 801461a:	f107 0318 	add.w	r3, r7, #24
 801461e:	4619      	mov	r1, r3
 8014620:	4610      	mov	r0, r2
 8014622:	f7f6 fdf0 	bl	800b206 <_ZSt3minIfERKT_S2_S2_>
 8014626:	4603      	mov	r3, r0
 8014628:	edd3 7a00 	vldr	s15, [r3]
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014636:	ee17 2a90 	vmov	r2, s15
 801463a:	b212      	sxth	r2, r2
 801463c:	801a      	strh	r2, [r3, #0]
                         table_min),
        table_max));
  }
}
 801463e:	bf00      	nop
 8014640:	3764      	adds	r7, #100	; 0x64
 8014642:	46bd      	mov	sp, r7
 8014644:	ecbd 8b02 	vpop	{d8}
 8014648:	bd90      	pop	{r4, r7, pc}
 801464a:	bf00      	nop
 801464c:	44000000 	.word	0x44000000
 8014650:	46fffe00 	.word	0x46fffe00

08014654 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 8014654:	b590      	push	{r4, r7, lr}
 8014656:	ed2d 8b02 	vpush	{d8}
 801465a:	b0a9      	sub	sp, #164	; 0xa4
 801465c:	af02      	add	r7, sp, #8
 801465e:	60f8      	str	r0, [r7, #12]
 8014660:	60b9      	str	r1, [r7, #8]
 8014662:	607a      	str	r2, [r7, #4]
 8014664:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801466c:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014674:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801467c:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8014684:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801468c:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014694:	65fb      	str	r3, [r7, #92]	; 0x5c
  const float output_activation_min = params.float_activation_min;
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801469a:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_max = params.float_activation_max;
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146a0:	657b      	str	r3, [r7, #84]	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80146a2:	68b8      	ldr	r0, [r7, #8]
 80146a4:	f7f8 f920 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80146a8:	4603      	mov	r3, r0
 80146aa:	2b04      	cmp	r3, #4
 80146ac:	d001      	beq.n	80146b2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 80146ae:	f010 fc1a 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80146b2:	6838      	ldr	r0, [r7, #0]
 80146b4:	f7f8 f918 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80146b8:	4603      	mov	r3, r0
 80146ba:	2b04      	cmp	r3, #4
 80146bc:	d001      	beq.n	80146c2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 80146be:	f010 fc12 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80146c2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80146c6:	f7f8 f90f 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80146ca:	4603      	mov	r3, r0
 80146cc:	2b04      	cmp	r3, #4
 80146ce:	d001      	beq.n	80146d4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 80146d0:	f010 fc09 	bl	8024ee6 <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80146d4:	2300      	movs	r3, #0
 80146d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80146da:	2100      	movs	r1, #0
 80146dc:	68b8      	ldr	r0, [r7, #8]
 80146de:	f7fd f8a6 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80146e2:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80146e4:	2303      	movs	r3, #3
 80146e6:	683a      	ldr	r2, [r7, #0]
 80146e8:	2103      	movs	r1, #3
 80146ea:	68b8      	ldr	r0, [r7, #8]
 80146ec:	f7fd f89f 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80146f0:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80146f2:	2303      	movs	r3, #3
 80146f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80146f8:	2100      	movs	r1, #0
 80146fa:	6838      	ldr	r0, [r7, #0]
 80146fc:	f7fd f897 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014700:	64b8      	str	r0, [r7, #72]	; 0x48
  if (bias_data) {
 8014702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014706:	2b00      	cmp	r3, #0
 8014708:	d009      	beq.n	801471e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 801470a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 801470e:	f7fc ffbc 	bl	801168a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8014712:	4602      	mov	r2, r0
 8014714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014716:	4293      	cmp	r3, r2
 8014718:	d001      	beq.n	801471e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 801471a:	f010 fbe4 	bl	8024ee6 <abort>
  }
  const int input_height = input_shape.Dims(1);
 801471e:	2101      	movs	r1, #1
 8014720:	68b8      	ldr	r0, [r7, #8]
 8014722:	f7fc ff8c 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014726:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 8014728:	2102      	movs	r1, #2
 801472a:	68b8      	ldr	r0, [r7, #8]
 801472c:	f7fc ff87 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014730:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
 8014732:	2101      	movs	r1, #1
 8014734:	6838      	ldr	r0, [r7, #0]
 8014736:	f7fc ff82 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 801473a:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_width = filter_shape.Dims(2);
 801473c:	2102      	movs	r1, #2
 801473e:	6838      	ldr	r0, [r7, #0]
 8014740:	f7fc ff7d 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014744:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
 8014746:	2101      	movs	r1, #1
 8014748:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801474c:	f7fc ff77 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014750:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
 8014752:	2102      	movs	r1, #2
 8014754:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014758:	f7fc ff71 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 801475c:	6338      	str	r0, [r7, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
 801475e:	2300      	movs	r3, #0
 8014760:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014764:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801476a:	429a      	cmp	r2, r3
 801476c:	f280 80f0 	bge.w	8014950 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2fc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014770:	2300      	movs	r3, #0
 8014772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014776:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801477a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801477c:	429a      	cmp	r2, r3
 801477e:	f280 80e1 	bge.w	8014944 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f0>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 8014782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014786:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014788:	fb02 f203 	mul.w	r2, r2, r3
 801478c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801478e:	1ad3      	subs	r3, r2, r3
 8014790:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014792:	2300      	movs	r3, #0
 8014794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014798:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801479e:	429a      	cmp	r2, r3
 80147a0:	f280 80ca 	bge.w	8014938 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2e4>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 80147a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80147a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80147aa:	fb02 f203 	mul.w	r2, r2, r3
 80147ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80147b0:	1ad3      	subs	r3, r2, r3
 80147b2:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 80147b4:	2300      	movs	r3, #0
 80147b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80147ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80147be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147c0:	429a      	cmp	r2, r3
 80147c2:	f280 80b3 	bge.w	801492c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
          float total = 0.f;
 80147c6:	f04f 0300 	mov.w	r3, #0
 80147ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80147ce:	2300      	movs	r3, #0
 80147d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80147d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80147d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147da:	429a      	cmp	r2, r3
 80147dc:	da6d      	bge.n	80148ba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x266>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 80147de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80147e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80147e4:	fb02 f303 	mul.w	r3, r2, r3
 80147e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147ea:	4413      	add	r3, r2
 80147ec:	627b      	str	r3, [r7, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80147ee:	2300      	movs	r3, #0
 80147f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80147f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80147f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f6:	429a      	cmp	r2, r3
 80147f8:	da59      	bge.n	80148ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x25a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 80147fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80147fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80147fe:	fb02 f303 	mul.w	r3, r2, r3
 8014802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014804:	4413      	add	r3, r2
 8014806:	623b      	str	r3, [r7, #32]

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8014808:	6a3b      	ldr	r3, [r7, #32]
 801480a:	2b00      	cmp	r3, #0
 801480c:	db0c      	blt.n	8014828 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 801480e:	6a3a      	ldr	r2, [r7, #32]
 8014810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014812:	429a      	cmp	r2, r3
 8014814:	da08      	bge.n	8014828 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8014816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014818:	2b00      	cmp	r3, #0
 801481a:	db05      	blt.n	8014828 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 801481c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801481e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014820:	429a      	cmp	r2, r3
 8014822:	da01      	bge.n	8014828 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8014824:	2301      	movs	r3, #1
 8014826:	e000      	b.n	801482a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d6>
 8014828:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 801482a:	77fb      	strb	r3, [r7, #31]
                  (in_y < input_height);

              if (!is_point_inside_image) {
 801482c:	7ffb      	ldrb	r3, [r7, #31]
 801482e:	f083 0301 	eor.w	r3, r3, #1
 8014832:	b2db      	uxtb	r3, r3
 8014834:	2b00      	cmp	r3, #0
 8014836:	d135      	bne.n	80148a4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x250>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8014838:	2300      	movs	r3, #0
 801483a:	67bb      	str	r3, [r7, #120]	; 0x78
 801483c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801483e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014840:	429a      	cmp	r2, r3
 8014842:	da30      	bge.n	80148a6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x252>
                float input_value = input_data[Offset(input_shape, batch, in_y,
 8014844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014846:	9300      	str	r3, [sp, #0]
 8014848:	6a3b      	ldr	r3, [r7, #32]
 801484a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801484c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8014850:	68b8      	ldr	r0, [r7, #8]
 8014852:	f7fc ff66 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014856:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 8014858:	009b      	lsls	r3, r3, #2
 801485a:	687a      	ldr	r2, [r7, #4]
 801485c:	4413      	add	r3, r2
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	61bb      	str	r3, [r7, #24]
                float filter_value = filter_data[Offset(
 8014862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014864:	9300      	str	r3, [sp, #0]
 8014866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014868:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801486c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8014870:	6838      	ldr	r0, [r7, #0]
 8014872:	f7fc ff56 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014876:	4603      	mov	r3, r0
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8014878:	009b      	lsls	r3, r3, #2
 801487a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801487e:	4413      	add	r3, r2
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	617b      	str	r3, [r7, #20]
                total += (input_value * filter_value);
 8014884:	ed97 7a06 	vldr	s14, [r7, #24]
 8014888:	edd7 7a05 	vldr	s15, [r7, #20]
 801488c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014890:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8014894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014898:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 801489c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801489e:	3301      	adds	r3, #1
 80148a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80148a2:	e7cb      	b.n	801483c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
                continue;
 80148a4:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80148a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80148a8:	3301      	adds	r3, #1
 80148aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80148ac:	e7a1      	b.n	80147f2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80148ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80148b2:	3301      	adds	r3, #1
 80148b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80148b8:	e78c      	b.n	80147d4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x180>
              }
            }
          }
          float bias_value = 0.0f;
 80148ba:	f04f 0300 	mov.w	r3, #0
 80148be:	677b      	str	r3, [r7, #116]	; 0x74
          if (bias_data) {
 80148c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d007      	beq.n	80148d8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
            bias_value = bias_data[out_channel];
 80148c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80148cc:	009b      	lsls	r3, r3, #2
 80148ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80148d2:	4413      	add	r3, r2
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	677b      	str	r3, [r7, #116]	; 0x74
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 80148d8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80148dc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80148e0:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 80148e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80148e8:	9300      	str	r3, [sp, #0]
 80148ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80148ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80148f2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80148f6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80148fa:	f7fc ff12 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80148fe:	4603      	mov	r3, r0
 8014900:	009b      	lsls	r3, r3, #2
 8014902:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8014906:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 8014908:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 801490c:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8014910:	eeb0 0a48 	vmov.f32	s0, s16
 8014914:	f7fd fc79 	bl	801220a <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8014918:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 801491c:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8014920:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014924:	3301      	adds	r3, #1
 8014926:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801492a:	e746      	b.n	80147ba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801492c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014930:	3301      	adds	r3, #1
 8014932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014936:	e72f      	b.n	8014798 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801493c:	3301      	adds	r3, #1
 801493e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014942:	e718      	b.n	8014776 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 8014944:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014948:	3301      	adds	r3, #1
 801494a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801494e:	e709      	b.n	8014764 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 8014950:	bf00      	nop
 8014952:	379c      	adds	r7, #156	; 0x9c
 8014954:	46bd      	mov	sp, r7
 8014956:	ecbd 8b02 	vpop	{d8}
 801495a:	bd90      	pop	{r4, r7, pc}

0801495c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 801495c:	b590      	push	{r4, r7, lr}
 801495e:	b0a9      	sub	sp, #164	; 0xa4
 8014960:	af02      	add	r7, sp, #8
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	607a      	str	r2, [r7, #4]
 8014968:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	695b      	ldr	r3, [r3, #20]
 801496e:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8014976:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801497e:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014986:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801498e:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014996:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801499e:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_offset = params.output_offset;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	69db      	ldr	r3, [r3, #28]
 80149a4:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149aa:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149b0:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80149b2:	69ba      	ldr	r2, [r7, #24]
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	429a      	cmp	r2, r3
 80149b8:	dd01      	ble.n	80149be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 80149ba:	f010 fa94 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80149be:	6838      	ldr	r0, [r7, #0]
 80149c0:	f7f7 ff92 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80149c4:	4603      	mov	r3, r0
 80149c6:	2b04      	cmp	r3, #4
 80149c8:	d001      	beq.n	80149ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 80149ca:	f010 fa8c 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80149ce:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80149d2:	f7f7 ff89 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80149d6:	4603      	mov	r3, r0
 80149d8:	2b04      	cmp	r3, #4
 80149da:	d001      	beq.n	80149e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 80149dc:	f010 fa83 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80149e0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80149e4:	f7f7 ff80 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80149e8:	4603      	mov	r3, r0
 80149ea:	2b04      	cmp	r3, #4
 80149ec:	d001      	beq.n	80149f2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 80149ee:	f010 fa7a 	bl	8024ee6 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80149f2:	2300      	movs	r3, #0
 80149f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80149f8:	2100      	movs	r1, #0
 80149fa:	6838      	ldr	r0, [r7, #0]
 80149fc:	f7fc ff17 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014a00:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8014a02:	2303      	movs	r3, #3
 8014a04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014a08:	2103      	movs	r1, #3
 8014a0a:	6838      	ldr	r0, [r7, #0]
 8014a0c:	f7fc ff0f 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014a10:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8014a12:	2303      	movs	r3, #3
 8014a14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8014a18:	2100      	movs	r1, #0
 8014a1a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014a1e:	f7fc ff06 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014a22:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 8014a24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d009      	beq.n	8014a40 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8014a2c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8014a30:	f7fc fe2b 	bl	801168a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8014a34:	4602      	mov	r2, r0
 8014a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a38:	4293      	cmp	r3, r2
 8014a3a:	d001      	beq.n	8014a40 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 8014a3c:	f010 fa53 	bl	8024ee6 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8014a40:	2101      	movs	r1, #1
 8014a42:	6838      	ldr	r0, [r7, #0]
 8014a44:	f7fc fdfb 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014a48:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 8014a4a:	2102      	movs	r1, #2
 8014a4c:	6838      	ldr	r0, [r7, #0]
 8014a4e:	f7fc fdf6 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014a52:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8014a54:	2101      	movs	r1, #1
 8014a56:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014a5a:	f7fc fdf0 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014a5e:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8014a60:	2102      	movs	r1, #2
 8014a62:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014a66:	f7fc fdea 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014a6a:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8014a6c:	2101      	movs	r1, #1
 8014a6e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014a72:	f7fc fde4 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014a76:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 8014a78:	2102      	movs	r1, #2
 8014a7a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014a7e:	f7fc fdde 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014a82:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8014a84:	2300      	movs	r3, #0
 8014a86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014a8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014a90:	429a      	cmp	r2, r3
 8014a92:	f280 8113 	bge.w	8014cbc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x360>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014a96:	2300      	movs	r3, #0
 8014a98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014a9c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	f280 8104 	bge.w	8014cb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x354>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 8014aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014aac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014aae:	fb02 f203 	mul.w	r2, r2, r3
 8014ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014ab8:	2300      	movs	r3, #0
 8014aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014abe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	f280 80ed 	bge.w	8014ca4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x348>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 8014aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014ace:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014ad0:	fb02 f203 	mul.w	r2, r2, r3
 8014ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014ad6:	1ad3      	subs	r3, r2, r3
 8014ad8:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8014ada:	2300      	movs	r3, #0
 8014adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014ae0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	f280 80d6 	bge.w	8014c98 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33c>
          int32_t acc = 0;
 8014aec:	2300      	movs	r3, #0
 8014aee:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014af0:	2300      	movs	r3, #0
 8014af2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014af6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014afc:	429a      	cmp	r2, r3
 8014afe:	da76      	bge.n	8014bee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 8014b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014b02:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014b06:	fb02 f303 	mul.w	r3, r2, r3
 8014b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b0c:	4413      	add	r3, r2
 8014b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8014b10:	2300      	movs	r3, #0
 8014b12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014b16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	da60      	bge.n	8014be2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8014b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014b26:	fb02 f303 	mul.w	r3, r2, r3
 8014b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b2c:	4413      	add	r3, r2
 8014b2e:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8014b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	db0c      	blt.n	8014b50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8014b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	da08      	bge.n	8014b50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8014b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	db05      	blt.n	8014b50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8014b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b48:	429a      	cmp	r2, r3
 8014b4a:	da01      	bge.n	8014b50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	e000      	b.n	8014b52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f6>
 8014b50:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 8014b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 8014b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b5a:	f083 0301 	eor.w	r3, r3, #1
 8014b5e:	b2db      	uxtb	r3, r3
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d137      	bne.n	8014bd4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8014b64:	2300      	movs	r3, #0
 8014b66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014b68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	da32      	bge.n	8014bd6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27a>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 8014b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014b72:	9300      	str	r3, [sp, #0]
 8014b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b78:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8014b7c:	6838      	ldr	r0, [r7, #0]
 8014b7e:	f7fc fdd0 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014b82:	4603      	mov	r3, r0
 8014b84:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 8014b86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b8a:	4413      	add	r3, r2
 8014b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8014b90:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 8014b92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014b94:	9300      	str	r3, [sp, #0]
 8014b96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014b9a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014b9e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8014ba2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014ba6:	f7fc fdbc 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014baa:	4603      	mov	r3, r0
 8014bac:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8014bae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014bb2:	4413      	add	r3, r2
 8014bb4:	f993 3000 	ldrsb.w	r3, [r3]
 8014bb8:	61fb      	str	r3, [r7, #28]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 8014bba:	6a3a      	ldr	r2, [r7, #32]
 8014bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014bbe:	4413      	add	r3, r2
 8014bc0:	69fa      	ldr	r2, [r7, #28]
 8014bc2:	fb02 f203 	mul.w	r2, r2, r3
 8014bc6:	693b      	ldr	r3, [r7, #16]
 8014bc8:	4413      	add	r3, r2
 8014bca:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8014bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014bce:	3301      	adds	r3, #1
 8014bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014bd2:	e7c9      	b.n	8014b68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
                continue;
 8014bd4:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8014bd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014bda:	3301      	adds	r3, #1
 8014bdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014be0:	e799      	b.n	8014b16 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014be6:	3301      	adds	r3, #1
 8014be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014bec:	e783      	b.n	8014af6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
              }
            }
          }

          if (bias_data) {
 8014bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d009      	beq.n	8014c0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ae>
            acc += bias_data[out_channel];
 8014bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014bfa:	009b      	lsls	r3, r3, #2
 8014bfc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014c00:	4413      	add	r3, r2
 8014c02:	681a      	ldr	r2, [r3, #0]
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	4413      	add	r3, r2
 8014c08:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 8014c0a:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8014c0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014c10:	009b      	lsls	r3, r3, #2
 8014c12:	68ba      	ldr	r2, [r7, #8]
 8014c14:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8014c16:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8014c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014c1c:	009b      	lsls	r3, r3, #2
 8014c1e:	687a      	ldr	r2, [r7, #4]
 8014c20:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	461a      	mov	r2, r3
 8014c26:	f7f6 fbf5 	bl	800b414 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 8014c2e:	693a      	ldr	r2, [r7, #16]
 8014c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c32:	4413      	add	r3, r2
 8014c34:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8014c36:	f107 0218 	add.w	r2, r7, #24
 8014c3a:	f107 0310 	add.w	r3, r7, #16
 8014c3e:	4611      	mov	r1, r2
 8014c40:	4618      	mov	r0, r3
 8014c42:	f7f6 fcbb 	bl	800b5bc <_ZSt3maxIlERKT_S2_S2_>
 8014c46:	4603      	mov	r3, r0
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8014c4c:	f107 0214 	add.w	r2, r7, #20
 8014c50:	f107 0310 	add.w	r3, r7, #16
 8014c54:	4611      	mov	r1, r2
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7f6 fc9c 	bl	800b594 <_ZSt3minIlERKT_S2_S2_>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8014c62:	693c      	ldr	r4, [r7, #16]
 8014c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014c68:	9300      	str	r3, [sp, #0]
 8014c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014c6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014c72:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8014c76:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014c7a:	f7fc fd52 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	461a      	mov	r2, r3
 8014c82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014c86:	4413      	add	r3, r2
 8014c88:	b262      	sxtb	r2, r4
 8014c8a:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8014c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014c90:	3301      	adds	r3, #1
 8014c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014c96:	e723      	b.n	8014ae0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014c9c:	3301      	adds	r3, #1
 8014c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014ca2:	e70c      	b.n	8014abe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014ca4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014ca8:	3301      	adds	r3, #1
 8014caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014cae:	e6f5      	b.n	8014a9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 8014cb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014cb4:	3301      	adds	r3, #1
 8014cb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014cba:	e6e6      	b.n	8014a8a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 8014cbc:	bf00      	nop
 8014cbe:	379c      	adds	r7, #156	; 0x9c
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd90      	pop	{r4, r7, pc}

08014cc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
 8014cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014cc8:	b0a9      	sub	sp, #164	; 0xa4
 8014cca:	af02      	add	r7, sp, #8
 8014ccc:	60f8      	str	r0, [r7, #12]
 8014cce:	60b9      	str	r1, [r7, #8]
 8014cd0:	607a      	str	r2, [r7, #4]
 8014cd2:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int stride_width = params.stride_width;
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8014cda:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014cea:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8014cf2:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014cfa:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014d02:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d08:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d0e:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8014d10:	69ba      	ldr	r2, [r7, #24]
 8014d12:	697b      	ldr	r3, [r7, #20]
 8014d14:	429a      	cmp	r2, r3
 8014d16:	dd01      	ble.n	8014d1c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x58>
 8014d18:	f010 f8e5 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8014d1c:	6838      	ldr	r0, [r7, #0]
 8014d1e:	f7f7 fde3 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014d22:	4603      	mov	r3, r0
 8014d24:	2b04      	cmp	r3, #4
 8014d26:	d001      	beq.n	8014d2c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x68>
 8014d28:	f010 f8dd 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8014d2c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014d30:	f7f7 fdda 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014d34:	4603      	mov	r3, r0
 8014d36:	2b04      	cmp	r3, #4
 8014d38:	d001      	beq.n	8014d3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x7a>
 8014d3a:	f010 f8d4 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8014d3e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8014d42:	f7f7 fdd1 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014d46:	4603      	mov	r3, r0
 8014d48:	2b04      	cmp	r3, #4
 8014d4a:	d001      	beq.n	8014d50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x8c>
 8014d4c:	f010 f8cb 	bl	8024ee6 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8014d50:	2300      	movs	r3, #0
 8014d52:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8014d56:	2100      	movs	r1, #0
 8014d58:	6838      	ldr	r0, [r7, #0]
 8014d5a:	f7fc fd68 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014d5e:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8014d60:	2303      	movs	r3, #3
 8014d62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8014d66:	2103      	movs	r1, #3
 8014d68:	6838      	ldr	r0, [r7, #0]
 8014d6a:	f7fc fd60 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014d6e:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8014d70:	2303      	movs	r3, #3
 8014d72:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8014d76:	2100      	movs	r1, #0
 8014d78:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014d7c:	f7fc fd57 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014d80:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 8014d82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d009      	beq.n	8014d9e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xda>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8014d8a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8014d8e:	f7fc fc7c 	bl	801168a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8014d92:	4602      	mov	r2, r0
 8014d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d96:	4293      	cmp	r3, r2
 8014d98:	d001      	beq.n	8014d9e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xda>
 8014d9a:	f010 f8a4 	bl	8024ee6 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8014d9e:	2101      	movs	r1, #1
 8014da0:	6838      	ldr	r0, [r7, #0]
 8014da2:	f7fc fc4c 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014da6:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 8014da8:	2102      	movs	r1, #2
 8014daa:	6838      	ldr	r0, [r7, #0]
 8014dac:	f7fc fc47 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014db0:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8014db2:	2101      	movs	r1, #1
 8014db4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014db8:	f7fc fc41 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014dbc:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8014dbe:	2102      	movs	r1, #2
 8014dc0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014dc4:	f7fc fc3b 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014dc8:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8014dca:	2101      	movs	r1, #1
 8014dcc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8014dd0:	f7fc fc35 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014dd4:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 8014dd6:	2102      	movs	r1, #2
 8014dd8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8014ddc:	f7fc fc2f 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8014de0:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8014de2:	2300      	movs	r3, #0
 8014de4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014de8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014dee:	429a      	cmp	r2, r3
 8014df0:	f280 8113 	bge.w	801501a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x356>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014df4:	2300      	movs	r3, #0
 8014df6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014dfa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e00:	429a      	cmp	r2, r3
 8014e02:	f280 8104 	bge.w	801500e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x34a>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 8014e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014e0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014e0c:	fb02 f203 	mul.w	r2, r2, r3
 8014e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e12:	1ad3      	subs	r3, r2, r3
 8014e14:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014e16:	2300      	movs	r3, #0
 8014e18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014e1c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e22:	429a      	cmp	r2, r3
 8014e24:	f280 80ed 	bge.w	8015002 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x33e>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 8014e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014e2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014e2e:	fb02 f203 	mul.w	r2, r2, r3
 8014e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e34:	1ad3      	subs	r3, r2, r3
 8014e36:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8014e38:	2300      	movs	r3, #0
 8014e3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014e3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e44:	429a      	cmp	r2, r3
 8014e46:	f280 80d6 	bge.w	8014ff6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x332>
          std::int64_t acc = 0;
 8014e4a:	f04f 0200 	mov.w	r2, #0
 8014e4e:	f04f 0300 	mov.w	r3, #0
 8014e52:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014e56:	2300      	movs	r3, #0
 8014e58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014e5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	da71      	bge.n	8014f46 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x282>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 8014e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014e64:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014e66:	fb02 f303 	mul.w	r3, r2, r3
 8014e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e6c:	4413      	add	r3, r2
 8014e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8014e70:	2300      	movs	r3, #0
 8014e72:	67bb      	str	r3, [r7, #120]	; 0x78
 8014e74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	da60      	bge.n	8014f3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x27a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8014e7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014e7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014e80:	fb02 f303 	mul.w	r3, r2, r3
 8014e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e86:	4413      	add	r3, r2
 8014e88:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8014e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	db0c      	blt.n	8014eaa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 8014e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e94:	429a      	cmp	r2, r3
 8014e96:	da08      	bge.n	8014eaa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 8014e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	db05      	blt.n	8014eaa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 8014e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ea2:	429a      	cmp	r2, r3
 8014ea4:	da01      	bge.n	8014eaa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	e000      	b.n	8014eac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e8>
 8014eaa:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 8014eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 8014eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014eb4:	f083 0301 	eor.w	r3, r3, #1
 8014eb8:	b2db      	uxtb	r3, r3
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d13a      	bne.n	8014f34 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x270>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	677b      	str	r3, [r7, #116]	; 0x74
 8014ec2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ec6:	429a      	cmp	r2, r3
 8014ec8:	da35      	bge.n	8014f36 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x272>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 8014eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ecc:	9300      	str	r3, [sp, #0]
 8014ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ed2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8014ed6:	6838      	ldr	r0, [r7, #0]
 8014ed8:	f7fc fc23 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014edc:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 8014ede:	005b      	lsls	r3, r3, #1
 8014ee0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014ee4:	4413      	add	r3, r2
 8014ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014eea:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 8014eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014eee:	9300      	str	r3, [sp, #0]
 8014ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014ef2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014ef4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8014ef8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014efc:	f7fc fc11 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014f00:	4603      	mov	r3, r0
 8014f02:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8014f04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014f08:	4413      	add	r3, r2
 8014f0a:	f993 3000 	ldrsb.w	r3, [r3]
 8014f0e:	61fb      	str	r3, [r7, #28]
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
 8014f10:	69fb      	ldr	r3, [r7, #28]
 8014f12:	6a3a      	ldr	r2, [r7, #32]
 8014f14:	fb02 f303 	mul.w	r3, r2, r3
 8014f18:	461a      	mov	r2, r3
 8014f1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8014f1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8014f22:	1884      	adds	r4, r0, r2
 8014f24:	eb41 0503 	adc.w	r5, r1, r3
 8014f28:	e9c7 4520 	strd	r4, r5, [r7, #128]	; 0x80
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8014f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014f2e:	3301      	adds	r3, #1
 8014f30:	677b      	str	r3, [r7, #116]	; 0x74
 8014f32:	e7c6      	b.n	8014ec2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1fe>
                continue;
 8014f34:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8014f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014f38:	3301      	adds	r3, #1
 8014f3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8014f3c:	e79a      	b.n	8014e74 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b0>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014f40:	3301      	adds	r3, #1
 8014f42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014f44:	e789      	b.n	8014e5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x196>
              }
            }
          }
          if (bias_data) {
 8014f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d00f      	beq.n	8014f6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2aa>
            acc += bias_data[out_channel];
 8014f4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014f52:	00db      	lsls	r3, r3, #3
 8014f54:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014f58:	4413      	add	r3, r2
 8014f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8014f62:	eb10 0802 	adds.w	r8, r0, r2
 8014f66:	eb41 0903 	adc.w	r9, r1, r3
 8014f6a:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8014f6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014f72:	009b      	lsls	r3, r3, #2
 8014f74:	68ba      	ldr	r2, [r7, #8]
 8014f76:	4413      	add	r3, r2
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 8014f78:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8014f7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014f7e:	009b      	lsls	r3, r3, #2
 8014f80:	687a      	ldr	r2, [r7, #4]
 8014f82:	4413      	add	r3, r2
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	460a      	mov	r2, r1
 8014f88:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8014f8c:	f7f6 fa66 	bl	800b45c <_ZN6tflite29MultiplyByQuantizedMultiplierExli>
 8014f90:	4603      	mov	r3, r0
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8014f92:	613b      	str	r3, [r7, #16]
          scaled_acc = std::max(scaled_acc, output_activation_min);
 8014f94:	f107 0218 	add.w	r2, r7, #24
 8014f98:	f107 0310 	add.w	r3, r7, #16
 8014f9c:	4611      	mov	r1, r2
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7f6 fb0c 	bl	800b5bc <_ZSt3maxIlERKT_S2_S2_>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	613b      	str	r3, [r7, #16]
          scaled_acc = std::min(scaled_acc, output_activation_max);
 8014faa:	f107 0214 	add.w	r2, r7, #20
 8014fae:	f107 0310 	add.w	r3, r7, #16
 8014fb2:	4611      	mov	r1, r2
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7f6 faed 	bl	800b594 <_ZSt3minIlERKT_S2_S2_>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8014fc0:	693e      	ldr	r6, [r7, #16]
 8014fc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014fc6:	9300      	str	r3, [sp, #0]
 8014fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014fcc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014fd0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8014fd4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8014fd8:	f7fc fba3 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	005b      	lsls	r3, r3, #1
 8014fe0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014fe4:	4413      	add	r3, r2
 8014fe6:	b232      	sxth	r2, r6
 8014fe8:	801a      	strh	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8014fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014fee:	3301      	adds	r3, #1
 8014ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014ff4:	e723      	b.n	8014e3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014ffa:	3301      	adds	r3, #1
 8014ffc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015000:	e70c      	b.n	8014e1c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x158>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015002:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015006:	3301      	adds	r3, #1
 8015008:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801500c:	e6f5      	b.n	8014dfa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x136>
  for (int batch = 0; batch < batches; ++batch) {
 801500e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015012:	3301      	adds	r3, #1
 8015014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015018:	e6e6      	b.n	8014de8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x124>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
 801501a:	bf00      	nop
 801501c:	379c      	adds	r7, #156	; 0x9c
 801501e:	46bd      	mov	sp, r7
 8015020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015024 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8015024:	b580      	push	{r7, lr}
 8015026:	b084      	sub	sp, #16
 8015028:	af00      	add	r7, sp, #0
 801502a:	60f8      	str	r0, [r7, #12]
 801502c:	60b9      	str	r1, [r7, #8]
 801502e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015034:	2b00      	cmp	r3, #0
 8015036:	d101      	bne.n	801503c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8015038:	f00f ff55 	bl	8024ee6 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015040:	2138      	movs	r1, #56	; 0x38
 8015042:	68f8      	ldr	r0, [r7, #12]
 8015044:	4798      	blx	r3
 8015046:	4603      	mov	r3, r0
}
 8015048:	4618      	mov	r0, r3
 801504a:	3710      	adds	r7, #16
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8015050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015052:	b0b7      	sub	sp, #220	; 0xdc
 8015054:	af08      	add	r7, sp, #32
 8015056:	60f8      	str	r0, [r7, #12]
 8015058:	60b9      	str	r1, [r7, #8]
  TFLITE_DCHECK(node->user_data != nullptr);
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	691b      	ldr	r3, [r3, #16]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d101      	bne.n	8015066 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8015062:	f00f ff40 	bl	8024ee6 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8015066:	68bb      	ldr	r3, [r7, #8]
 8015068:	695b      	ldr	r3, [r3, #20]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d101      	bne.n	8015072 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 801506e:	f00f ff3a 	bl	8024ee6 <abort>

  int32_t buf_size = 0;
 8015072:	2300      	movs	r3, #0
 8015074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto& params =
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	695b      	ldr	r3, [r3, #20]
 801507c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);
 8015080:	68bb      	ldr	r3, [r7, #8]
 8015082:	691b      	ldr	r3, [r3, #16]
 8015084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8015088:	4ba5      	ldr	r3, [pc, #660]	; (8015320 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	461a      	mov	r2, r3
 801508e:	68b9      	ldr	r1, [r7, #8]
 8015090:	68f8      	ldr	r0, [r7, #12]
 8015092:	f7f6 fd1b 	bl	800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015096:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 801509a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d10a      	bne.n	80150b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	695c      	ldr	r4, [r3, #20]
 80150a6:	4b9f      	ldr	r3, [pc, #636]	; (8015324 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 80150a8:	9300      	str	r3, [sp, #0]
 80150aa:	2338      	movs	r3, #56	; 0x38
 80150ac:	4a9e      	ldr	r2, [pc, #632]	; (8015328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 80150ae:	499f      	ldr	r1, [pc, #636]	; (801532c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 80150b0:	68f8      	ldr	r0, [r7, #12]
 80150b2:	47a0      	blx	r4
 80150b4:	2401      	movs	r4, #1
 80150b6:	e12d      	b.n	8015314 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 80150b8:	4b9d      	ldr	r3, [pc, #628]	; (8015330 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	461a      	mov	r2, r3
 80150be:	68b9      	ldr	r1, [r7, #8]
 80150c0:	68f8      	ldr	r0, [r7, #12]
 80150c2:	f7f6 fd03 	bl	800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80150c6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  TF_LITE_ENSURE(context, filter != nullptr);
 80150ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d10a      	bne.n	80150e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x98>
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	695c      	ldr	r4, [r3, #20]
 80150d6:	4b97      	ldr	r3, [pc, #604]	; (8015334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 80150d8:	9300      	str	r3, [sp, #0]
 80150da:	233a      	movs	r3, #58	; 0x3a
 80150dc:	4a92      	ldr	r2, [pc, #584]	; (8015328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 80150de:	4993      	ldr	r1, [pc, #588]	; (801532c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 80150e0:	68f8      	ldr	r0, [r7, #12]
 80150e2:	47a0      	blx	r4
 80150e4:	2401      	movs	r4, #1
 80150e6:	e115      	b.n	8015314 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 80150e8:	4b93      	ldr	r3, [pc, #588]	; (8015338 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	461a      	mov	r2, r3
 80150ee:	68b9      	ldr	r1, [r7, #8]
 80150f0:	68f8      	ldr	r0, [r7, #12]
 80150f2:	f7f6 fcfb 	bl	800baec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80150f6:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TF_LITE_ENSURE(context, output != nullptr);
 80150fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d10a      	bne.n	8015118 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	695c      	ldr	r4, [r3, #20]
 8015106:	4b8d      	ldr	r3, [pc, #564]	; (801533c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015108:	9300      	str	r3, [sp, #0]
 801510a:	233c      	movs	r3, #60	; 0x3c
 801510c:	4a86      	ldr	r2, [pc, #536]	; (8015328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 801510e:	4987      	ldr	r1, [pc, #540]	; (801532c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 8015110:	68f8      	ldr	r0, [r7, #12]
 8015112:	47a0      	blx	r4
 8015114:	2401      	movs	r4, #1
 8015116:	e0fd      	b.n	8015314 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>

  RuntimeShape input_shape = GetTensorShape(input);
 8015118:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801511c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8015120:	4618      	mov	r0, r3
 8015122:	f7f7 fc11 	bl	800c948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 8015126:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801512a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801512e:	4618      	mov	r0, r3
 8015130:	f7f7 fc0a 	bl	800c948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 8015134:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8015138:	f107 0080 	add.w	r0, r7, #128	; 0x80
 801513c:	2300      	movs	r3, #0
 801513e:	2100      	movs	r1, #0
 8015140:	f7fc fb75 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015144:	4603      	mov	r3, r0
 8015146:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.h = input->dims->data[1];
 8015148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801514c:	689b      	ldr	r3, [r3, #8]
 801514e:	689b      	ldr	r3, [r3, #8]
 8015150:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.w = input->dims->data[2];
 8015152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015156:	689b      	ldr	r3, [r3, #8]
 8015158:	68db      	ldr	r3, [r3, #12]
 801515a:	663b      	str	r3, [r7, #96]	; 0x60
  input_dims.c = input_shape.Dims(3);
 801515c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015160:	2103      	movs	r1, #3
 8015162:	4618      	mov	r0, r3
 8015164:	f7fc fa6b 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015168:	4603      	mov	r3, r0
 801516a:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
 801516c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015170:	2103      	movs	r1, #3
 8015172:	4618      	mov	r0, r3
 8015174:	f7fc fa63 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015178:	4603      	mov	r3, r0
 801517a:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.h = filter->dims->data[1];
 801517c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015180:	689b      	ldr	r3, [r3, #8]
 8015182:	689b      	ldr	r3, [r3, #8]
 8015184:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.w = filter->dims->data[2];
 8015186:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801518a:	689b      	ldr	r3, [r3, #8]
 801518c:	68db      	ldr	r3, [r3, #12]
 801518e:	653b      	str	r3, [r7, #80]	; 0x50
  filter_dims.c = input_dims.c;
 8015190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015192:	657b      	str	r3, [r7, #84]	; 0x54

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 8015194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015196:	63bb      	str	r3, [r7, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 8015198:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801519c:	689b      	ldr	r3, [r3, #8]
 801519e:	689b      	ldr	r3, [r3, #8]
 80151a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  output_dims.w = output->dims->data[2];
 80151a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80151a6:	689b      	ldr	r3, [r3, #8]
 80151a8:	68db      	ldr	r3, [r3, #12]
 80151aa:	643b      	str	r3, [r7, #64]	; 0x40
  output_dims.c = output_shape.Dims(3);
 80151ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80151b0:	2103      	movs	r1, #3
 80151b2:	4618      	mov	r0, r3
 80151b4:	f7fc fa43 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 80151b8:	4603      	mov	r3, r0
 80151ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (input->type == kTfLiteInt8) {
 80151bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80151c0:	781b      	ldrb	r3, [r3, #0]
 80151c2:	2b09      	cmp	r3, #9
 80151c4:	d121      	bne.n	801520a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ba>
    const int num_channels = filter->dims->data[kConvQuantizedDimension];
 80151c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80151ca:	689a      	ldr	r2, [r3, #8]
 80151cc:	4b5c      	ldr	r3, [pc, #368]	; (8015340 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	009b      	lsls	r3, r3, #2
 80151d2:	4413      	add	r3, r2
 80151d4:	685b      	ldr	r3, [r3, #4]
 80151d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    data->reference_op_data.per_channel_output_multiplier =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 80151de:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80151e2:	0092      	lsls	r2, r2, #2
 80151e4:	4611      	mov	r1, r2
 80151e6:	68f8      	ldr	r0, [r7, #12]
 80151e8:	4798      	blx	r3
 80151ea:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_multiplier =
 80151ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80151f0:	625a      	str	r2, [r3, #36]	; 0x24
    data->reference_op_data.per_channel_output_shift =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 80151f6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80151fa:	0092      	lsls	r2, r2, #2
 80151fc:	4611      	mov	r1, r2
 80151fe:	68f8      	ldr	r0, [r7, #12]
 8015200:	4798      	blx	r3
 8015202:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_shift =
 8015204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015208:	629a      	str	r2, [r3, #40]	; 0x28
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 801520a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801520c:	607b      	str	r3, [r7, #4]
 801520e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015210:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015212:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8015214:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015216:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8015218:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 801521c:	782d      	ldrb	r5, [r5, #0]
 801521e:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8015222:	9606      	str	r6, [sp, #24]
 8015224:	9505      	str	r5, [sp, #20]
 8015226:	9404      	str	r4, [sp, #16]
 8015228:	9003      	str	r0, [sp, #12]
 801522a:	9102      	str	r1, [sp, #8]
 801522c:	9201      	str	r2, [sp, #4]
 801522e:	9300      	str	r3, [sp, #0]
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015236:	68b9      	ldr	r1, [r7, #8]
 8015238:	68f8      	ldr	r0, [r7, #12]
 801523a:	f7fc fc8b 	bl	8011b54 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 801523e:	4603      	mov	r3, r0
 8015240:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8015244:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8015248:	2b00      	cmp	r3, #0
 801524a:	d002      	beq.n	8015252 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x202>
 801524c:	f897 409b 	ldrb.w	r4, [r7, #155]	; 0x9b
 8015250:	e056      	b.n	8015300 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 8015252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015256:	781b      	ldrb	r3, [r3, #0]
 8015258:	2b09      	cmp	r3, #9
 801525a:	d150      	bne.n	80152fe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ae>
    // Initialize cmsis_nn convolution parameters
    cmsis_nn_conv_params conv_params;
    conv_params.input_offset = -input->params.zero_point;
 801525c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015260:	691b      	ldr	r3, [r3, #16]
 8015262:	425b      	negs	r3, r3
 8015264:	613b      	str	r3, [r7, #16]
    conv_params.output_offset = output->params.zero_point;
 8015266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801526a:	691b      	ldr	r3, [r3, #16]
 801526c:	617b      	str	r3, [r7, #20]
    conv_params.stride.h = params.stride_height;
 801526e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8015272:	689b      	ldr	r3, [r3, #8]
 8015274:	61fb      	str	r3, [r7, #28]
    conv_params.stride.w = params.stride_width;
 8015276:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	61bb      	str	r3, [r7, #24]
    conv_params.dilation.h = params.dilation_height_factor;
 801527e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8015282:	695b      	ldr	r3, [r3, #20]
 8015284:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_params.dilation.w = params.dilation_width_factor;
 8015286:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801528a:	691b      	ldr	r3, [r3, #16]
 801528c:	62bb      	str	r3, [r7, #40]	; 0x28
    conv_params.padding.h = data->reference_op_data.padding.height;
 801528e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	627b      	str	r3, [r7, #36]	; 0x24
    conv_params.padding.w = data->reference_op_data.padding.width;
 8015296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	623b      	str	r3, [r7, #32]
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 801529e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80152a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152a4:	633b      	str	r3, [r7, #48]	; 0x30
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 80152a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80152aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152ac:	637b      	str	r3, [r7, #52]	; 0x34

    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 80152ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80152b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80152b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80152ba:	f107 0010 	add.w	r0, r7, #16
 80152be:	f003 fe72 	bl	8018fa6 <arm_convolve_wrapper_s8_get_buffer_size>
 80152c2:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
        &conv_params, &input_dims, &filter_dims, &output_dims);
    if (buf_size > 0) {
 80152c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	dd12      	ble.n	80152f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152d2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80152d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80152da:	3234      	adds	r2, #52	; 0x34
 80152dc:	68f8      	ldr	r0, [r7, #12]
 80152de:	4798      	blx	r3
 80152e0:	4603      	mov	r3, r0
 80152e2:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 80152e6:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d007      	beq.n	80152fe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ae>
 80152ee:	f897 409a 	ldrb.w	r4, [r7, #154]	; 0x9a
 80152f2:	e005      	b.n	8015300 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 80152f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80152f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80152fc:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  return kTfLiteOk;
 80152fe:	2400      	movs	r4, #0
  RuntimeShape output_shape = GetTensorShape(output);
 8015300:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015304:	4618      	mov	r0, r3
 8015306:	f7f7 fae4 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
 801530a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801530e:	4618      	mov	r0, r3
 8015310:	f7f7 fadf 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
 8015314:	4623      	mov	r3, r4
}
 8015316:	4618      	mov	r0, r3
 8015318:	37bc      	adds	r7, #188	; 0xbc
 801531a:	46bd      	mov	sp, r7
 801531c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801531e:	bf00      	nop
 8015320:	08031020 	.word	0x08031020
 8015324:	0802b720 	.word	0x0802b720
 8015328:	0802b6c4 	.word	0x0802b6c4
 801532c:	0802b708 	.word	0x0802b708
 8015330:	08031024 	.word	0x08031024
 8015334:	0802b734 	.word	0x0802b734
 8015338:	0803102c 	.word	0x0803102c
 801533c:	0802b748 	.word	0x0802b748
 8015340:	08031030 	.word	0x08031030

08015344 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>:

TfLiteStatus EvalQuantizedPerChannel(
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
 8015344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015346:	b0ef      	sub	sp, #444	; 0x1bc
 8015348:	af08      	add	r7, sp, #32
 801534a:	f107 0414 	add.w	r4, r7, #20
 801534e:	6020      	str	r0, [r4, #0]
 8015350:	f107 0010 	add.w	r0, r7, #16
 8015354:	6001      	str	r1, [r0, #0]
 8015356:	f107 010c 	add.w	r1, r7, #12
 801535a:	600a      	str	r2, [r1, #0]
 801535c:	f107 0208 	add.w	r2, r7, #8
 8015360:	6013      	str	r3, [r2, #0]
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 8015362:	f107 030c 	add.w	r3, r7, #12
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	695b      	ldr	r3, [r3, #20]
 801536a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  conv_params.dilation.w = params.dilation_width_factor;
 801536e:	f107 030c 	add.w	r3, r7, #12
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	691b      	ldr	r3, [r3, #16]
 8015376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 801537a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801537e:	2b01      	cmp	r3, #1
 8015380:	f040 818a 	bne.w	8015698 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x354>
 8015384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015388:	2b01      	cmp	r3, #1
 801538a:	f040 8185 	bne.w	8015698 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x354>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 801538e:	f107 0308 	add.w	r3, r7, #8
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	691b      	ldr	r3, [r3, #16]
 8015396:	425b      	negs	r3, r3
 8015398:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 801539c:	f107 0308 	add.w	r3, r7, #8
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	699b      	ldr	r3, [r3, #24]
 80153a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    conv_params.stride.h = params.stride_height;
 80153a8:	f107 030c 	add.w	r3, r7, #12
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	689b      	ldr	r3, [r3, #8]
 80153b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    conv_params.stride.w = params.stride_width;
 80153b4:	f107 030c 	add.w	r3, r7, #12
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	685b      	ldr	r3, [r3, #4]
 80153bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    conv_params.padding.h = data.reference_op_data.padding.height;
 80153c0:	f107 0308 	add.w	r3, r7, #8
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	685b      	ldr	r3, [r3, #4]
 80153c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    conv_params.padding.w = data.reference_op_data.padding.width;
 80153cc:	f107 0308 	add.w	r3, r7, #8
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 80153d8:	f107 0308 	add.w	r3, r7, #8
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 80153e4:	f107 0308 	add.w	r3, r7, #8
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    // Initialize cmsis_nn per channel quantization parameters
    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier = const_cast<int32_t*>(
        data.reference_op_data.per_channel_output_multiplier);
 80153f0:	f107 0308 	add.w	r3, r7, #8
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier = const_cast<int32_t*>(
 80153f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);
 80153fc:	f107 0308 	add.w	r3, r7, #8
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    quant_params.shift =
 8015404:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8015408:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801540c:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8015410:	4618      	mov	r0, r3
 8015412:	f7fc fec2 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8015416:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801541a:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 801541e:	4618      	mov	r0, r3
 8015420:	f7fc febb 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8015424:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015428:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 801542c:	4618      	mov	r0, r3
 801542e:	f7fc feb4 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8015432:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015436:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 801543a:	4618      	mov	r0, r3
 801543c:	f7fc fead 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 8015440:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015444:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015448:	429a      	cmp	r2, r3
 801544a:	dd01      	ble.n	8015450 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x10c>
 801544c:	f00f fd4b 	bl	8024ee6 <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8015450:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015454:	4618      	mov	r0, r3
 8015456:	f7f7 fa47 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801545a:	4603      	mov	r3, r0
 801545c:	2b04      	cmp	r3, #4
 801545e:	d001      	beq.n	8015464 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x120>
 8015460:	f00f fd41 	bl	8024ee6 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8015464:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015468:	4618      	mov	r0, r3
 801546a:	f7f7 fa3d 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801546e:	4603      	mov	r3, r0
 8015470:	2b04      	cmp	r3, #4
 8015472:	d001      	beq.n	8015478 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x134>
 8015474:	f00f fd37 	bl	8024ee6 <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8015478:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801547c:	4618      	mov	r0, r3
 801547e:	f7f7 fa33 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015482:	4603      	mov	r3, r0
 8015484:	2b04      	cmp	r3, #4
 8015486:	d001      	beq.n	801548c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x148>
 8015488:	f00f fd2d 	bl	8024ee6 <abort>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 801548c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8015490:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8015494:	2300      	movs	r3, #0
 8015496:	2100      	movs	r1, #0
 8015498:	f7fc f9c9 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801549c:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80154a0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80154a4:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80154a8:	2303      	movs	r3, #3
 80154aa:	2103      	movs	r1, #3
 80154ac:	f7fc f9bf 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80154b0:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80154b4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80154b8:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80154bc:	2303      	movs	r3, #3
 80154be:	2100      	movs	r1, #0
 80154c0:	f7fc f9b5 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80154c4:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 80154c8:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80154cc:	f7fc f897 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80154d0:	4603      	mov	r3, r0
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	bf14      	ite	ne
 80154d6:	2301      	movne	r3, #1
 80154d8:	2300      	moveq	r3, #0
 80154da:	b2db      	uxtb	r3, r3
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d00b      	beq.n	80154f8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x1b4>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80154e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80154e4:	4618      	mov	r0, r3
 80154e6:	f7fc f8d0 	bl	801168a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80154ea:	4602      	mov	r2, r0
 80154ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80154f0:	4293      	cmp	r3, r2
 80154f2:	d001      	beq.n	80154f8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x1b4>
 80154f4:	f00f fcf7 	bl	8024ee6 <abort>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 80154f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80154fc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8015500:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 8015502:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015506:	2101      	movs	r1, #1
 8015508:	4618      	mov	r0, r3
 801550a:	f7fc f898 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 801550e:	4602      	mov	r2, r0
 8015510:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015514:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 8015516:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801551a:	2102      	movs	r1, #2
 801551c:	4618      	mov	r0, r3
 801551e:	f7fc f88e 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015522:	4602      	mov	r2, r0
 8015524:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015528:	609a      	str	r2, [r3, #8]
    input_dims.c = input_depth;
 801552a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801552e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8015532:	60da      	str	r2, [r3, #12]

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
 8015534:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015538:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801553c:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 801553e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015542:	2101      	movs	r1, #1
 8015544:	4618      	mov	r0, r3
 8015546:	f7fc f87a 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 801554a:	4602      	mov	r2, r0
 801554c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015550:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 8015552:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015556:	2102      	movs	r1, #2
 8015558:	4618      	mov	r0, r3
 801555a:	f7fc f870 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 801555e:	4602      	mov	r2, r0
 8015560:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015564:	609a      	str	r2, [r3, #8]
    filter_dims.c = input_depth;
 8015566:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801556a:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801556e:	60da      	str	r2, [r3, #12]

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 8015570:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015574:	2201      	movs	r2, #1
 8015576:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 8015578:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801557c:	2201      	movs	r2, #1
 801557e:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 8015580:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015584:	2201      	movs	r2, #1
 8015586:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 8015588:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801558c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8015590:	60da      	str	r2, [r3, #12]

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 8015592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015596:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801559a:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 801559c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80155a0:	2101      	movs	r1, #1
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7fc f84b 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 80155a8:	4602      	mov	r2, r0
 80155aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80155ae:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 80155b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80155b4:	2102      	movs	r1, #2
 80155b6:	4618      	mov	r0, r3
 80155b8:	f7fc f841 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 80155bc:	4602      	mov	r2, r0
 80155be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80155c2:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 80155c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80155c8:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80155cc:	60da      	str	r2, [r3, #12]

    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 80155ce:	f107 031c 	add.w	r3, r7, #28
 80155d2:	2200      	movs	r2, #0
 80155d4:	601a      	str	r2, [r3, #0]
    ctx.size = 0;
 80155d6:	f107 031c 	add.w	r3, r7, #28
 80155da:	2200      	movs	r2, #0
 80155dc:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 80155de:	f107 0308 	add.w	r3, r7, #8
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	db0f      	blt.n	801560a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x2c6>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80155ea:	f107 0314 	add.w	r3, r7, #20
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80155f2:	f107 0208 	add.w	r2, r7, #8
 80155f6:	6812      	ldr	r2, [r2, #0]
 80155f8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80155fa:	f107 0214 	add.w	r2, r7, #20
 80155fe:	6810      	ldr	r0, [r2, #0]
 8015600:	4798      	blx	r3
 8015602:	4602      	mov	r2, r0
 8015604:	f107 031c 	add.w	r3, r7, #28
 8015608:	601a      	str	r2, [r3, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
 801560a:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 801560e:	f7fb fff6 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015612:	4605      	mov	r5, r0
 8015614:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8015618:	f7fb fff1 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801561c:	4606      	mov	r6, r0
 801561e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8015622:	f7fc f86f 	bl	8011704 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801562c:	f7fb fff6 	bl	801161c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8015630:	4603      	mov	r3, r0
 8015632:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8015636:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801563a:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 801563e:	f107 001c 	add.w	r0, r7, #28
 8015642:	9306      	str	r3, [sp, #24]
 8015644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015648:	9305      	str	r3, [sp, #20]
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	9304      	str	r3, [sp, #16]
 801564e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015652:	9303      	str	r3, [sp, #12]
 8015654:	9602      	str	r6, [sp, #8]
 8015656:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801565a:	9301      	str	r3, [sp, #4]
 801565c:	9500      	str	r5, [sp, #0]
 801565e:	4623      	mov	r3, r4
 8015660:	f003 fc21 	bl	8018ea6 <arm_convolve_wrapper_s8>
 8015664:	4603      	mov	r3, r0
 8015666:	2b00      	cmp	r3, #0
 8015668:	d001      	beq.n	801566e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x32a>
 801566a:	f00f fc3c 	bl	8024ee6 <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 801566e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015672:	4618      	mov	r0, r3
 8015674:	f7f7 f92d 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8015678:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801567c:	4618      	mov	r0, r3
 801567e:	f7f7 f928 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8015682:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015686:	4618      	mov	r0, r3
 8015688:	f7f7 f923 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801568c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015690:	4618      	mov	r0, r3
 8015692:	f7f7 f91e 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 8015696:	e06d      	b.n	8015774 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x430>
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
 8015698:	f107 0308 	add.w	r3, r7, #8
 801569c:	681a      	ldr	r2, [r3, #0]
 801569e:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80156a2:	f107 030c 	add.w	r3, r7, #12
 80156a6:	6819      	ldr	r1, [r3, #0]
 80156a8:	f7fc fa03 	bl	8011ab2 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 80156ac:	f107 0308 	add.w	r3, r7, #8
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 80156b4:	f107 0308 	add.w	r3, r7, #8
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 80156bc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80156c0:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 80156c4:	4618      	mov	r0, r3
 80156c6:	f7fc fd68 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80156ca:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 80156ce:	f7fb ff96 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80156d2:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 80156d4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80156d8:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 80156dc:	4618      	mov	r0, r3
 80156de:	f7fc fd5c 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80156e2:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80156e6:	f7fb ff8a 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80156ea:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 80156ec:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80156f0:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7fc fd50 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80156fa:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80156fe:	f7fc f801 	bl	8011704 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8015702:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 8015704:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8015708:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 801570c:	4618      	mov	r0, r3
 801570e:	f7fc fd44 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8015712:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8015716:	f7fb ff81 	bl	801161c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801571a:	4603      	mov	r3, r0
 801571c:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8015720:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8015724:	9306      	str	r3, [sp, #24]
 8015726:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801572a:	9305      	str	r3, [sp, #20]
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	9304      	str	r3, [sp, #16]
 8015730:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8015734:	9303      	str	r3, [sp, #12]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	9302      	str	r3, [sp, #8]
 801573a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801573e:	9301      	str	r3, [sp, #4]
 8015740:	9600      	str	r6, [sp, #0]
 8015742:	4613      	mov	r3, r2
 8015744:	462a      	mov	r2, r5
 8015746:	4621      	mov	r1, r4
 8015748:	f7ff f908 	bl	801495c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 801574c:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8015750:	4618      	mov	r0, r3
 8015752:	f7f7 f8be 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 8015756:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801575a:	4618      	mov	r0, r3
 801575c:	f7f7 f8b9 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 8015760:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8015764:	4618      	mov	r0, r3
 8015766:	f7f7 f8b4 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 801576a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801576e:	4618      	mov	r0, r3
 8015770:	f7f7 f8af 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
 8015774:	2300      	movs	r3, #0
}
 8015776:	4618      	mov	r0, r3
 8015778:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 801577c:	46bd      	mov	sp, r7
 801577e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015780 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8015780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015784:	b0e4      	sub	sp, #400	; 0x190
 8015786:	af08      	add	r7, sp, #32
 8015788:	f107 030c 	add.w	r3, r7, #12
 801578c:	6018      	str	r0, [r3, #0]
 801578e:	f107 0308 	add.w	r3, r7, #8
 8015792:	6019      	str	r1, [r3, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 8015794:	4bce      	ldr	r3, [pc, #824]	; (8015ad0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x350>)
 8015796:	681a      	ldr	r2, [r3, #0]
 8015798:	f107 0108 	add.w	r1, r7, #8
 801579c:	f107 030c 	add.w	r3, r7, #12
 80157a0:	6809      	ldr	r1, [r1, #0]
 80157a2:	6818      	ldr	r0, [r3, #0]
 80157a4:	f7fb fedb 	bl	801155e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80157a8:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 80157ac:	4bc9      	ldr	r3, [pc, #804]	; (8015ad4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x354>)
 80157ae:	681a      	ldr	r2, [r3, #0]
 80157b0:	f107 0108 	add.w	r1, r7, #8
 80157b4:	f107 030c 	add.w	r3, r7, #12
 80157b8:	6809      	ldr	r1, [r1, #0]
 80157ba:	6818      	ldr	r0, [r3, #0]
 80157bc:	f7fb fecf 	bl	801155e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80157c0:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 80157c4:	f107 0308 	add.w	r3, r7, #8
 80157c8:	6818      	ldr	r0, [r3, #0]
 80157ca:	f7fb ff81 	bl	80116d0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80157ce:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 80157d0:	2b03      	cmp	r3, #3
 80157d2:	d10b      	bne.n	80157ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6c>
 80157d4:	4bc0      	ldr	r3, [pc, #768]	; (8015ad8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x358>)
 80157d6:	681a      	ldr	r2, [r3, #0]
 80157d8:	f107 0108 	add.w	r1, r7, #8
 80157dc:	f107 030c 	add.w	r3, r7, #12
 80157e0:	6809      	ldr	r1, [r1, #0]
 80157e2:	6818      	ldr	r0, [r3, #0]
 80157e4:	f7fb febb 	bl	801155e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80157e8:	4603      	mov	r3, r0
 80157ea:	e000      	b.n	80157ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e>
 80157ec:	2300      	movs	r3, #0
          : nullptr;
 80157ee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 80157f2:	4bba      	ldr	r3, [pc, #744]	; (8015adc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x35c>)
 80157f4:	681a      	ldr	r2, [r3, #0]
 80157f6:	f107 0108 	add.w	r1, r7, #8
 80157fa:	f107 030c 	add.w	r3, r7, #12
 80157fe:	6809      	ldr	r1, [r1, #0]
 8015800:	6818      	ldr	r0, [r3, #0]
 8015802:	f7fb febc 	bl	801157e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8015806:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

  TFLITE_DCHECK(node->builtin_data != nullptr);
 801580a:	f107 0308 	add.w	r3, r7, #8
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	695b      	ldr	r3, [r3, #20]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d101      	bne.n	801581a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9a>
 8015816:	f00f fb66 	bl	8024ee6 <abort>
  const auto& params =
 801581a:	f107 0308 	add.w	r3, r7, #8
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	695b      	ldr	r3, [r3, #20]
 8015822:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 8015826:	f107 0308 	add.w	r3, r7, #8
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	691b      	ldr	r3, [r3, #16]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d101      	bne.n	8015836 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
 8015832:	f00f fb58 	bl	8024ee6 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8015836:	f107 0308 	add.w	r3, r7, #8
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	691b      	ldr	r3, [r3, #16]
 801583e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8015842:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015846:	7a1a      	ldrb	r2, [r3, #8]
 8015848:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801584c:	7a1b      	ldrb	r3, [r3, #8]
 801584e:	429a      	cmp	r2, r3
 8015850:	d01a      	beq.n	8015888 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x108>
 8015852:	f107 030c 	add.w	r3, r7, #12
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	695c      	ldr	r4, [r3, #20]
 801585a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801585e:	7a1b      	ldrb	r3, [r3, #8]
 8015860:	461a      	mov	r2, r3
 8015862:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015866:	7a1b      	ldrb	r3, [r3, #8]
 8015868:	f107 000c 	add.w	r0, r7, #12
 801586c:	9303      	str	r3, [sp, #12]
 801586e:	9202      	str	r2, [sp, #8]
 8015870:	4b9b      	ldr	r3, [pc, #620]	; (8015ae0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x360>)
 8015872:	9301      	str	r3, [sp, #4]
 8015874:	4b9b      	ldr	r3, [pc, #620]	; (8015ae4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x364>)
 8015876:	9300      	str	r3, [sp, #0]
 8015878:	f44f 7382 	mov.w	r3, #260	; 0x104
 801587c:	4a9a      	ldr	r2, [pc, #616]	; (8015ae8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x368>)
 801587e:	499b      	ldr	r1, [pc, #620]	; (8015aec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36c>)
 8015880:	6800      	ldr	r0, [r0, #0]
 8015882:	47a0      	blx	r4
 8015884:	2301      	movs	r3, #1
 8015886:	e14b      	b.n	8015b20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a0>
  TF_LITE_ENSURE_MSG(
 8015888:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801588c:	7a1a      	ldrb	r2, [r3, #8]
 801588e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015892:	7a1b      	ldrb	r3, [r3, #8]
 8015894:	429a      	cmp	r2, r3
 8015896:	d014      	beq.n	80158c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
 8015898:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801589c:	7a1b      	ldrb	r3, [r3, #8]
 801589e:	2b07      	cmp	r3, #7
 80158a0:	d104      	bne.n	80158ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12c>
 80158a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80158a6:	7a1b      	ldrb	r3, [r3, #8]
 80158a8:	2b09      	cmp	r3, #9
 80158aa:	d00a      	beq.n	80158c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
 80158ac:	f107 030c 	add.w	r3, r7, #12
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	695b      	ldr	r3, [r3, #20]
 80158b4:	f107 020c 	add.w	r2, r7, #12
 80158b8:	498d      	ldr	r1, [pc, #564]	; (8015af0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x370>)
 80158ba:	6810      	ldr	r0, [r2, #0]
 80158bc:	4798      	blx	r3
 80158be:	2301      	movs	r3, #1
 80158c0:	e12e      	b.n	8015b20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a0>
      context,
      input->type == filter->type ||
          (input->type == kTfLiteInt16 && filter->type == kTfLiteInt8),
      "Hybrid models are not supported on TFLite Micro.");

  switch (input->type) {  // Already know in/out types are same.
 80158c2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80158c6:	7a1b      	ldrb	r3, [r3, #8]
 80158c8:	2b09      	cmp	r3, #9
 80158ca:	d079      	beq.n	80159c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>
 80158cc:	2b09      	cmp	r3, #9
 80158ce:	f300 8111 	bgt.w	8015af4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x374>
 80158d2:	2b01      	cmp	r3, #1
 80158d4:	d003      	beq.n	80158de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
 80158d6:	2b07      	cmp	r3, #7
 80158d8:	f000 808e 	beq.w	80159f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x278>
 80158dc:	e10a      	b.n	8015af4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x374>
    case kTfLiteFloat32: {
      tflite::reference_ops::Conv(
          ConvParamsFloat(params, data.reference_op_data),
 80158de:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80158e2:	f107 0310 	add.w	r3, r7, #16
 80158e6:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80158ea:	4618      	mov	r0, r3
 80158ec:	f7fc f8a5 	bl	8011a3a <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 80158f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80158f4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80158f8:	4618      	mov	r0, r3
 80158fa:	f7fc fc4e 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 80158fe:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8015902:	f7fb fe5c 	bl	80115be <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8015906:	4680      	mov	r8, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8015908:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801590c:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8015910:	4618      	mov	r0, r3
 8015912:	f7fc fc42 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8015916:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 801591a:	f7fb fe50 	bl	80115be <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801591e:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 8015920:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015924:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8015928:	4618      	mov	r0, r3
 801592a:	f7fc fc36 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 801592e:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8015932:	f7fb fe44 	bl	80115be <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8015936:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 8015938:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801593c:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8015940:	4618      	mov	r0, r3
 8015942:	f7fc fc2a 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8015946:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 801594a:	f7fb fe47 	bl	80115dc <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801594e:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(output),
          tflite::micro::GetTensorShape(nullptr), nullptr);
 8015950:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015954:	2100      	movs	r1, #0
 8015956:	4618      	mov	r0, r3
 8015958:	f7fc fc1f 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 801595c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8015960:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8015964:	f107 0010 	add.w	r0, r7, #16
 8015968:	2300      	movs	r3, #0
 801596a:	9306      	str	r3, [sp, #24]
 801596c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015970:	9305      	str	r3, [sp, #20]
 8015972:	9604      	str	r6, [sp, #16]
 8015974:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015978:	9303      	str	r3, [sp, #12]
 801597a:	9502      	str	r5, [sp, #8]
 801597c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015980:	9301      	str	r3, [sp, #4]
 8015982:	9400      	str	r4, [sp, #0]
 8015984:	4613      	mov	r3, r2
 8015986:	4642      	mov	r2, r8
 8015988:	f7fe fe64 	bl	8014654 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
          tflite::micro::GetTensorShape(nullptr), nullptr);
 801598c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015990:	4618      	mov	r0, r3
 8015992:	f7f6 ff9e 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
 8015996:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801599a:	4618      	mov	r0, r3
 801599c:	f7f6 ff99 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 80159a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80159a4:	4618      	mov	r0, r3
 80159a6:	f7f6 ff94 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 80159aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80159ae:	4618      	mov	r0, r3
 80159b0:	f7f6 ff8f 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 80159b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80159b8:	4618      	mov	r0, r3
 80159ba:	f7f6 ff8a 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 80159be:	e0ae      	b.n	8015b1e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x39e>
    }
    case kTfLiteInt8:
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 80159c0:	f107 0108 	add.w	r1, r7, #8
 80159c4:	f107 000c 	add.w	r0, r7, #12
 80159c8:	2300      	movs	r3, #0
 80159ca:	9304      	str	r3, [sp, #16]
 80159cc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80159d0:	9303      	str	r3, [sp, #12]
 80159d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80159d6:	9302      	str	r3, [sp, #8]
 80159d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80159dc:	9301      	str	r3, [sp, #4]
 80159de:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80159e2:	9300      	str	r3, [sp, #0]
 80159e4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80159e8:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80159ec:	6809      	ldr	r1, [r1, #0]
 80159ee:	6800      	ldr	r0, [r0, #0]
 80159f0:	f7ff fca8 	bl	8015344 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>
 80159f4:	4603      	mov	r3, r0
                                     bias, output, nullptr);
 80159f6:	e093      	b.n	8015b20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a0>
      break;
    case kTfLiteInt16: {
      reference_integer_ops::ConvPerChannel(
          ConvParamsQuantized(params, data.reference_op_data),
 80159f8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80159fc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8015a00:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7fc f854 	bl	8011ab2 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
          data.reference_op_data.per_channel_output_multiplier,
 8015a0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015a0e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
          data.reference_op_data.per_channel_output_shift,
 8015a10:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015a14:	6a9d      	ldr	r5, [r3, #40]	; 0x28
          tflite::micro::GetTensorShape(input),
 8015a16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8015a1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8015a1e:	4618      	mov	r0, r3
 8015a20:	f7fc fbbb 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 8015a24:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8015a28:	f7fc fb92 	bl	8012150 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8015a2c:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<int16_t>(input),
          tflite::micro::GetTensorShape(filter),
 8015a2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015a32:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8015a36:	4618      	mov	r0, r3
 8015a38:	f7fc fbaf 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 8015a3c:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8015a40:	f7fb fddd 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015a44:	6078      	str	r0, [r7, #4]
          tflite::micro::GetTensorData<int8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 8015a46:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8015a4a:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f7fc fba3 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 8015a54:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8015a58:	f7fb feda 	bl	8011810 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>
 8015a5c:	6038      	str	r0, [r7, #0]
          tflite::micro::GetTensorData<std::int64_t>(bias),
          tflite::micro::GetTensorShape(output),
 8015a5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015a62:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8015a66:	4618      	mov	r0, r3
 8015a68:	f7fc fb97 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 8015a6c:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 8015a70:	f7fb ff0c 	bl	801188c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8015a74:	4603      	mov	r3, r0
 8015a76:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015a7a:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8015a7e:	9306      	str	r3, [sp, #24]
 8015a80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015a84:	9305      	str	r3, [sp, #20]
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	9304      	str	r3, [sp, #16]
 8015a8a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8015a8e:	9303      	str	r3, [sp, #12]
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	9302      	str	r3, [sp, #8]
 8015a94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015a98:	9301      	str	r3, [sp, #4]
 8015a9a:	9600      	str	r6, [sp, #0]
 8015a9c:	4613      	mov	r3, r2
 8015a9e:	462a      	mov	r2, r5
 8015aa0:	4621      	mov	r1, r4
 8015aa2:	f7ff f90f 	bl	8014cc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
          tflite::micro::GetTensorShape(output),
 8015aa6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f7f6 ff11 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8015ab0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7f6 ff0c 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8015aba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f7f6 ff07 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8015ac4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f7f6 ff02 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int16_t>(output));
      break;
 8015ace:	e026      	b.n	8015b1e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x39e>
 8015ad0:	08031020 	.word	0x08031020
 8015ad4:	08031024 	.word	0x08031024
 8015ad8:	08031028 	.word	0x08031028
 8015adc:	0803102c 	.word	0x0803102c
 8015ae0:	0802b778 	.word	0x0802b778
 8015ae4:	0802b788 	.word	0x0802b788
 8015ae8:	0802b6c4 	.word	0x0802b6c4
 8015aec:	0802b75c 	.word	0x0802b75c
 8015af0:	0802b794 	.word	0x0802b794
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015af4:	f107 030c 	add.w	r3, r7, #12
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	695c      	ldr	r4, [r3, #20]
 8015afc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015b00:	7a1b      	ldrb	r3, [r3, #8]
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7f2 fe82 	bl	800880c <TfLiteTypeGetName>
 8015b08:	4602      	mov	r2, r0
 8015b0a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015b0e:	7a1b      	ldrb	r3, [r3, #8]
 8015b10:	f107 000c 	add.w	r0, r7, #12
 8015b14:	4905      	ldr	r1, [pc, #20]	; (8015b2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ac>)
 8015b16:	6800      	ldr	r0, [r0, #0]
 8015b18:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015b1a:	2301      	movs	r3, #1
 8015b1c:	e000      	b.n	8015b20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a0>
  }
  return kTfLiteOk;
 8015b1e:	2300      	movs	r3, #0
}
 8015b20:	4618      	mov	r0, r3
 8015b22:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8015b26:	46bd      	mov	sp, r7
 8015b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b2c:	0802b808 	.word	0x0802b808

08015b30 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 8015b30:	b4b0      	push	{r4, r5, r7}
 8015b32:	b083      	sub	sp, #12
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	4a07      	ldr	r2, [pc, #28]	; (8015b58 <_ZN6tflite16Register_CONV_2DEv+0x28>)
 8015b3c:	461c      	mov	r4, r3
 8015b3e:	4615      	mov	r5, r2
 8015b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015b44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	370c      	adds	r7, #12
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bcb0      	pop	{r4, r5, r7}
 8015b54:	4770      	bx	lr
 8015b56:	bf00      	nop
 8015b58:	0802b824 	.word	0x0802b824

08015b5c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8015b5c:	b590      	push	{r4, r7, lr}
 8015b5e:	ed2d 8b02 	vpush	{d8}
 8015b62:	b0a9      	sub	sp, #164	; 0xa4
 8015b64:	af02      	add	r7, sp, #8
 8015b66:	60f8      	str	r0, [r7, #12]
 8015b68:	60b9      	str	r1, [r7, #8]
 8015b6a:	607a      	str	r2, [r7, #4]
 8015b6c:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015b74:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8015b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015b84:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8015b8c:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015b94:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int depth_multiplier = params.depth_multiplier;
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8015ba4:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_min = params.float_activation_min;
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015baa:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_max = params.float_activation_max;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bb0:	653b      	str	r3, [r7, #80]	; 0x50
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8015bb2:	68b8      	ldr	r0, [r7, #8]
 8015bb4:	f7f6 fe98 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015bb8:	4603      	mov	r3, r0
 8015bba:	2b04      	cmp	r3, #4
 8015bbc:	d001      	beq.n	8015bc2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x66>
 8015bbe:	f00f f992 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8015bc2:	6838      	ldr	r0, [r7, #0]
 8015bc4:	f7f6 fe90 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	2b04      	cmp	r3, #4
 8015bcc:	d001      	beq.n	8015bd2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x76>
 8015bce:	f00f f98a 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8015bd2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015bd6:	f7f6 fe87 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	2b04      	cmp	r3, #4
 8015bde:	d001      	beq.n	8015be4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x88>
 8015be0:	f00f f981 	bl	8024ee6 <abort>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8015be4:	2300      	movs	r3, #0
 8015be6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015bea:	2100      	movs	r1, #0
 8015bec:	68b8      	ldr	r0, [r7, #8]
 8015bee:	f7fb fe1e 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015bf2:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8015bf4:	2303      	movs	r3, #3
 8015bf6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015bfa:	2103      	movs	r1, #3
 8015bfc:	6838      	ldr	r0, [r7, #0]
 8015bfe:	f7fb fe16 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015c02:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_height = input_shape.Dims(1);
 8015c04:	2101      	movs	r1, #1
 8015c06:	68b8      	ldr	r0, [r7, #8]
 8015c08:	f7fb fd19 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015c0c:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 8015c0e:	2102      	movs	r1, #2
 8015c10:	68b8      	ldr	r0, [r7, #8]
 8015c12:	f7fb fd14 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015c16:	6438      	str	r0, [r7, #64]	; 0x40
  const int input_depth = input_shape.Dims(3);
 8015c18:	2103      	movs	r1, #3
 8015c1a:	68b8      	ldr	r0, [r7, #8]
 8015c1c:	f7fb fd0f 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015c20:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_height = filter_shape.Dims(1);
 8015c22:	2101      	movs	r1, #1
 8015c24:	6838      	ldr	r0, [r7, #0]
 8015c26:	f7fb fd0a 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015c2a:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_width = filter_shape.Dims(2);
 8015c2c:	2102      	movs	r1, #2
 8015c2e:	6838      	ldr	r0, [r7, #0]
 8015c30:	f7fb fd05 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015c34:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
 8015c36:	2101      	movs	r1, #1
 8015c38:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015c3c:	f7fb fcff 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015c40:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
 8015c42:	2102      	movs	r1, #2
 8015c44:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015c48:	f7fb fcf9 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015c4c:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8015c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015c52:	fb02 f303 	mul.w	r3, r2, r3
 8015c56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c58:	429a      	cmp	r2, r3
 8015c5a:	d001      	beq.n	8015c60 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x104>
 8015c5c:	f00f f943 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8015c60:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015c64:	f7fb fd11 	bl	801168a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8015c68:	4602      	mov	r2, r0
 8015c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c6c:	4293      	cmp	r3, r2
 8015c6e:	d001      	beq.n	8015c74 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x118>
 8015c70:	f00f f939 	bl	8024ee6 <abort>

  for (int b = 0; b < batches; ++b) {
 8015c74:	2300      	movs	r3, #0
 8015c76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015c7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c80:	429a      	cmp	r2, r3
 8015c82:	f280 80eb 	bge.w	8015e5c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x300>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015c86:	2300      	movs	r3, #0
 8015c88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015c8c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c92:	429a      	cmp	r2, r3
 8015c94:	f280 80dc 	bge.w	8015e50 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2f4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8015c98:	2300      	movs	r3, #0
 8015c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015c9e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8015ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	f280 80cd 	bge.w	8015e44 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2e8>
        for (int ic = 0; ic < input_depth; ++ic) {
 8015caa:	2300      	movs	r3, #0
 8015cac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015cb0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	f280 80be 	bge.w	8015e38 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2dc>
          for (int m = 0; m < depth_multiplier; m++) {
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015cc2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015cc8:	429a      	cmp	r2, r3
 8015cca:	f280 80af 	bge.w	8015e2c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2d0>
            const int oc = m + ic * depth_multiplier;
 8015cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015cd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015cd4:	fb02 f303 	mul.w	r3, r2, r3
 8015cd8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015cdc:	4413      	add	r3, r2
 8015cde:	62bb      	str	r3, [r7, #40]	; 0x28
            const int in_x_origin = (out_x * stride_width) - pad_width;
 8015ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015ce4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015ce6:	fb02 f203 	mul.w	r2, r2, r3
 8015cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015cec:	1ad3      	subs	r3, r2, r3
 8015cee:	627b      	str	r3, [r7, #36]	; 0x24
            const int in_y_origin = (out_y * stride_height) - pad_height;
 8015cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015cf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015cf6:	fb02 f203 	mul.w	r2, r2, r3
 8015cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015cfc:	1ad3      	subs	r3, r2, r3
 8015cfe:	623b      	str	r3, [r7, #32]
            float total = 0.f;
 8015d00:	f04f 0300 	mov.w	r3, #0
 8015d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8015d08:	2300      	movs	r3, #0
 8015d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015d0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d10:	429a      	cmp	r2, r3
 8015d12:	da54      	bge.n	8015dbe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x262>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8015d14:	2300      	movs	r3, #0
 8015d16:	67bb      	str	r3, [r7, #120]	; 0x78
 8015d18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d1c:	429a      	cmp	r2, r3
 8015d1e:	da4a      	bge.n	8015db6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8015d20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015d22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015d24:	fb02 f303 	mul.w	r3, r2, r3
 8015d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d2a:	4413      	add	r3, r2
 8015d2c:	61fb      	str	r3, [r7, #28]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8015d2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015d32:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8015d36:	6a3a      	ldr	r2, [r7, #32]
 8015d38:	4413      	add	r3, r2
 8015d3a:	61bb      	str	r3, [r7, #24]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8015d3c:	69fb      	ldr	r3, [r7, #28]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	db35      	blt.n	8015dae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 8015d42:	69fa      	ldr	r2, [r7, #28]
 8015d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d46:	429a      	cmp	r2, r3
 8015d48:	da31      	bge.n	8015dae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 8015d4a:	69bb      	ldr	r3, [r7, #24]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	db2e      	blt.n	8015dae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 8015d50:	69ba      	ldr	r2, [r7, #24]
 8015d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d54:	429a      	cmp	r2, r3
 8015d56:	da2a      	bge.n	8015dae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 8015d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015d5c:	9300      	str	r3, [sp, #0]
 8015d5e:	69fb      	ldr	r3, [r7, #28]
 8015d60:	69ba      	ldr	r2, [r7, #24]
 8015d62:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8015d66:	68b8      	ldr	r0, [r7, #8]
 8015d68:	f7fb fcdb 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015d6c:	4603      	mov	r3, r0
 8015d6e:	009b      	lsls	r3, r3, #2
 8015d70:	687a      	ldr	r2, [r7, #4]
 8015d72:	4413      	add	r3, r2
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	617b      	str	r3, [r7, #20]
                  float filter_value = filter_data[Offset(
 8015d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d7a:	9300      	str	r3, [sp, #0]
 8015d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015d7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015d80:	2100      	movs	r1, #0
 8015d82:	6838      	ldr	r0, [r7, #0]
 8015d84:	f7fb fccd 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015d88:	4603      	mov	r3, r0
                      filter_shape, 0, filter_y, filter_x, oc)];
 8015d8a:	009b      	lsls	r3, r3, #2
 8015d8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015d90:	4413      	add	r3, r2
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	613b      	str	r3, [r7, #16]
                  total += (input_value * filter_value);
 8015d96:	ed97 7a05 	vldr	s14, [r7, #20]
 8015d9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8015d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015da2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015daa:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8015dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015db0:	3301      	adds	r3, #1
 8015db2:	67bb      	str	r3, [r7, #120]	; 0x78
 8015db4:	e7b0      	b.n	8015d18 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8015db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015db8:	3301      	adds	r3, #1
 8015dba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015dbc:	e7a6      	b.n	8015d0c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
                }
              }
            }
            float bias_value = 0.0f;
 8015dbe:	f04f 0300 	mov.w	r3, #0
 8015dc2:	677b      	str	r3, [r7, #116]	; 0x74
            if (bias_data) {
 8015dc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d006      	beq.n	8015dda <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x27e>
              bias_value = bias_data[oc];
 8015dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dce:	009b      	lsls	r3, r3, #2
 8015dd0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015dd4:	4413      	add	r3, r2
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	677b      	str	r3, [r7, #116]	; 0x74
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
 8015dda:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015dde:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8015de2:	ee37 8a27 	vadd.f32	s16, s14, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8015de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015de8:	9300      	str	r3, [sp, #0]
 8015dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015dee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015df2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8015df6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015dfa:	f7fb fc92 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015dfe:	4603      	mov	r3, r0
 8015e00:	009b      	lsls	r3, r3, #2
 8015e02:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015e06:	18d4      	adds	r4, r2, r3
                ActivationFunctionWithMinMax(total + bias_value,
 8015e08:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 8015e0c:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8015e10:	eeb0 0a48 	vmov.f32	s0, s16
 8015e14:	f7fc f9f9 	bl	801220a <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8015e18:	eef0 7a40 	vmov.f32	s15, s0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8015e1c:	edc4 7a00 	vstr	s15, [r4]
          for (int m = 0; m < depth_multiplier; m++) {
 8015e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015e24:	3301      	adds	r3, #1
 8015e26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015e2a:	e74a      	b.n	8015cc2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x166>
        for (int ic = 0; ic < input_depth; ++ic) {
 8015e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015e30:	3301      	adds	r3, #1
 8015e32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015e36:	e73b      	b.n	8015cb0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x154>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8015e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015e3c:	3301      	adds	r3, #1
 8015e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015e42:	e72c      	b.n	8015c9e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x142>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015e44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015e48:	3301      	adds	r3, #1
 8015e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015e4e:	e71d      	b.n	8015c8c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x130>
  for (int b = 0; b < batches; ++b) {
 8015e50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015e54:	3301      	adds	r3, #1
 8015e56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015e5a:	e70e      	b.n	8015c7a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11e>
          }
        }
      }
    }
  }
}
 8015e5c:	bf00      	nop
 8015e5e:	379c      	adds	r7, #156	; 0x9c
 8015e60:	46bd      	mov	sp, r7
 8015e62:	ecbd 8b02 	vpop	{d8}
 8015e66:	bd90      	pop	{r4, r7, pc}

08015e68 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8015e68:	b590      	push	{r4, r7, lr}
 8015e6a:	b0ab      	sub	sp, #172	; 0xac
 8015e6c:	af02      	add	r7, sp, #8
 8015e6e:	60f8      	str	r0, [r7, #12]
 8015e70:	60b9      	str	r1, [r7, #8]
 8015e72:	607a      	str	r2, [r7, #4]
 8015e74:	603b      	str	r3, [r7, #0]
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8015e86:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015e8e:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8015e96:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015e9e:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int depth_multiplier = params.depth_multiplier;
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8015eae:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32_t input_offset = params.input_offset;
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	695b      	ldr	r3, [r3, #20]
 8015eb4:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	69db      	ldr	r3, [r3, #28]
 8015eba:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_activation_min = params.quantized_activation_min;
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ec0:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ec6:	617b      	str	r3, [r7, #20]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8015ec8:	6838      	ldr	r0, [r7, #0]
 8015eca:	f7f6 fd0d 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	2b04      	cmp	r3, #4
 8015ed2:	d001      	beq.n	8015ed8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x70>
 8015ed4:	f00f f807 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8015ed8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015edc:	f7f6 fd04 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	2b04      	cmp	r3, #4
 8015ee4:	d001      	beq.n	8015eea <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x82>
 8015ee6:	f00e fffe 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8015eea:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015eee:	f7f6 fcfb 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	2b04      	cmp	r3, #4
 8015ef6:	d001      	beq.n	8015efc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
 8015ef8:	f00e fff5 	bl	8024ee6 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8015efc:	69ba      	ldr	r2, [r7, #24]
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	429a      	cmp	r2, r3
 8015f02:	dd01      	ble.n	8015f08 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
 8015f04:	f00e ffef 	bl	8024ee6 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8015f08:	2300      	movs	r3, #0
 8015f0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015f0e:	2100      	movs	r1, #0
 8015f10:	6838      	ldr	r0, [r7, #0]
 8015f12:	f7fb fc8c 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015f16:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8015f18:	2303      	movs	r3, #3
 8015f1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015f1e:	2103      	movs	r1, #3
 8015f20:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015f24:	f7fb fc83 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015f28:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_height = input_shape.Dims(1);
 8015f2a:	2101      	movs	r1, #1
 8015f2c:	6838      	ldr	r0, [r7, #0]
 8015f2e:	f7fb fb86 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015f32:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
 8015f34:	2102      	movs	r1, #2
 8015f36:	6838      	ldr	r0, [r7, #0]
 8015f38:	f7fb fb81 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015f3c:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = input_shape.Dims(3);
 8015f3e:	2103      	movs	r1, #3
 8015f40:	6838      	ldr	r0, [r7, #0]
 8015f42:	f7fb fb7c 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015f46:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int filter_height = filter_shape.Dims(1);
 8015f48:	2101      	movs	r1, #1
 8015f4a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015f4e:	f7fb fb76 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015f52:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_width = filter_shape.Dims(2);
 8015f54:	2102      	movs	r1, #2
 8015f56:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015f5a:	f7fb fb70 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015f5e:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_height = output_shape.Dims(1);
 8015f60:	2101      	movs	r1, #1
 8015f62:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015f66:	f7fb fb6a 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015f6a:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_width = output_shape.Dims(2);
 8015f6c:	2102      	movs	r1, #2
 8015f6e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015f72:	f7fb fb64 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8015f76:	63f8      	str	r0, [r7, #60]	; 0x3c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8015f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015f7c:	fb02 f303 	mul.w	r3, r2, r3
 8015f80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015f82:	429a      	cmp	r2, r3
 8015f84:	d001      	beq.n	8015f8a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x122>
 8015f86:	f00e ffae 	bl	8024ee6 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8015f8a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015f8e:	f7fb fb7c 	bl	801168a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8015f92:	4602      	mov	r2, r0
 8015f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015f96:	4293      	cmp	r3, r2
 8015f98:	d001      	beq.n	8015f9e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x136>
 8015f9a:	f00e ffa4 	bl	8024ee6 <abort>

  for (int batch = 0; batch < batches; ++batch) {
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015fa4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015faa:	429a      	cmp	r2, r3
 8015fac:	f280 811a 	bge.w	80161e4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015fb6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fbc:	429a      	cmp	r2, r3
 8015fbe:	f280 810b 	bge.w	80161d8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015fc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	f280 80fc 	bge.w	80161cc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x364>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015fda:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015fe0:	429a      	cmp	r2, r3
 8015fe2:	f280 80ed 	bge.w	80161c0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x358>
          for (int m = 0; m < depth_multiplier; ++m) {
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015fec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8015ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015ff2:	429a      	cmp	r2, r3
 8015ff4:	f280 80de 	bge.w	80161b4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34c>
            const int output_channel = m + in_channel * depth_multiplier;
 8015ff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015ffc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015ffe:	fb02 f303 	mul.w	r3, r2, r3
 8016002:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016006:	4413      	add	r3, r2
 8016008:	63bb      	str	r3, [r7, #56]	; 0x38
            const int in_x_origin = (out_x * stride_width) - pad_width;
 801600a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801600e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016012:	fb02 f203 	mul.w	r2, r2, r3
 8016016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016018:	1ad3      	subs	r3, r2, r3
 801601a:	637b      	str	r3, [r7, #52]	; 0x34
            const int in_y_origin = (out_y * stride_height) - pad_height;
 801601c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016020:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016022:	fb02 f203 	mul.w	r2, r2, r3
 8016026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016028:	1ad3      	subs	r3, r2, r3
 801602a:	633b      	str	r3, [r7, #48]	; 0x30
            int32_t acc = 0;
 801602c:	2300      	movs	r3, #0
 801602e:	613b      	str	r3, [r7, #16]
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8016030:	2300      	movs	r3, #0
 8016032:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016036:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801603a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801603c:	429a      	cmp	r2, r3
 801603e:	da68      	bge.n	8016112 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2aa>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8016040:	2300      	movs	r3, #0
 8016042:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016046:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801604a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801604c:	429a      	cmp	r2, r3
 801604e:	da5a      	bge.n	8016106 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29e>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8016050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016052:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016056:	fb02 f303 	mul.w	r3, r2, r3
 801605a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801605c:	4413      	add	r3, r2
 801605e:	62fb      	str	r3, [r7, #44]	; 0x2c
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8016060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016062:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016066:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 801606a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801606c:	4413      	add	r3, r2
 801606e:	62bb      	str	r3, [r7, #40]	; 0x28
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8016070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016072:	2b00      	cmp	r3, #0
 8016074:	db0c      	blt.n	8016090 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8016076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801607a:	429a      	cmp	r2, r3
 801607c:	da08      	bge.n	8016090 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 801607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016080:	2b00      	cmp	r3, #0
 8016082:	db05      	blt.n	8016090 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8016084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016088:	429a      	cmp	r2, r3
 801608a:	da01      	bge.n	8016090 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 801608c:	2301      	movs	r3, #1
 801608e:	e000      	b.n	8016092 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 8016090:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 8016092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    (in_y < input_height);
                if (is_point_inside_image) {
 8016096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801609a:	2b00      	cmp	r3, #0
 801609c:	d02d      	beq.n	80160fa <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
                  int32_t input_val = input_data[Offset(
 801609e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80160a2:	9300      	str	r3, [sp, #0]
 80160a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80160a8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80160ac:	6838      	ldr	r0, [r7, #0]
 80160ae:	f7fb fb38 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80160b2:	4603      	mov	r3, r0
 80160b4:	461a      	mov	r2, r3
                      input_shape, batch, in_y, in_x, in_channel)];
 80160b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80160ba:	4413      	add	r3, r2
 80160bc:	f993 3000 	ldrsb.w	r3, [r3]
 80160c0:	623b      	str	r3, [r7, #32]
                  int32_t filter_val = filter_data[Offset(
 80160c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160c4:	9300      	str	r3, [sp, #0]
 80160c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80160ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80160ce:	2100      	movs	r1, #0
 80160d0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80160d4:	f7fb fb25 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80160d8:	4603      	mov	r3, r0
 80160da:	461a      	mov	r2, r3
                      filter_shape, 0, filter_y, filter_x, output_channel)];
 80160dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80160e0:	4413      	add	r3, r2
 80160e2:	f993 3000 	ldrsb.w	r3, [r3]
 80160e6:	61fb      	str	r3, [r7, #28]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 80160e8:	6a3a      	ldr	r2, [r7, #32]
 80160ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80160ec:	4413      	add	r3, r2
 80160ee:	69fa      	ldr	r2, [r7, #28]
 80160f0:	fb02 f203 	mul.w	r2, r2, r3
 80160f4:	693b      	ldr	r3, [r7, #16]
 80160f6:	4413      	add	r3, r2
 80160f8:	613b      	str	r3, [r7, #16]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80160fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80160fe:	3301      	adds	r3, #1
 8016100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016104:	e79f      	b.n	8016046 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8016106:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801610a:	3301      	adds	r3, #1
 801610c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016110:	e791      	b.n	8016036 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ce>
                }
              }
            }
            if (bias_data) {
 8016112:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016116:	2b00      	cmp	r3, #0
 8016118:	d008      	beq.n	801612c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
              acc += bias_data[output_channel];
 801611a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801611c:	009b      	lsls	r3, r3, #2
 801611e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016122:	4413      	add	r3, r2
 8016124:	681a      	ldr	r2, [r3, #0]
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	4413      	add	r3, r2
 801612a:	613b      	str	r3, [r7, #16]
            }
            acc = MultiplyByQuantizedMultiplier(
 801612c:	6938      	ldr	r0, [r7, #16]
                acc, output_multiplier[output_channel],
 801612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016130:	009b      	lsls	r3, r3, #2
 8016132:	68ba      	ldr	r2, [r7, #8]
 8016134:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8016136:	6819      	ldr	r1, [r3, #0]
                output_shift[output_channel]);
 8016138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801613a:	009b      	lsls	r3, r3, #2
 801613c:	687a      	ldr	r2, [r7, #4]
 801613e:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	461a      	mov	r2, r3
 8016144:	f7f5 f966 	bl	800b414 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8016148:	4603      	mov	r3, r0
 801614a:	613b      	str	r3, [r7, #16]
            acc += output_offset;
 801614c:	693a      	ldr	r2, [r7, #16]
 801614e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016150:	4413      	add	r3, r2
 8016152:	613b      	str	r3, [r7, #16]
            acc = std::max(acc, output_activation_min);
 8016154:	f107 0218 	add.w	r2, r7, #24
 8016158:	f107 0310 	add.w	r3, r7, #16
 801615c:	4611      	mov	r1, r2
 801615e:	4618      	mov	r0, r3
 8016160:	f7f5 fa2c 	bl	800b5bc <_ZSt3maxIlERKT_S2_S2_>
 8016164:	4603      	mov	r3, r0
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	613b      	str	r3, [r7, #16]
            acc = std::min(acc, output_activation_max);
 801616a:	f107 0214 	add.w	r2, r7, #20
 801616e:	f107 0310 	add.w	r3, r7, #16
 8016172:	4611      	mov	r1, r2
 8016174:	4618      	mov	r0, r3
 8016176:	f7f5 fa0d 	bl	800b594 <_ZSt3minIlERKT_S2_S2_>
 801617a:	4603      	mov	r3, r0
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	613b      	str	r3, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
 8016180:	693c      	ldr	r4, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
 8016182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016184:	9300      	str	r3, [sp, #0]
 8016186:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801618a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801618e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8016192:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8016196:	f7fb fac4 	bl	8011722 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801619a:	4603      	mov	r3, r0
 801619c:	461a      	mov	r2, r3
                               output_channel)] = static_cast<int8_t>(acc);
 801619e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80161a2:	4413      	add	r3, r2
 80161a4:	b262      	sxtb	r2, r4
 80161a6:	701a      	strb	r2, [r3, #0]
          for (int m = 0; m < depth_multiplier; ++m) {
 80161a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80161ac:	3301      	adds	r3, #1
 80161ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80161b2:	e71b      	b.n	8015fec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80161b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80161b8:	3301      	adds	r3, #1
 80161ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80161be:	e70c      	b.n	8015fda <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x172>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80161c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80161c4:	3301      	adds	r3, #1
 80161c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80161ca:	e6fd      	b.n	8015fc8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x160>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80161cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80161d0:	3301      	adds	r3, #1
 80161d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80161d6:	e6ee      	b.n	8015fb6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14e>
  for (int batch = 0; batch < batches; ++batch) {
 80161d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80161dc:	3301      	adds	r3, #1
 80161de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80161e2:	e6df      	b.n	8015fa4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13c>
          }
        }
      }
    }
  }
}
 80161e4:	bf00      	nop
 80161e6:	37a4      	adds	r7, #164	; 0xa4
 80161e8:	46bd      	mov	sp, r7
 80161ea:	bd90      	pop	{r4, r7, pc}

080161ec <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b084      	sub	sp, #16
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	60f8      	str	r0, [r7, #12]
 80161f4:	60b9      	str	r1, [r7, #8]
 80161f6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d101      	bne.n	8016204 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8016200:	f00e fe71 	bl	8024ee6 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016208:	2138      	movs	r1, #56	; 0x38
 801620a:	68f8      	ldr	r0, [r7, #12]
 801620c:	4798      	blx	r3
 801620e:	4603      	mov	r3, r0
}
 8016210:	4618      	mov	r0, r3
 8016212:	3710      	adds	r7, #16
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}

08016218 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8016218:	b5b0      	push	{r4, r5, r7, lr}
 801621a:	b0c6      	sub	sp, #280	; 0x118
 801621c:	af08      	add	r7, sp, #32
 801621e:	6078      	str	r0, [r7, #4]
 8016220:	6039      	str	r1, [r7, #0]
 8016222:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8016224:	683b      	ldr	r3, [r7, #0]
 8016226:	691b      	ldr	r3, [r3, #16]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d101      	bne.n	8016230 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 801622c:	f00e fe5b 	bl	8024ee6 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8016230:	683b      	ldr	r3, [r7, #0]
 8016232:	695b      	ldr	r3, [r3, #20]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d101      	bne.n	801623c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8016238:	f00e fe55 	bl	8024ee6 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	691b      	ldr	r3, [r3, #16]
 8016240:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  const auto& params =
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	695b      	ldr	r3, [r3, #20]
 8016248:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));

  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
 801624c:	4baa      	ldr	r3, [pc, #680]	; (80164f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	461a      	mov	r2, r3
 8016252:	6839      	ldr	r1, [r7, #0]
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	f7f5 fc39 	bl	800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801625a:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  TF_LITE_ENSURE(context, input != nullptr);
 801625e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016262:	2b00      	cmp	r3, #0
 8016264:	d10a      	bne.n	801627c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x64>
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	695c      	ldr	r4, [r3, #20]
 801626a:	4ba4      	ldr	r3, [pc, #656]	; (80164fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 801626c:	9300      	str	r3, [sp, #0]
 801626e:	2338      	movs	r3, #56	; 0x38
 8016270:	4aa3      	ldr	r2, [pc, #652]	; (8016500 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8016272:	49a4      	ldr	r1, [pc, #656]	; (8016504 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8016274:	6878      	ldr	r0, [r7, #4]
 8016276:	47a0      	blx	r4
 8016278:	2401      	movs	r4, #1
 801627a:	e22a      	b.n	80166d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
 801627c:	4ba2      	ldr	r3, [pc, #648]	; (8016508 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	461a      	mov	r2, r3
 8016282:	6839      	ldr	r1, [r7, #0]
 8016284:	6878      	ldr	r0, [r7, #4]
 8016286:	f7f5 fc21 	bl	800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801628a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
  TF_LITE_ENSURE(context, filter != nullptr);
 801628e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016292:	2b00      	cmp	r3, #0
 8016294:	d10a      	bne.n	80162ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x94>
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	695c      	ldr	r4, [r3, #20]
 801629a:	4b9c      	ldr	r3, [pc, #624]	; (801650c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
 801629c:	9300      	str	r3, [sp, #0]
 801629e:	233b      	movs	r3, #59	; 0x3b
 80162a0:	4a97      	ldr	r2, [pc, #604]	; (8016500 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80162a2:	4998      	ldr	r1, [pc, #608]	; (8016504 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	47a0      	blx	r4
 80162a8:	2401      	movs	r4, #1
 80162aa:	e212      	b.n	80166d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
 80162ac:	4b98      	ldr	r3, [pc, #608]	; (8016510 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	461a      	mov	r2, r3
 80162b2:	6839      	ldr	r1, [r7, #0]
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	f7f5 fc19 	bl	800baec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80162ba:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  TF_LITE_ENSURE(context, output != nullptr);
 80162be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d10a      	bne.n	80162dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	695c      	ldr	r4, [r3, #20]
 80162ca:	4b92      	ldr	r3, [pc, #584]	; (8016514 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
 80162cc:	9300      	str	r3, [sp, #0]
 80162ce:	233d      	movs	r3, #61	; 0x3d
 80162d0:	4a8b      	ldr	r2, [pc, #556]	; (8016500 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80162d2:	498c      	ldr	r1, [pc, #560]	; (8016504 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 80162d4:	6878      	ldr	r0, [r7, #4]
 80162d6:	47a0      	blx	r4
 80162d8:	2401      	movs	r4, #1
 80162da:	e1fa      	b.n	80166d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>

  const TfLiteType data_type = input->type;
 80162dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80162e0:	781b      	ldrb	r3, [r3, #0]
 80162e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  int input_width = SizeOfDimension(input, 2);
 80162e6:	2102      	movs	r1, #2
 80162e8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80162ec:	f7f5 fb6d 	bl	800b9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80162f0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  int input_height = SizeOfDimension(input, 1);
 80162f4:	2101      	movs	r1, #1
 80162f6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80162fa:	f7f5 fb66 	bl	800b9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80162fe:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
  int filter_width = SizeOfDimension(filter, 2);
 8016302:	2102      	movs	r1, #2
 8016304:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8016308:	f7f5 fb5f 	bl	800b9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 801630c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  int filter_height = SizeOfDimension(filter, 1);
 8016310:	2101      	movs	r1, #1
 8016312:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8016316:	f7f5 fb58 	bl	800b9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 801631a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  int output_width = SizeOfDimension(output, 2);
 801631e:	2102      	movs	r1, #2
 8016320:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8016324:	f7f5 fb51 	bl	800b9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8016328:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  int output_height = SizeOfDimension(output, 1);
 801632c:	2101      	movs	r1, #1
 801632e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8016332:	f7f5 fb4a 	bl	800b9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8016336:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if (input->type == kTfLiteInt8) {
 801633a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801633e:	781b      	ldrb	r3, [r3, #0]
 8016340:	2b09      	cmp	r3, #9
 8016342:	f040 80b1 	bne.w	80164a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x290>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8016346:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801634a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801634e:	2b01      	cmp	r3, #1
 8016350:	d014      	beq.n	801637c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	695c      	ldr	r4, [r3, #20]
 8016356:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801635a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801635e:	461a      	mov	r2, r3
 8016360:	2301      	movs	r3, #1
 8016362:	9303      	str	r3, [sp, #12]
 8016364:	9202      	str	r2, [sp, #8]
 8016366:	4b6c      	ldr	r3, [pc, #432]	; (8016518 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
 8016368:	9301      	str	r3, [sp, #4]
 801636a:	4b6c      	ldr	r3, [pc, #432]	; (801651c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
 801636c:	9300      	str	r3, [sp, #0]
 801636e:	2348      	movs	r3, #72	; 0x48
 8016370:	4a63      	ldr	r2, [pc, #396]	; (8016500 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8016372:	496b      	ldr	r1, [pc, #428]	; (8016520 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	47a0      	blx	r4
 8016378:	2401      	movs	r4, #1
 801637a:	e1aa      	b.n	80166d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
                      kTfLiteAffineQuantization);

    // All per-channel quantized tensors need valid zero point and scale arrays.
    const auto* affine_quantization =
 801637c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016382:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
 8016386:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801638a:	2b00      	cmp	r3, #0
 801638c:	d10a      	bne.n	80163a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	695c      	ldr	r4, [r3, #20]
 8016392:	4b64      	ldr	r3, [pc, #400]	; (8016524 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
 8016394:	9300      	str	r3, [sp, #0]
 8016396:	234f      	movs	r3, #79	; 0x4f
 8016398:	4a59      	ldr	r2, [pc, #356]	; (8016500 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 801639a:	495a      	ldr	r1, [pc, #360]	; (8016504 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	47a0      	blx	r4
 80163a0:	2401      	movs	r4, #1
 80163a2:	e196      	b.n	80166d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 80163a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d10a      	bne.n	80163c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	695c      	ldr	r4, [r3, #20]
 80163b2:	4b5d      	ldr	r3, [pc, #372]	; (8016528 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
 80163b4:	9300      	str	r3, [sp, #0]
 80163b6:	2350      	movs	r3, #80	; 0x50
 80163b8:	4a51      	ldr	r2, [pc, #324]	; (8016500 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80163ba:	4952      	ldr	r1, [pc, #328]	; (8016504 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	47a0      	blx	r4
 80163c0:	2401      	movs	r4, #1
 80163c2:	e186      	b.n	80166d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 80163c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d10a      	bne.n	80163e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	695c      	ldr	r4, [r3, #20]
 80163d2:	4b56      	ldr	r3, [pc, #344]	; (801652c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>)
 80163d4:	9300      	str	r3, [sp, #0]
 80163d6:	2351      	movs	r3, #81	; 0x51
 80163d8:	4a49      	ldr	r2, [pc, #292]	; (8016500 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80163da:	494a      	ldr	r1, [pc, #296]	; (8016504 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 80163dc:	6878      	ldr	r0, [r7, #4]
 80163de:	47a0      	blx	r4
 80163e0:	2401      	movs	r4, #1
 80163e2:	e176      	b.n	80166d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(
 80163e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	2b01      	cmp	r3, #1
 80163ee:	d018      	beq.n	8016422 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 80163f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	681a      	ldr	r2, [r3, #0]
 80163f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80163fc:	6899      	ldr	r1, [r3, #8]
 80163fe:	4b4c      	ldr	r3, [pc, #304]	; (8016530 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	009b      	lsls	r3, r3, #2
 8016404:	440b      	add	r3, r1
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	429a      	cmp	r2, r3
 801640a:	d00a      	beq.n	8016422 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	695c      	ldr	r4, [r3, #20]
 8016410:	4b48      	ldr	r3, [pc, #288]	; (8016534 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x31c>)
 8016412:	9300      	str	r3, [sp, #0]
 8016414:	2352      	movs	r3, #82	; 0x52
 8016416:	4a3a      	ldr	r2, [pc, #232]	; (8016500 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8016418:	493a      	ldr	r1, [pc, #232]	; (8016504 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	47a0      	blx	r4
 801641e:	2401      	movs	r4, #1
 8016420:	e157      	b.n	80166d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
        context, affine_quantization->scale->size == 1 ||
                     affine_quantization->scale->size ==
                         filter->dims->data[kDepthwiseConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 8016422:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	681a      	ldr	r2, [r3, #0]
 801642a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801642e:	685b      	ldr	r3, [r3, #4]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	429a      	cmp	r2, r3
 8016434:	d016      	beq.n	8016464 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	695c      	ldr	r4, [r3, #20]
 801643a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016446:	6852      	ldr	r2, [r2, #4]
 8016448:	6812      	ldr	r2, [r2, #0]
 801644a:	9203      	str	r2, [sp, #12]
 801644c:	9302      	str	r3, [sp, #8]
 801644e:	4b3a      	ldr	r3, [pc, #232]	; (8016538 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x320>)
 8016450:	9301      	str	r3, [sp, #4]
 8016452:	4b3a      	ldr	r3, [pc, #232]	; (801653c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 8016454:	9300      	str	r3, [sp, #0]
 8016456:	2356      	movs	r3, #86	; 0x56
 8016458:	4a29      	ldr	r2, [pc, #164]	; (8016500 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 801645a:	4931      	ldr	r1, [pc, #196]	; (8016520 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	47a0      	blx	r4
 8016460:	2401      	movs	r4, #1
 8016462:	e136      	b.n	80166d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
                      affine_quantization->zero_point->size);

    // Allocate memory for per-channel quantization parameters
    const int num_channels =
        filter->dims->data[kDepthwiseConvQuantizedDimension];
 8016464:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016468:	689a      	ldr	r2, [r3, #8]
 801646a:	4b31      	ldr	r3, [pc, #196]	; (8016530 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
 801646c:	681b      	ldr	r3, [r3, #0]
    const int num_channels =
 801646e:	009b      	lsls	r3, r3, #2
 8016470:	4413      	add	r3, r2
 8016472:	685b      	ldr	r3, [r3, #4]
 8016474:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    data->reference_op_data.per_channel_output_multiplier =
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 801647c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016480:	0092      	lsls	r2, r2, #2
 8016482:	4611      	mov	r1, r2
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	4798      	blx	r3
 8016488:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_multiplier =
 801648a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801648e:	625a      	str	r2, [r3, #36]	; 0x24
    data->reference_op_data.per_channel_output_shift =
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 8016494:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016498:	0092      	lsls	r2, r2, #2
 801649a:	4611      	mov	r1, r2
 801649c:	6878      	ldr	r0, [r7, #4]
 801649e:	4798      	blx	r3
 80164a0:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_shift =
 80164a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80164a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
 80164a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80164ac:	9306      	str	r3, [sp, #24]
 80164ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80164b2:	9305      	str	r3, [sp, #20]
 80164b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80164b8:	9304      	str	r3, [sp, #16]
 80164ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80164be:	9303      	str	r3, [sp, #12]
 80164c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80164c4:	9302      	str	r3, [sp, #8]
 80164c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80164ca:	9301      	str	r3, [sp, #4]
 80164cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80164d0:	9300      	str	r3, [sp, #0]
 80164d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80164d6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80164da:	6839      	ldr	r1, [r7, #0]
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f7fb fd25 	bl	8011f2c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 80164e2:	4603      	mov	r3, r0
 80164e4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 80164e8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d027      	beq.n	8016540 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>
 80164f0:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 80164f4:	e0ed      	b.n	80166d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
 80164f6:	bf00      	nop
 80164f8:	08031034 	.word	0x08031034
 80164fc:	0802b998 	.word	0x0802b998
 8016500:	0802b934 	.word	0x0802b934
 8016504:	0802b980 	.word	0x0802b980
 8016508:	08031038 	.word	0x08031038
 801650c:	0802b9ac 	.word	0x0802b9ac
 8016510:	08031040 	.word	0x08031040
 8016514:	0802b9c0 	.word	0x0802b9c0
 8016518:	0802b9f0 	.word	0x0802b9f0
 801651c:	0802ba0c 	.word	0x0802ba0c
 8016520:	0802b9d4 	.word	0x0802b9d4
 8016524:	0802ba28 	.word	0x0802ba28
 8016528:	0802ba3c 	.word	0x0802ba3c
 801652c:	0802ba58 	.word	0x0802ba58
 8016530:	08031044 	.word	0x08031044
 8016534:	0802ba78 	.word	0x0802ba78
 8016538:	0802bafc 	.word	0x0802bafc
 801653c:	0802bb24 	.word	0x0802bb24
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, data_type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 8016540:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016544:	781b      	ldrb	r3, [r3, #0]
 8016546:	2b09      	cmp	r3, #9
 8016548:	f040 80c2 	bne.w	80166d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4b8>
    RuntimeShape input_shape = GetTensorShape(input);
 801654c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016550:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8016554:	4618      	mov	r0, r3
 8016556:	f7f6 f9f7 	bl	800c948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 801655a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801655e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8016562:	4618      	mov	r0, r3
 8016564:	f7f6 f9f0 	bl	800c948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape filter_shape = GetTensorShape(filter);
 8016568:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801656c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8016570:	4618      	mov	r0, r3
 8016572:	f7f6 f9e9 	bl	800c948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8016576:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801657a:	4618      	mov	r0, r3
 801657c:	f7f6 f9b4 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016580:	4603      	mov	r3, r0
 8016582:	2b04      	cmp	r3, #4
 8016584:	d001      	beq.n	801658a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x372>
 8016586:	f00e fcae 	bl	8024ee6 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 801658a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801658e:	4618      	mov	r0, r3
 8016590:	f7f6 f9aa 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016594:	4603      	mov	r3, r0
 8016596:	2b04      	cmp	r3, #4
 8016598:	d001      	beq.n	801659e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x386>
 801659a:	f00e fca4 	bl	8024ee6 <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801659e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7f6 f9a0 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80165a8:	4603      	mov	r3, r0
 80165aa:	2b04      	cmp	r3, #4
 80165ac:	d001      	beq.n	80165b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x39a>
 80165ae:	f00e fc9a 	bl	8024ee6 <abort>

    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 80165b2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80165b6:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80165ba:	2300      	movs	r3, #0
 80165bc:	2100      	movs	r1, #0
 80165be:	f7fb f936 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80165c2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    const int output_depth = MatchingDim(output_shape, 3, filter_shape, 3);
 80165c6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80165ca:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80165ce:	2303      	movs	r3, #3
 80165d0:	2103      	movs	r1, #3
 80165d2:	f7fb f92c 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80165d6:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
    TFLITE_DCHECK_EQ(batch_size, 1); /* Only batch = 1 is supported */
 80165da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80165de:	2b01      	cmp	r3, #1
 80165e0:	d001      	beq.n	80165e6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3ce>
 80165e2:	f00e fc80 	bl	8024ee6 <abort>

    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 80165e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80165ea:	657b      	str	r3, [r7, #84]	; 0x54
    input_dims.h = input_height;
 80165ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80165f0:	65bb      	str	r3, [r7, #88]	; 0x58
    input_dims.w = input_width;
 80165f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80165f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    input_dims.c = input_shape.Dims(3);
 80165f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80165fc:	2103      	movs	r1, #3
 80165fe:	4618      	mov	r0, r3
 8016600:	f7fb f81d 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8016604:	4603      	mov	r3, r0
 8016606:	663b      	str	r3, [r7, #96]	; 0x60

    cmsis_nn_dims filter_dims;
    filter_dims.n = 1;
 8016608:	2301      	movs	r3, #1
 801660a:	647b      	str	r3, [r7, #68]	; 0x44
    filter_dims.h = filter_height;
 801660c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016610:	64bb      	str	r3, [r7, #72]	; 0x48
    filter_dims.w = filter_width;
 8016612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016616:	64fb      	str	r3, [r7, #76]	; 0x4c
    filter_dims.c = output_depth;
 8016618:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801661c:	653b      	str	r3, [r7, #80]	; 0x50

    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 801661e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016622:	637b      	str	r3, [r7, #52]	; 0x34
    output_dims.h = output_height;
 8016624:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016628:	63bb      	str	r3, [r7, #56]	; 0x38
    output_dims.w = output_width;
 801662a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801662e:	63fb      	str	r3, [r7, #60]	; 0x3c
    output_dims.c = output_depth;
 8016630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016634:	643b      	str	r3, [r7, #64]	; 0x40

    cmsis_nn_dw_conv_params dw_conv_params;
    dw_conv_params.padding.h = data->reference_op_data.padding.height;
 8016636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801663a:	685b      	ldr	r3, [r3, #4]
 801663c:	623b      	str	r3, [r7, #32]
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
 801663e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	61fb      	str	r3, [r7, #28]

    const int32_t buf_size = arm_depthwise_conv_wrapper_s8_get_buffer_size(
 8016646:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801664a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801664e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8016652:	f107 0008 	add.w	r0, r7, #8
 8016656:	f005 fe8e 	bl	801c376 <arm_depthwise_conv_wrapper_s8_get_buffer_size>
 801665a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        &dw_conv_params, &input_dims, &filter_dims, &output_dims);

    if (buf_size > 0) {
 801665e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016662:	2b00      	cmp	r3, #0
 8016664:	dd13      	ble.n	801668e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x476>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801666a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801666e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8016672:	3234      	adds	r2, #52	; 0x34
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	4798      	blx	r3
 8016678:	4603      	mov	r3, r0
 801667a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 801667e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8016682:	2b00      	cmp	r3, #0
 8016684:	d008      	beq.n	8016698 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x480>
 8016686:	f897 40af 	ldrb.w	r4, [r7, #175]	; 0xaf
 801668a:	2500      	movs	r5, #0
 801668c:	e005      	b.n	801669a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x482>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801668e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016696:	635a      	str	r2, [r3, #52]	; 0x34
    RuntimeShape filter_shape = GetTensorShape(filter);
 8016698:	2501      	movs	r5, #1
 801669a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801669e:	4618      	mov	r0, r3
 80166a0:	f7f6 f917 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
 80166a4:	2d01      	cmp	r5, #1
 80166a6:	d001      	beq.n	80166ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x494>
 80166a8:	2500      	movs	r5, #0
 80166aa:	e000      	b.n	80166ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x496>
    RuntimeShape output_shape = GetTensorShape(output);
 80166ac:	2501      	movs	r5, #1
 80166ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80166b2:	4618      	mov	r0, r3
 80166b4:	f7f6 f90d 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
 80166b8:	2d01      	cmp	r5, #1
 80166ba:	d001      	beq.n	80166c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4a8>
 80166bc:	2500      	movs	r5, #0
 80166be:	e000      	b.n	80166c2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4aa>
    RuntimeShape input_shape = GetTensorShape(input);
 80166c0:	2501      	movs	r5, #1
 80166c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80166c6:	4618      	mov	r0, r3
 80166c8:	f7f6 f903 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
 80166cc:	2d01      	cmp	r5, #1
 80166ce:	d100      	bne.n	80166d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    }
  }
  return kTfLiteOk;
 80166d0:	2400      	movs	r4, #0
 80166d2:	4623      	mov	r3, r4
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	37f8      	adds	r7, #248	; 0xf8
 80166d8:	46bd      	mov	sp, r7
 80166da:	bdb0      	pop	{r4, r5, r7, pc}

080166dc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteDepthwiseConvParams& params,
                             const OpData& data, const TfLiteEvalTensor* input,
                             const TfLiteEvalTensor* filter,
                             const TfLiteEvalTensor* bias,
                             TfLiteEvalTensor* output) {
 80166dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166de:	b0f1      	sub	sp, #452	; 0x1c4
 80166e0:	af08      	add	r7, sp, #32
 80166e2:	f107 0414 	add.w	r4, r7, #20
 80166e6:	6020      	str	r0, [r4, #0]
 80166e8:	f107 0010 	add.w	r0, r7, #16
 80166ec:	6001      	str	r1, [r0, #0]
 80166ee:	f107 010c 	add.w	r1, r7, #12
 80166f2:	600a      	str	r2, [r1, #0]
 80166f4:	f107 0208 	add.w	r2, r7, #8
 80166f8:	6013      	str	r3, [r2, #0]
  cmsis_nn_dw_conv_params dw_conv_params;
  dw_conv_params.dilation.h = params.dilation_height_factor;
 80166fa:	f107 030c 	add.w	r3, r7, #12
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	699b      	ldr	r3, [r3, #24]
 8016702:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dw_conv_params.dilation.w = params.dilation_width_factor;
 8016706:	f107 030c 	add.w	r3, r7, #12
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	695b      	ldr	r3, [r3, #20]
 801670e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  // Call to reference implementation can be removed when dilation is supported
  // in the optimized implementations.
  if (1 == dw_conv_params.dilation.h && 1 == dw_conv_params.dilation.w) {
 8016712:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016716:	2b01      	cmp	r3, #1
 8016718:	f040 8170 	bne.w	80169fc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x320>
 801671c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016720:	2b01      	cmp	r3, #1
 8016722:	f040 816b 	bne.w	80169fc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x320>
    dw_conv_params.input_offset = -data.reference_op_data.input_zero_point;
 8016726:	f107 0308 	add.w	r3, r7, #8
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	691b      	ldr	r3, [r3, #16]
 801672e:	425b      	negs	r3, r3
 8016730:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    dw_conv_params.output_offset = data.reference_op_data.output_zero_point;
 8016734:	f107 0308 	add.w	r3, r7, #8
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	699b      	ldr	r3, [r3, #24]
 801673c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    dw_conv_params.stride.h = params.stride_height;
 8016740:	f107 030c 	add.w	r3, r7, #12
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	689b      	ldr	r3, [r3, #8]
 8016748:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    dw_conv_params.stride.w = params.stride_width;
 801674c:	f107 030c 	add.w	r3, r7, #12
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	685b      	ldr	r3, [r3, #4]
 8016754:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    dw_conv_params.padding.h = data.reference_op_data.padding.height;
 8016758:	f107 0308 	add.w	r3, r7, #8
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	685b      	ldr	r3, [r3, #4]
 8016760:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    dw_conv_params.padding.w = data.reference_op_data.padding.width;
 8016764:	f107 0308 	add.w	r3, r7, #8
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    // TODO(b/130439627): Use calculated value for clamping.
    dw_conv_params.activation.min = std::numeric_limits<int8_t>::min();
 8016770:	f7f5 f8fd 	bl	800b96e <_ZNSt14numeric_limitsIaE3minEv>
 8016774:	4603      	mov	r3, r0
 8016776:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    dw_conv_params.activation.max = std::numeric_limits<int8_t>::max();
 801677a:	f7f5 f901 	bl	800b980 <_ZNSt14numeric_limitsIaE3maxEv>
 801677e:	4603      	mov	r3, r0
 8016780:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    dw_conv_params.ch_mult = params.depth_multiplier;
 8016784:	f107 030c 	add.w	r3, r7, #12
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	68db      	ldr	r3, [r3, #12]
 801678c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier =
        data.reference_op_data.per_channel_output_multiplier;
 8016790:	f107 0308 	add.w	r3, r7, #8
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier =
 8016798:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift = data.reference_op_data.per_channel_output_shift;
 801679c:	f107 0308 	add.w	r3, r7, #8
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80167a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80167ac:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80167b0:	4618      	mov	r0, r3
 80167b2:	f7fb fcf2 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80167b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80167ba:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 80167be:	4618      	mov	r0, r3
 80167c0:	f7fb fceb 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80167c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80167c8:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80167cc:	4618      	mov	r0, r3
 80167ce:	f7fb fce4 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 80167d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80167d6:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80167da:	4618      	mov	r0, r3
 80167dc:	f7fb fcdd 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    TFLITE_DCHECK_LE(dw_conv_params.activation.min,
 80167e0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80167e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80167e8:	429a      	cmp	r2, r3
 80167ea:	dd01      	ble.n	80167f0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x114>
 80167ec:	f00e fb7b 	bl	8024ee6 <abort>
                     dw_conv_params.activation.max);

    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 80167f0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80167f4:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80167f8:	2300      	movs	r3, #0
 80167fa:	2100      	movs	r1, #0
 80167fc:	f7fb f817 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016800:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8016804:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8016808:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 801680c:	2303      	movs	r3, #3
 801680e:	2103      	movs	r1, #3
 8016810:	f7fb f80d 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016814:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198

    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 8016818:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 801681c:	f7fa feef 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016820:	4603      	mov	r3, r0
 8016822:	2b00      	cmp	r3, #0
 8016824:	bf14      	ite	ne
 8016826:	2301      	movne	r3, #1
 8016828:	2300      	moveq	r3, #0
 801682a:	b2db      	uxtb	r3, r3
 801682c:	2b00      	cmp	r3, #0
 801682e:	d00b      	beq.n	8016848 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x16c>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8016830:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016834:	4618      	mov	r0, r3
 8016836:	f7fa ff28 	bl	801168a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801683a:	4602      	mov	r2, r0
 801683c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8016840:	4293      	cmp	r3, r2
 8016842:	d001      	beq.n	8016848 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x16c>
 8016844:	f00e fb4f 	bl	8024ee6 <abort>
    }

    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 8016848:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801684c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8016850:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 8016852:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016856:	2101      	movs	r1, #1
 8016858:	4618      	mov	r0, r3
 801685a:	f7fa fef0 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 801685e:	4602      	mov	r2, r0
 8016860:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016864:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 8016866:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801686a:	2102      	movs	r1, #2
 801686c:	4618      	mov	r0, r3
 801686e:	f7fa fee6 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8016872:	4602      	mov	r2, r0
 8016874:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016878:	609a      	str	r2, [r3, #8]
    input_dims.c = input_shape.Dims(3);
 801687a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801687e:	2103      	movs	r1, #3
 8016880:	4618      	mov	r0, r3
 8016882:	f7fa fedc 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8016886:	4602      	mov	r2, r0
 8016888:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801688c:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(0);
 801688e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016892:	2100      	movs	r1, #0
 8016894:	4618      	mov	r0, r3
 8016896:	f7fa fed2 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 801689a:	4602      	mov	r2, r0
 801689c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80168a0:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 80168a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80168a6:	2101      	movs	r1, #1
 80168a8:	4618      	mov	r0, r3
 80168aa:	f7fa fec8 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 80168ae:	4602      	mov	r2, r0
 80168b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80168b4:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 80168b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80168ba:	2102      	movs	r1, #2
 80168bc:	4618      	mov	r0, r3
 80168be:	f7fa febe 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 80168c2:	4602      	mov	r2, r0
 80168c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80168c8:	609a      	str	r2, [r3, #8]
    filter_dims.c = output_depth;
 80168ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80168ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80168d2:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 80168d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80168d8:	2201      	movs	r2, #1
 80168da:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 80168dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80168e0:	2201      	movs	r2, #1
 80168e2:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 80168e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80168e8:	2201      	movs	r2, #1
 80168ea:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 80168ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80168f0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80168f4:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 80168f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80168fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80168fe:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 8016900:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016904:	2101      	movs	r1, #1
 8016906:	4618      	mov	r0, r3
 8016908:	f7fa fe99 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 801690c:	4602      	mov	r2, r0
 801690e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016912:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 8016914:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016918:	2102      	movs	r1, #2
 801691a:	4618      	mov	r0, r3
 801691c:	f7fa fe8f 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8016920:	4602      	mov	r2, r0
 8016922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016926:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 8016928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801692c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8016930:	60da      	str	r2, [r3, #12]

    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 8016932:	f107 031c 	add.w	r3, r7, #28
 8016936:	2200      	movs	r2, #0
 8016938:	601a      	str	r2, [r3, #0]
    /* 'size' is unused */
    ctx.size = 0;
 801693a:	f107 031c 	add.w	r3, r7, #28
 801693e:	2200      	movs	r2, #0
 8016940:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 8016942:	f107 0308 	add.w	r3, r7, #8
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801694a:	2b00      	cmp	r3, #0
 801694c:	db0f      	blt.n	801696e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x292>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801694e:	f107 0314 	add.w	r3, r7, #20
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016956:	f107 0208 	add.w	r2, r7, #8
 801695a:	6812      	ldr	r2, [r2, #0]
 801695c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801695e:	f107 0214 	add.w	r2, r7, #20
 8016962:	6810      	ldr	r0, [r2, #0]
 8016964:	4798      	blx	r3
 8016966:	4602      	mov	r2, r0
 8016968:	f107 031c 	add.w	r3, r7, #28
 801696c:	601a      	str	r2, [r3, #0]
    }

    TFLITE_DCHECK_EQ(
 801696e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8016972:	f7fa fe44 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016976:	4605      	mov	r5, r0
 8016978:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801697c:	f7fa fe3f 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016980:	4606      	mov	r6, r0
 8016982:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8016986:	f7fa febd 	bl	8011704 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801698a:	6078      	str	r0, [r7, #4]
 801698c:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8016990:	f7fa fe44 	bl	801161c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8016994:	4603      	mov	r3, r0
 8016996:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801699a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801699e:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80169a2:	f107 001c 	add.w	r0, r7, #28
 80169a6:	9306      	str	r3, [sp, #24]
 80169a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80169ac:	9305      	str	r3, [sp, #20]
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	9304      	str	r3, [sp, #16]
 80169b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80169b6:	9303      	str	r3, [sp, #12]
 80169b8:	9602      	str	r6, [sp, #8]
 80169ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80169be:	9301      	str	r3, [sp, #4]
 80169c0:	9500      	str	r5, [sp, #0]
 80169c2:	4623      	mov	r3, r4
 80169c4:	f005 fc6f 	bl	801c2a6 <arm_depthwise_conv_wrapper_s8>
 80169c8:	4603      	mov	r3, r0
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d001      	beq.n	80169d2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x2f6>
 80169ce:	f00e fa8a 	bl	8024ee6 <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 80169d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80169d6:	4618      	mov	r0, r3
 80169d8:	f7f5 ff7b 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80169dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80169e0:	4618      	mov	r0, r3
 80169e2:	f7f5 ff76 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80169e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80169ea:	4618      	mov	r0, r3
 80169ec:	f7f5 ff71 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80169f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80169f4:	4618      	mov	r0, r3
 80169f6:	f7f5 ff6c 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &dw_conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 80169fa:	e06e      	b.n	8016ada <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x3fe>
  } else {
    reference_integer_ops::DepthwiseConvPerChannel(
        DepthwiseConvParamsQuantized(params, data.reference_op_data),
 80169fc:	f107 0308 	add.w	r3, r7, #8
 8016a00:	681a      	ldr	r2, [r3, #0]
 8016a02:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8016a06:	f107 030c 	add.w	r3, r7, #12
 8016a0a:	6819      	ldr	r1, [r3, #0]
 8016a0c:	f7fb fa37 	bl	8011e7e <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 8016a10:	f107 0308 	add.w	r3, r7, #8
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 8016a18:	f107 0308 	add.w	r3, r7, #8
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 8016a20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016a24:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8016a28:	4618      	mov	r0, r3
 8016a2a:	f7fb fbb6 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 8016a2e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8016a32:	f7fa fde4 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016a36:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 8016a38:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016a3c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7fb fbaa 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 8016a46:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8016a4a:	f7fa fdd8 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016a4e:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 8016a50:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8016a54:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7fb fb9e 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 8016a5e:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8016a62:	f7fa fe4f 	bl	8011704 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8016a66:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 8016a68:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016a6c:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8016a70:	4618      	mov	r0, r3
 8016a72:	f7fb fb92 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 8016a76:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8016a7a:	f7fa fdcf 	bl	801161c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8016a84:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8016a88:	9306      	str	r3, [sp, #24]
 8016a8a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016a8e:	9305      	str	r3, [sp, #20]
 8016a90:	683b      	ldr	r3, [r7, #0]
 8016a92:	9304      	str	r3, [sp, #16]
 8016a94:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8016a98:	9303      	str	r3, [sp, #12]
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	9302      	str	r3, [sp, #8]
 8016a9e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016aa2:	9301      	str	r3, [sp, #4]
 8016aa4:	9600      	str	r6, [sp, #0]
 8016aa6:	4613      	mov	r3, r2
 8016aa8:	462a      	mov	r2, r5
 8016aaa:	4621      	mov	r1, r4
 8016aac:	f7ff f9dc 	bl	8015e68 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 8016ab0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	f7f5 ff0c 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 8016aba:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8016abe:	4618      	mov	r0, r3
 8016ac0:	f7f5 ff07 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 8016ac4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f7f5 ff02 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 8016ace:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7f5 fefd 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
}
 8016ad8:	bf00      	nop
 8016ada:	bf00      	nop
 8016adc:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ae4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8016ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ae6:	b0b7      	sub	sp, #220	; 0xdc
 8016ae8:	af06      	add	r7, sp, #24
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8016aee:	683b      	ldr	r3, [r7, #0]
 8016af0:	691b      	ldr	r3, [r3, #16]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d101      	bne.n	8016afa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8016af6:	f00e f9f6 	bl	8024ee6 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8016afa:	683b      	ldr	r3, [r7, #0]
 8016afc:	695b      	ldr	r3, [r3, #20]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d101      	bne.n	8016b06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22>
 8016b02:	f00e f9f0 	bl	8024ee6 <abort>

  const auto& params =
 8016b06:	683b      	ldr	r3, [r7, #0]
 8016b08:	695b      	ldr	r3, [r3, #20]
 8016b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));
  const OpData& data = *(static_cast<OpData*>(node->user_data));
 8016b0e:	683b      	ldr	r3, [r7, #0]
 8016b10:	691b      	ldr	r3, [r3, #16]
 8016b12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
 8016b16:	4b60      	ldr	r3, [pc, #384]	; (8016c98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b4>)
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	461a      	mov	r2, r3
 8016b1c:	6839      	ldr	r1, [r7, #0]
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	f7fa fd2d 	bl	801157e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8016b24:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
 8016b28:	4b5c      	ldr	r3, [pc, #368]	; (8016c9c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b8>)
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	461a      	mov	r2, r3
 8016b2e:	6839      	ldr	r1, [r7, #0]
 8016b30:	6878      	ldr	r0, [r7, #4]
 8016b32:	f7fa fd14 	bl	801155e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8016b36:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
 8016b3a:	4b59      	ldr	r3, [pc, #356]	; (8016ca0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1bc>)
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	461a      	mov	r2, r3
 8016b40:	6839      	ldr	r1, [r7, #0]
 8016b42:	6878      	ldr	r0, [r7, #4]
 8016b44:	f7fa fd0b 	bl	801155e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8016b48:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 8016b4c:	6838      	ldr	r0, [r7, #0]
 8016b4e:	f7fa fdbf 	bl	80116d0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8016b52:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
 8016b54:	2b03      	cmp	r3, #3
 8016b56:	d108      	bne.n	8016b6a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 8016b58:	4b52      	ldr	r3, [pc, #328]	; (8016ca4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>)
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	461a      	mov	r2, r3
 8016b5e:	6839      	ldr	r1, [r7, #0]
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f7fa fcfc 	bl	801155e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8016b66:	4603      	mov	r3, r0
 8016b68:	e000      	b.n	8016b6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>
 8016b6a:	2300      	movs	r3, #0
          : nullptr;
 8016b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  switch (input->type) {  // Already know in/out types are same.
 8016b70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016b74:	7a1b      	ldrb	r3, [r3, #8]
 8016b76:	2b01      	cmp	r3, #1
 8016b78:	d002      	beq.n	8016b80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
 8016b7a:	2b09      	cmp	r3, #9
 8016b7c:	d061      	beq.n	8016c42 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
 8016b7e:	e075      	b.n	8016c6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x188>
    case kTfLiteFloat32: {
      tflite::reference_ops::DepthwiseConv(
          DepthwiseConvParamsFloat(params, data.reference_op_data),
 8016b80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016b84:	f107 0308 	add.w	r3, r7, #8
 8016b88:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f7fb f935 	bl	8011dfc <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 8016b92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016b96:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	f7fb fafd 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 8016ba0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8016ba4:	f7fa fd0b 	bl	80115be <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8016ba8:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8016baa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016bae:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f7fb faf1 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 8016bb8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016bbc:	f7fa fcff 	bl	80115be <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8016bc0:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 8016bc2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016bc6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f7fb fae5 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 8016bd0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8016bd4:	f7fa fcf3 	bl	80115be <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8016bd8:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 8016bda:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016bde:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8016be2:	4618      	mov	r0, r3
 8016be4:	f7fb fad9 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 8016be8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8016bec:	f7fa fcf6 	bl	80115dc <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8016bf6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8016bfa:	f107 0008 	add.w	r0, r7, #8
 8016bfe:	9304      	str	r3, [sp, #16]
 8016c00:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016c04:	9303      	str	r3, [sp, #12]
 8016c06:	9502      	str	r5, [sp, #8]
 8016c08:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016c0c:	9301      	str	r3, [sp, #4]
 8016c0e:	9400      	str	r4, [sp, #0]
 8016c10:	4613      	mov	r3, r2
 8016c12:	4632      	mov	r2, r6
 8016c14:	f7fe ffa2 	bl	8015b5c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 8016c18:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7f5 fe58 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8016c22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016c26:	4618      	mov	r0, r3
 8016c28:	f7f5 fe53 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8016c2c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016c30:	4618      	mov	r0, r3
 8016c32:	f7f5 fe4e 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8016c36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f7f5 fe49 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 8016c40:	e025      	b.n	8016c8e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
    }
    case kTfLiteInt8:
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 8016c42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016c46:	9303      	str	r3, [sp, #12]
 8016c48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016c4c:	9302      	str	r3, [sp, #8]
 8016c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016c52:	9301      	str	r3, [sp, #4]
 8016c54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016c58:	9300      	str	r3, [sp, #0]
 8016c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016c5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8016c62:	6839      	ldr	r1, [r7, #0]
 8016c64:	6878      	ldr	r0, [r7, #4]
 8016c66:	f7ff fd39 	bl	80166dc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>
                              output);
      break;
 8016c6a:	e010      	b.n	8016c8e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	695c      	ldr	r4, [r3, #20]
 8016c70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016c74:	7a1b      	ldrb	r3, [r3, #8]
 8016c76:	4618      	mov	r0, r3
 8016c78:	f7f1 fdc8 	bl	800880c <TfLiteTypeGetName>
 8016c7c:	4602      	mov	r2, r0
 8016c7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016c82:	7a1b      	ldrb	r3, [r3, #8]
 8016c84:	4908      	ldr	r1, [pc, #32]	; (8016ca8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
 8016c86:	6878      	ldr	r0, [r7, #4]
 8016c88:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8016c8a:	2301      	movs	r3, #1
 8016c8c:	e000      	b.n	8016c90 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
  }
  return kTfLiteOk;
 8016c8e:	2300      	movs	r3, #0
}
 8016c90:	4618      	mov	r0, r3
 8016c92:	37c4      	adds	r7, #196	; 0xc4
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c98:	08031040 	.word	0x08031040
 8016c9c:	08031034 	.word	0x08031034
 8016ca0:	08031038 	.word	0x08031038
 8016ca4:	0803103c 	.word	0x0803103c
 8016ca8:	0802bb48 	.word	0x0802bb48

08016cac <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
 8016cac:	b4b0      	push	{r4, r5, r7}
 8016cae:	b083      	sub	sp, #12
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	4a07      	ldr	r2, [pc, #28]	; (8016cd4 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x28>)
 8016cb8:	461c      	mov	r4, r3
 8016cba:	4615      	mov	r5, r2
 8016cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016cc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8016cc8:	6878      	ldr	r0, [r7, #4]
 8016cca:	370c      	adds	r7, #12
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bcb0      	pop	{r4, r5, r7}
 8016cd0:	4770      	bx	lr
 8016cd2:	bf00      	nop
 8016cd4:	0802bb64 	.word	0x0802bb64

08016cd8 <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_>:
};

void AverageEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
                          const TfLitePoolParams* params, const OpData& data,
                          const TfLiteEvalTensor* input,
                          TfLiteEvalTensor* output) {
 8016cd8:	b590      	push	{r4, r7, lr}
 8016cda:	b0ab      	sub	sp, #172	; 0xac
 8016cdc:	af04      	add	r7, sp, #16
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
 8016ce4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteInt8);
 8016ce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016cea:	7a1b      	ldrb	r3, [r3, #8]
 8016cec:	2b09      	cmp	r3, #9
 8016cee:	d001      	beq.n	8016cf4 <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x1c>
 8016cf0:	f00e f8f9 	bl	8024ee6 <abort>

  RuntimeShape input_shape = micro::GetTensorShape(input);
 8016cf4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016cf8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f7fb fa4c 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8016d02:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016d06:	4618      	mov	r0, r3
 8016d08:	f7f5 fdee 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	2b04      	cmp	r3, #4
 8016d10:	d001      	beq.n	8016d16 <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x3e>
 8016d12:	f00e f8e8 	bl	8024ee6 <abort>

  RuntimeShape output_shape = micro::GetTensorShape(output);
 8016d16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016d1a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f7fb fa3b 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8016d24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f7f5 fddd 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	2b04      	cmp	r3, #4
 8016d32:	d001      	beq.n	8016d38 <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x60>
 8016d34:	f00e f8d7 	bl	8024ee6 <abort>

  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8016d38:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8016d3c:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8016d40:	2303      	movs	r3, #3
 8016d42:	2103      	movs	r1, #3
 8016d44:	f7fa fd73 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016d48:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 8016d4c:	2301      	movs	r3, #1
 8016d4e:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 8016d50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016d54:	2101      	movs	r1, #1
 8016d56:	4618      	mov	r0, r3
 8016d58:	f7fa fc71 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 8016d60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016d64:	2102      	movs	r1, #2
 8016d66:	4618      	mov	r0, r3
 8016d68:	f7fa fc69 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 8016d70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016d74:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 8016d76:	2301      	movs	r3, #1
 8016d78:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 8016d7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016d7e:	2101      	movs	r1, #1
 8016d80:	4618      	mov	r0, r3
 8016d82:	f7fa fc5c 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8016d86:	4603      	mov	r3, r0
 8016d88:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 8016d8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016d8e:	2102      	movs	r1, #2
 8016d90:	4618      	mov	r0, r3
 8016d92:	f7fa fc54 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8016d96:	4603      	mov	r3, r0
 8016d98:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 8016d9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016d9e:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	689b      	ldr	r3, [r3, #8]
 8016da4:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	685b      	ldr	r3, [r3, #4]
 8016daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.reference_op_data.padding.height;
 8016dac:	683b      	ldr	r3, [r7, #0]
 8016dae:	685b      	ldr	r3, [r3, #4]
 8016db0:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.reference_op_data.padding.width;
 8016db2:	683b      	ldr	r3, [r7, #0]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.reference_op_data.activation_min;
 8016db8:	683b      	ldr	r3, [r7, #0]
 8016dba:	691b      	ldr	r3, [r3, #16]
 8016dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.reference_op_data.activation_max;
 8016dbe:	683b      	ldr	r3, [r7, #0]
 8016dc0:	695b      	ldr	r3, [r3, #20]
 8016dc2:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 8016dc4:	2301      	movs	r3, #1
 8016dc6:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	691b      	ldr	r3, [r3, #16]
 8016dcc:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	68db      	ldr	r3, [r3, #12]
 8016dd2:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 8016de0:	683b      	ldr	r3, [r7, #0]
 8016de2:	6a1b      	ldr	r3, [r3, #32]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	db08      	blt.n	8016dfa <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x122>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016dec:	683a      	ldr	r2, [r7, #0]
 8016dee:	6a12      	ldr	r2, [r2, #32]
 8016df0:	4611      	mov	r1, r2
 8016df2:	68f8      	ldr	r0, [r7, #12]
 8016df4:	4798      	blx	r3
 8016df6:	4603      	mov	r3, r0
 8016df8:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(
 8016dfa:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8016dfe:	f7fa fbfe 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016e02:	4604      	mov	r4, r0
 8016e04:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016e08:	f7fa fc08 	bl	801161c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8016e0c:	4603      	mov	r3, r0
 8016e0e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8016e12:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8016e16:	f107 0014 	add.w	r0, r7, #20
 8016e1a:	9302      	str	r3, [sp, #8]
 8016e1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016e20:	9301      	str	r3, [sp, #4]
 8016e22:	f107 031c 	add.w	r3, r7, #28
 8016e26:	9300      	str	r3, [sp, #0]
 8016e28:	4623      	mov	r3, r4
 8016e2a:	f00a fa1f 	bl	802126c <arm_avgpool_s8>
 8016e2e:	4603      	mov	r3, r0
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d001      	beq.n	8016e38 <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x160>
 8016e34:	f00e f857 	bl	8024ee6 <abort>
  RuntimeShape output_shape = micro::GetTensorShape(output);
 8016e38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	f7f5 fd48 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = micro::GetTensorShape(input);
 8016e42:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016e46:	4618      	mov	r0, r3
 8016e48:	f7f5 fd43 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
      arm_avgpool_s8(&ctx, &pool_params, &input_dims,
                     micro::GetTensorData<int8_t>(input), &filter_dims,
                     &output_dims, micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);
}
 8016e4c:	bf00      	nop
 8016e4e:	379c      	adds	r7, #156	; 0x9c
 8016e50:	46bd      	mov	sp, r7
 8016e52:	bd90      	pop	{r4, r7, pc}

08016e54 <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_>:

TfLiteStatus MaxEvalInt8(TfLiteContext* context, const TfLiteNode* node,
                         const TfLitePoolParams* params, const OpData& data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
 8016e54:	b590      	push	{r4, r7, lr}
 8016e56:	b0ab      	sub	sp, #172	; 0xac
 8016e58:	af04      	add	r7, sp, #16
 8016e5a:	60f8      	str	r0, [r7, #12]
 8016e5c:	60b9      	str	r1, [r7, #8]
 8016e5e:	607a      	str	r2, [r7, #4]
 8016e60:	603b      	str	r3, [r7, #0]
  RuntimeShape input_shape = micro::GetTensorShape(input);
 8016e62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016e66:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	f7fb f995 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = micro::GetTensorShape(output);
 8016e70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016e74:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f7fb f98e 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8016e7e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8016e82:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8016e86:	2303      	movs	r3, #3
 8016e88:	2103      	movs	r1, #3
 8016e8a:	f7fa fcd0 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016e8e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 8016e92:	2301      	movs	r3, #1
 8016e94:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 8016e96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016e9a:	2101      	movs	r1, #1
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	f7fa fbce 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 8016ea6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016eaa:	2102      	movs	r1, #2
 8016eac:	4618      	mov	r0, r3
 8016eae:	f7fa fbc6 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 8016eb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016eba:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 8016ebc:	2301      	movs	r3, #1
 8016ebe:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 8016ec0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016ec4:	2101      	movs	r1, #1
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	f7fa fbb9 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 8016ed0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016ed4:	2102      	movs	r1, #2
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7fa fbb1 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 8016edc:	4603      	mov	r3, r0
 8016ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 8016ee0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016ee4:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	689b      	ldr	r3, [r3, #8]
 8016eea:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	685b      	ldr	r3, [r3, #4]
 8016ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.reference_op_data.padding.height;
 8016ef2:	683b      	ldr	r3, [r7, #0]
 8016ef4:	685b      	ldr	r3, [r3, #4]
 8016ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.reference_op_data.padding.width;
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.reference_op_data.activation_min;
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	691b      	ldr	r3, [r3, #16]
 8016f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.reference_op_data.activation_max;
 8016f04:	683b      	ldr	r3, [r7, #0]
 8016f06:	695b      	ldr	r3, [r3, #20]
 8016f08:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 8016f0a:	2301      	movs	r3, #1
 8016f0c:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	691b      	ldr	r3, [r3, #16]
 8016f12:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	68db      	ldr	r3, [r3, #12]
 8016f18:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 8016f1a:	2301      	movs	r3, #1
 8016f1c:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8016f1e:	2300      	movs	r3, #0
 8016f20:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 8016f22:	2300      	movs	r3, #0
 8016f24:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 8016f26:	683b      	ldr	r3, [r7, #0]
 8016f28:	6a1b      	ldr	r3, [r3, #32]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	db08      	blt.n	8016f40 <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0xec>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f32:	683a      	ldr	r2, [r7, #0]
 8016f34:	6a12      	ldr	r2, [r2, #32]
 8016f36:	4611      	mov	r1, r2
 8016f38:	68f8      	ldr	r0, [r7, #12]
 8016f3a:	4798      	blx	r3
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(
 8016f40:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8016f44:	f7fa fb5b 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016f48:	4604      	mov	r4, r0
 8016f4a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016f4e:	f7fa fb65 	bl	801161c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8016f52:	4603      	mov	r3, r0
 8016f54:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8016f58:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8016f5c:	f107 0014 	add.w	r0, r7, #20
 8016f60:	9302      	str	r3, [sp, #8]
 8016f62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016f66:	9301      	str	r3, [sp, #4]
 8016f68:	f107 031c 	add.w	r3, r7, #28
 8016f6c:	9300      	str	r3, [sp, #0]
 8016f6e:	4623      	mov	r3, r4
 8016f70:	f00a fbb5 	bl	80216de <arm_max_pool_s8>
 8016f74:	4603      	mov	r3, r0
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d001      	beq.n	8016f7e <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x12a>
 8016f7a:	f00d ffb4 	bl	8024ee6 <abort>
      arm_max_pool_s8(&ctx, &pool_params, &input_dims,
                      micro::GetTensorData<int8_t>(input), &filter_dims,
                      &output_dims, micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 8016f7e:	2400      	movs	r4, #0
  RuntimeShape output_shape = micro::GetTensorShape(output);
 8016f80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016f84:	4618      	mov	r0, r3
 8016f86:	f7f5 fca4 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = micro::GetTensorShape(input);
 8016f8a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f7f5 fc9f 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 8016f94:	4623      	mov	r3, r4
}
 8016f96:	4618      	mov	r0, r3
 8016f98:	379c      	adds	r7, #156	; 0x9c
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bd90      	pop	{r4, r7, pc}

08016f9e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8016f9e:	b580      	push	{r7, lr}
 8016fa0:	b084      	sub	sp, #16
 8016fa2:	af00      	add	r7, sp, #0
 8016fa4:	60f8      	str	r0, [r7, #12]
 8016fa6:	60b9      	str	r1, [r7, #8]
 8016fa8:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d101      	bne.n	8016fb6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8016fb2:	f00d ff98 	bl	8024ee6 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fba:	2124      	movs	r1, #36	; 0x24
 8016fbc:	68f8      	ldr	r0, [r7, #12]
 8016fbe:	4798      	blx	r3
 8016fc0:	4603      	mov	r3, r0
}
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	3710      	adds	r7, #16
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	bd80      	pop	{r7, pc}

08016fca <_ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8016fca:	b580      	push	{r7, lr}
 8016fcc:	b084      	sub	sp, #16
 8016fce:	af00      	add	r7, sp, #0
 8016fd0:	6078      	str	r0, [r7, #4]
 8016fd2:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_STATUS(PoolingPrepare(context, node));
 8016fd4:	6839      	ldr	r1, [r7, #0]
 8016fd6:	6878      	ldr	r0, [r7, #4]
 8016fd8:	f7fc fb12 	bl	8013600 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	73fb      	strb	r3, [r7, #15]
 8016fe0:	7bfb      	ldrb	r3, [r7, #15]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d001      	beq.n	8016fea <_ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
 8016fe6:	7bfb      	ldrb	r3, [r7, #15]
 8016fe8:	e005      	b.n	8016ff6 <_ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c>
  // Set buffer index to a reset value
  static_cast<OpData*>(node->user_data)->buffer_idx = -1;
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	691b      	ldr	r3, [r3, #16]
 8016fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016ff2:	621a      	str	r2, [r3, #32]
  return kTfLiteOk;
 8016ff4:	2300      	movs	r3, #0
}
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	3710      	adds	r7, #16
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	bd80      	pop	{r7, pc}
	...

08017000 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 8017000:	b5b0      	push	{r4, r5, r7, lr}
 8017002:	b096      	sub	sp, #88	; 0x58
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]
 8017008:	6039      	str	r1, [r7, #0]
 801700a:	2400      	movs	r4, #0
  TF_LITE_ENSURE_STATUS(PoolingPrepare(context, node));
 801700c:	6839      	ldr	r1, [r7, #0]
 801700e:	6878      	ldr	r0, [r7, #4]
 8017010:	f7fc faf6 	bl	8013600 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>
 8017014:	4603      	mov	r3, r0
 8017016:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801701a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801701e:	2b00      	cmp	r3, #0
 8017020:	d002      	beq.n	8017028 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8017022:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8017026:	e077      	b.n	8017118 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x118>

  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
 8017028:	4b3e      	ldr	r3, [pc, #248]	; (8017124 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x124>)
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	461a      	mov	r2, r3
 801702e:	6839      	ldr	r1, [r7, #0]
 8017030:	6878      	ldr	r0, [r7, #4]
 8017032:	f7f4 fd4b 	bl	800bacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8017036:	6538      	str	r0, [r7, #80]	; 0x50
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
 8017038:	4b3b      	ldr	r3, [pc, #236]	; (8017128 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x128>)
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	461a      	mov	r2, r3
 801703e:	6839      	ldr	r1, [r7, #0]
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f7f4 fd53 	bl	800baec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8017046:	64f8      	str	r0, [r7, #76]	; 0x4c

  if (input->type == kTfLiteInt8) {
 8017048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801704a:	781b      	ldrb	r3, [r3, #0]
 801704c:	2b09      	cmp	r3, #9
 801704e:	d162      	bne.n	8017116 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x116>
    RuntimeShape input_shape = GetTensorShape(input);
 8017050:	f107 0320 	add.w	r3, r7, #32
 8017054:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017056:	4618      	mov	r0, r3
 8017058:	f7f5 fc76 	bl	800c948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801705c:	f107 0320 	add.w	r3, r7, #32
 8017060:	4618      	mov	r0, r3
 8017062:	f7f5 fc41 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017066:	4603      	mov	r3, r0
 8017068:	2b04      	cmp	r3, #4
 801706a:	d001      	beq.n	8017070 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x70>
 801706c:	f00d ff3b 	bl	8024ee6 <abort>

    RuntimeShape output_shape = GetTensorShape(output);
 8017070:	f107 0308 	add.w	r3, r7, #8
 8017074:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8017076:	4618      	mov	r0, r3
 8017078:	f7f5 fc66 	bl	800c948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801707c:	f107 0308 	add.w	r3, r7, #8
 8017080:	4618      	mov	r0, r3
 8017082:	f7f5 fc31 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017086:	4603      	mov	r3, r0
 8017088:	2b04      	cmp	r3, #4
 801708a:	d001      	beq.n	8017090 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x90>
 801708c:	f00d ff2b 	bl	8024ee6 <abort>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8017090:	f107 0208 	add.w	r2, r7, #8
 8017094:	f107 0020 	add.w	r0, r7, #32
 8017098:	2303      	movs	r3, #3
 801709a:	2103      	movs	r1, #3
 801709c:	f7fa fbc7 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80170a0:	64b8      	str	r0, [r7, #72]	; 0x48
    const int output_width = output_shape.Dims(2);
 80170a2:	f107 0308 	add.w	r3, r7, #8
 80170a6:	2102      	movs	r1, #2
 80170a8:	4618      	mov	r0, r3
 80170aa:	f7fa fac8 	bl	801163e <_ZNK6tflite12RuntimeShape4DimsEi>
 80170ae:	6478      	str	r0, [r7, #68]	; 0x44

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 80170b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80170b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80170b4:	f00a f9ea 	bl	802148c <arm_avgpool_s8_get_buffer_size>
 80170b8:	6438      	str	r0, [r7, #64]	; 0x40

    auto* data = static_cast<OpData*>(node->user_data);
 80170ba:	683b      	ldr	r3, [r7, #0]
 80170bc:	691b      	ldr	r3, [r3, #16]
 80170be:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (buffer_size > 0) {
 80170c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	dd11      	ble.n	80170ea <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0xea>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80170cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80170ce:	3220      	adds	r2, #32
 80170d0:	6878      	ldr	r0, [r7, #4]
 80170d2:	4798      	blx	r3
 80170d4:	4603      	mov	r3, r0
 80170d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80170da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d007      	beq.n	80170f2 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0xf2>
 80170e2:	f897 403b 	ldrb.w	r4, [r7, #59]	; 0x3b
 80170e6:	2500      	movs	r5, #0
 80170e8:	e004      	b.n	80170f4 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0xf4>
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 80170ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80170f0:	621a      	str	r2, [r3, #32]
    RuntimeShape output_shape = GetTensorShape(output);
 80170f2:	2501      	movs	r5, #1
 80170f4:	f107 0308 	add.w	r3, r7, #8
 80170f8:	4618      	mov	r0, r3
 80170fa:	f7f5 fbea 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
 80170fe:	2d01      	cmp	r5, #1
 8017100:	d001      	beq.n	8017106 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x106>
 8017102:	2500      	movs	r5, #0
 8017104:	e000      	b.n	8017108 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x108>
    RuntimeShape input_shape = GetTensorShape(input);
 8017106:	2501      	movs	r5, #1
 8017108:	f107 0320 	add.w	r3, r7, #32
 801710c:	4618      	mov	r0, r3
 801710e:	f7f5 fbe0 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
 8017112:	2d01      	cmp	r5, #1
 8017114:	d100      	bne.n	8017118 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x118>
    }
  }
  return kTfLiteOk;
 8017116:	2400      	movs	r4, #0
 8017118:	4623      	mov	r3, r4
}
 801711a:	4618      	mov	r0, r3
 801711c:	3758      	adds	r7, #88	; 0x58
 801711e:	46bd      	mov	sp, r7
 8017120:	bdb0      	pop	{r4, r5, r7, pc}
 8017122:	bf00      	nop
 8017124:	08031048 	.word	0x08031048
 8017128:	0803104c 	.word	0x0803104c

0801712c <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 801712c:	b590      	push	{r4, r7, lr}
 801712e:	b089      	sub	sp, #36	; 0x24
 8017130:	af02      	add	r7, sp, #8
 8017132:	6078      	str	r0, [r7, #4]
 8017134:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	695b      	ldr	r3, [r3, #20]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d101      	bne.n	8017142 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801713e:	f00d fed2 	bl	8024ee6 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	695b      	ldr	r3, [r3, #20]
 8017146:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	691b      	ldr	r3, [r3, #16]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d101      	bne.n	8017154 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x28>
 8017150:	f00d fec9 	bl	8024ee6 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	691b      	ldr	r3, [r3, #16]
 8017158:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
 801715a:	4b20      	ldr	r3, [pc, #128]	; (80171dc <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	461a      	mov	r2, r3
 8017160:	6839      	ldr	r1, [r7, #0]
 8017162:	6878      	ldr	r0, [r7, #4]
 8017164:	f7fa f9fb 	bl	801155e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017168:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
 801716a:	4b1d      	ldr	r3, [pc, #116]	; (80171e0 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xb4>)
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	461a      	mov	r2, r3
 8017170:	6839      	ldr	r1, [r7, #0]
 8017172:	6878      	ldr	r0, [r7, #4]
 8017174:	f7fa fa03 	bl	801157e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8017178:	60b8      	str	r0, [r7, #8]

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	7a1b      	ldrb	r3, [r3, #8]
 801717e:	2b01      	cmp	r3, #1
 8017180:	d002      	beq.n	8017188 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 8017182:	2b09      	cmp	r3, #9
 8017184:	d00c      	beq.n	80171a0 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x74>
 8017186:	e016      	b.n	80171b6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8a>
    case kTfLiteFloat32:
      AveragePoolingEvalFloat(context, node, params, &data.reference_op_data,
 8017188:	693a      	ldr	r2, [r7, #16]
 801718a:	68bb      	ldr	r3, [r7, #8]
 801718c:	9301      	str	r3, [sp, #4]
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	9300      	str	r3, [sp, #0]
 8017192:	4613      	mov	r3, r2
 8017194:	697a      	ldr	r2, [r7, #20]
 8017196:	6839      	ldr	r1, [r7, #0]
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f7fc faad 	bl	80136f8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
                              input, output);
      break;
 801719e:	e018      	b.n	80171d2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa6>
    case kTfLiteInt8:
      AverageEvalQuantized(context, node, params, data, input, output);
 80171a0:	68bb      	ldr	r3, [r7, #8]
 80171a2:	9301      	str	r3, [sp, #4]
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	9300      	str	r3, [sp, #0]
 80171a8:	693b      	ldr	r3, [r7, #16]
 80171aa:	697a      	ldr	r2, [r7, #20]
 80171ac:	6839      	ldr	r1, [r7, #0]
 80171ae:	6878      	ldr	r0, [r7, #4]
 80171b0:	f7ff fd92 	bl	8016cd8 <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_>
      break;
 80171b4:	e00d      	b.n	80171d2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa6>
    default:
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	695c      	ldr	r4, [r3, #20]
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	7a1b      	ldrb	r3, [r3, #8]
 80171be:	4618      	mov	r0, r3
 80171c0:	f7f1 fb24 	bl	800880c <TfLiteTypeGetName>
 80171c4:	4603      	mov	r3, r0
 80171c6:	461a      	mov	r2, r3
 80171c8:	4906      	ldr	r1, [pc, #24]	; (80171e4 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xb8>)
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80171ce:	2301      	movs	r3, #1
 80171d0:	e000      	b.n	80171d4 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa8>
  }
  return kTfLiteOk;
 80171d2:	2300      	movs	r3, #0
}
 80171d4:	4618      	mov	r0, r3
 80171d6:	371c      	adds	r7, #28
 80171d8:	46bd      	mov	sp, r7
 80171da:	bd90      	pop	{r4, r7, pc}
 80171dc:	08031048 	.word	0x08031048
 80171e0:	0803104c 	.word	0x0803104c
 80171e4:	0802bc74 	.word	0x0802bc74

080171e8 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 80171e8:	b590      	push	{r4, r7, lr}
 80171ea:	b089      	sub	sp, #36	; 0x24
 80171ec:	af02      	add	r7, sp, #8
 80171ee:	6078      	str	r0, [r7, #4]
 80171f0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	695b      	ldr	r3, [r3, #20]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d101      	bne.n	80171fe <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x16>
 80171fa:	f00d fe74 	bl	8024ee6 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 80171fe:	683b      	ldr	r3, [r7, #0]
 8017200:	695b      	ldr	r3, [r3, #20]
 8017202:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 8017204:	683b      	ldr	r3, [r7, #0]
 8017206:	691b      	ldr	r3, [r3, #16]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d101      	bne.n	8017210 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x28>
 801720c:	f00d fe6b 	bl	8024ee6 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8017210:	683b      	ldr	r3, [r7, #0]
 8017212:	691b      	ldr	r3, [r3, #16]
 8017214:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
 8017216:	4b20      	ldr	r3, [pc, #128]	; (8017298 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	461a      	mov	r2, r3
 801721c:	6839      	ldr	r1, [r7, #0]
 801721e:	6878      	ldr	r0, [r7, #4]
 8017220:	f7fa f99d 	bl	801155e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017224:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
 8017226:	4b1d      	ldr	r3, [pc, #116]	; (801729c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xb4>)
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	461a      	mov	r2, r3
 801722c:	6839      	ldr	r1, [r7, #0]
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f7fa f9a5 	bl	801157e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8017234:	60b8      	str	r0, [r7, #8]

  switch (input->type) {
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	7a1b      	ldrb	r3, [r3, #8]
 801723a:	2b01      	cmp	r3, #1
 801723c:	d002      	beq.n	8017244 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 801723e:	2b09      	cmp	r3, #9
 8017240:	d00c      	beq.n	801725c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
 8017242:	e016      	b.n	8017272 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8a>
    case kTfLiteFloat32:
      MaxPoolingEvalFloat(context, node, params, &data.reference_op_data, input,
 8017244:	693a      	ldr	r2, [r7, #16]
 8017246:	68bb      	ldr	r3, [r7, #8]
 8017248:	9301      	str	r3, [sp, #4]
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	9300      	str	r3, [sp, #0]
 801724e:	4613      	mov	r3, r2
 8017250:	697a      	ldr	r2, [r7, #20]
 8017252:	6839      	ldr	r1, [r7, #0]
 8017254:	6878      	ldr	r0, [r7, #4]
 8017256:	f7fc faa0 	bl	801379a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
                          output);
      break;
 801725a:	e018      	b.n	801728e <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa6>
    case kTfLiteInt8:
      MaxEvalInt8(context, node, params, data, input, output);
 801725c:	68bb      	ldr	r3, [r7, #8]
 801725e:	9301      	str	r3, [sp, #4]
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	9300      	str	r3, [sp, #0]
 8017264:	693b      	ldr	r3, [r7, #16]
 8017266:	697a      	ldr	r2, [r7, #20]
 8017268:	6839      	ldr	r1, [r7, #0]
 801726a:	6878      	ldr	r0, [r7, #4]
 801726c:	f7ff fdf2 	bl	8016e54 <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_>
      break;
 8017270:	e00d      	b.n	801728e <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa6>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	695c      	ldr	r4, [r3, #20]
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	7a1b      	ldrb	r3, [r3, #8]
 801727a:	4618      	mov	r0, r3
 801727c:	f7f1 fac6 	bl	800880c <TfLiteTypeGetName>
 8017280:	4603      	mov	r3, r0
 8017282:	461a      	mov	r2, r3
 8017284:	4906      	ldr	r1, [pc, #24]	; (80172a0 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>)
 8017286:	6878      	ldr	r0, [r7, #4]
 8017288:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801728a:	2301      	movs	r3, #1
 801728c:	e000      	b.n	8017290 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
  }
  return kTfLiteOk;
 801728e:	2300      	movs	r3, #0
}
 8017290:	4618      	mov	r0, r3
 8017292:	371c      	adds	r7, #28
 8017294:	46bd      	mov	sp, r7
 8017296:	bd90      	pop	{r4, r7, pc}
 8017298:	08031048 	.word	0x08031048
 801729c:	0803104c 	.word	0x0803104c
 80172a0:	0802bca0 	.word	0x0802bca0

080172a4 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>:

}  // namespace

TfLiteRegistration Register_AVERAGE_POOL_2D() {
 80172a4:	b4b0      	push	{r4, r5, r7}
 80172a6:	b083      	sub	sp, #12
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
          /*prepare=*/AveragePrepare,
          /*invoke=*/AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	4a07      	ldr	r2, [pc, #28]	; (80172cc <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x28>)
 80172b0:	461c      	mov	r4, r3
 80172b2:	4615      	mov	r5, r2
 80172b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80172b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80172b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80172bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80172c0:	6878      	ldr	r0, [r7, #4]
 80172c2:	370c      	adds	r7, #12
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bcb0      	pop	{r4, r5, r7}
 80172c8:	4770      	bx	lr
 80172ca:	bf00      	nop
 80172cc:	0802bcc4 	.word	0x0802bcc4

080172d0 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b084      	sub	sp, #16
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	60f8      	str	r0, [r7, #12]
 80172d8:	60b9      	str	r1, [r7, #8]
 80172da:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 80172dc:	68fa      	ldr	r2, [r7, #12]
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	fa02 f303 	lsl.w	r3, r2, r3
 80172e4:	68b9      	ldr	r1, [r7, #8]
 80172e6:	4618      	mov	r0, r3
 80172e8:	f7f4 f824 	bl	800b334 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80172ec:	4603      	mov	r3, r0
}
 80172ee:	4618      	mov	r0, r3
 80172f0:	3710      	adds	r7, #16
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}

080172f6 <_ZN6tflite10lut_lookupEsPKs>:
  return static_cast<LutOutT>(base + delta);
}

// int16_t -> int16_t table lookup with interpolation
// LUT must have 513 values
inline int16_t lut_lookup(int16_t value, const int16_t* lut) {
 80172f6:	b580      	push	{r7, lr}
 80172f8:	b082      	sub	sp, #8
 80172fa:	af00      	add	r7, sp, #0
 80172fc:	4603      	mov	r3, r0
 80172fe:	6039      	str	r1, [r7, #0]
 8017300:	80fb      	strh	r3, [r7, #6]
  return lut_lookup_with_interpolation(value, lut);
 8017302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017306:	6839      	ldr	r1, [r7, #0]
 8017308:	4618      	mov	r0, r3
 801730a:	f000 fbb1 	bl	8017a70 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_>
 801730e:	4603      	mov	r3, r0
}
 8017310:	4618      	mov	r0, r3
 8017312:	3708      	adds	r7, #8
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}

08017318 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 8017318:	b580      	push	{r7, lr}
 801731a:	b088      	sub	sp, #32
 801731c:	af00      	add	r7, sp, #0
 801731e:	60f8      	str	r0, [r7, #12]
 8017320:	60b9      	str	r1, [r7, #8]
 8017322:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	4618      	mov	r0, r3
 8017328:	f7f4 f9d0 	bl	800b6cc <_ZN6tflite17CountLeadingZerosImEEiT_>
 801732c:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 801732e:	68ba      	ldr	r2, [r7, #8]
 8017330:	69fb      	ldr	r3, [r7, #28]
 8017332:	1ad2      	subs	r2, r2, r3
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 8017338:	68fa      	ldr	r2, [r7, #12]
 801733a:	69fb      	ldr	r3, [r7, #28]
 801733c:	fa02 f303 	lsl.w	r3, r2, r3
 8017340:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 8017344:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 8017346:	69b8      	ldr	r0, [r7, #24]
 8017348:	f7fb f831 	bl	80123ae <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801734c:	4603      	mov	r3, r0
 801734e:	4618      	mov	r0, r3
 8017350:	f7fb f83e 	bl	80123d0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 8017354:	4603      	mov	r3, r0
 8017356:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 8017358:	f107 0314 	add.w	r3, r7, #20
 801735c:	4618      	mov	r0, r3
 801735e:	f7f4 f9c7 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8017362:	4603      	mov	r3, r0
 8017364:	681b      	ldr	r3, [r3, #0]
}
 8017366:	4618      	mov	r0, r3
 8017368:	3720      	adds	r7, #32
 801736a:	46bd      	mov	sp, r7
 801736c:	bd80      	pop	{r7, pc}

0801736e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 801736e:	b580      	push	{r7, lr}
 8017370:	ed2d 8b02 	vpush	{d8}
 8017374:	b08e      	sub	sp, #56	; 0x38
 8017376:	af00      	add	r7, sp, #0
 8017378:	60f8      	str	r0, [r7, #12]
 801737a:	60b9      	str	r1, [r7, #8]
 801737c:	607a      	str	r2, [r7, #4]
 801737e:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8017380:	68b8      	ldr	r0, [r7, #8]
 8017382:	f7f5 fab1 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017386:	4603      	mov	r3, r0
 8017388:	3b01      	subs	r3, #1
 801738a:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801738c:	683a      	ldr	r2, [r7, #0]
 801738e:	6a39      	ldr	r1, [r7, #32]
 8017390:	68b8      	ldr	r0, [r7, #8]
 8017392:	f7fa ff90 	bl	80122b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8017396:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8017398:	6a3b      	ldr	r3, [r7, #32]
 801739a:	683a      	ldr	r2, [r7, #0]
 801739c:	6a39      	ldr	r1, [r7, #32]
 801739e:	68b8      	ldr	r0, [r7, #8]
 80173a0:	f7fa fa45 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80173a4:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 80173a6:	2300      	movs	r3, #0
 80173a8:	637b      	str	r3, [r7, #52]	; 0x34
 80173aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80173ac:	69fb      	ldr	r3, [r7, #28]
 80173ae:	429a      	cmp	r2, r3
 80173b0:	f280 8087 	bge.w	80174c2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 80173b4:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80173b8:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80173ba:	2300      	movs	r3, #0
 80173bc:	633b      	str	r3, [r7, #48]	; 0x30
 80173be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173c0:	69bb      	ldr	r3, [r7, #24]
 80173c2:	429a      	cmp	r2, r3
 80173c4:	da15      	bge.n	80173f2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 80173c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173c8:	69ba      	ldr	r2, [r7, #24]
 80173ca:	fb02 f203 	mul.w	r2, r2, r3
 80173ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173d0:	4413      	add	r3, r2
 80173d2:	009b      	lsls	r3, r3, #2
 80173d4:	687a      	ldr	r2, [r7, #4]
 80173d6:	441a      	add	r2, r3
 80173d8:	f107 0310 	add.w	r3, r7, #16
 80173dc:	4611      	mov	r1, r2
 80173de:	4618      	mov	r0, r3
 80173e0:	f7f3 ff2a 	bl	800b238 <_ZSt3maxIfERKT_S2_S2_>
 80173e4:	4603      	mov	r3, r0
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80173ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ec:	3301      	adds	r3, #1
 80173ee:	633b      	str	r3, [r7, #48]	; 0x30
 80173f0:	e7e5      	b.n	80173be <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 80173f2:	f04f 0300 	mov.w	r3, #0
 80173f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 80173f8:	2300      	movs	r3, #0
 80173fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80173fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80173fe:	69bb      	ldr	r3, [r7, #24]
 8017400:	429a      	cmp	r2, r3
 8017402:	da36      	bge.n	8017472 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8017404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017406:	69ba      	ldr	r2, [r7, #24]
 8017408:	fb02 f203 	mul.w	r2, r2, r3
 801740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801740e:	4413      	add	r3, r2
 8017410:	009b      	lsls	r3, r3, #2
 8017412:	687a      	ldr	r2, [r7, #4]
 8017414:	4413      	add	r3, r2
 8017416:	ed93 7a00 	vldr	s14, [r3]
 801741a:	edd7 7a04 	vldr	s15, [r7, #16]
 801741e:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017428:	4610      	mov	r0, r2
 801742a:	4619      	mov	r1, r3
 801742c:	f7e9 fbd8 	bl	8000be0 <__aeabi_d2f>
 8017430:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8017434:	ee68 7a27 	vmul.f32	s15, s16, s15
 8017438:	eeb0 0a67 	vmov.f32	s0, s15
 801743c:	f7f3 ff6a 	bl	800b314 <_ZSt3expf>
 8017440:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 8017444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017446:	69ba      	ldr	r2, [r7, #24]
 8017448:	fb02 f203 	mul.w	r2, r2, r3
 801744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801744e:	4413      	add	r3, r2
 8017450:	009b      	lsls	r3, r3, #2
 8017452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017454:	4413      	add	r3, r2
 8017456:	697a      	ldr	r2, [r7, #20]
 8017458:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 801745a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801745e:	edd7 7a05 	vldr	s15, [r7, #20]
 8017462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017466:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801746c:	3301      	adds	r3, #1
 801746e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017470:	e7c4      	b.n	80173fc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 8017472:	2300      	movs	r3, #0
 8017474:	627b      	str	r3, [r7, #36]	; 0x24
 8017476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017478:	69bb      	ldr	r3, [r7, #24]
 801747a:	429a      	cmp	r2, r3
 801747c:	da1d      	bge.n	80174ba <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 801747e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017480:	69ba      	ldr	r2, [r7, #24]
 8017482:	fb02 f203 	mul.w	r2, r2, r3
 8017486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017488:	4413      	add	r3, r2
 801748a:	009b      	lsls	r3, r3, #2
 801748c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801748e:	4413      	add	r3, r2
 8017490:	edd3 6a00 	vldr	s13, [r3]
 8017494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017496:	69ba      	ldr	r2, [r7, #24]
 8017498:	fb02 f203 	mul.w	r2, r2, r3
 801749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801749e:	4413      	add	r3, r2
 80174a0:	009b      	lsls	r3, r3, #2
 80174a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80174a4:	4413      	add	r3, r2
 80174a6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80174aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80174ae:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 80174b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174b4:	3301      	adds	r3, #1
 80174b6:	627b      	str	r3, [r7, #36]	; 0x24
 80174b8:	e7dd      	b.n	8017476 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 80174ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174bc:	3301      	adds	r3, #1
 80174be:	637b      	str	r3, [r7, #52]	; 0x34
 80174c0:	e773      	b.n	80173aa <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 80174c2:	bf00      	nop
 80174c4:	3738      	adds	r7, #56	; 0x38
 80174c6:	46bd      	mov	sp, r7
 80174c8:	ecbd 8b02 	vpop	{d8}
 80174cc:	bd80      	pop	{r7, pc}
	...

080174d0 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b08a      	sub	sp, #40	; 0x28
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	60f8      	str	r0, [r7, #12]
 80174d8:	60b9      	str	r1, [r7, #8]
 80174da:	607a      	str	r2, [r7, #4]
 80174dc:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 80174de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174e0:	687a      	ldr	r2, [r7, #4]
 80174e2:	fb02 f203 	mul.w	r2, r2, r3
 80174e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174e8:	4413      	add	r3, r2
 80174ea:	005b      	lsls	r3, r3, #1
 80174ec:	68ba      	ldr	r2, [r7, #8]
 80174ee:	4413      	add	r3, r2
 80174f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80174f4:	461a      	mov	r2, r3
 80174f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80174fa:	1ad3      	subs	r3, r2, r3
 80174fc:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	6899      	ldr	r1, [r3, #8]
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 8017506:	461a      	mov	r2, r3
 8017508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801750a:	f7f3 ff83 	bl	800b414 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801750e:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8017510:	6a3b      	ldr	r3, [r7, #32]
 8017512:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8017516:	337f      	adds	r3, #127	; 0x7f
 8017518:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801751a:	4b12      	ldr	r3, [pc, #72]	; (8017564 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 801751c:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 801751e:	f107 0214 	add.w	r2, r7, #20
 8017522:	f107 0310 	add.w	r3, r7, #16
 8017526:	4611      	mov	r1, r2
 8017528:	4618      	mov	r0, r3
 801752a:	f7f4 f847 	bl	800b5bc <_ZSt3maxIlERKT_S2_S2_>
 801752e:	4602      	mov	r2, r0
 8017530:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017534:	61bb      	str	r3, [r7, #24]
 8017536:	f107 0318 	add.w	r3, r7, #24
 801753a:	4619      	mov	r1, r3
 801753c:	4610      	mov	r0, r2
 801753e:	f7f4 f829 	bl	800b594 <_ZSt3minIlERKT_S2_S2_>
 8017542:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8017544:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 8017546:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return lut_lookup(sat_sym_scaled_diff, params.exp_lut);
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801754c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017550:	4611      	mov	r1, r2
 8017552:	4618      	mov	r0, r3
 8017554:	f7ff fecf 	bl	80172f6 <_ZN6tflite10lut_lookupEsPKs>
 8017558:	4603      	mov	r3, r0
}
 801755a:	4618      	mov	r0, r3
 801755c:	3728      	adds	r7, #40	; 0x28
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}
 8017562:	bf00      	nop
 8017564:	ffff8000 	.word	0xffff8000

08017568 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 8017568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801756c:	b0a1      	sub	sp, #132	; 0x84
 801756e:	af02      	add	r7, sp, #8
 8017570:	6178      	str	r0, [r7, #20]
 8017572:	6139      	str	r1, [r7, #16]
 8017574:	60fa      	str	r2, [r7, #12]
 8017576:	60bb      	str	r3, [r7, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8017578:	6938      	ldr	r0, [r7, #16]
 801757a:	f7f5 f9b5 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801757e:	4603      	mov	r3, r0
 8017580:	3b01      	subs	r3, #1
 8017582:	663b      	str	r3, [r7, #96]	; 0x60
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8017584:	68ba      	ldr	r2, [r7, #8]
 8017586:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017588:	6938      	ldr	r0, [r7, #16]
 801758a:	f7fa fe94 	bl	80122b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801758e:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8017590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017592:	68ba      	ldr	r2, [r7, #8]
 8017594:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017596:	6938      	ldr	r0, [r7, #16]
 8017598:	f7fa f949 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801759c:	65b8      	str	r0, [r7, #88]	; 0x58

  for (int i = 0; i < outer_size; ++i) {
 801759e:	2300      	movs	r3, #0
 80175a0:	677b      	str	r3, [r7, #116]	; 0x74
 80175a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80175a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80175a6:	429a      	cmp	r2, r3
 80175a8:	f280 8119 	bge.w	80177de <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x276>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 80175ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80175b0:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 80175b2:	2300      	movs	r3, #0
 80175b4:	673b      	str	r3, [r7, #112]	; 0x70
 80175b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80175b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80175ba:	429a      	cmp	r2, r3
 80175bc:	da16      	bge.n	80175ec <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80175be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80175c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80175c2:	fb02 f203 	mul.w	r2, r2, r3
 80175c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80175c8:	4413      	add	r3, r2
 80175ca:	005b      	lsls	r3, r3, #1
 80175cc:	68fa      	ldr	r2, [r7, #12]
 80175ce:	441a      	add	r2, r3
 80175d0:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80175d4:	4611      	mov	r1, r2
 80175d6:	4618      	mov	r0, r3
 80175d8:	f7fa fdc9 	bl	801216e <_ZSt3maxIsERKT_S2_S2_>
 80175dc:	4603      	mov	r3, r0
 80175de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175e2:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 80175e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80175e6:	3301      	adds	r3, #1
 80175e8:	673b      	str	r3, [r7, #112]	; 0x70
 80175ea:	e7e4      	b.n	80175b6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4e>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 80175ec:	2300      	movs	r3, #0
 80175ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    int16_t* exp_results_Q015 = output_data + i * depth;
 80175f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80175f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80175f4:	fb02 f303 	mul.w	r3, r2, r3
 80175f8:	005b      	lsls	r3, r3, #1
 80175fa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80175fe:	4413      	add	r3, r2
 8017600:	657b      	str	r3, [r7, #84]	; 0x54
    for (int c = 0; c < depth; ++c) {
 8017602:	2300      	movs	r3, #0
 8017604:	66bb      	str	r3, [r7, #104]	; 0x68
 8017606:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017608:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801760a:	429a      	cmp	r2, r3
 801760c:	da1f      	bge.n	801764e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xe6>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801760e:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
      exp_results_Q015[c] =
 8017612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017614:	005b      	lsls	r3, r3, #1
 8017616:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017618:	18d6      	adds	r6, r2, r3
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801761a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801761c:	9301      	str	r3, [sp, #4]
 801761e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017620:	9300      	str	r3, [sp, #0]
 8017622:	460b      	mov	r3, r1
 8017624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017626:	68f9      	ldr	r1, [r7, #12]
 8017628:	6978      	ldr	r0, [r7, #20]
 801762a:	f7ff ff51 	bl	80174d0 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 801762e:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 8017630:	8033      	strh	r3, [r6, #0]
      sum_of_exps += exp_results_Q015[c];
 8017632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017634:	005b      	lsls	r3, r3, #1
 8017636:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017638:	4413      	add	r3, r2
 801763a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801763e:	461a      	mov	r2, r3
 8017640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017642:	4413      	add	r3, r2
 8017644:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (int c = 0; c < depth; ++c) {
 8017646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017648:	3301      	adds	r3, #1
 801764a:	66bb      	str	r3, [r7, #104]	; 0x68
 801764c:	e7db      	b.n	8017606 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 801764e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017650:	4618      	mov	r0, r3
 8017652:	f7f4 f83b 	bl	800b6cc <_ZN6tflite17CountLeadingZerosImEEiT_>
 8017656:	4603      	mov	r3, r0
 8017658:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 801765c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801765e:	461a      	mov	r2, r3
 8017660:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8017664:	f897 1053 	ldrb.w	r1, [r7, #83]	; 0x53
 8017668:	3901      	subs	r1, #1
 801766a:	f1a1 0620 	sub.w	r6, r1, #32
 801766e:	f1c1 0020 	rsb	r0, r1, #32
 8017672:	fa03 f501 	lsl.w	r5, r3, r1
 8017676:	fa02 f606 	lsl.w	r6, r2, r6
 801767a:	4335      	orrs	r5, r6
 801767c:	fa22 f000 	lsr.w	r0, r2, r0
 8017680:	4305      	orrs	r5, r0
 8017682:	fa02 f401 	lsl.w	r4, r2, r1
 8017686:	f514 5300 	adds.w	r3, r4, #8192	; 0x2000
 801768a:	603b      	str	r3, [r7, #0]
 801768c:	f145 0300 	adc.w	r3, r5, #0
 8017690:	607b      	str	r3, [r7, #4]
         (1 << 13)) >>
 8017692:	f04f 0200 	mov.w	r2, #0
 8017696:	f04f 0300 	mov.w	r3, #0
 801769a:	6839      	ldr	r1, [r7, #0]
 801769c:	0b8a      	lsrs	r2, r1, #14
 801769e:	6879      	ldr	r1, [r7, #4]
 80176a0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80176a4:	6879      	ldr	r1, [r7, #4]
 80176a6:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 80176a8:	4613      	mov	r3, r2
 80176aa:	64fb      	str	r3, [r7, #76]	; 0x4c
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 80176ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80176ae:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 80176b2:	623b      	str	r3, [r7, #32]
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 80176b4:	4b4c      	ldr	r3, [pc, #304]	; (80177e8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x280>)
 80176b6:	62bb      	str	r3, [r7, #40]	; 0x28
                 static_cast<int32_t>(32767)));
 80176b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80176bc:	f107 0320 	add.w	r3, r7, #32
 80176c0:	4611      	mov	r1, r2
 80176c2:	4618      	mov	r0, r3
 80176c4:	f7f3 ff7a 	bl	800b5bc <_ZSt3maxIlERKT_S2_S2_>
 80176c8:	4602      	mov	r2, r0
 80176ca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80176ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80176d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80176d4:	4619      	mov	r1, r3
 80176d6:	4610      	mov	r0, r2
 80176d8:	f7f3 ff5c 	bl	800b594 <_ZSt3minIlERKT_S2_S2_>
 80176dc:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 80176de:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 80176e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 =
        lut_lookup(sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 80176e4:	697b      	ldr	r3, [r7, #20]
 80176e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176e8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80176ec:	4611      	mov	r1, r2
 80176ee:	4618      	mov	r0, r3
 80176f0:	f7ff fe01 	bl	80172f6 <_ZN6tflite10lut_lookupEsPKs>
 80176f4:	4603      	mov	r3, r0
 80176f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 80176fa:	2300      	movs	r3, #0
 80176fc:	667b      	str	r3, [r7, #100]	; 0x64
 80176fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017700:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017702:	429a      	cmp	r2, r3
 8017704:	da67      	bge.n	80177d6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x26e>
      uint8_t right_shift = 31 - headroom_plus_one;
 8017706:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801770a:	f1c3 031f 	rsb	r3, r3, #31
 801770e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      int64_t round = 1 << (right_shift - 1);
 8017712:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017716:	3b01      	subs	r3, #1
 8017718:	2201      	movs	r2, #1
 801771a:	fa02 f303 	lsl.w	r3, r2, r3
 801771e:	461a      	mov	r2, r3
 8017720:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8017724:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8017728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801772a:	005b      	lsls	r3, r3, #1
 801772c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801772e:	4413      	add	r3, r2
 8017730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017734:	b218      	sxth	r0, r3
 8017736:	ea4f 71e0 	mov.w	r1, r0, asr #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801773a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 801773e:	ea4f 73e2 	mov.w	r3, r2, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8017742:	fb02 fc01 	mul.w	ip, r2, r1
 8017746:	fb00 f603 	mul.w	r6, r0, r3
 801774a:	4466      	add	r6, ip
 801774c:	fba0 2302 	umull	r2, r3, r0, r2
 8017750:	18f1      	adds	r1, r6, r3
 8017752:	460b      	mov	r3, r1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8017754:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017758:	eb12 0a00 	adds.w	sl, r2, r0
 801775c:	eb43 0b01 	adc.w	fp, r3, r1
                        round) >>
                       right_shift;
 8017760:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
                        round) >>
 8017764:	f1c3 0120 	rsb	r1, r3, #32
 8017768:	f1b3 0220 	subs.w	r2, r3, #32
 801776c:	fa2a f803 	lsr.w	r8, sl, r3
 8017770:	fa0b f101 	lsl.w	r1, fp, r1
 8017774:	ea48 0801 	orr.w	r8, r8, r1
 8017778:	d403      	bmi.n	8017782 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x21a>
 801777a:	fa4b f202 	asr.w	r2, fp, r2
 801777e:	ea48 0802 	orr.w	r8, r8, r2
 8017782:	fa4b f903 	asr.w	r9, fp, r3
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8017786:	4643      	mov	r3, r8
 8017788:	61fb      	str	r3, [r7, #28]
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 801778a:	2300      	movs	r3, #0
 801778c:	633b      	str	r3, [r7, #48]	; 0x30
                   static_cast<int32_t>(32767)));
 801778e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017792:	f107 031c 	add.w	r3, r7, #28
 8017796:	4611      	mov	r1, r2
 8017798:	4618      	mov	r0, r3
 801779a:	f7f3 ff0f 	bl	800b5bc <_ZSt3maxIlERKT_S2_S2_>
 801779e:	4602      	mov	r2, r0
 80177a0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80177a4:	637b      	str	r3, [r7, #52]	; 0x34
 80177a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80177aa:	4619      	mov	r1, r3
 80177ac:	4610      	mov	r0, r2
 80177ae:	f7f3 fef1 	bl	800b594 <_ZSt3minIlERKT_S2_S2_>
 80177b2:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 80177b4:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 80177b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80177b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80177ba:	fb02 f203 	mul.w	r2, r2, r3
 80177be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80177c0:	4413      	add	r3, r2
 80177c2:	005b      	lsls	r3, r3, #1
 80177c4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80177c8:	4413      	add	r3, r2
 80177ca:	b20a      	sxth	r2, r1
 80177cc:	801a      	strh	r2, [r3, #0]
    for (int c = 0; c < depth; ++c) {
 80177ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80177d0:	3301      	adds	r3, #1
 80177d2:	667b      	str	r3, [r7, #100]	; 0x64
 80177d4:	e793      	b.n	80176fe <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x196>
  for (int i = 0; i < outer_size; ++i) {
 80177d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80177d8:	3301      	adds	r3, #1
 80177da:	677b      	str	r3, [r7, #116]	; 0x74
 80177dc:	e6e1      	b.n	80175a2 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3a>
    }
  }
}
 80177de:	bf00      	nop
 80177e0:	377c      	adds	r7, #124	; 0x7c
 80177e2:	46bd      	mov	sp, r7
 80177e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177e8:	ffff8000 	.word	0xffff8000

080177ec <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 80177ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177f0:	b0b0      	sub	sp, #192	; 0xc0
 80177f2:	af04      	add	r7, sp, #16
 80177f4:	60f8      	str	r0, [r7, #12]
 80177f6:	60b9      	str	r1, [r7, #8]
 80177f8:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteInt8) {
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	7a1b      	ldrb	r3, [r3, #8]
 80177fe:	2b09      	cmp	r3, #9
 8017800:	d17b      	bne.n	80178fa <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10e>
    if (output->type == kTfLiteInt16) {
 8017802:	68bb      	ldr	r3, [r7, #8]
 8017804:	7a1b      	ldrb	r3, [r3, #8]
 8017806:	2b07      	cmp	r3, #7
 8017808:	d127      	bne.n	801785a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x6e>
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 801780a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801780e:	68f9      	ldr	r1, [r7, #12]
 8017810:	4618      	mov	r0, r3
 8017812:	f7fa fcc2 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8017816:	68f8      	ldr	r0, [r7, #12]
 8017818:	f7f9 fef1 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801781c:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
 801781e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017822:	68b9      	ldr	r1, [r7, #8]
 8017824:	4618      	mov	r0, r3
 8017826:	f7fa fcb8 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 801782a:	68b8      	ldr	r0, [r7, #8]
 801782c:	f7fa f82e 	bl	801188c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8017830:	4602      	mov	r2, r0
 8017832:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017836:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801783a:	9200      	str	r2, [sp, #0]
 801783c:	4622      	mov	r2, r4
 801783e:	6878      	ldr	r0, [r7, #4]
 8017840:	f000 f964 	bl	8017b0c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 8017844:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017848:	4618      	mov	r0, r3
 801784a:	f7f5 f842 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 801784e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017852:	4618      	mov	r0, r3
 8017854:	f7f5 f83d 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 8017858:	e076      	b.n	8017948 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15c>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801785a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801785e:	68f9      	ldr	r1, [r7, #12]
 8017860:	4618      	mov	r0, r3
 8017862:	f7fa fc9a 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8017866:	f107 0314 	add.w	r3, r7, #20
 801786a:	68b9      	ldr	r1, [r7, #8]
 801786c:	4618      	mov	r0, r3
 801786e:	f7fa fc94 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 8017872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017876:	4618      	mov	r0, r3
 8017878:	f7f5 f836 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801787c:	4603      	mov	r3, r0
 801787e:	3b01      	subs	r3, #1
 8017880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8017884:	f107 0214 	add.w	r2, r7, #20
 8017888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801788c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8017890:	4618      	mov	r0, r3
 8017892:	f7fa fd10 	bl	80122b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8017896:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801789a:	f107 0214 	add.w	r2, r7, #20
 801789e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80178a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80178a6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80178aa:	f7f9 ffc0 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80178ae:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 80178b2:	68f8      	ldr	r0, [r7, #12]
 80178b4:	f7f9 fea3 	bl	80115fe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80178b8:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	689e      	ldr	r6, [r3, #8]
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 80178c6:	68b8      	ldr	r0, [r7, #8]
 80178c8:	f7f9 fea8 	bl	801161c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80178cc:	4603      	mov	r3, r0
 80178ce:	9302      	str	r3, [sp, #8]
 80178d0:	9501      	str	r5, [sp, #4]
 80178d2:	9400      	str	r4, [sp, #0]
 80178d4:	4633      	mov	r3, r6
 80178d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80178da:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80178de:	4640      	mov	r0, r8
 80178e0:	f009 ffc6 	bl	8021870 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 80178e4:	f107 0314 	add.w	r3, r7, #20
 80178e8:	4618      	mov	r0, r3
 80178ea:	f7f4 fff2 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 80178ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80178f2:	4618      	mov	r0, r3
 80178f4:	f7f4 ffed 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 80178f8:	e026      	b.n	8017948 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15c>
        op_data, tflite::micro::GetTensorShape(input),
 80178fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80178fe:	68f9      	ldr	r1, [r7, #12]
 8017900:	4618      	mov	r0, r3
 8017902:	f7fa fc4a 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8017906:	68f8      	ldr	r0, [r7, #12]
 8017908:	f7fa fc22 	bl	8012150 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 801790c:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 801790e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017912:	68b9      	ldr	r1, [r7, #8]
 8017914:	4618      	mov	r0, r3
 8017916:	f7fa fc40 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801791a:	68b8      	ldr	r0, [r7, #8]
 801791c:	f7f9 ffb6 	bl	801188c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8017920:	4602      	mov	r2, r0
 8017922:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017926:	f107 0174 	add.w	r1, r7, #116	; 0x74
 801792a:	9200      	str	r2, [sp, #0]
 801792c:	4622      	mov	r2, r4
 801792e:	6878      	ldr	r0, [r7, #4]
 8017930:	f7ff fe1a 	bl	8017568 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 8017934:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017938:	4618      	mov	r0, r3
 801793a:	f7f4 ffca 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801793e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8017942:	4618      	mov	r0, r3
 8017944:	f7f4 ffc5 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8017948:	bf00      	nop
 801794a:	37b0      	adds	r7, #176	; 0xb0
 801794c:	46bd      	mov	sp, r7
 801794e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017954 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8017954:	b5b0      	push	{r4, r5, r7, lr}
 8017956:	b0a0      	sub	sp, #128	; 0x80
 8017958:	af02      	add	r7, sp, #8
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801795e:	2200      	movs	r2, #0
 8017960:	6839      	ldr	r1, [r7, #0]
 8017962:	6878      	ldr	r0, [r7, #4]
 8017964:	f7f9 fdfb 	bl	801155e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017968:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 801796a:	2200      	movs	r2, #0
 801796c:	6839      	ldr	r1, [r7, #0]
 801796e:	6878      	ldr	r0, [r7, #4]
 8017970:	f7f9 fe05 	bl	801157e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8017974:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	691b      	ldr	r3, [r3, #16]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d101      	bne.n	8017982 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801797e:	f00d fab2 	bl	8024ee6 <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 8017982:	683b      	ldr	r3, [r7, #0]
 8017984:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 8017986:	f107 0408 	add.w	r4, r7, #8
 801798a:	461d      	mov	r5, r3
 801798c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801798e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017998:	e895 0003 	ldmia.w	r5, {r0, r1}
 801799c:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 80179a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80179a2:	7a1b      	ldrb	r3, [r3, #8]
 80179a4:	2b09      	cmp	r3, #9
 80179a6:	d030      	beq.n	8017a0a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 80179a8:	2b09      	cmp	r3, #9
 80179aa:	dc37      	bgt.n	8017a1c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
 80179ac:	2b01      	cmp	r3, #1
 80179ae:	d002      	beq.n	80179b6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
 80179b0:	2b07      	cmp	r3, #7
 80179b2:	d02a      	beq.n	8017a0a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 80179b4:	e032      	b.n	8017a1c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          data, tflite::micro::GetTensorShape(input),
 80179b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80179ba:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80179bc:	4618      	mov	r0, r3
 80179be:	f7fa fbec 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80179c2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80179c4:	f7f9 fdfb 	bl	80115be <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80179c8:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 80179ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80179ce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80179d0:	4618      	mov	r0, r3
 80179d2:	f7fa fbe2 	bl	801219a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80179d6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80179d8:	f7f9 fe00 	bl	80115dc <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80179dc:	4602      	mov	r2, r0
 80179de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80179e2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80179e6:	f107 0008 	add.w	r0, r7, #8
 80179ea:	9200      	str	r2, [sp, #0]
 80179ec:	4622      	mov	r2, r4
 80179ee:	f7ff fcbe 	bl	801736e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 80179f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80179f6:	4618      	mov	r0, r3
 80179f8:	f7f4 ff6b 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          data, tflite::micro::GetTensorShape(input),
 80179fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017a00:	4618      	mov	r0, r3
 8017a02:	f7f4 ff66 	bl	800c8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 8017a06:	2300      	movs	r3, #0
 8017a08:	e016      	b.n	8017a38 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    case kTfLiteInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, data);
 8017a0a:	f107 0308 	add.w	r3, r7, #8
 8017a0e:	461a      	mov	r2, r3
 8017a10:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8017a12:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8017a14:	f7ff feea 	bl	80177ec <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8017a18:	2300      	movs	r3, #0
 8017a1a:	e00d      	b.n	8017a38 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	695c      	ldr	r4, [r3, #20]
 8017a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017a22:	7a1b      	ldrb	r3, [r3, #8]
 8017a24:	4618      	mov	r0, r3
 8017a26:	f7f0 fef1 	bl	800880c <TfLiteTypeGetName>
 8017a2a:	4602      	mov	r2, r0
 8017a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017a2e:	7a1b      	ldrb	r3, [r3, #8]
 8017a30:	4903      	ldr	r1, [pc, #12]	; (8017a40 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>)
 8017a32:	6878      	ldr	r0, [r7, #4]
 8017a34:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8017a36:	2301      	movs	r3, #1
  }
}
 8017a38:	4618      	mov	r0, r3
 8017a3a:	3778      	adds	r7, #120	; 0x78
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8017a40:	0802bd04 	.word	0x0802bd04

08017a44 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 8017a44:	b4b0      	push	{r4, r5, r7}
 8017a46:	b083      	sub	sp, #12
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	4a07      	ldr	r2, [pc, #28]	; (8017a6c <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8017a50:	461c      	mov	r4, r3
 8017a52:	4615      	mov	r5, r2
 8017a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8017a60:	6878      	ldr	r0, [r7, #4]
 8017a62:	370c      	adds	r7, #12
 8017a64:	46bd      	mov	sp, r7
 8017a66:	bcb0      	pop	{r4, r5, r7}
 8017a68:	4770      	bx	lr
 8017a6a:	bf00      	nop
 8017a6c:	0802bd20 	.word	0x0802bd20

08017a70 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_>:
inline LutOutT lut_lookup_with_interpolation(int16_t value,
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b086      	sub	sp, #24
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	4603      	mov	r3, r0
 8017a78:	6039      	str	r1, [r7, #0]
 8017a7a:	80fb      	strh	r3, [r7, #6]
  const uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 8017a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017a80:	11db      	asrs	r3, r3, #7
 8017a82:	b29b      	uxth	r3, r3
 8017a84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017a88:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 8017a8a:	8afb      	ldrh	r3, [r7, #22]
 8017a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a90:	d306      	bcc.n	8017aa0 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_+0x30>
 8017a92:	4b1b      	ldr	r3, [pc, #108]	; (8017b00 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_+0x90>)
 8017a94:	4a1b      	ldr	r2, [pc, #108]	; (8017b04 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_+0x94>)
 8017a96:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8017a9a:	481b      	ldr	r0, [pc, #108]	; (8017b08 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_+0x98>)
 8017a9c:	f00d fa2a 	bl	8024ef4 <__assert_func>
  const int16_t offset = value & 0x7f;
 8017aa0:	88fb      	ldrh	r3, [r7, #6]
 8017aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017aa6:	82bb      	strh	r3, [r7, #20]
  const LutOutT base = lut[index];
 8017aa8:	8afb      	ldrh	r3, [r7, #22]
 8017aaa:	005b      	lsls	r3, r3, #1
 8017aac:	683a      	ldr	r2, [r7, #0]
 8017aae:	4413      	add	r3, r2
 8017ab0:	881b      	ldrh	r3, [r3, #0]
 8017ab2:	827b      	strh	r3, [r7, #18]
  const LutOutT slope = lut[index + 1] - lut[index];
 8017ab4:	8afb      	ldrh	r3, [r7, #22]
 8017ab6:	3301      	adds	r3, #1
 8017ab8:	005b      	lsls	r3, r3, #1
 8017aba:	683a      	ldr	r2, [r7, #0]
 8017abc:	4413      	add	r3, r2
 8017abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ac2:	b29a      	uxth	r2, r3
 8017ac4:	8afb      	ldrh	r3, [r7, #22]
 8017ac6:	005b      	lsls	r3, r3, #1
 8017ac8:	6839      	ldr	r1, [r7, #0]
 8017aca:	440b      	add	r3, r1
 8017acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ad0:	b29b      	uxth	r3, r3
 8017ad2:	1ad3      	subs	r3, r2, r3
 8017ad4:	b29b      	uxth	r3, r3
 8017ad6:	823b      	strh	r3, [r7, #16]
  const int delta = (slope * offset + 64) >> 7;
 8017ad8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8017adc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017ae0:	fb02 f303 	mul.w	r3, r2, r3
 8017ae4:	3340      	adds	r3, #64	; 0x40
 8017ae6:	11db      	asrs	r3, r3, #7
 8017ae8:	60fb      	str	r3, [r7, #12]
  return static_cast<LutOutT>(base + delta);
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	b29a      	uxth	r2, r3
 8017aee:	8a7b      	ldrh	r3, [r7, #18]
 8017af0:	4413      	add	r3, r2
 8017af2:	b29b      	uxth	r3, r3
 8017af4:	b21b      	sxth	r3, r3
}
 8017af6:	4618      	mov	r0, r3
 8017af8:	3718      	adds	r7, #24
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd80      	pop	{r7, pc}
 8017afe:	bf00      	nop
 8017b00:	0802be30 	.word	0x0802be30
 8017b04:	0802be5c 	.word	0x0802be5c
 8017b08:	0802bed4 	.word	0x0802bed4

08017b0c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8017b0c:	b590      	push	{r4, r7, lr}
 8017b0e:	b09f      	sub	sp, #124	; 0x7c
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	60f8      	str	r0, [r7, #12]
 8017b14:	60b9      	str	r1, [r7, #8]
 8017b16:	607a      	str	r2, [r7, #4]
 8017b18:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	689b      	ldr	r3, [r3, #8]
 8017b1e:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	68db      	ldr	r3, [r3, #12]
 8017b24:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	699b      	ldr	r3, [r3, #24]
 8017b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8017b2c:	68b8      	ldr	r0, [r7, #8]
 8017b2e:	f7f4 fedb 	bl	800c8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017b32:	4603      	mov	r3, r0
 8017b34:	3b01      	subs	r3, #1
 8017b36:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8017b38:	683a      	ldr	r2, [r7, #0]
 8017b3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017b3c:	68b8      	ldr	r0, [r7, #8]
 8017b3e:	f7fa fbba 	bl	80122b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8017b42:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8017b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017b46:	683a      	ldr	r2, [r7, #0]
 8017b48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017b4a:	68b8      	ldr	r0, [r7, #8]
 8017b4c:	f7f9 fe6f 	bl	801182e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017b50:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8017b52:	2300      	movs	r3, #0
 8017b54:	677b      	str	r3, [r7, #116]	; 0x74
 8017b56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b5a:	429a      	cmp	r2, r3
 8017b5c:	f280 80f0 	bge.w	8017d40 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8017b60:	2380      	movs	r3, #128	; 0x80
 8017b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8017b66:	2300      	movs	r3, #0
 8017b68:	673b      	str	r3, [r7, #112]	; 0x70
 8017b6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b6e:	429a      	cmp	r2, r3
 8017b70:	da17      	bge.n	8017ba2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8017b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017b74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017b76:	fb02 f203 	mul.w	r2, r2, r3
 8017b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017b7c:	4413      	add	r3, r2
 8017b7e:	461a      	mov	r2, r3
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	441a      	add	r2, r3
 8017b84:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8017b88:	4611      	mov	r1, r2
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	f7fb f88d 	bl	8012caa <_ZSt3maxIaERKT_S2_S2_>
 8017b90:	4603      	mov	r3, r0
 8017b92:	f993 3000 	ldrsb.w	r3, [r3]
 8017b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8017b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017b9c:	3301      	adds	r3, #1
 8017b9e:	673b      	str	r3, [r7, #112]	; 0x70
 8017ba0:	e7e3      	b.n	8017b6a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8017ba2:	f000 f8d1 	bl	8017d48 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8017baa:	2300      	movs	r3, #0
 8017bac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017bae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bb2:	429a      	cmp	r2, r3
 8017bb4:	da30      	bge.n	8017c18 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8017bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017bb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017bba:	fb02 f203 	mul.w	r2, r2, r3
 8017bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017bc0:	4413      	add	r3, r2
 8017bc2:	461a      	mov	r2, r3
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	4413      	add	r3, r2
 8017bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8017bcc:	461a      	mov	r2, r3
 8017bce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8017bd2:	1ad3      	subs	r3, r2, r3
 8017bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8017bd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017bda:	429a      	cmp	r2, r3
 8017bdc:	db18      	blt.n	8017c10 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8017bde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017be0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8017be2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8017be4:	f7ff fb74 	bl	80172d0 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8017be8:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8017bea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8017bec:	f7fa fc50 	bl	8012490 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8017bf0:	4603      	mov	r3, r0
 8017bf2:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8017bf4:	69f8      	ldr	r0, [r7, #28]
 8017bf6:	f7fa fc5d 	bl	80124b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	f7fa fda1 	bl	8012744 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8017c02:	4603      	mov	r3, r0
 8017c04:	4619      	mov	r1, r3
 8017c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c08:	f7fa fdb6 	bl	8012778 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8017c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017c12:	3301      	adds	r3, #1
 8017c14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017c16:	e7ca      	b.n	8017bae <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8017c18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f7fb f81c 	bl	8012c5a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8017c22:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8017c2a:	210c      	movs	r1, #12
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	f7ff fb73 	bl	8017318 <_ZN6tflite13GetReciprocalEliPi>
 8017c32:	4603      	mov	r3, r0
 8017c34:	4618      	mov	r0, r3
 8017c36:	f7fa fbba 	bl	80123ae <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8017c3e:	2300      	movs	r3, #0
 8017c40:	66bb      	str	r3, [r7, #104]	; 0x68
 8017c42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c46:	429a      	cmp	r2, r3
 8017c48:	da76      	bge.n	8017d38 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8017c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017c4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017c4e:	fb02 f203 	mul.w	r2, r2, r3
 8017c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017c54:	4413      	add	r3, r2
 8017c56:	461a      	mov	r2, r3
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	4413      	add	r3, r2
 8017c5c:	f993 3000 	ldrsb.w	r3, [r3]
 8017c60:	461a      	mov	r2, r3
 8017c62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8017c66:	1ad3      	subs	r3, r2, r3
 8017c68:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8017c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	db50      	blt.n	8017d14 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8017c72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017c74:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8017c76:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017c78:	f7ff fb2a 	bl	80172d0 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8017c7c:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8017c7e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017c80:	f7fa fc06 	bl	8012490 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8017c84:	4603      	mov	r3, r0
 8017c86:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8017c88:	69b8      	ldr	r0, [r7, #24]
 8017c8a:	f7fa fc13 	bl	80124b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8017c92:	6979      	ldr	r1, [r7, #20]
 8017c94:	6a38      	ldr	r0, [r7, #32]
 8017c96:	f7fa ff8b 	bl	8012bb0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8017c9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f7f3 fd24 	bl	800b6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8017ca8:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8017caa:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8017cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cae:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8017cb0:	4611      	mov	r1, r2
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f7f3 fc96 	bl	800b5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8017cb8:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8017cba:	f7f3 fb0f 	bl	800b2dc <_ZNSt14numeric_limitsIsE3minEv>
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	461a      	mov	r2, r3
            unsat_output +
 8017cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cc4:	4413      	add	r3, r2
        const int32_t shifted_output =
 8017cc6:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8017cc8:	f7f3 fb12 	bl	800b2f0 <_ZNSt14numeric_limitsIsE3maxEv>
 8017ccc:	4603      	mov	r3, r0
 8017cce:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8017cd0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8017cd4:	f107 0310 	add.w	r3, r7, #16
 8017cd8:	4611      	mov	r1, r2
 8017cda:	4618      	mov	r0, r3
 8017cdc:	f7f3 fc5a 	bl	800b594 <_ZSt3minIlERKT_S2_S2_>
 8017ce0:	4604      	mov	r4, r0
 8017ce2:	f7f3 fafb 	bl	800b2dc <_ZNSt14numeric_limitsIsE3minEv>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	63bb      	str	r3, [r7, #56]	; 0x38
 8017cea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017cee:	4619      	mov	r1, r3
 8017cf0:	4620      	mov	r0, r4
 8017cf2:	f7f3 fc63 	bl	800b5bc <_ZSt3maxIlERKT_S2_S2_>
 8017cf6:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8017cf8:	6819      	ldr	r1, [r3, #0]
 8017cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017cfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017cfe:	fb02 f203 	mul.w	r2, r2, r3
 8017d02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017d04:	4413      	add	r3, r2
 8017d06:	005b      	lsls	r3, r3, #1
 8017d08:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017d0c:	4413      	add	r3, r2
 8017d0e:	b20a      	sxth	r2, r1
 8017d10:	801a      	strh	r2, [r3, #0]
 8017d12:	e00d      	b.n	8017d30 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8017d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017d16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017d18:	fb02 f203 	mul.w	r2, r2, r3
 8017d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017d1e:	4413      	add	r3, r2
 8017d20:	005b      	lsls	r3, r3, #1
 8017d22:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017d26:	18d4      	adds	r4, r2, r3
 8017d28:	f7f3 fad8 	bl	800b2dc <_ZNSt14numeric_limitsIsE3minEv>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8017d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017d32:	3301      	adds	r3, #1
 8017d34:	66bb      	str	r3, [r7, #104]	; 0x68
 8017d36:	e784      	b.n	8017c42 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 8017d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017d3a:	3301      	adds	r3, #1
 8017d3c:	677b      	str	r3, [r7, #116]	; 0x74
 8017d3e:	e70a      	b.n	8017b56 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8017d40:	bf00      	nop
 8017d42:	377c      	adds	r7, #124	; 0x7c
 8017d44:	46bd      	mov	sp, r7
 8017d46:	bd90      	pop	{r4, r7, pc}

08017d48 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	af00      	add	r7, sp, #0
 8017d4c:	2000      	movs	r0, #0
 8017d4e:	f000 f803 	bl	8017d58 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8017d52:	4603      	mov	r3, r0
 8017d54:	4618      	mov	r0, r3
 8017d56:	bd80      	pop	{r7, pc}

08017d58 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8017d58:	b590      	push	{r4, r7, lr}
 8017d5a:	b085      	sub	sp, #20
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8017d60:	f107 030c 	add.w	r3, r7, #12
 8017d64:	4618      	mov	r0, r3
 8017d66:	f7fa ff78 	bl	8012c5a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8017d6a:	4604      	mov	r4, r0
 8017d6c:	6878      	ldr	r0, [r7, #4]
 8017d6e:	f7f3 fceb 	bl	800b748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8017d72:	4603      	mov	r3, r0
 8017d74:	6023      	str	r3, [r4, #0]
    return retval;
 8017d76:	68fb      	ldr	r3, [r7, #12]
  }
 8017d78:	4618      	mov	r0, r3
 8017d7a:	3714      	adds	r7, #20
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd90      	pop	{r4, r7, pc}

08017d80 <_ZN6tflite18MicroMemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MicroMemoryPlanner {
 public:
  MicroMemoryPlanner() {}
 8017d80:	b480      	push	{r7}
 8017d82:	b083      	sub	sp, #12
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	6078      	str	r0, [r7, #4]
 8017d88:	4a04      	ldr	r2, [pc, #16]	; (8017d9c <_ZN6tflite18MicroMemoryPlannerC1Ev+0x1c>)
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	601a      	str	r2, [r3, #0]
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	4618      	mov	r0, r3
 8017d92:	370c      	adds	r7, #12
 8017d94:	46bd      	mov	sp, r7
 8017d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d9a:	4770      	bx	lr
 8017d9c:	08031080 	.word	0x08031080

08017da0 <_ZN6tflite18MicroMemoryPlannerD1Ev>:
  virtual ~MicroMemoryPlanner() {}
 8017da0:	b480      	push	{r7}
 8017da2:	b083      	sub	sp, #12
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
 8017da8:	4a04      	ldr	r2, [pc, #16]	; (8017dbc <_ZN6tflite18MicroMemoryPlannerD1Ev+0x1c>)
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	601a      	str	r2, [r3, #0]
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	4618      	mov	r0, r3
 8017db2:	370c      	adds	r7, #12
 8017db4:	46bd      	mov	sp, r7
 8017db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dba:	4770      	bx	lr
 8017dbc:	08031080 	.word	0x08031080

08017dc0 <_ZN6tflite18MicroMemoryPlannerD0Ev>:
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b082      	sub	sp, #8
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
 8017dc8:	6878      	ldr	r0, [r7, #4]
 8017dca:	f7ff ffe9 	bl	8017da0 <_ZN6tflite18MicroMemoryPlannerD1Ev>
 8017dce:	2104      	movs	r1, #4
 8017dd0:	6878      	ldr	r0, [r7, #4]
 8017dd2:	f00c fe1e 	bl	8024a12 <_ZdlPvj>
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	4618      	mov	r0, r3
 8017dda:	3708      	adds	r7, #8
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	bd80      	pop	{r7, pc}

08017de0 <_ZN6tflite18MicroMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

  // Record details of an offline planned buffer offset we want to place.
  // offline_offset is the buffer offset from the start of the arena.
  // This is to support offline memory planning from the flatbuffer metadata.
  // By default, it returns an error.
  virtual TfLiteStatus AddBuffer(ErrorReporter* error_reporter, int size,
 8017de0:	b480      	push	{r7}
 8017de2:	b085      	sub	sp, #20
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	60f8      	str	r0, [r7, #12]
 8017de8:	60b9      	str	r1, [r7, #8]
 8017dea:	607a      	str	r2, [r7, #4]
 8017dec:	603b      	str	r3, [r7, #0]
                                 int first_time_used, int last_time_used,
                                 int offline_offset) {
    return kTfLiteError;
 8017dee:	2301      	movs	r3, #1
  }
 8017df0:	4618      	mov	r0, r3
 8017df2:	3714      	adds	r7, #20
 8017df4:	46bd      	mov	sp, r7
 8017df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfa:	4770      	bx	lr

08017dfc <_ZN6tflite18MicroMemoryPlanner4InitEPhi>:
  // Provides the scratch buffer in case that the memory planner needs it.
  // The lifetime of scratch buffers lifetime lasts until the static memory plan
  // is committed.
  // The default implementation is for the memory planner that does not need
  // scratch buffer and simply returns ok.
  virtual TfLiteStatus Init(unsigned char* scratch_buffer,
 8017dfc:	b480      	push	{r7}
 8017dfe:	b085      	sub	sp, #20
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	60f8      	str	r0, [r7, #12]
 8017e04:	60b9      	str	r1, [r7, #8]
 8017e06:	607a      	str	r2, [r7, #4]
                            int scratch_buffer_size) {
    return kTfLiteOk;
 8017e08:	2300      	movs	r3, #0
  }
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3714      	adds	r7, #20
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e14:	4770      	bx	lr

08017e16 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 8017e16:	b480      	push	{r7}
 8017e18:	b083      	sub	sp, #12
 8017e1a:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 8017e1c:	2328      	movs	r3, #40	; 0x28
 8017e1e:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 8017e20:	2328      	movs	r3, #40	; 0x28
  }
 8017e22:	4618      	mov	r0, r3
 8017e24:	370c      	adds	r7, #12
 8017e26:	46bd      	mov	sp, r7
 8017e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2c:	4770      	bx	lr

08017e2e <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
}  // namespace

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 8017e2e:	b480      	push	{r7}
 8017e30:	b089      	sub	sp, #36	; 0x24
 8017e32:	af00      	add	r7, sp, #0
 8017e34:	60f8      	str	r0, [r7, #12]
 8017e36:	60b9      	str	r1, [r7, #8]
 8017e38:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8017e3e:	2301      	movs	r3, #1
 8017e40:	61bb      	str	r3, [r7, #24]
 8017e42:	69ba      	ldr	r2, [r7, #24]
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	429a      	cmp	r2, r3
 8017e48:	da4c      	bge.n	8017ee4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 8017e4a:	69bb      	ldr	r3, [r7, #24]
 8017e4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017e50:	3b01      	subs	r3, #1
 8017e52:	009b      	lsls	r3, r3, #2
 8017e54:	68fa      	ldr	r2, [r7, #12]
 8017e56:	4413      	add	r3, r2
 8017e58:	681a      	ldr	r2, [r3, #0]
 8017e5a:	69bb      	ldr	r3, [r7, #24]
 8017e5c:	009b      	lsls	r3, r3, #2
 8017e5e:	68f9      	ldr	r1, [r7, #12]
 8017e60:	440b      	add	r3, r1
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	429a      	cmp	r2, r3
 8017e66:	da39      	bge.n	8017edc <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 8017e68:	69bb      	ldr	r3, [r7, #24]
 8017e6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017e6e:	3b01      	subs	r3, #1
 8017e70:	009b      	lsls	r3, r3, #2
 8017e72:	68fa      	ldr	r2, [r7, #12]
 8017e74:	4413      	add	r3, r2
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 8017e7a:	69bb      	ldr	r3, [r7, #24]
 8017e7c:	009b      	lsls	r3, r3, #2
 8017e7e:	68fa      	ldr	r2, [r7, #12]
 8017e80:	441a      	add	r2, r3
 8017e82:	69bb      	ldr	r3, [r7, #24]
 8017e84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017e88:	3b01      	subs	r3, #1
 8017e8a:	009b      	lsls	r3, r3, #2
 8017e8c:	68f9      	ldr	r1, [r7, #12]
 8017e8e:	440b      	add	r3, r1
 8017e90:	6812      	ldr	r2, [r2, #0]
 8017e92:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 8017e94:	69bb      	ldr	r3, [r7, #24]
 8017e96:	009b      	lsls	r3, r3, #2
 8017e98:	68fa      	ldr	r2, [r7, #12]
 8017e9a:	4413      	add	r3, r2
 8017e9c:	697a      	ldr	r2, [r7, #20]
 8017e9e:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 8017ea0:	69bb      	ldr	r3, [r7, #24]
 8017ea2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017ea6:	3b01      	subs	r3, #1
 8017ea8:	009b      	lsls	r3, r3, #2
 8017eaa:	68ba      	ldr	r2, [r7, #8]
 8017eac:	4413      	add	r3, r2
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8017eb2:	69bb      	ldr	r3, [r7, #24]
 8017eb4:	009b      	lsls	r3, r3, #2
 8017eb6:	68ba      	ldr	r2, [r7, #8]
 8017eb8:	441a      	add	r2, r3
 8017eba:	69bb      	ldr	r3, [r7, #24]
 8017ebc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017ec0:	3b01      	subs	r3, #1
 8017ec2:	009b      	lsls	r3, r3, #2
 8017ec4:	68b9      	ldr	r1, [r7, #8]
 8017ec6:	440b      	add	r3, r1
 8017ec8:	6812      	ldr	r2, [r2, #0]
 8017eca:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 8017ecc:	69bb      	ldr	r3, [r7, #24]
 8017ece:	009b      	lsls	r3, r3, #2
 8017ed0:	68ba      	ldr	r2, [r7, #8]
 8017ed2:	4413      	add	r3, r2
 8017ed4:	693a      	ldr	r2, [r7, #16]
 8017ed6:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 8017ed8:	2301      	movs	r3, #1
 8017eda:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8017edc:	69bb      	ldr	r3, [r7, #24]
 8017ede:	3301      	adds	r3, #1
 8017ee0:	61bb      	str	r3, [r7, #24]
 8017ee2:	e7ae      	b.n	8017e42 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 8017ee4:	7ffb      	ldrb	r3, [r7, #31]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d000      	beq.n	8017eec <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 8017eea:	e7a6      	b.n	8017e3a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 8017eec:	bf00      	nop
 8017eee:	3724      	adds	r7, #36	; 0x24
 8017ef0:	46bd      	mov	sp, r7
 8017ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef6:	4770      	bx	lr

08017ef8 <_ZN6tflite19GreedyMemoryPlannerC1Ev>:

GreedyMemoryPlanner::GreedyMemoryPlanner() {}
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b082      	sub	sp, #8
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	4618      	mov	r0, r3
 8017f04:	f7ff ff3c 	bl	8017d80 <_ZN6tflite18MicroMemoryPlannerC1Ev>
 8017f08:	4a03      	ldr	r2, [pc, #12]	; (8017f18 <_ZN6tflite19GreedyMemoryPlannerC1Ev+0x20>)
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	601a      	str	r2, [r3, #0]
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	4618      	mov	r0, r3
 8017f12:	3708      	adds	r7, #8
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bd80      	pop	{r7, pc}
 8017f18:	08031058 	.word	0x08031058

08017f1c <_ZN6tflite19GreedyMemoryPlanner4InitEPhi>:

TfLiteStatus GreedyMemoryPlanner::Init(unsigned char* scratch_buffer,
                                       int scratch_buffer_size) {
 8017f1c:	b590      	push	{r4, r7, lr}
 8017f1e:	b087      	sub	sp, #28
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	60f8      	str	r0, [r7, #12]
 8017f24:	60b9      	str	r1, [r7, #8]
 8017f26:	607a      	str	r2, [r7, #4]
  // Reset internal states
  buffer_count_ = 0;
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	2200      	movs	r2, #0
 8017f2c:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	2201      	movs	r2, #1
 8017f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8017f36:	687c      	ldr	r4, [r7, #4]
 8017f38:	f7ff ff6d 	bl	8017e16 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	fbb4 f3f3 	udiv	r3, r4, r3
 8017f42:	461a      	mov	r2, r3
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 8017f48:	68bb      	ldr	r3, [r7, #8]
 8017f4a:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	697a      	ldr	r2, [r7, #20]
 8017f50:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	685b      	ldr	r3, [r3, #4]
 8017f56:	011b      	lsls	r3, r3, #4
 8017f58:	697a      	ldr	r2, [r7, #20]
 8017f5a:	4413      	add	r3, r2
 8017f5c:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	697a      	ldr	r2, [r7, #20]
 8017f62:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	685b      	ldr	r3, [r3, #4]
 8017f68:	009b      	lsls	r3, r3, #2
 8017f6a:	697a      	ldr	r2, [r7, #20]
 8017f6c:	4413      	add	r3, r2
 8017f6e:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	697a      	ldr	r2, [r7, #20]
 8017f74:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	685b      	ldr	r3, [r3, #4]
 8017f7a:	009b      	lsls	r3, r3, #2
 8017f7c:	697a      	ldr	r2, [r7, #20]
 8017f7e:	4413      	add	r3, r2
 8017f80:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	697a      	ldr	r2, [r7, #20]
 8017f86:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	685b      	ldr	r3, [r3, #4]
 8017f8c:	461a      	mov	r2, r3
 8017f8e:	4613      	mov	r3, r2
 8017f90:	005b      	lsls	r3, r3, #1
 8017f92:	4413      	add	r3, r2
 8017f94:	009b      	lsls	r3, r3, #2
 8017f96:	461a      	mov	r2, r3
 8017f98:	697b      	ldr	r3, [r7, #20]
 8017f9a:	4413      	add	r3, r2
 8017f9c:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	697a      	ldr	r2, [r7, #20]
 8017fa2:	625a      	str	r2, [r3, #36]	; 0x24
  return kTfLiteOk;
 8017fa4:	2300      	movs	r3, #0
}
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	371c      	adds	r7, #28
 8017faa:	46bd      	mov	sp, r7
 8017fac:	bd90      	pop	{r4, r7, pc}
	...

08017fb0 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b082      	sub	sp, #8
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
 8017fb8:	4a05      	ldr	r2, [pc, #20]	; (8017fd0 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	601a      	str	r2, [r3, #0]
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7ff feed 	bl	8017da0 <_ZN6tflite18MicroMemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	4618      	mov	r0, r3
 8017fca:	3708      	adds	r7, #8
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	bd80      	pop	{r7, pc}
 8017fd0:	08031058 	.word	0x08031058

08017fd4 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
}
 8017fdc:	6878      	ldr	r0, [r7, #4]
 8017fde:	f7ff ffe7 	bl	8017fb0 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8017fe2:	212c      	movs	r1, #44	; 0x2c
 8017fe4:	6878      	ldr	r0, [r7, #4]
 8017fe6:	f00c fd14 	bl	8024a12 <_ZdlPvj>
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	4618      	mov	r0, r3
 8017fee:	3708      	adds	r7, #8
 8017ff0:	46bd      	mov	sp, r7
 8017ff2:	bd80      	pop	{r7, pc}

08017ff4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b086      	sub	sp, #24
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	60f8      	str	r0, [r7, #12]
 8017ffc:	60b9      	str	r1, [r7, #8]
 8017ffe:	607a      	str	r2, [r7, #4]
 8018000:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	689a      	ldr	r2, [r3, #8]
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	685b      	ldr	r3, [r3, #4]
 801800a:	429a      	cmp	r2, r3
 801800c:	db08      	blt.n	8018020 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	685b      	ldr	r3, [r3, #4]
 8018012:	461a      	mov	r2, r3
 8018014:	4913      	ldr	r1, [pc, #76]	; (8018064 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 8018016:	68b8      	ldr	r0, [r7, #8]
 8018018:	f7f0 fc74 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 801801c:	2301      	movs	r3, #1
 801801e:	e01d      	b.n	801805c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	68da      	ldr	r2, [r3, #12]
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	689b      	ldr	r3, [r3, #8]
 8018028:	011b      	lsls	r3, r3, #4
 801802a:	4413      	add	r3, r2
 801802c:	617b      	str	r3, [r7, #20]
  current->size = size;
 801802e:	697b      	ldr	r3, [r7, #20]
 8018030:	687a      	ldr	r2, [r7, #4]
 8018032:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 8018034:	697b      	ldr	r3, [r7, #20]
 8018036:	683a      	ldr	r2, [r7, #0]
 8018038:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	6a3a      	ldr	r2, [r7, #32]
 801803e:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 8018040:	697b      	ldr	r3, [r7, #20]
 8018042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018046:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	689b      	ldr	r3, [r3, #8]
 801804c:	1c5a      	adds	r2, r3, #1
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	2201      	movs	r2, #1
 8018056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 801805a:	2300      	movs	r3, #0
}
 801805c:	4618      	mov	r0, r3
 801805e:	3718      	adds	r7, #24
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}
 8018064:	0802bf48 	.word	0x0802bf48

08018068 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 8018068:	b590      	push	{r4, r7, lr}
 801806a:	b089      	sub	sp, #36	; 0x24
 801806c:	af02      	add	r7, sp, #8
 801806e:	60f8      	str	r0, [r7, #12]
 8018070:	60b9      	str	r1, [r7, #8]
 8018072:	607a      	str	r2, [r7, #4]
 8018074:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	68da      	ldr	r2, [r3, #12]
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	689b      	ldr	r3, [r3, #8]
 801807e:	011b      	lsls	r3, r3, #4
 8018080:	4413      	add	r3, r2
 8018082:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	3308      	adds	r3, #8
 801808a:	681c      	ldr	r4, [r3, #0]
 801808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801808e:	9300      	str	r3, [sp, #0]
 8018090:	683b      	ldr	r3, [r7, #0]
 8018092:	687a      	ldr	r2, [r7, #4]
 8018094:	68b9      	ldr	r1, [r7, #8]
 8018096:	68f8      	ldr	r0, [r7, #12]
 8018098:	47a0      	blx	r4
 801809a:	4603      	mov	r3, r0
 801809c:	2b00      	cmp	r3, #0
 801809e:	bf14      	ite	ne
 80180a0:	2301      	movne	r3, #1
 80180a2:	2300      	moveq	r3, #0
 80180a4:	b2db      	uxtb	r3, r3
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d001      	beq.n	80180ae <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 80180aa:	2301      	movs	r3, #1
 80180ac:	e003      	b.n	80180b6 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 80180ae:	697b      	ldr	r3, [r7, #20]
 80180b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180b2:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 80180b4:	2300      	movs	r3, #0
}
 80180b6:	4618      	mov	r0, r3
 80180b8:	371c      	adds	r7, #28
 80180ba:	46bd      	mov	sp, r7
 80180bc:	bd90      	pop	{r4, r7, pc}

080180be <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 80180be:	b480      	push	{r7}
 80180c0:	b087      	sub	sp, #28
 80180c2:	af00      	add	r7, sp, #0
 80180c4:	60f8      	str	r0, [r7, #12]
 80180c6:	60b9      	str	r1, [r7, #8]
 80180c8:	607a      	str	r2, [r7, #4]
 80180ca:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	68da      	ldr	r2, [r3, #12]
 80180d0:	68bb      	ldr	r3, [r7, #8]
 80180d2:	685b      	ldr	r3, [r3, #4]
 80180d4:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 80180d6:	4413      	add	r3, r2
 80180d8:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 80180da:	697b      	ldr	r3, [r7, #20]
 80180dc:	689b      	ldr	r3, [r3, #8]
 80180de:	683a      	ldr	r2, [r7, #0]
 80180e0:	429a      	cmp	r2, r3
 80180e2:	da01      	bge.n	80180e8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 80180e4:	2300      	movs	r3, #0
 80180e6:	e007      	b.n	80180f8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 80180e8:	697b      	ldr	r3, [r7, #20]
 80180ea:	68db      	ldr	r3, [r3, #12]
 80180ec:	687a      	ldr	r2, [r7, #4]
 80180ee:	429a      	cmp	r2, r3
 80180f0:	dd01      	ble.n	80180f6 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 80180f2:	2300      	movs	r3, #0
 80180f4:	e000      	b.n	80180f8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 80180f6:	2301      	movs	r3, #1
}
 80180f8:	4618      	mov	r0, r3
 80180fa:	371c      	adds	r7, #28
 80180fc:	46bd      	mov	sp, r7
 80180fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018102:	4770      	bx	lr

08018104 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 8018104:	b580      	push	{r7, lr}
 8018106:	b086      	sub	sp, #24
 8018108:	af00      	add	r7, sp, #0
 801810a:	60f8      	str	r0, [r7, #12]
 801810c:	60b9      	str	r1, [r7, #8]
 801810e:	607a      	str	r2, [r7, #4]
 8018110:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 8018112:	2300      	movs	r3, #0
 8018114:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 8018116:	68bb      	ldr	r3, [r7, #8]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d10b      	bne.n	8018134 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	699a      	ldr	r2, [r3, #24]
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	6a1b      	ldr	r3, [r3, #32]
 8018124:	4619      	mov	r1, r3
 8018126:	460b      	mov	r3, r1
 8018128:	005b      	lsls	r3, r3, #1
 801812a:	440b      	add	r3, r1
 801812c:	009b      	lsls	r3, r3, #2
 801812e:	4413      	add	r3, r2
 8018130:	613b      	str	r3, [r7, #16]
 8018132:	e011      	b.n	8018158 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 8018134:	68bb      	ldr	r3, [r7, #8]
 8018136:	689b      	ldr	r3, [r3, #8]
 8018138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801813c:	d101      	bne.n	8018142 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 801813e:	2300      	movs	r3, #0
 8018140:	e029      	b.n	8018196 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	699a      	ldr	r2, [r3, #24]
 8018146:	68bb      	ldr	r3, [r7, #8]
 8018148:	689b      	ldr	r3, [r3, #8]
 801814a:	4619      	mov	r1, r3
 801814c:	460b      	mov	r3, r1
 801814e:	005b      	lsls	r3, r3, #1
 8018150:	440b      	add	r3, r1
 8018152:	009b      	lsls	r3, r3, #2
 8018154:	4413      	add	r3, r2
 8018156:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8018158:	683b      	ldr	r3, [r7, #0]
 801815a:	687a      	ldr	r2, [r7, #4]
 801815c:	6939      	ldr	r1, [r7, #16]
 801815e:	68f8      	ldr	r0, [r7, #12]
 8018160:	f7ff ffad 	bl	80180be <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 8018164:	4603      	mov	r3, r0
 8018166:	2b00      	cmp	r3, #0
 8018168:	d002      	beq.n	8018170 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 801816a:	693b      	ldr	r3, [r7, #16]
 801816c:	617b      	str	r3, [r7, #20]
      break;
 801816e:	e011      	b.n	8018194 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 8018170:	693b      	ldr	r3, [r7, #16]
 8018172:	689b      	ldr	r3, [r3, #8]
 8018174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018178:	d00b      	beq.n	8018192 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	699a      	ldr	r2, [r3, #24]
 801817e:	693b      	ldr	r3, [r7, #16]
 8018180:	689b      	ldr	r3, [r3, #8]
 8018182:	4619      	mov	r1, r3
 8018184:	460b      	mov	r3, r1
 8018186:	005b      	lsls	r3, r3, #1
 8018188:	440b      	add	r3, r1
 801818a:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 801818c:	4413      	add	r3, r2
 801818e:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8018190:	e7e2      	b.n	8018158 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 8018192:	bf00      	nop
  } while (true);
  return result;
 8018194:	697b      	ldr	r3, [r7, #20]
}
 8018196:	4618      	mov	r0, r3
 8018198:	3718      	adds	r7, #24
 801819a:	46bd      	mov	sp, r7
 801819c:	bd80      	pop	{r7, pc}

0801819e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 801819e:	b580      	push	{r7, lr}
 80181a0:	b098      	sub	sp, #96	; 0x60
 80181a2:	af00      	add	r7, sp, #0
 80181a4:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80181ac:	f083 0301 	eor.w	r3, r3, #1
 80181b0:	b2db      	uxtb	r3, r3
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	f040 815f 	bne.w	8018476 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	689b      	ldr	r3, [r3, #8]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	f000 815a 	beq.w	8018476 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	2200      	movs	r2, #0
 80181c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	689b      	ldr	r3, [r3, #8]
 80181ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 80181d0:	2300      	movs	r3, #0
 80181d2:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 80181d4:	2300      	movs	r3, #0
 80181d6:	657b      	str	r3, [r7, #84]	; 0x54
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	689b      	ldr	r3, [r3, #8]
 80181dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80181de:	429a      	cmp	r2, r3
 80181e0:	da4d      	bge.n	801827e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	68da      	ldr	r2, [r3, #12]
 80181e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181e8:	011b      	lsls	r3, r3, #4
 80181ea:	4413      	add	r3, r2
 80181ec:	685b      	ldr	r3, [r3, #4]
 80181ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80181f2:	d11e      	bne.n	8018232 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 80181f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80181f6:	3b01      	subs	r3, #1
 80181f8:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	68da      	ldr	r2, [r3, #12]
 80181fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018200:	011b      	lsls	r3, r3, #4
 8018202:	441a      	add	r2, r3
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	6919      	ldr	r1, [r3, #16]
 8018208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801820a:	009b      	lsls	r3, r3, #2
 801820c:	440b      	add	r3, r1
 801820e:	6812      	ldr	r2, [r2, #0]
 8018210:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	695a      	ldr	r2, [r3, #20]
 8018216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018218:	009b      	lsls	r3, r3, #2
 801821a:	4413      	add	r3, r2
 801821c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801821e:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018226:	009b      	lsls	r3, r3, #2
 8018228:	4413      	add	r3, r2
 801822a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801822e:	601a      	str	r2, [r3, #0]
 8018230:	e021      	b.n	8018276 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	68da      	ldr	r2, [r3, #12]
 8018236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018238:	011b      	lsls	r3, r3, #4
 801823a:	441a      	add	r2, r3
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	6919      	ldr	r1, [r3, #16]
 8018240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018242:	009b      	lsls	r3, r3, #2
 8018244:	440b      	add	r3, r1
 8018246:	6812      	ldr	r2, [r2, #0]
 8018248:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	695a      	ldr	r2, [r3, #20]
 801824e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018250:	009b      	lsls	r3, r3, #2
 8018252:	4413      	add	r3, r2
 8018254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018256:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	68da      	ldr	r2, [r3, #12]
 801825c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801825e:	011b      	lsls	r3, r3, #4
 8018260:	441a      	add	r2, r3
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8018266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018268:	009b      	lsls	r3, r3, #2
 801826a:	440b      	add	r3, r1
 801826c:	6852      	ldr	r2, [r2, #4]
 801826e:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 8018270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018272:	3301      	adds	r3, #1
 8018274:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8018276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018278:	3301      	adds	r3, #1
 801827a:	657b      	str	r3, [r7, #84]	; 0x54
 801827c:	e7ac      	b.n	80181d8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	691a      	ldr	r2, [r3, #16]
 8018282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018284:	009b      	lsls	r3, r3, #2
 8018286:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	695a      	ldr	r2, [r3, #20]
 801828c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801828e:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8018290:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8018296:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018298:	1ad3      	subs	r3, r2, r3
 801829a:	461a      	mov	r2, r3
 801829c:	f7ff fdc7 	bl	8017e2e <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	2200      	movs	r2, #0
 80182a4:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	2201      	movs	r2, #1
 80182aa:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	699a      	ldr	r2, [r3, #24]
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6a1b      	ldr	r3, [r3, #32]
 80182b4:	4619      	mov	r1, r3
 80182b6:	460b      	mov	r3, r1
 80182b8:	005b      	lsls	r3, r3, #1
 80182ba:	440b      	add	r3, r1
 80182bc:	009b      	lsls	r3, r3, #2
 80182be:	4413      	add	r3, r2
 80182c0:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 80182c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80182c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182c8:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	695b      	ldr	r3, [r3, #20]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 80182d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80182d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80182d6:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	68da      	ldr	r2, [r3, #12]
 80182dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182de:	011b      	lsls	r3, r3, #4
 80182e0:	4413      	add	r3, r2
 80182e2:	685b      	ldr	r3, [r3, #4]
 80182e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80182e8:	d106      	bne.n	80182f8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80182ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182f0:	009b      	lsls	r3, r3, #2
 80182f2:	4413      	add	r3, r2
 80182f4:	2200      	movs	r2, #0
 80182f6:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80182fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182fe:	009b      	lsls	r3, r3, #2
 8018300:	4413      	add	r3, r2
 8018302:	681a      	ldr	r2, [r3, #0]
 8018304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018306:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 8018308:	2301      	movs	r3, #1
 801830a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	689b      	ldr	r3, [r3, #8]
 8018310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018312:	429a      	cmp	r2, r3
 8018314:	f280 80b0 	bge.w	8018478 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	695a      	ldr	r2, [r3, #20]
 801831c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801831e:	009b      	lsls	r3, r3, #2
 8018320:	4413      	add	r3, r2
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	68da      	ldr	r2, [r3, #12]
 801832a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801832c:	011b      	lsls	r3, r3, #4
 801832e:	4413      	add	r3, r2
 8018330:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 8018332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 8018338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801833a:	689b      	ldr	r3, [r3, #8]
 801833c:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 801833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018340:	68db      	ldr	r3, [r3, #12]
 8018342:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 8018344:	2300      	movs	r3, #0
 8018346:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 8018348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801834a:	685b      	ldr	r3, [r3, #4]
 801834c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018350:	d12d      	bne.n	80183ae <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 8018352:	2300      	movs	r3, #0
 8018354:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 8018356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801835a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801835c:	6878      	ldr	r0, [r7, #4]
 801835e:	f7ff fed1 	bl	8018104 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 8018362:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 8018364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018366:	2b00      	cmp	r3, #0
 8018368:	d012      	beq.n	8018390 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	68da      	ldr	r2, [r3, #12]
 801836e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018370:	685b      	ldr	r3, [r3, #4]
 8018372:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 8018374:	4413      	add	r3, r2
 8018376:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 8018378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801837a:	681a      	ldr	r2, [r3, #0]
 801837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801837e:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 8018380:	4413      	add	r3, r2
 8018382:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 8018384:	6a3a      	ldr	r2, [r7, #32]
 8018386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018388:	429a      	cmp	r2, r3
 801838a:	dd01      	ble.n	8018390 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 801838c:	6a3b      	ldr	r3, [r7, #32]
 801838e:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 8018390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018392:	2b00      	cmp	r3, #0
 8018394:	d00f      	beq.n	80183b6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 8018396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018398:	681a      	ldr	r2, [r3, #0]
 801839a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801839c:	1ad3      	subs	r3, r2, r3
 801839e:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 80183a0:	69fa      	ldr	r2, [r7, #28]
 80183a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183a4:	429a      	cmp	r2, r3
 80183a6:	da08      	bge.n	80183ba <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 80183a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183aa:	647b      	str	r3, [r7, #68]	; 0x44
      }
 80183ac:	e7d3      	b.n	8018356 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 80183ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183b0:	685b      	ldr	r3, [r3, #4]
 80183b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80183b4:	e002      	b.n	80183bc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 80183b6:	bf00      	nop
 80183b8:	e000      	b.n	80183bc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 80183ba:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80183c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80183c2:	009b      	lsls	r3, r3, #2
 80183c4:	4413      	add	r3, r2
 80183c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80183c8:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	699a      	ldr	r2, [r3, #24]
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	69db      	ldr	r3, [r3, #28]
 80183d2:	4619      	mov	r1, r3
 80183d4:	460b      	mov	r3, r1
 80183d6:	005b      	lsls	r3, r3, #1
 80183d8:	440b      	add	r3, r1
 80183da:	009b      	lsls	r3, r3, #2
 80183dc:	4413      	add	r3, r2
 80183de:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 80183e0:	69bb      	ldr	r3, [r7, #24]
 80183e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80183e4:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 80183e6:	69bb      	ldr	r3, [r7, #24]
 80183e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80183ea:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	69db      	ldr	r3, [r3, #28]
 80183f0:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	69db      	ldr	r3, [r3, #28]
 80183f6:	1c5a      	adds	r2, r3, #1
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 80183fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018402:	429a      	cmp	r2, r3
 8018404:	da09      	bge.n	801841a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 8018406:	69bb      	ldr	r3, [r7, #24]
 8018408:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	6a1a      	ldr	r2, [r3, #32]
 801840e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018410:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	697a      	ldr	r2, [r7, #20]
 8018416:	621a      	str	r2, [r3, #32]
 8018418:	e029      	b.n	801846e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 801841a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801841c:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 801841e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018420:	689b      	ldr	r3, [r3, #8]
 8018422:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 8018424:	693b      	ldr	r3, [r7, #16]
 8018426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801842a:	d107      	bne.n	801843c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 801842c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801842e:	697a      	ldr	r2, [r7, #20]
 8018430:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 8018432:	69bb      	ldr	r3, [r7, #24]
 8018434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018438:	609a      	str	r2, [r3, #8]
          break;
 801843a:	e018      	b.n	801846e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	6999      	ldr	r1, [r3, #24]
 8018440:	693a      	ldr	r2, [r7, #16]
 8018442:	4613      	mov	r3, r2
 8018444:	005b      	lsls	r3, r3, #1
 8018446:	4413      	add	r3, r2
 8018448:	009b      	lsls	r3, r3, #2
 801844a:	440b      	add	r3, r1
 801844c:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018454:	429a      	cmp	r2, r3
 8018456:	da07      	bge.n	8018468 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 8018458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801845a:	689a      	ldr	r2, [r3, #8]
 801845c:	69bb      	ldr	r3, [r7, #24]
 801845e:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 8018460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018462:	697a      	ldr	r2, [r7, #20]
 8018464:	609a      	str	r2, [r3, #8]
          break;
 8018466:	e002      	b.n	801846e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	643b      	str	r3, [r7, #64]	; 0x40
      }
 801846c:	e7d7      	b.n	801841e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 801846e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018470:	3301      	adds	r3, #1
 8018472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018474:	e74a      	b.n	801830c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 8018476:	bf00      	nop
    }
  }
}
 8018478:	3760      	adds	r7, #96	; 0x60
 801847a:	46bd      	mov	sp, r7
 801847c:	bd80      	pop	{r7, pc}

0801847e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 801847e:	b580      	push	{r7, lr}
 8018480:	b086      	sub	sp, #24
 8018482:	af00      	add	r7, sp, #0
 8018484:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 8018486:	6878      	ldr	r0, [r7, #4]
 8018488:	f7ff fe89 	bl	801819e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	689b      	ldr	r3, [r3, #8]
 8018490:	2b00      	cmp	r3, #0
 8018492:	d101      	bne.n	8018498 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 8018494:	2300      	movs	r3, #0
 8018496:	e035      	b.n	8018504 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	699a      	ldr	r2, [r3, #24]
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	6a1b      	ldr	r3, [r3, #32]
 80184a0:	4619      	mov	r1, r3
 80184a2:	460b      	mov	r3, r1
 80184a4:	005b      	lsls	r3, r3, #1
 80184a6:	440b      	add	r3, r1
 80184a8:	009b      	lsls	r3, r3, #2
 80184aa:	4413      	add	r3, r2
 80184ac:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 80184ae:	2300      	movs	r3, #0
 80184b0:	613b      	str	r3, [r7, #16]
  while (entry) {
 80184b2:	697b      	ldr	r3, [r7, #20]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d024      	beq.n	8018502 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	68da      	ldr	r2, [r3, #12]
 80184bc:	697b      	ldr	r3, [r7, #20]
 80184be:	685b      	ldr	r3, [r3, #4]
 80184c0:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 80184c2:	4413      	add	r3, r2
 80184c4:	60fb      	str	r3, [r7, #12]
    const size_t current_size = entry->offset + requirements->size;
 80184c6:	697b      	ldr	r3, [r7, #20]
 80184c8:	681a      	ldr	r2, [r3, #0]
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	4413      	add	r3, r2
 80184d0:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 80184d2:	68ba      	ldr	r2, [r7, #8]
 80184d4:	693b      	ldr	r3, [r7, #16]
 80184d6:	429a      	cmp	r2, r3
 80184d8:	d901      	bls.n	80184de <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 80184da:	68bb      	ldr	r3, [r7, #8]
 80184dc:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 80184de:	697b      	ldr	r3, [r7, #20]
 80184e0:	689b      	ldr	r3, [r3, #8]
 80184e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80184e6:	d00b      	beq.n	8018500 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	699a      	ldr	r2, [r3, #24]
 80184ec:	697b      	ldr	r3, [r7, #20]
 80184ee:	689b      	ldr	r3, [r3, #8]
 80184f0:	4619      	mov	r1, r3
 80184f2:	460b      	mov	r3, r1
 80184f4:	005b      	lsls	r3, r3, #1
 80184f6:	440b      	add	r3, r1
 80184f8:	009b      	lsls	r3, r3, #2
 80184fa:	4413      	add	r3, r2
 80184fc:	617b      	str	r3, [r7, #20]
  while (entry) {
 80184fe:	e7d8      	b.n	80184b2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 8018500:	bf00      	nop
  }
  return max_size;
 8018502:	693b      	ldr	r3, [r7, #16]
}
 8018504:	4618      	mov	r0, r3
 8018506:	3718      	adds	r7, #24
 8018508:	46bd      	mov	sp, r7
 801850a:	bd80      	pop	{r7, pc}

0801850c <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 801850c:	b480      	push	{r7}
 801850e:	b083      	sub	sp, #12
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	689b      	ldr	r3, [r3, #8]
 8018518:	4618      	mov	r0, r3
 801851a:	370c      	adds	r7, #12
 801851c:	46bd      	mov	sp, r7
 801851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018522:	4770      	bx	lr

08018524 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 8018524:	b580      	push	{r7, lr}
 8018526:	b084      	sub	sp, #16
 8018528:	af00      	add	r7, sp, #0
 801852a:	60f8      	str	r0, [r7, #12]
 801852c:	60b9      	str	r1, [r7, #8]
 801852e:	607a      	str	r2, [r7, #4]
 8018530:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 8018532:	68f8      	ldr	r0, [r7, #12]
 8018534:	f7ff fe33 	bl	801819e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	2b00      	cmp	r3, #0
 801853c:	db04      	blt.n	8018548 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	689b      	ldr	r3, [r3, #8]
 8018542:	687a      	ldr	r2, [r7, #4]
 8018544:	429a      	cmp	r2, r3
 8018546:	db08      	blt.n	801855a <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	689b      	ldr	r3, [r3, #8]
 801854c:	687a      	ldr	r2, [r7, #4]
 801854e:	4909      	ldr	r1, [pc, #36]	; (8018574 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 8018550:	68b8      	ldr	r0, [r7, #8]
 8018552:	f7f0 f9d7 	bl	8008904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 8018556:	2301      	movs	r3, #1
 8018558:	e008      	b.n	801856c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	009b      	lsls	r3, r3, #2
 8018562:	4413      	add	r3, r2
 8018564:	681a      	ldr	r2, [r3, #0]
 8018566:	683b      	ldr	r3, [r7, #0]
 8018568:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801856a:	2300      	movs	r3, #0
}
 801856c:	4618      	mov	r0, r3
 801856e:	3710      	adds	r7, #16
 8018570:	46bd      	mov	sp, r7
 8018572:	bd80      	pop	{r7, pc}
 8018574:	0802bfbc 	.word	0x0802bfbc

08018578 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
 8018578:	b580      	push	{r7, lr}
 801857a:	b08e      	sub	sp, #56	; 0x38
 801857c:	af08      	add	r7, sp, #32
 801857e:	60f8      	str	r0, [r7, #12]
 8018580:	60b9      	str	r1, [r7, #8]
 8018582:	607a      	str	r2, [r7, #4]
 8018584:	603b      	str	r3, [r7, #0]
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
 8018586:	2300      	movs	r3, #0
 8018588:	75fb      	strb	r3, [r7, #23]
    if (output_dims->w % 4 != 0)
 801858a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801858c:	689b      	ldr	r3, [r3, #8]
 801858e:	f003 0303 	and.w	r3, r3, #3
 8018592:	2b00      	cmp	r3, #0
 8018594:	d002      	beq.n	801859c <arm_convolve_1_x_n_s8+0x24>
    {
        status = ARM_MATH_SIZE_MISMATCH;
 8018596:	23fd      	movs	r3, #253	; 0xfd
 8018598:	75fb      	strb	r3, [r7, #23]
        goto out;
 801859a:	e015      	b.n	80185c8 <arm_convolve_1_x_n_s8+0x50>
        }
        output_data += (3 * output_ch);
    }

#else
    status = arm_convolve_s8(ctx,
 801859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801859e:	9306      	str	r3, [sp, #24]
 80185a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185a2:	9305      	str	r3, [sp, #20]
 80185a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185a6:	9304      	str	r3, [sp, #16]
 80185a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185aa:	9303      	str	r3, [sp, #12]
 80185ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185ae:	9302      	str	r3, [sp, #8]
 80185b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b2:	9301      	str	r3, [sp, #4]
 80185b4:	6a3b      	ldr	r3, [r7, #32]
 80185b6:	9300      	str	r3, [sp, #0]
 80185b8:	683b      	ldr	r3, [r7, #0]
 80185ba:	687a      	ldr	r2, [r7, #4]
 80185bc:	68b9      	ldr	r1, [r7, #8]
 80185be:	68f8      	ldr	r0, [r7, #12]
 80185c0:	f000 f87d 	bl	80186be <arm_convolve_s8>
 80185c4:	4603      	mov	r3, r0
 80185c6:	75fb      	strb	r3, [r7, #23]
                             output_data);
#endif

out:
    /* Return to application */
    return status;
 80185c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80185cc:	4618      	mov	r0, r3
 80185ce:	3718      	adds	r7, #24
 80185d0:	46bd      	mov	sp, r7
 80185d2:	bd80      	pop	{r7, pc}

080185d4 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 80185d4:	b480      	push	{r7}
 80185d6:	b083      	sub	sp, #12
 80185d8:	af00      	add	r7, sp, #0
 80185da:	6078      	str	r0, [r7, #4]
 80185dc:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	68db      	ldr	r3, [r3, #12]
 80185e2:	683a      	ldr	r2, [r7, #0]
 80185e4:	6892      	ldr	r2, [r2, #8]
 80185e6:	fb02 f303 	mul.w	r3, r2, r3
 80185ea:	683a      	ldr	r2, [r7, #0]
 80185ec:	6852      	ldr	r2, [r2, #4]
 80185ee:	fb02 f303 	mul.w	r3, r2, r3
 80185f2:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 80185f4:	4618      	mov	r0, r3
 80185f6:	370c      	adds	r7, #12
 80185f8:	46bd      	mov	sp, r7
 80185fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185fe:	4770      	bx	lr

08018600 <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 8018600:	b5b0      	push	{r4, r5, r7, lr}
 8018602:	b092      	sub	sp, #72	; 0x48
 8018604:	af0a      	add	r7, sp, #40	; 0x28
 8018606:	60f8      	str	r0, [r7, #12]
 8018608:	60b9      	str	r1, [r7, #8]
 801860a:	607a      	str	r2, [r7, #4]
 801860c:	603b      	str	r3, [r7, #0]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 801860e:	683b      	ldr	r3, [r7, #0]
 8018610:	68db      	ldr	r3, [r3, #12]
 8018612:	f003 0303 	and.w	r3, r3, #3
 8018616:	2b00      	cmp	r3, #0
 8018618:	d10f      	bne.n	801863a <arm_convolve_1x1_s8_fast+0x3a>
 801861a:	68bb      	ldr	r3, [r7, #8]
 801861c:	691b      	ldr	r3, [r3, #16]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d10b      	bne.n	801863a <arm_convolve_1x1_s8_fast+0x3a>
 8018622:	68bb      	ldr	r3, [r7, #8]
 8018624:	695b      	ldr	r3, [r3, #20]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d107      	bne.n	801863a <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 801862a:	68bb      	ldr	r3, [r7, #8]
 801862c:	689b      	ldr	r3, [r3, #8]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 801862e:	2b01      	cmp	r3, #1
 8018630:	d103      	bne.n	801863a <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 8018632:	68bb      	ldr	r3, [r7, #8]
 8018634:	68db      	ldr	r3, [r3, #12]
 8018636:	2b01      	cmp	r3, #1
 8018638:	d002      	beq.n	8018640 <arm_convolve_1x1_s8_fast+0x40>
    {
        return ARM_MATH_SIZE_MISMATCH;
 801863a:	f06f 0302 	mvn.w	r3, #2
 801863e:	e02f      	b.n	80186a0 <arm_convolve_1x1_s8_fast+0xa0>
    }

#else
    /* Run the following code as reference implementation for Cortex-M processors with or without DSP extension */

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 8018640:	683b      	ldr	r3, [r7, #0]
 8018642:	689b      	ldr	r3, [r3, #8]
 8018644:	683a      	ldr	r2, [r7, #0]
 8018646:	6852      	ldr	r2, [r2, #4]
 8018648:	fb02 f303 	mul.w	r3, r2, r3
 801864c:	683a      	ldr	r2, [r7, #0]
 801864e:	6812      	ldr	r2, [r2, #0]
 8018650:	fb02 f303 	mul.w	r3, r2, r3
 8018654:	61fb      	str	r3, [r7, #28]
    const int32_t rhs_rows = output_dims->c;
 8018656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018658:	68db      	ldr	r3, [r3, #12]
 801865a:	61bb      	str	r3, [r7, #24]
    const int32_t rhs_cols = input_dims->c;
 801865c:	683b      	ldr	r3, [r7, #0]
 801865e:	68db      	ldr	r3, [r3, #12]
 8018660:	617b      	str	r3, [r7, #20]

    arm_nn_mat_mult_nt_t_s8(input_data,
                            filter_data,
                            bias_data,
                            output_data,
                            quant_params->multiplier,
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	681b      	ldr	r3, [r3, #0]
                            quant_params->shift,
 8018666:	687a      	ldr	r2, [r7, #4]
 8018668:	6852      	ldr	r2, [r2, #4]
    arm_nn_mat_mult_nt_t_s8(input_data,
 801866a:	68b9      	ldr	r1, [r7, #8]
 801866c:	6809      	ldr	r1, [r1, #0]
 801866e:	68b8      	ldr	r0, [r7, #8]
 8018670:	6840      	ldr	r0, [r0, #4]
 8018672:	68bc      	ldr	r4, [r7, #8]
 8018674:	6a24      	ldr	r4, [r4, #32]
 8018676:	68bd      	ldr	r5, [r7, #8]
 8018678:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 801867a:	9508      	str	r5, [sp, #32]
 801867c:	9407      	str	r4, [sp, #28]
 801867e:	9006      	str	r0, [sp, #24]
 8018680:	9105      	str	r1, [sp, #20]
 8018682:	6979      	ldr	r1, [r7, #20]
 8018684:	9104      	str	r1, [sp, #16]
 8018686:	69b9      	ldr	r1, [r7, #24]
 8018688:	9103      	str	r1, [sp, #12]
 801868a:	69f9      	ldr	r1, [r7, #28]
 801868c:	9102      	str	r1, [sp, #8]
 801868e:	9201      	str	r2, [sp, #4]
 8018690:	9300      	str	r3, [sp, #0]
 8018692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801869a:	f005 f9e0 	bl	801da5e <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801869e:	2300      	movs	r3, #0
}
 80186a0:	4618      	mov	r0, r3
 80186a2:	3720      	adds	r7, #32
 80186a4:	46bd      	mov	sp, r7
 80186a6:	bdb0      	pop	{r4, r5, r7, pc}

080186a8 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
 80186a8:	b480      	push	{r7}
 80186aa:	b083      	sub	sp, #12
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	6078      	str	r0, [r7, #4]
    (void)input_dims;
    return 0;
 80186b0:	2300      	movs	r3, #0
}
 80186b2:	4618      	mov	r0, r3
 80186b4:	370c      	adds	r7, #12
 80186b6:	46bd      	mov	sp, r7
 80186b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186bc:	4770      	bx	lr

080186be <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
 80186be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80186c2:	b0dd      	sub	sp, #372	; 0x174
 80186c4:	af08      	add	r7, sp, #32
 80186c6:	f107 040c 	add.w	r4, r7, #12
 80186ca:	6020      	str	r0, [r4, #0]
 80186cc:	f107 0008 	add.w	r0, r7, #8
 80186d0:	6001      	str	r1, [r0, #0]
 80186d2:	1d39      	adds	r1, r7, #4
 80186d4:	600a      	str	r2, [r1, #0]
 80186d6:	463a      	mov	r2, r7
 80186d8:	6013      	str	r3, [r2, #0]
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
 80186da:	f107 030c 	add.w	r3, r7, #12
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    const int32_t input_batches = input_dims->n;
 80186e6:	463b      	mov	r3, r7
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    const uint16_t input_x = input_dims->w;
 80186f0:	463b      	mov	r3, r7
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	689b      	ldr	r3, [r3, #8]
 80186f6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
    const uint16_t input_y = input_dims->h;
 80186fa:	463b      	mov	r3, r7
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	685b      	ldr	r3, [r3, #4]
 8018700:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
    const uint16_t input_ch = input_dims->c;
 8018704:	463b      	mov	r3, r7
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	68db      	ldr	r3, [r3, #12]
 801870a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
    const uint16_t kernel_x = filter_dims->w;
 801870e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8018712:	689b      	ldr	r3, [r3, #8]
 8018714:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
    const uint16_t kernel_y = filter_dims->h;
 8018718:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801871c:	685b      	ldr	r3, [r3, #4]
 801871e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
    const uint16_t output_x = output_dims->w;
 8018722:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8018726:	689b      	ldr	r3, [r3, #8]
 8018728:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
    const uint16_t output_y = output_dims->h;
 801872c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8018730:	685b      	ldr	r3, [r3, #4]
 8018732:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
    const uint16_t output_ch = output_dims->c;
 8018736:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801873a:	68db      	ldr	r3, [r3, #12]
 801873c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

    const uint16_t pad_x = conv_params->padding.w;
 8018740:	f107 0308 	add.w	r3, r7, #8
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	691b      	ldr	r3, [r3, #16]
 8018748:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    const uint16_t pad_y = conv_params->padding.h;
 801874c:	f107 0308 	add.w	r3, r7, #8
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	695b      	ldr	r3, [r3, #20]
 8018754:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    const uint16_t stride_x = conv_params->stride.w;
 8018758:	f107 0308 	add.w	r3, r7, #8
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	689b      	ldr	r3, [r3, #8]
 8018760:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    const uint16_t stride_y = conv_params->stride.h;
 8018764:	f107 0308 	add.w	r3, r7, #8
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	68db      	ldr	r3, [r3, #12]
 801876c:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104

    const int32_t input_offset = conv_params->input_offset;
 8018770:	f107 0308 	add.w	r3, r7, #8
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    const int32_t out_offset = conv_params->output_offset;
 801877c:	f107 0308 	add.w	r3, r7, #8
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	685b      	ldr	r3, [r3, #4]
 8018784:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    const int32_t out_activation_min = conv_params->activation.min;
 8018788:	f107 0308 	add.w	r3, r7, #8
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	6a1b      	ldr	r3, [r3, #32]
 8018790:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const int32_t out_activation_max = conv_params->activation.max;
 8018794:	f107 0308 	add.w	r3, r7, #8
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801879c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    int32_t *output_mult = quant_params->multiplier;
 80187a0:	1d3b      	adds	r3, r7, #4
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    int32_t *output_shift = quant_params->shift;
 80187aa:	1d3b      	adds	r3, r7, #4
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	685b      	ldr	r3, [r3, #4]
 80187b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 80187b4:	2300      	movs	r3, #0
 80187b6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80187ba:	e350      	b.n	8018e5e <arm_convolve_s8+0x7a0>

#elif defined(ARM_MATH_DSP)
        int32_t i_out_y, i_out_x, i_ker_y, i_ker_x;

        /* Generate two columns from the input tensor a GEMM computation */
        q15_t *two_column_buf = buffer_a;
 80187bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80187c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q7_t *out = output_data;
 80187c4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80187c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        /* This part implements the im2col function */
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 80187cc:	2300      	movs	r3, #0
 80187ce:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80187d2:	e0da      	b.n	801898a <arm_convolve_s8+0x2cc>
        {
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 80187d4:	2300      	movs	r3, #0
 80187d6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80187da:	e0ca      	b.n	8018972 <arm_convolve_s8+0x2b4>
            {
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 80187dc:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 80187e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80187e4:	fb02 f203 	mul.w	r2, r2, r3
 80187e8:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 80187ec:	1ad3      	subs	r3, r2, r3
 80187ee:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80187f2:	e065      	b.n	80188c0 <arm_convolve_s8+0x202>
                {
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 80187f4:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80187f8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80187fc:	fb02 f203 	mul.w	r2, r2, r3
 8018800:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8018804:	1ad3      	subs	r3, r2, r3
 8018806:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801880a:	e044      	b.n	8018896 <arm_convolve_s8+0x1d8>
                         i_ker_x++)
                    {
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 801880c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8018810:	2b00      	cmp	r3, #0
 8018812:	db0f      	blt.n	8018834 <arm_convolve_s8+0x176>
 8018814:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8018818:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801881c:	429a      	cmp	r2, r3
 801881e:	da09      	bge.n	8018834 <arm_convolve_s8+0x176>
 8018820:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8018824:	2b00      	cmp	r3, #0
 8018826:	db05      	blt.n	8018834 <arm_convolve_s8+0x176>
 8018828:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 801882c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8018830:	429a      	cmp	r2, r3
 8018832:	db09      	blt.n	8018848 <arm_convolve_s8+0x18a>
                        {
                            /* Filling 0 for out-of-bound paddings */
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 8018834:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8018838:	005b      	lsls	r3, r3, #1
 801883a:	461a      	mov	r2, r3
 801883c:	2100      	movs	r1, #0
 801883e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8018842:	f00c fbef 	bl	8025024 <memset>
 8018846:	e019      	b.n	801887c <arm_convolve_s8+0x1be>
                        }
                        else
                        {
                            /* Copying the pixel data to column */
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 8018848:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 801884c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8018850:	fb02 f203 	mul.w	r2, r2, r3
 8018854:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8018858:	4413      	add	r3, r2
 801885a:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 801885e:	fb02 f303 	mul.w	r3, r2, r3
 8018862:	461a      	mov	r2, r3
 8018864:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8018868:	1898      	adds	r0, r3, r2
 801886a:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 801886e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8018872:	b21b      	sxth	r3, r3
 8018874:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8018878:	f008 fbf5 	bl	8021066 <arm_q7_to_q15_with_offset>
                                                      two_column_buf,
                                                      input_ch,
                                                      input_offset);
                        }
                        two_column_buf += input_ch;
 801887c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8018880:	005b      	lsls	r3, r3, #1
 8018882:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8018886:	4413      	add	r3, r2
 8018888:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
                         i_ker_x++)
 801888c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8018890:	3301      	adds	r3, #1
 8018892:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 8018896:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 801889a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801889e:	fb02 f203 	mul.w	r2, r2, r3
 80188a2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80188a6:	1ad2      	subs	r2, r2, r3
 80188a8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80188ac:	4413      	add	r3, r2
 80188ae:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80188b2:	429a      	cmp	r2, r3
 80188b4:	dbaa      	blt.n	801880c <arm_convolve_s8+0x14e>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 80188b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80188ba:	3301      	adds	r3, #1
 80188bc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80188c0:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 80188c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80188c8:	fb02 f203 	mul.w	r2, r2, r3
 80188cc:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 80188d0:	1ad2      	subs	r2, r2, r3
 80188d2:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80188d6:	4413      	add	r3, r2
 80188d8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80188dc:	429a      	cmp	r2, r3
 80188de:	db89      	blt.n	80187f4 <arm_convolve_s8+0x136>
                    }
                }

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 80188e0:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80188e4:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 80188e8:	fb02 f303 	mul.w	r3, r2, r3
 80188ec:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80188f0:	fb02 f303 	mul.w	r3, r2, r3
 80188f4:	009b      	lsls	r3, r3, #2
 80188f6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80188fa:	4413      	add	r3, r2
 80188fc:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8018900:	429a      	cmp	r2, r3
 8018902:	d131      	bne.n	8018968 <arm_convolve_s8+0x2aa>
                {
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 8018904:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8018908:	b21b      	sxth	r3, r3
 801890a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801890e:	b212      	sxth	r2, r2
 8018910:	f8b7 0116 	ldrh.w	r0, [r7, #278]	; 0x116
 8018914:	f8b7 1112 	ldrh.w	r1, [r7, #274]	; 0x112
 8018918:	fb10 f101 	smulbb	r1, r0, r1
 801891c:	b289      	uxth	r1, r1
 801891e:	f8b7 0114 	ldrh.w	r0, [r7, #276]	; 0x114
 8018922:	fb10 f101 	smulbb	r1, r0, r1
 8018926:	b289      	uxth	r1, r1
 8018928:	f8b7 410c 	ldrh.w	r4, [r7, #268]	; 0x10c
 801892c:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8018930:	9006      	str	r0, [sp, #24]
 8018932:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8018936:	9005      	str	r0, [sp, #20]
 8018938:	9104      	str	r1, [sp, #16]
 801893a:	9203      	str	r2, [sp, #12]
 801893c:	9302      	str	r3, [sp, #8]
 801893e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018942:	9301      	str	r3, [sp, #4]
 8018944:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8018948:	9300      	str	r3, [sp, #0]
 801894a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801894e:	4622      	mov	r2, r4
 8018950:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8018954:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8018958:	f003 fd2a 	bl	801c3b0 <arm_nn_mat_mult_kernel_s8_s16>
 801895c:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
                                                        input_ch * kernel_y * kernel_x,
                                                        bias_data,
                                                        out);

                    /* counter reset */
                    two_column_buf = buffer_a;
 8018960:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8018964:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 8018968:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801896c:	3301      	adds	r3, #1
 801896e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8018972:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8018976:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801897a:	429a      	cmp	r2, r3
 801897c:	f6ff af2e 	blt.w	80187dc <arm_convolve_s8+0x11e>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 8018980:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8018984:	3301      	adds	r3, #1
 8018986:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801898a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 801898e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8018992:	429a      	cmp	r2, r3
 8018994:	f6ff af1e 	blt.w	80187d4 <arm_convolve_s8+0x116>
                }
            }
        }

        /* left-over because odd number of output pixels */
        if (two_column_buf != buffer_a)
 8018998:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801899c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80189a0:	429a      	cmp	r2, r3
 80189a2:	f000 8237 	beq.w	8018e14 <arm_convolve_s8+0x756>
        {
            const q7_t *ker_a = filter_data;
 80189a6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80189aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            int i;

            for (i = 0; i < output_ch; i++)
 80189ae:	2300      	movs	r3, #0
 80189b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80189b4:	e227      	b.n	8018e06 <arm_convolve_s8+0x748>
            {
                /* Load the accumulator with bias first */
                q31_t sum = 0;
 80189b6:	2300      	movs	r3, #0
 80189b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                if (bias_data)
 80189bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d008      	beq.n	80189d6 <arm_convolve_s8+0x318>
                {
                    sum = bias_data[i];
 80189c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80189c8:	009b      	lsls	r3, r3, #2
 80189ca:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80189ce:	4413      	add	r3, r2
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                }

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;
 80189d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80189da:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80189de:	601a      	str	r2, [r3, #0]

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 80189e0:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80189e4:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 80189e8:	fb02 f303 	mul.w	r3, r2, r3
 80189ec:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80189f0:	fb02 f303 	mul.w	r3, r2, r3
 80189f4:	109b      	asrs	r3, r3, #2
 80189f6:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126

                while (col_count)
 80189fa:	e0f3      	b.n	8018be4 <arm_convolve_s8+0x526>
 80189fc:	f107 031c 	add.w	r3, r7, #28
 8018a00:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8018a04:	601a      	str	r2, [r3, #0]
 8018a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018a0e:	f107 0320 	add.w	r3, r7, #32
 8018a12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8018a16:	f107 031c 	add.w	r3, r7, #28
 8018a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 8018a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	461a      	mov	r2, r3
 8018a28:	f107 0318 	add.w	r3, r7, #24
 8018a2c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8018a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	1d1a      	adds	r2, r3, #4
 8018a36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018a3a:	601a      	str	r2, [r3, #0]

    return (val);
 8018a3c:	f107 0318 	add.w	r3, r7, #24
 8018a40:	681b      	ldr	r3, [r3, #0]
 * @brief read and expand one q7 word into two q15 words
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8018a42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 8018a46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8018a4e:	2308      	movs	r3, #8
 8018a50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018a54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018a5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  op2 %= 32U;
 8018a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018a68:	f003 031f 	and.w	r3, r3, #31
 8018a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (op2 == 0U)
 8018a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d102      	bne.n	8018a7e <arm_convolve_s8+0x3c0>
    return op1;
 8018a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018a7c:	e005      	b.n	8018a8a <arm_convolve_s8+0x3cc>
  return (op1 >> op2) | (op1 << (32U - op2));
 8018a7e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018a82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018a86:	fa62 f303 	ror.w	r3, r2, r3
 8018a8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018a8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018a92:	fa2f f383 	sxtb16	r3, r3
 8018a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return(result);
 8018a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
  } else {
    result = __SXTB16(__ROR(op1, rotate)) ;
 8018a9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }
  return result;
 8018aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018aa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    q31_t inAbuf2 = __SXTB16(inA);
 8018aaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018aae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018ab6:	fa2f f383 	sxtb16	r3, r3
 8018aba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return(result);
 8018abe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018ac2:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8018ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018ac8:	67bb      	str	r3, [r7, #120]	; 0x78
 8018aca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018acc:	677b      	str	r3, [r7, #116]	; 0x74
 8018ace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018ad0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018ad2:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8018ad6:	673b      	str	r3, [r7, #112]	; 0x70
 8018ad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018ada:	461a      	mov	r2, r3
 8018adc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018ae0:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8018ae2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018aea:	66bb      	str	r3, [r7, #104]	; 0x68
 8018aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018aee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8018af0:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8018af4:	667b      	str	r3, [r7, #100]	; 0x64
 8018af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018af8:	461a      	mov	r2, r3
 8018afa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018afe:	601a      	str	r2, [r3, #0]
#else
    *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
    *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
#endif

    return source;
 8018b00:	f107 031c 	add.w	r3, r7, #28
 8018b04:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t ker_a1, ker_a2;
                    q31_t ip_b1, ip_b2;

                    ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 8018b06:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8018b0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018b0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    memcpy(&val, *in_q15, 4);
 8018b12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	461a      	mov	r2, r3
 8018b1c:	f107 0314 	add.w	r3, r7, #20
 8018b20:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018b22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	1d1a      	adds	r2, r3, #4
 8018b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018b2e:	601a      	str	r2, [r3, #0]
    return (val);
 8018b30:	f107 0314 	add.w	r3, r7, #20
 8018b34:	681b      	ldr	r3, [r3, #0]

                    ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8018b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                    sum = __SMLAD(ker_a1, ip_b1, sum);
 8018b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	4619      	mov	r1, r3
 8018b42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8018b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8018b4a:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8018b4e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8018b52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018b5e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8018b62:	fb23 1302 	smlad	r3, r3, r2, r1
 8018b66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 8018b6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018b6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8018b72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018b76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    memcpy(&val, *in_q15, 4);
 8018b7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	461a      	mov	r2, r3
 8018b84:	f107 0310 	add.w	r3, r7, #16
 8018b88:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018b8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	1d1a      	adds	r2, r3, #4
 8018b92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018b96:	601a      	str	r2, [r3, #0]
    return (val);
 8018b98:	f107 0310 	add.w	r3, r7, #16
 8018b9c:	681b      	ldr	r3, [r3, #0]
                    ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 8018b9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                    sum = __SMLAD(ker_a2, ip_b2, sum);
 8018ba2:	f107 0320 	add.w	r3, r7, #32
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	4619      	mov	r1, r3
 8018baa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8018bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8018bb2:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8018bb6:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8018bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018bc2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8018bc6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8018bca:	fb23 1302 	smlad	r3, r3, r2, r1
 8018bce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 8018bd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    col_count--;
 8018bda:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8018bde:	3b01      	subs	r3, #1
 8018be0:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 8018be4:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	f47f af07 	bne.w	80189fc <arm_convolve_s8+0x33e>
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 8018bee:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8018bf2:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8018bf6:	fb12 f303 	smulbb	r3, r2, r3
 8018bfa:	b29b      	uxth	r3, r3
 8018bfc:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8018c00:	fb12 f303 	smulbb	r3, r2, r3
 8018c04:	b29b      	uxth	r3, r3
 8018c06:	f003 0303 	and.w	r3, r3, #3
 8018c0a:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 8018c0e:	e021      	b.n	8018c54 <arm_convolve_s8+0x596>
                {
                    q7_t ker_a1 = *ker_a++;
 8018c10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8018c14:	1c5a      	adds	r2, r3, #1
 8018c16:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8018c1a:	781b      	ldrb	r3, [r3, #0]
 8018c1c:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
                    q15_t ip_b1 = *ip_as_col++;
 8018c20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	1c99      	adds	r1, r3, #2
 8018c28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018c2c:	6011      	str	r1, [r2, #0]
 8018c2e:	881b      	ldrh	r3, [r3, #0]
 8018c30:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
                    sum += ker_a1 * ip_b1;
 8018c34:	f997 30eb 	ldrsb.w	r3, [r7, #235]	; 0xeb
 8018c38:	f9b7 20e8 	ldrsh.w	r2, [r7, #232]	; 0xe8
 8018c3c:	fb02 f303 	mul.w	r3, r2, r3
 8018c40:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8018c44:	4413      	add	r3, r2
 8018c46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    col_count--;
 8018c4a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8018c4e:	3b01      	subs	r3, #1
 8018c50:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 8018c54:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d1d9      	bne.n	8018c10 <arm_convolve_s8+0x552>
                }

                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 8018c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8018c60:	009b      	lsls	r3, r3, #2
 8018c62:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8018c66:	4413      	add	r3, r2
 8018c68:	681a      	ldr	r2, [r3, #0]
 8018c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8018c6e:	009b      	lsls	r3, r3, #2
 8018c70:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8018c74:	440b      	add	r3, r1
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8018c7c:	6639      	str	r1, [r7, #96]	; 0x60
 8018c7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8018c80:	65bb      	str	r3, [r7, #88]	; 0x58
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018c82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018c84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018c88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8018c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8018c90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018c94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018c96:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8018c98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018c9c:	2200      	movs	r2, #0
 8018c9e:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8018ca0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018ca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018ca8:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8018caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018cae:	2200      	movs	r2, #0
 8018cb0:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8018cb2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8018cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018cb8:	4618      	mov	r0, r3
 8018cba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8018cbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	461a      	mov	r2, r3
 8018cc6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8018cca:	fb02 fc01 	mul.w	ip, r2, r1
 8018cce:	fb00 f603 	mul.w	r6, r0, r3
 8018cd2:	4466      	add	r6, ip
 8018cd4:	fba0 2302 	umull	r2, r3, r0, r2
 8018cd8:	18f1      	adds	r1, r6, r3
 8018cda:	460b      	mov	r3, r1
 8018cdc:	eb14 0802 	adds.w	r8, r4, r2
 8018ce0:	eb45 0903 	adc.w	r9, r5, r3
 8018ce4:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
 8018ce8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8018cec:	f04f 0200 	mov.w	r2, #0
 8018cf0:	f04f 0300 	mov.w	r3, #0
 8018cf4:	0fc2      	lsrs	r2, r0, #31
 8018cf6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8018cfa:	17cb      	asrs	r3, r1, #31
 8018cfc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8018d00:	4613      	mov	r3, r2
 8018d02:	600b      	str	r3, [r1, #0]
    return result;
 8018d04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018d08:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	dc02      	bgt.n	8018d16 <arm_convolve_s8+0x658>
 8018d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018d12:	425b      	negs	r3, r3
 8018d14:	e000      	b.n	8018d18 <arm_convolve_s8+0x65a>
 8018d16:	2300      	movs	r3, #0
 8018d18:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018d1c:	6011      	str	r1, [r2, #0]
 8018d1e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8018d22:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018d24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018d28:	2200      	movs	r2, #0
 8018d2a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018d2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018d30:	2201      	movs	r2, #1
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	409a      	lsls	r2, r3
 8018d36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018d3a:	3a01      	subs	r2, #1
 8018d3c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8018d3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018d42:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8018d46:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8018d4a:	6809      	ldr	r1, [r1, #0]
 8018d4c:	6812      	ldr	r2, [r2, #0]
 8018d4e:	400a      	ands	r2, r1
 8018d50:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8018d52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018d56:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8018d5a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8018d5e:	6809      	ldr	r1, [r1, #0]
 8018d60:	6812      	ldr	r2, [r2, #0]
 8018d62:	fa41 f202 	asr.w	r2, r1, r2
 8018d66:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8018d68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018d6c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8018d70:	6812      	ldr	r2, [r2, #0]
 8018d72:	1052      	asrs	r2, r2, #1
 8018d74:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8018d76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	da06      	bge.n	8018d8e <arm_convolve_s8+0x6d0>
        threshold++;
 8018d80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018d84:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8018d88:	6812      	ldr	r2, [r2, #0]
 8018d8a:	3201      	adds	r2, #1
 8018d8c:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8018d8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8018d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018d96:	6812      	ldr	r2, [r2, #0]
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	429a      	cmp	r2, r3
 8018d9c:	dd06      	ble.n	8018dac <arm_convolve_s8+0x6ee>
        result++;
 8018d9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018da2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018da6:	6812      	ldr	r2, [r2, #0]
 8018da8:	3201      	adds	r2, #1
 8018daa:	601a      	str	r2, [r3, #0]
    return result;
 8018dac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018db0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018db2:	bf00      	nop
 8018db4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum += out_offset;
 8018db8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8018dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018dc0:	4413      	add	r3, r2
 8018dc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum = MAX(sum, out_activation_min);
 8018dc6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8018dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8018dce:	4293      	cmp	r3, r2
 8018dd0:	bfb8      	it	lt
 8018dd2:	4613      	movlt	r3, r2
 8018dd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum = MIN(sum, out_activation_max);
 8018dd8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8018ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018de0:	4293      	cmp	r3, r2
 8018de2:	bfa8      	it	ge
 8018de4:	4613      	movge	r3, r2
 8018de6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                *out++ = (q7_t)sum;
 8018dea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8018dee:	1c5a      	adds	r2, r3, #1
 8018df0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8018df4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8018df8:	b252      	sxtb	r2, r2
 8018dfa:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_ch; i++)
 8018dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8018e00:	3301      	adds	r3, #1
 8018e02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8018e06:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8018e0a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8018e0e:	429a      	cmp	r2, r3
 8018e10:	f6ff add1 	blt.w	80189b6 <arm_convolve_s8+0x2f8>
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 8018e14:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8018e18:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8018e1c:	fb02 f303 	mul.w	r3, r2, r3
 8018e20:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8018e24:	fb02 f303 	mul.w	r3, r2, r3
 8018e28:	461a      	mov	r2, r3
 8018e2a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8018e2e:	4413      	add	r3, r2
 8018e30:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        output_data += (output_x * output_y * output_ch);
 8018e34:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8018e38:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8018e3c:	fb02 f303 	mul.w	r3, r2, r3
 8018e40:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8018e44:	fb02 f303 	mul.w	r3, r2, r3
 8018e48:	461a      	mov	r2, r3
 8018e4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8018e4e:	4413      	add	r3, r2
 8018e50:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 8018e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8018e58:	3301      	adds	r3, #1
 8018e5a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8018e5e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8018e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018e66:	429a      	cmp	r2, r3
 8018e68:	f6ff aca8 	blt.w	80187bc <arm_convolve_s8+0xfe>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8018e6c:	2300      	movs	r3, #0
}
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 8018e74:	46bd      	mov	sp, r7
 8018e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018e7a <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 8018e7a:	b480      	push	{r7}
 8018e7c:	b083      	sub	sp, #12
 8018e7e:	af00      	add	r7, sp, #0
 8018e80:	6078      	str	r0, [r7, #4]
 8018e82:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	68db      	ldr	r3, [r3, #12]
 8018e88:	683a      	ldr	r2, [r7, #0]
 8018e8a:	6892      	ldr	r2, [r2, #8]
 8018e8c:	fb02 f303 	mul.w	r3, r2, r3
 8018e90:	683a      	ldr	r2, [r7, #0]
 8018e92:	6852      	ldr	r2, [r2, #4]
 8018e94:	fb02 f303 	mul.w	r3, r2, r3
 8018e98:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	370c      	adds	r7, #12
 8018e9e:	46bd      	mov	sp, r7
 8018ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ea4:	4770      	bx	lr

08018ea6 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
 8018ea6:	b580      	push	{r7, lr}
 8018ea8:	b08c      	sub	sp, #48	; 0x30
 8018eaa:	af08      	add	r7, sp, #32
 8018eac:	60f8      	str	r0, [r7, #12]
 8018eae:	60b9      	str	r1, [r7, #8]
 8018eb0:	607a      	str	r2, [r7, #4]
 8018eb2:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8018eb4:	68bb      	ldr	r3, [r7, #8]
 8018eb6:	691b      	ldr	r3, [r3, #16]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d12f      	bne.n	8018f1c <arm_convolve_wrapper_s8+0x76>
 8018ebc:	68bb      	ldr	r3, [r7, #8]
 8018ebe:	695b      	ldr	r3, [r3, #20]
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d12b      	bne.n	8018f1c <arm_convolve_wrapper_s8+0x76>
 8018ec4:	683b      	ldr	r3, [r7, #0]
 8018ec6:	68db      	ldr	r3, [r3, #12]
 8018ec8:	f003 0303 	and.w	r3, r3, #3
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d125      	bne.n	8018f1c <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8018ed0:	68bb      	ldr	r3, [r7, #8]
 8018ed2:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8018ed4:	2b01      	cmp	r3, #1
 8018ed6:	d121      	bne.n	8018f1c <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8018ed8:	68bb      	ldr	r3, [r7, #8]
 8018eda:	68db      	ldr	r3, [r3, #12]
 8018edc:	2b01      	cmp	r3, #1
 8018ede:	d11d      	bne.n	8018f1c <arm_convolve_wrapper_s8+0x76>
 8018ee0:	69fb      	ldr	r3, [r7, #28]
 8018ee2:	689b      	ldr	r3, [r3, #8]
 8018ee4:	2b01      	cmp	r3, #1
 8018ee6:	d119      	bne.n	8018f1c <arm_convolve_wrapper_s8+0x76>
 8018ee8:	69fb      	ldr	r3, [r7, #28]
 8018eea:	685b      	ldr	r3, [r3, #4]
 8018eec:	2b01      	cmp	r3, #1
 8018eee:	d115      	bne.n	8018f1c <arm_convolve_wrapper_s8+0x76>
    {
        return arm_convolve_1x1_s8_fast(ctx,
 8018ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ef2:	9306      	str	r3, [sp, #24]
 8018ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ef6:	9305      	str	r3, [sp, #20]
 8018ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018efa:	9304      	str	r3, [sp, #16]
 8018efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018efe:	9303      	str	r3, [sp, #12]
 8018f00:	6a3b      	ldr	r3, [r7, #32]
 8018f02:	9302      	str	r3, [sp, #8]
 8018f04:	69fb      	ldr	r3, [r7, #28]
 8018f06:	9301      	str	r3, [sp, #4]
 8018f08:	69bb      	ldr	r3, [r7, #24]
 8018f0a:	9300      	str	r3, [sp, #0]
 8018f0c:	683b      	ldr	r3, [r7, #0]
 8018f0e:	687a      	ldr	r2, [r7, #4]
 8018f10:	68b9      	ldr	r1, [r7, #8]
 8018f12:	68f8      	ldr	r0, [r7, #12]
 8018f14:	f7ff fb74 	bl	8018600 <arm_convolve_1x1_s8_fast>
 8018f18:	4603      	mov	r3, r0
 8018f1a:	e040      	b.n	8018f9e <arm_convolve_wrapper_s8+0xf8>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8018f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f1e:	685b      	ldr	r3, [r3, #4]
 8018f20:	2b01      	cmp	r3, #1
 8018f22:	d127      	bne.n	8018f74 <arm_convolve_wrapper_s8+0xce>
 8018f24:	683b      	ldr	r3, [r7, #0]
 8018f26:	685b      	ldr	r3, [r3, #4]
 8018f28:	2b01      	cmp	r3, #1
 8018f2a:	d123      	bne.n	8018f74 <arm_convolve_wrapper_s8+0xce>
 8018f2c:	69fb      	ldr	r3, [r7, #28]
 8018f2e:	685b      	ldr	r3, [r3, #4]
 8018f30:	2b01      	cmp	r3, #1
 8018f32:	d11f      	bne.n	8018f74 <arm_convolve_wrapper_s8+0xce>
 8018f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f36:	689b      	ldr	r3, [r3, #8]
 8018f38:	f003 0303 	and.w	r3, r3, #3
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d119      	bne.n	8018f74 <arm_convolve_wrapper_s8+0xce>
             (input_dims->n == 1))
 8018f40:	683b      	ldr	r3, [r7, #0]
 8018f42:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8018f44:	2b01      	cmp	r3, #1
 8018f46:	d115      	bne.n	8018f74 <arm_convolve_wrapper_s8+0xce>
    {
        return arm_convolve_1_x_n_s8(ctx,
 8018f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f4a:	9306      	str	r3, [sp, #24]
 8018f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f4e:	9305      	str	r3, [sp, #20]
 8018f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f52:	9304      	str	r3, [sp, #16]
 8018f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f56:	9303      	str	r3, [sp, #12]
 8018f58:	6a3b      	ldr	r3, [r7, #32]
 8018f5a:	9302      	str	r3, [sp, #8]
 8018f5c:	69fb      	ldr	r3, [r7, #28]
 8018f5e:	9301      	str	r3, [sp, #4]
 8018f60:	69bb      	ldr	r3, [r7, #24]
 8018f62:	9300      	str	r3, [sp, #0]
 8018f64:	683b      	ldr	r3, [r7, #0]
 8018f66:	687a      	ldr	r2, [r7, #4]
 8018f68:	68b9      	ldr	r1, [r7, #8]
 8018f6a:	68f8      	ldr	r0, [r7, #12]
 8018f6c:	f7ff fb04 	bl	8018578 <arm_convolve_1_x_n_s8>
 8018f70:	4603      	mov	r3, r0
 8018f72:	e014      	b.n	8018f9e <arm_convolve_wrapper_s8+0xf8>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 8018f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f76:	9306      	str	r3, [sp, #24]
 8018f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f7a:	9305      	str	r3, [sp, #20]
 8018f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f7e:	9304      	str	r3, [sp, #16]
 8018f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f82:	9303      	str	r3, [sp, #12]
 8018f84:	6a3b      	ldr	r3, [r7, #32]
 8018f86:	9302      	str	r3, [sp, #8]
 8018f88:	69fb      	ldr	r3, [r7, #28]
 8018f8a:	9301      	str	r3, [sp, #4]
 8018f8c:	69bb      	ldr	r3, [r7, #24]
 8018f8e:	9300      	str	r3, [sp, #0]
 8018f90:	683b      	ldr	r3, [r7, #0]
 8018f92:	687a      	ldr	r2, [r7, #4]
 8018f94:	68b9      	ldr	r1, [r7, #8]
 8018f96:	68f8      	ldr	r0, [r7, #12]
 8018f98:	f7ff fb91 	bl	80186be <arm_convolve_s8>
 8018f9c:	4603      	mov	r3, r0
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	3710      	adds	r7, #16
 8018fa2:	46bd      	mov	sp, r7
 8018fa4:	bd80      	pop	{r7, pc}

08018fa6 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 8018fa6:	b580      	push	{r7, lr}
 8018fa8:	b084      	sub	sp, #16
 8018faa:	af00      	add	r7, sp, #0
 8018fac:	60f8      	str	r0, [r7, #12]
 8018fae:	60b9      	str	r1, [r7, #8]
 8018fb0:	607a      	str	r2, [r7, #4]
 8018fb2:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	691b      	ldr	r3, [r3, #16]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d11e      	bne.n	8018ffa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	695b      	ldr	r3, [r3, #20]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d11a      	bne.n	8018ffa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8018fc4:	68bb      	ldr	r3, [r7, #8]
 8018fc6:	68db      	ldr	r3, [r3, #12]
 8018fc8:	f003 0303 	and.w	r3, r3, #3
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d114      	bne.n	8018ffa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8018fd4:	2b01      	cmp	r3, #1
 8018fd6:	d110      	bne.n	8018ffa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	68db      	ldr	r3, [r3, #12]
 8018fdc:	2b01      	cmp	r3, #1
 8018fde:	d10c      	bne.n	8018ffa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	689b      	ldr	r3, [r3, #8]
 8018fe4:	2b01      	cmp	r3, #1
 8018fe6:	d108      	bne.n	8018ffa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	685b      	ldr	r3, [r3, #4]
 8018fec:	2b01      	cmp	r3, #1
 8018fee:	d104      	bne.n	8018ffa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 8018ff0:	68b8      	ldr	r0, [r7, #8]
 8018ff2:	f7ff fb59 	bl	80186a8 <arm_convolve_1x1_s8_fast_get_buffer_size>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	e020      	b.n	801903c <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8018ffa:	683b      	ldr	r3, [r7, #0]
 8018ffc:	685b      	ldr	r3, [r3, #4]
 8018ffe:	2b01      	cmp	r3, #1
 8019000:	d117      	bne.n	8019032 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8019002:	68bb      	ldr	r3, [r7, #8]
 8019004:	685b      	ldr	r3, [r3, #4]
 8019006:	2b01      	cmp	r3, #1
 8019008:	d113      	bne.n	8019032 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	685b      	ldr	r3, [r3, #4]
 801900e:	2b01      	cmp	r3, #1
 8019010:	d10f      	bne.n	8019032 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8019012:	683b      	ldr	r3, [r7, #0]
 8019014:	689b      	ldr	r3, [r3, #8]
 8019016:	f003 0303 	and.w	r3, r3, #3
 801901a:	2b00      	cmp	r3, #0
 801901c:	d109      	bne.n	8019032 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
             (input_dims->n == 1))
 801901e:	68bb      	ldr	r3, [r7, #8]
 8019020:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8019022:	2b01      	cmp	r3, #1
 8019024:	d105      	bne.n	8019032 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 8019026:	6879      	ldr	r1, [r7, #4]
 8019028:	68b8      	ldr	r0, [r7, #8]
 801902a:	f7ff fad3 	bl	80185d4 <arm_convolve_1_x_n_s8_get_buffer_size>
 801902e:	4603      	mov	r3, r0
 8019030:	e004      	b.n	801903c <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 8019032:	6879      	ldr	r1, [r7, #4]
 8019034:	68b8      	ldr	r0, [r7, #8]
 8019036:	f7ff ff20 	bl	8018e7a <arm_convolve_s8_get_buffer_size>
 801903a:	4603      	mov	r3, r0
    }
}
 801903c:	4618      	mov	r0, r3
 801903e:	3710      	adds	r7, #16
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}

08019044 <arm_depthwise_conv_3x3_s8>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
 8019044:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8019048:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 801904c:	af00      	add	r7, sp, #0
 801904e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8019052:	6020      	str	r0, [r4, #0]
 8019054:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8019058:	6001      	str	r1, [r0, #0]
 801905a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801905e:	600a      	str	r2, [r1, #0]
 8019060:	f107 0220 	add.w	r2, r7, #32
 8019064:	6013      	str	r3, [r2, #0]
    (void)ctx;
    (void)bias_dims;

    const int32_t input_x = input_dims->w;
 8019066:	f107 0320 	add.w	r3, r7, #32
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	689b      	ldr	r3, [r3, #8]
 801906e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    const int32_t input_y = input_dims->h;
 8019072:	f107 0320 	add.w	r3, r7, #32
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	685b      	ldr	r3, [r3, #4]
 801907a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    const int32_t input_ch = input_dims->c;
 801907e:	f107 0320 	add.w	r3, r7, #32
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	68db      	ldr	r3, [r3, #12]
 8019086:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    const int32_t output_ch = output_dims->c;
 801908a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801908e:	68db      	ldr	r3, [r3, #12]
 8019090:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    const int32_t pad_x = dw_conv_params->padding.w;
 8019094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	695b      	ldr	r3, [r3, #20]
 801909c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    const int32_t pad_y = dw_conv_params->padding.h;
 80190a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	699b      	ldr	r3, [r3, #24]
 80190a8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    const int32_t stride_x = dw_conv_params->stride.w;
 80190ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	68db      	ldr	r3, [r3, #12]
 80190b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    const int32_t stride_y = dw_conv_params->stride.h;
 80190b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	691b      	ldr	r3, [r3, #16]
 80190c0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    const int32_t *output_shift = quant_params->shift;
 80190c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	685b      	ldr	r3, [r3, #4]
 80190cc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    const int32_t *output_mult = quant_params->multiplier;
 80190d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    const int32_t output_x = output_dims->w;
 80190dc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80190e0:	689b      	ldr	r3, [r3, #8]
 80190e2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    const int32_t output_y = output_dims->h;
 80190e6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80190ea:	685b      	ldr	r3, [r3, #4]
 80190ec:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    const int32_t output_offset = dw_conv_params->output_offset;
 80190f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	685b      	ldr	r3, [r3, #4]
 80190f8:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    const int32_t input_offset = dw_conv_params->input_offset;
 80190fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    const int32_t output_activation_min = dw_conv_params->activation.min;
 8019108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019110:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    const int32_t output_activation_max = dw_conv_params->activation.max;
 8019114:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801911c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
 8019120:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019124:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8019128:	429a      	cmp	r2, r3
 801912a:	d003      	beq.n	8019134 <arm_depthwise_conv_3x3_s8+0xf0>
    {
        return ARM_MATH_SIZE_MISMATCH;
 801912c:	f06f 0302 	mvn.w	r3, #2
 8019130:	f000 bf70 	b.w	801a014 <arm_depthwise_conv_3x3_s8+0xfd0>
    }
    /* Check input constraints pad_x <= 1 */
    if (pad_x > 1 || filter_dims->w != 3 || filter_dims->h != 3)
 8019134:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019138:	2b01      	cmp	r3, #1
 801913a:	dc09      	bgt.n	8019150 <arm_depthwise_conv_3x3_s8+0x10c>
 801913c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8019140:	689b      	ldr	r3, [r3, #8]
 8019142:	2b03      	cmp	r3, #3
 8019144:	d104      	bne.n	8019150 <arm_depthwise_conv_3x3_s8+0x10c>
 8019146:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801914a:	685b      	ldr	r3, [r3, #4]
 801914c:	2b03      	cmp	r3, #3
 801914e:	d003      	beq.n	8019158 <arm_depthwise_conv_3x3_s8+0x114>
    {
        return ARM_MATH_ARGUMENT_ERROR;
 8019150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019154:	f000 bf5e 	b.w	801a014 <arm_depthwise_conv_3x3_s8+0xfd0>
    }

    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 8019158:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801915c:	425b      	negs	r3, r3
 801915e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8019162:	2300      	movs	r3, #0
 8019164:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8019168:	2300      	movs	r3, #0
 801916a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 801916e:	f000 bf49 	b.w	801a004 <arm_depthwise_conv_3x3_s8+0xfc0>
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 8019172:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019176:	425b      	negs	r3, r3
 8019178:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 801917c:	2300      	movs	r3, #0
 801917e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8019182:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8019186:	2b00      	cmp	r3, #0
 8019188:	dc03      	bgt.n	8019192 <arm_depthwise_conv_3x3_s8+0x14e>
 801918a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801918e:	425b      	negs	r3, r3
 8019190:	e000      	b.n	8019194 <arm_depthwise_conv_3x3_s8+0x150>
 8019192:	2300      	movs	r3, #0
 8019194:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8019198:	f000 bf21 	b.w	8019fde <arm_depthwise_conv_3x3_s8+0xf9a>
        {
            int32_t in_ch = 0;
 801919c:	2300      	movs	r3, #0
 801919e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
            int32_t ker_w_start = MAX(0, -in_w);
 80191a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	dc03      	bgt.n	80191b2 <arm_depthwise_conv_3x3_s8+0x16e>
 80191aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80191ae:	425b      	negs	r3, r3
 80191b0:	e000      	b.n	80191b4 <arm_depthwise_conv_3x3_s8+0x170>
 80191b2:	2300      	movs	r3, #0
 80191b4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

            for (; in_ch <= (input_ch - 4); in_ch += 4)
 80191b8:	f000 bd50 	b.w	8019c5c <arm_depthwise_conv_3x3_s8+0xc18>
            {
                int32_t out_buff0 = bias[in_ch + 0];
 80191bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80191c0:	009b      	lsls	r3, r3, #2
 80191c2:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80191c6:	4413      	add	r3, r2
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                int32_t out_buff1 = bias[in_ch + 1];
 80191ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80191d2:	3301      	adds	r3, #1
 80191d4:	009b      	lsls	r3, r3, #2
 80191d6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80191da:	4413      	add	r3, r2
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                int32_t out_buff2 = bias[in_ch + 2];
 80191e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80191e6:	3302      	adds	r3, #2
 80191e8:	009b      	lsls	r3, r3, #2
 80191ea:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80191ee:	4413      	add	r3, r2
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                int32_t out_buff3 = bias[in_ch + 3];
 80191f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80191fa:	3303      	adds	r3, #3
 80191fc:	009b      	lsls	r3, r3, #2
 80191fe:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019202:	4413      	add	r3, r2
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
 801920a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801920e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8019212:	4413      	add	r3, r2
 8019214:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019218:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 801921c:	fb01 f202 	mul.w	r2, r1, r2
 8019220:	fb02 f303 	mul.w	r3, r2, r3
 8019224:	4619      	mov	r1, r3
 8019226:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801922a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801922e:	fb02 f303 	mul.w	r3, r2, r3
 8019232:	18ca      	adds	r2, r1, r3
 8019234:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019238:	4413      	add	r3, r2
 801923a:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801923e:	4413      	add	r3, r2
 8019240:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 8019244:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019248:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801924c:	fb02 f203 	mul.w	r2, r2, r3
 8019250:	4613      	mov	r3, r2
 8019252:	005b      	lsls	r3, r3, #1
 8019254:	4413      	add	r3, r2
 8019256:	461a      	mov	r2, r3
 8019258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801925c:	4413      	add	r3, r2
 801925e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8019262:	4413      	add	r3, r2
 8019264:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 8019268:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801926c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8019270:	e17a      	b.n	8019568 <arm_depthwise_conv_3x3_s8+0x524>
                {
                    int32_t in_val = 0;
 8019272:	2300      	movs	r3, #0
 8019274:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    int32_t ker_val = 0;
 8019278:	2300      	movs	r3, #0
 801927a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                    if (ker_w_start == 0)
 801927e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8019282:	2b00      	cmp	r3, #0
 8019284:	d169      	bne.n	801935a <arm_depthwise_conv_3x3_s8+0x316>
 8019286:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801928a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801928e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019296:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801929a:	601a      	str	r2, [r3, #0]
    return (val);
 801929c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80192a0:	681b      	ldr	r3, [r3, #0]
                    {
                        in_val = arm_nn_read_q7x4(input_ptr);
 80192a2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80192a6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80192aa:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80192ae:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80192b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80192ba:	601a      	str	r2, [r3, #0]
    return (val);
 80192bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80192c0:	681b      	ldr	r3, [r3, #0]
                        ker_val = arm_nn_read_q7x4(kernel_ptr);
 80192c2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 80192c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80192ca:	b25b      	sxtb	r3, r3
 80192cc:	461a      	mov	r2, r3
 80192ce:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80192d2:	4413      	add	r3, r2
 80192d4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80192d8:	b252      	sxtb	r2, r2
 80192da:	fb02 f303 	mul.w	r3, r2, r3
 80192de:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80192e2:	4413      	add	r3, r2
 80192e4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 80192e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80192ec:	121b      	asrs	r3, r3, #8
 80192ee:	b25b      	sxtb	r3, r3
 80192f0:	461a      	mov	r2, r3
 80192f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80192f6:	4413      	add	r3, r2
 80192f8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80192fc:	1212      	asrs	r2, r2, #8
 80192fe:	b252      	sxtb	r2, r2
 8019300:	fb02 f303 	mul.w	r3, r2, r3
 8019304:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019308:	4413      	add	r3, r2
 801930a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 801930e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019312:	141b      	asrs	r3, r3, #16
 8019314:	b25b      	sxtb	r3, r3
 8019316:	461a      	mov	r2, r3
 8019318:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801931c:	4413      	add	r3, r2
 801931e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019322:	1412      	asrs	r2, r2, #16
 8019324:	b252      	sxtb	r2, r2
 8019326:	fb02 f303 	mul.w	r3, r2, r3
 801932a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801932e:	4413      	add	r3, r2
 8019330:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 8019334:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019338:	161b      	asrs	r3, r3, #24
 801933a:	b25b      	sxtb	r3, r3
 801933c:	461a      	mov	r2, r3
 801933e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019342:	4413      	add	r3, r2
 8019344:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019348:	1612      	asrs	r2, r2, #24
 801934a:	b252      	sxtb	r2, r2
 801934c:	fb02 f303 	mul.w	r3, r2, r3
 8019350:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8019354:	4413      	add	r3, r2
 8019356:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                    }

                    in_val = arm_nn_read_q7x4(input_ptr + input_ch);
 801935a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801935e:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8019362:	4413      	add	r3, r2
 8019364:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8019368:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019370:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019374:	601a      	str	r2, [r3, #0]
    return (val);
 8019376:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    ker_val = arm_nn_read_q7x4(kernel_ptr + input_ch);
 8019380:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019384:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8019388:	4413      	add	r3, r2
 801938a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 801938e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019396:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801939a:	601a      	str	r2, [r3, #0]
    return (val);
 801939c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                    out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 80193a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80193aa:	b25b      	sxtb	r3, r3
 80193ac:	461a      	mov	r2, r3
 80193ae:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80193b2:	4413      	add	r3, r2
 80193b4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80193b8:	b252      	sxtb	r2, r2
 80193ba:	fb02 f303 	mul.w	r3, r2, r3
 80193be:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80193c2:	4413      	add	r3, r2
 80193c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 80193c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80193cc:	121b      	asrs	r3, r3, #8
 80193ce:	b25b      	sxtb	r3, r3
 80193d0:	461a      	mov	r2, r3
 80193d2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80193d6:	4413      	add	r3, r2
 80193d8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80193dc:	1212      	asrs	r2, r2, #8
 80193de:	b252      	sxtb	r2, r2
 80193e0:	fb02 f303 	mul.w	r3, r2, r3
 80193e4:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80193e8:	4413      	add	r3, r2
 80193ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 80193ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80193f2:	141b      	asrs	r3, r3, #16
 80193f4:	b25b      	sxtb	r3, r3
 80193f6:	461a      	mov	r2, r3
 80193f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80193fc:	4413      	add	r3, r2
 80193fe:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019402:	1412      	asrs	r2, r2, #16
 8019404:	b252      	sxtb	r2, r2
 8019406:	fb02 f303 	mul.w	r3, r2, r3
 801940a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801940e:	4413      	add	r3, r2
 8019410:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 8019414:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019418:	161b      	asrs	r3, r3, #24
 801941a:	b25b      	sxtb	r3, r3
 801941c:	461a      	mov	r2, r3
 801941e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019422:	4413      	add	r3, r2
 8019424:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019428:	1612      	asrs	r2, r2, #24
 801942a:	b252      	sxtb	r2, r2
 801942c:	fb02 f303 	mul.w	r3, r2, r3
 8019430:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8019434:	4413      	add	r3, r2
 8019436:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                    if ((input_x - in_w) >= 3)
 801943a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801943e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019442:	1ad3      	subs	r3, r2, r3
 8019444:	2b02      	cmp	r3, #2
 8019446:	dd73      	ble.n	8019530 <arm_depthwise_conv_3x3_s8+0x4ec>
                    {
                        in_val = arm_nn_read_q7x4(input_ptr + (input_ch << 1));
 8019448:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801944c:	005b      	lsls	r3, r3, #1
 801944e:	461a      	mov	r2, r3
 8019450:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019454:	4413      	add	r3, r2
 8019456:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 801945a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019462:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019466:	601a      	str	r2, [r3, #0]
    return (val);
 8019468:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                        ker_val = arm_nn_read_q7x4(kernel_ptr + (input_ch << 1));
 8019472:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019476:	005b      	lsls	r3, r3, #1
 8019478:	461a      	mov	r2, r3
 801947a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801947e:	4413      	add	r3, r2
 8019480:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8019484:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801948c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019490:	601a      	str	r2, [r3, #0]
    return (val);
 8019492:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 801949c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80194a0:	b25b      	sxtb	r3, r3
 80194a2:	461a      	mov	r2, r3
 80194a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80194a8:	4413      	add	r3, r2
 80194aa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80194ae:	b252      	sxtb	r2, r2
 80194b0:	fb02 f303 	mul.w	r3, r2, r3
 80194b4:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80194b8:	4413      	add	r3, r2
 80194ba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 80194be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80194c2:	121b      	asrs	r3, r3, #8
 80194c4:	b25b      	sxtb	r3, r3
 80194c6:	461a      	mov	r2, r3
 80194c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80194cc:	4413      	add	r3, r2
 80194ce:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80194d2:	1212      	asrs	r2, r2, #8
 80194d4:	b252      	sxtb	r2, r2
 80194d6:	fb02 f303 	mul.w	r3, r2, r3
 80194da:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80194de:	4413      	add	r3, r2
 80194e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 80194e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80194e8:	141b      	asrs	r3, r3, #16
 80194ea:	b25b      	sxtb	r3, r3
 80194ec:	461a      	mov	r2, r3
 80194ee:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80194f2:	4413      	add	r3, r2
 80194f4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80194f8:	1412      	asrs	r2, r2, #16
 80194fa:	b252      	sxtb	r2, r2
 80194fc:	fb02 f303 	mul.w	r3, r2, r3
 8019500:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019504:	4413      	add	r3, r2
 8019506:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 801950a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801950e:	161b      	asrs	r3, r3, #24
 8019510:	b25b      	sxtb	r3, r3
 8019512:	461a      	mov	r2, r3
 8019514:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019518:	4413      	add	r3, r2
 801951a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801951e:	1612      	asrs	r2, r2, #24
 8019520:	b252      	sxtb	r2, r2
 8019522:	fb02 f303 	mul.w	r3, r2, r3
 8019526:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801952a:	4413      	add	r3, r2
 801952c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                    }

                    input_ptr += (input_ch * input_x);
 8019530:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019534:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8019538:	fb02 f303 	mul.w	r3, r2, r3
 801953c:	461a      	mov	r2, r3
 801953e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019542:	4413      	add	r3, r2
 8019544:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                    kernel_ptr += (input_ch * 3);
 8019548:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801954c:	4613      	mov	r3, r2
 801954e:	005b      	lsls	r3, r3, #1
 8019550:	4413      	add	r3, r2
 8019552:	461a      	mov	r2, r3
 8019554:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8019558:	4413      	add	r3, r2
 801955a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 801955e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019562:	3301      	adds	r3, #1
 8019564:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8019568:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801956c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8019570:	1ad3      	subs	r3, r2, r3
 8019572:	2b03      	cmp	r3, #3
 8019574:	bfa8      	it	ge
 8019576:	2303      	movge	r3, #3
 8019578:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801957c:	429a      	cmp	r2, r3
 801957e:	f6ff ae78 	blt.w	8019272 <arm_depthwise_conv_3x3_s8+0x22e>
                }

                out_buff0 = arm_nn_requantize(out_buff0, output_mult[in_ch + 0], output_shift[in_ch + 0]);
 8019582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019586:	009b      	lsls	r3, r3, #2
 8019588:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801958c:	4413      	add	r3, r2
 801958e:	6819      	ldr	r1, [r3, #0]
 8019590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019594:	009b      	lsls	r3, r3, #2
 8019596:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801959a:	4413      	add	r3, r2
 801959c:	681a      	ldr	r2, [r3, #0]
 801959e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80195a2:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 80195a6:	6018      	str	r0, [r3, #0]
 80195a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80195ac:	6019      	str	r1, [r3, #0]
 80195ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80195b2:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80195b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80195be:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80195c2:	6812      	ldr	r2, [r2, #0]
 80195c4:	409a      	lsls	r2, r3
 80195c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80195ca:	601a      	str	r2, [r3, #0]
 80195cc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80195d0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80195d4:	6812      	ldr	r2, [r2, #0]
 80195d6:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80195d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80195dc:	2200      	movs	r2, #0
 80195de:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 80195e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80195e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80195e8:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 80195ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80195ee:	2200      	movs	r2, #0
 80195f0:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80195f2:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80195f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	4618      	mov	r0, r3
 80195fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019602:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	461a      	mov	r2, r3
 801960a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801960e:	fb02 f501 	mul.w	r5, r2, r1
 8019612:	fb00 f403 	mul.w	r4, r0, r3
 8019616:	442c      	add	r4, r5
 8019618:	fba0 2302 	umull	r2, r3, r0, r2
 801961c:	18e1      	adds	r1, r4, r3
 801961e:	460b      	mov	r3, r1
 8019620:	eb18 0102 	adds.w	r1, r8, r2
 8019624:	60b9      	str	r1, [r7, #8]
 8019626:	eb49 0303 	adc.w	r3, r9, r3
 801962a:	60fb      	str	r3, [r7, #12]
 801962c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8019630:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    result = (int32_t)(mult.long_long >> 31);
 8019634:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8019638:	f04f 0200 	mov.w	r2, #0
 801963c:	f04f 0300 	mov.w	r3, #0
 8019640:	0fc2      	lsrs	r2, r0, #31
 8019642:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019646:	17cb      	asrs	r3, r1, #31
 8019648:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 801964c:	4613      	mov	r3, r2
 801964e:	600b      	str	r3, [r1, #0]
    return result;
 8019650:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8019654:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019656:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	2b00      	cmp	r3, #0
 801965e:	dc04      	bgt.n	801966a <arm_depthwise_conv_3x3_s8+0x626>
 8019660:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	425b      	negs	r3, r3
 8019668:	e000      	b.n	801966c <arm_depthwise_conv_3x3_s8+0x628>
 801966a:	2300      	movs	r3, #0
 801966c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019670:	6011      	str	r1, [r2, #0]
 8019672:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8019676:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019678:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801967c:	2200      	movs	r2, #0
 801967e:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019680:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8019684:	2201      	movs	r2, #1
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	409a      	lsls	r2, r3
 801968a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801968e:	3a01      	subs	r2, #1
 8019690:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8019692:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8019696:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801969a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801969e:	6809      	ldr	r1, [r1, #0]
 80196a0:	6812      	ldr	r2, [r2, #0]
 80196a2:	400a      	ands	r2, r1
 80196a4:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80196a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80196aa:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80196ae:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80196b2:	6809      	ldr	r1, [r1, #0]
 80196b4:	6812      	ldr	r2, [r2, #0]
 80196b6:	fa41 f202 	asr.w	r2, r1, r2
 80196ba:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80196bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80196c0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80196c4:	6812      	ldr	r2, [r2, #0]
 80196c6:	1052      	asrs	r2, r2, #1
 80196c8:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80196ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	da06      	bge.n	80196e2 <arm_depthwise_conv_3x3_s8+0x69e>
        threshold++;
 80196d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80196d8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80196dc:	6812      	ldr	r2, [r2, #0]
 80196de:	3201      	adds	r2, #1
 80196e0:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80196e2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80196e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80196ea:	6812      	ldr	r2, [r2, #0]
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	429a      	cmp	r2, r3
 80196f0:	dd06      	ble.n	8019700 <arm_depthwise_conv_3x3_s8+0x6bc>
        result++;
 80196f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80196f6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80196fa:	6812      	ldr	r2, [r2, #0]
 80196fc:	3201      	adds	r2, #1
 80196fe:	601a      	str	r2, [r3, #0]
    return result;
 8019700:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8019704:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019706:	bf00      	nop
 8019708:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 = arm_nn_requantize(out_buff1, output_mult[in_ch + 1], output_shift[in_ch + 1]);
 801970c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019710:	3301      	adds	r3, #1
 8019712:	009b      	lsls	r3, r3, #2
 8019714:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8019718:	4413      	add	r3, r2
 801971a:	6819      	ldr	r1, [r3, #0]
 801971c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019720:	3301      	adds	r3, #1
 8019722:	009b      	lsls	r3, r3, #2
 8019724:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8019728:	4413      	add	r3, r2
 801972a:	681a      	ldr	r2, [r3, #0]
 801972c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8019730:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 8019734:	6018      	str	r0, [r3, #0]
 8019736:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801973a:	6019      	str	r1, [r3, #0]
 801973c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8019740:	601a      	str	r2, [r3, #0]
 8019742:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801974c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019750:	6812      	ldr	r2, [r2, #0]
 8019752:	409a      	lsls	r2, r3
 8019754:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8019758:	601a      	str	r2, [r3, #0]
 801975a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801975e:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8019762:	6812      	ldr	r2, [r2, #0]
 8019764:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8019766:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801976a:	2200      	movs	r2, #0
 801976c:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801976e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8019772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019776:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019778:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801977c:	2200      	movs	r2, #0
 801977e:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019780:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8019784:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	4618      	mov	r0, r3
 801978c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019790:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	461a      	mov	r2, r3
 8019798:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801979c:	fb02 f501 	mul.w	r5, r2, r1
 80197a0:	fb00 f403 	mul.w	r4, r0, r3
 80197a4:	442c      	add	r4, r5
 80197a6:	fba0 2302 	umull	r2, r3, r0, r2
 80197aa:	18e1      	adds	r1, r4, r3
 80197ac:	460b      	mov	r3, r1
 80197ae:	eb18 0102 	adds.w	r1, r8, r2
 80197b2:	6139      	str	r1, [r7, #16]
 80197b4:	eb49 0303 	adc.w	r3, r9, r3
 80197b8:	617b      	str	r3, [r7, #20]
 80197ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80197be:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 80197c2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80197c6:	f04f 0200 	mov.w	r2, #0
 80197ca:	f04f 0300 	mov.w	r3, #0
 80197ce:	0fc2      	lsrs	r2, r0, #31
 80197d0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80197d4:	17cb      	asrs	r3, r1, #31
 80197d6:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80197da:	4613      	mov	r3, r2
 80197dc:	600b      	str	r3, [r1, #0]
    return result;
 80197de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80197e2:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80197e4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	dc04      	bgt.n	80197f8 <arm_depthwise_conv_3x3_s8+0x7b4>
 80197ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	425b      	negs	r3, r3
 80197f6:	e000      	b.n	80197fa <arm_depthwise_conv_3x3_s8+0x7b6>
 80197f8:	2300      	movs	r3, #0
 80197fa:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80197fe:	6011      	str	r1, [r2, #0]
 8019800:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8019804:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019806:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801980a:	2200      	movs	r2, #0
 801980c:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801980e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8019812:	2201      	movs	r2, #1
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	409a      	lsls	r2, r3
 8019818:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801981c:	3a01      	subs	r2, #1
 801981e:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8019820:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8019824:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8019828:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801982c:	6809      	ldr	r1, [r1, #0]
 801982e:	6812      	ldr	r2, [r2, #0]
 8019830:	400a      	ands	r2, r1
 8019832:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8019834:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8019838:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801983c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8019840:	6809      	ldr	r1, [r1, #0]
 8019842:	6812      	ldr	r2, [r2, #0]
 8019844:	fa41 f202 	asr.w	r2, r1, r2
 8019848:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801984a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801984e:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8019852:	6812      	ldr	r2, [r2, #0]
 8019854:	1052      	asrs	r2, r2, #1
 8019856:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8019858:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	2b00      	cmp	r3, #0
 8019860:	da06      	bge.n	8019870 <arm_depthwise_conv_3x3_s8+0x82c>
        threshold++;
 8019862:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8019866:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801986a:	6812      	ldr	r2, [r2, #0]
 801986c:	3201      	adds	r2, #1
 801986e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8019870:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8019874:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8019878:	6812      	ldr	r2, [r2, #0]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	429a      	cmp	r2, r3
 801987e:	dd06      	ble.n	801988e <arm_depthwise_conv_3x3_s8+0x84a>
        result++;
 8019880:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8019884:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8019888:	6812      	ldr	r2, [r2, #0]
 801988a:	3201      	adds	r2, #1
 801988c:	601a      	str	r2, [r3, #0]
    return result;
 801988e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8019892:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019894:	bf00      	nop
 8019896:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 = arm_nn_requantize(out_buff2, output_mult[in_ch + 2], output_shift[in_ch + 2]);
 801989a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801989e:	3302      	adds	r3, #2
 80198a0:	009b      	lsls	r3, r3, #2
 80198a2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80198a6:	4413      	add	r3, r2
 80198a8:	681a      	ldr	r2, [r3, #0]
 80198aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80198ae:	3302      	adds	r3, #2
 80198b0:	009b      	lsls	r3, r3, #2
 80198b2:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 80198b6:	440b      	add	r3, r1
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 80198be:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80198c2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80198c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80198ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80198ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80198d2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80198d6:	fa02 f303 	lsl.w	r3, r2, r3
 80198da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80198de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80198e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    q31_t result = 0;
 80198e6:	2300      	movs	r3, #0
 80198e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    mult.word.low = 1 << 30;
 80198ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80198f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80198f4:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 80198f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80198fa:	2200      	movs	r2, #0
 80198fc:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80198fe:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8019902:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8019906:	4618      	mov	r0, r3
 8019908:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801990c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019910:	461a      	mov	r2, r3
 8019912:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8019916:	fb02 f501 	mul.w	r5, r2, r1
 801991a:	fb00 f403 	mul.w	r4, r0, r3
 801991e:	442c      	add	r4, r5
 8019920:	fba0 2302 	umull	r2, r3, r0, r2
 8019924:	18e1      	adds	r1, r4, r3
 8019926:	460b      	mov	r3, r1
 8019928:	eb18 0102 	adds.w	r1, r8, r2
 801992c:	61b9      	str	r1, [r7, #24]
 801992e:	eb49 0303 	adc.w	r3, r9, r3
 8019932:	61fb      	str	r3, [r7, #28]
 8019934:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8019938:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 801993c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8019940:	f04f 0200 	mov.w	r2, #0
 8019944:	f04f 0300 	mov.w	r3, #0
 8019948:	0fc2      	lsrs	r2, r0, #31
 801994a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801994e:	17cb      	asrs	r3, r1, #31
 8019950:	4613      	mov	r3, r2
 8019952:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    return result;
 8019956:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801995a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801995e:	2b00      	cmp	r3, #0
 8019960:	dc03      	bgt.n	801996a <arm_depthwise_conv_3x3_s8+0x926>
 8019962:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8019966:	425b      	negs	r3, r3
 8019968:	e000      	b.n	801996c <arm_depthwise_conv_3x3_s8+0x928>
 801996a:	2300      	movs	r3, #0
 801996c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8019970:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    q31_t result = 0;
 8019974:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8019978:	2200      	movs	r2, #0
 801997a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801997c:	2201      	movs	r2, #1
 801997e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019982:	409a      	lsls	r2, r3
 8019984:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8019988:	3a01      	subs	r2, #1
 801998a:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801998c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8019990:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8019994:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8019998:	6812      	ldr	r2, [r2, #0]
 801999a:	400a      	ands	r2, r1
 801999c:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801999e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80199a2:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80199a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80199aa:	fa41 f202 	asr.w	r2, r1, r2
 80199ae:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80199b0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80199b4:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80199b8:	6812      	ldr	r2, [r2, #0]
 80199ba:	1052      	asrs	r2, r2, #1
 80199bc:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80199be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	da06      	bge.n	80199d6 <arm_depthwise_conv_3x3_s8+0x992>
        threshold++;
 80199c8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80199cc:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80199d0:	6812      	ldr	r2, [r2, #0]
 80199d2:	3201      	adds	r2, #1
 80199d4:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80199d6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80199da:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80199de:	6812      	ldr	r2, [r2, #0]
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	429a      	cmp	r2, r3
 80199e4:	dd06      	ble.n	80199f4 <arm_depthwise_conv_3x3_s8+0x9b0>
        result++;
 80199e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80199ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80199ee:	6812      	ldr	r2, [r2, #0]
 80199f0:	3201      	adds	r2, #1
 80199f2:	601a      	str	r2, [r3, #0]
    return result;
 80199f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80199f8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80199fa:	bf00      	nop
 80199fc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 = arm_nn_requantize(out_buff3, output_mult[in_ch + 3], output_shift[in_ch + 3]);
 8019a00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019a04:	3303      	adds	r3, #3
 8019a06:	009b      	lsls	r3, r3, #2
 8019a08:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8019a0c:	4413      	add	r3, r2
 8019a0e:	681a      	ldr	r2, [r3, #0]
 8019a10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019a14:	3303      	adds	r3, #3
 8019a16:	009b      	lsls	r3, r3, #2
 8019a18:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8019a1c:	440b      	add	r3, r1
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 8019a24:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8019a28:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8019a2c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8019a30:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019a34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019a38:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8019a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8019a40:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8019a44:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8019a48:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    q31_t result = 0;
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    mult.word.low = 1 << 30;
 8019a52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019a56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019a5a:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019a5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019a60:	2200      	movs	r2, #0
 8019a62:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019a64:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8019a68:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019a72:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8019a76:	461a      	mov	r2, r3
 8019a78:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8019a7c:	fb02 f501 	mul.w	r5, r2, r1
 8019a80:	fb00 f403 	mul.w	r4, r0, r3
 8019a84:	442c      	add	r4, r5
 8019a86:	fba0 2302 	umull	r2, r3, r0, r2
 8019a8a:	18e1      	adds	r1, r4, r3
 8019a8c:	460b      	mov	r3, r1
 8019a8e:	eb18 0a02 	adds.w	sl, r8, r2
 8019a92:	eb49 0b03 	adc.w	fp, r9, r3
 8019a96:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
    result = (int32_t)(mult.long_long >> 31);
 8019a9a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8019a9e:	f04f 0200 	mov.w	r2, #0
 8019aa2:	f04f 0300 	mov.w	r3, #0
 8019aa6:	0fc2      	lsrs	r2, r0, #31
 8019aa8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019aac:	17cb      	asrs	r3, r1, #31
 8019aae:	4613      	mov	r3, r2
 8019ab0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    return result;
 8019ab4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019ab8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	dc03      	bgt.n	8019ac8 <arm_depthwise_conv_3x3_s8+0xa84>
 8019ac0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019ac4:	425b      	negs	r3, r3
 8019ac6:	e000      	b.n	8019aca <arm_depthwise_conv_3x3_s8+0xa86>
 8019ac8:	2300      	movs	r3, #0
 8019aca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8019ace:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    q31_t result = 0;
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019ad8:	2201      	movs	r2, #1
 8019ada:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8019ade:	fa02 f303 	lsl.w	r3, r2, r3
 8019ae2:	3b01      	subs	r3, #1
 8019ae4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    int32_t remainder = remainder_mask & dividend;
 8019ae8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8019aec:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8019af0:	4013      	ands	r3, r2
 8019af2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    result = dividend >> exponent;
 8019af6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8019afa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8019afe:	fa42 f303 	asr.w	r3, r2, r3
 8019b02:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    q31_t threshold = remainder_mask >> 1;
 8019b06:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8019b0a:	105b      	asrs	r3, r3, #1
 8019b0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    if (result < 0)
 8019b10:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	da04      	bge.n	8019b22 <arm_depthwise_conv_3x3_s8+0xade>
        threshold++;
 8019b18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8019b1c:	3301      	adds	r3, #1
 8019b1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    if (remainder > threshold)
 8019b22:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8019b26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8019b2a:	429a      	cmp	r2, r3
 8019b2c:	dd04      	ble.n	8019b38 <arm_depthwise_conv_3x3_s8+0xaf4>
        result++;
 8019b2e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8019b32:	3301      	adds	r3, #1
 8019b34:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    return result;
 8019b38:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019b3c:	bf00      	nop
 8019b3e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                out_buff0 += output_offset;
 8019b42:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019b46:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019b4a:	4413      	add	r3, r2
 8019b4c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 += output_offset;
 8019b50:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019b54:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019b58:	4413      	add	r3, r2
 8019b5a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 += output_offset;
 8019b5e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019b62:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019b66:	4413      	add	r3, r2
 8019b68:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 += output_offset;
 8019b6c:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8019b70:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019b74:	4413      	add	r3, r2
 8019b76:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
 8019b7a:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019b7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019b82:	4293      	cmp	r3, r2
 8019b84:	bfb8      	it	lt
 8019b86:	4613      	movlt	r3, r2
 8019b88:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019b8c:	4293      	cmp	r3, r2
 8019b8e:	bfa8      	it	ge
 8019b90:	4613      	movge	r3, r2
 8019b92:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
 8019b96:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019b9a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019b9e:	4293      	cmp	r3, r2
 8019ba0:	bfb8      	it	lt
 8019ba2:	4613      	movlt	r3, r2
 8019ba4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019ba8:	4293      	cmp	r3, r2
 8019baa:	bfa8      	it	ge
 8019bac:	4613      	movge	r3, r2
 8019bae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
 8019bb2:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019bb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8019bba:	4293      	cmp	r3, r2
 8019bbc:	bfb8      	it	lt
 8019bbe:	4613      	movlt	r3, r2
 8019bc0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019bc4:	4293      	cmp	r3, r2
 8019bc6:	bfa8      	it	ge
 8019bc8:	4613      	movge	r3, r2
 8019bca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
 8019bce:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019bd2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8019bd6:	4293      	cmp	r3, r2
 8019bd8:	bfb8      	it	lt
 8019bda:	4613      	movlt	r3, r2
 8019bdc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019be0:	4293      	cmp	r3, r2
 8019be2:	bfa8      	it	ge
 8019be4:	4613      	movge	r3, r2
 8019be6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                output[out_idx++] = (int8_t)out_buff0;
 8019bea:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019bee:	1c5a      	adds	r2, r3, #1
 8019bf0:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8019bf4:	461a      	mov	r2, r3
 8019bf6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019bfa:	4413      	add	r3, r2
 8019bfc:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019c00:	b252      	sxtb	r2, r2
 8019c02:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff1;
 8019c04:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019c08:	1c5a      	adds	r2, r3, #1
 8019c0a:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8019c0e:	461a      	mov	r2, r3
 8019c10:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019c14:	4413      	add	r3, r2
 8019c16:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019c1a:	b252      	sxtb	r2, r2
 8019c1c:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff2;
 8019c1e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019c22:	1c5a      	adds	r2, r3, #1
 8019c24:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8019c28:	461a      	mov	r2, r3
 8019c2a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019c2e:	4413      	add	r3, r2
 8019c30:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019c34:	b252      	sxtb	r2, r2
 8019c36:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff3;
 8019c38:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019c3c:	1c5a      	adds	r2, r3, #1
 8019c3e:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8019c42:	461a      	mov	r2, r3
 8019c44:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019c48:	4413      	add	r3, r2
 8019c4a:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8019c4e:	b252      	sxtb	r2, r2
 8019c50:	701a      	strb	r2, [r3, #0]
            for (; in_ch <= (input_ch - 4); in_ch += 4)
 8019c52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019c56:	3304      	adds	r3, #4
 8019c58:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8019c5c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019c60:	3b03      	subs	r3, #3
 8019c62:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8019c66:	429a      	cmp	r2, r3
 8019c68:	f6ff aaa8 	blt.w	80191bc <arm_depthwise_conv_3x3_s8+0x178>
            }

            // Leftover
            for (; in_ch < input_ch; ++in_ch)
 8019c6c:	e1a4      	b.n	8019fb8 <arm_depthwise_conv_3x3_s8+0xf74>
            {
                int32_t out_buff = bias[in_ch];
 8019c6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019c72:	009b      	lsls	r3, r3, #2
 8019c74:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019c78:	4413      	add	r3, r2
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
 8019c80:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8019c84:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8019c88:	4413      	add	r3, r2
 8019c8a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019c8e:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8019c92:	fb01 f202 	mul.w	r2, r1, r2
 8019c96:	fb02 f303 	mul.w	r3, r2, r3
 8019c9a:	4619      	mov	r1, r3
 8019c9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019ca0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019ca4:	fb02 f303 	mul.w	r3, r2, r3
 8019ca8:	18ca      	adds	r2, r1, r3
 8019caa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019cae:	4413      	add	r3, r2
 8019cb0:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8019cb4:	4413      	add	r3, r2
 8019cb6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 8019cba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019cbe:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8019cc2:	fb02 f203 	mul.w	r2, r2, r3
 8019cc6:	4613      	mov	r3, r2
 8019cc8:	005b      	lsls	r3, r3, #1
 8019cca:	4413      	add	r3, r2
 8019ccc:	461a      	mov	r2, r3
 8019cce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019cd2:	4413      	add	r3, r2
 8019cd4:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8019cd8:	4413      	add	r3, r2
 8019cda:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 8019cde:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8019ce2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8019ce6:	e06f      	b.n	8019dc8 <arm_depthwise_conv_3x3_s8+0xd84>
                {
                    if (ker_w_start == 0)
 8019ce8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d112      	bne.n	8019d16 <arm_depthwise_conv_3x3_s8+0xcd2>
                    {
                        out_buff += (*(input_ptr) + input_offset) * *(kernel_ptr);
 8019cf0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8019cf4:	f993 3000 	ldrsb.w	r3, [r3]
 8019cf8:	461a      	mov	r2, r3
 8019cfa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019cfe:	4413      	add	r3, r2
 8019d00:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8019d04:	f992 2000 	ldrsb.w	r2, [r2]
 8019d08:	fb02 f303 	mul.w	r3, r2, r3
 8019d0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019d10:	4413      	add	r3, r2
 8019d12:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                    }

                    out_buff += (*(input_ptr + input_ch) + input_offset) * *(kernel_ptr + input_ch);
 8019d16:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019d1a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8019d1e:	4413      	add	r3, r2
 8019d20:	f993 3000 	ldrsb.w	r3, [r3]
 8019d24:	461a      	mov	r2, r3
 8019d26:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019d2a:	4413      	add	r3, r2
 8019d2c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019d30:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8019d34:	440a      	add	r2, r1
 8019d36:	f992 2000 	ldrsb.w	r2, [r2]
 8019d3a:	fb02 f303 	mul.w	r3, r2, r3
 8019d3e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019d42:	4413      	add	r3, r2
 8019d44:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

                    if ((input_x - in_w) >= 3)
 8019d48:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8019d4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019d50:	1ad3      	subs	r3, r2, r3
 8019d52:	2b02      	cmp	r3, #2
 8019d54:	dd1c      	ble.n	8019d90 <arm_depthwise_conv_3x3_s8+0xd4c>
                    {
                        out_buff += (*(input_ptr + (input_ch << 1)) + input_offset) * *(kernel_ptr + (input_ch << 1));
 8019d56:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019d5a:	005b      	lsls	r3, r3, #1
 8019d5c:	461a      	mov	r2, r3
 8019d5e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8019d62:	4413      	add	r3, r2
 8019d64:	f993 3000 	ldrsb.w	r3, [r3]
 8019d68:	461a      	mov	r2, r3
 8019d6a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019d6e:	4413      	add	r3, r2
 8019d70:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019d74:	0052      	lsls	r2, r2, #1
 8019d76:	4611      	mov	r1, r2
 8019d78:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8019d7c:	440a      	add	r2, r1
 8019d7e:	f992 2000 	ldrsb.w	r2, [r2]
 8019d82:	fb02 f303 	mul.w	r3, r2, r3
 8019d86:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019d8a:	4413      	add	r3, r2
 8019d8c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                    }

                    input_ptr += (input_ch * input_x);
 8019d90:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019d94:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8019d98:	fb02 f303 	mul.w	r3, r2, r3
 8019d9c:	461a      	mov	r2, r3
 8019d9e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8019da2:	4413      	add	r3, r2
 8019da4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                    kernel_ptr += (input_ch * 3);
 8019da8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019dac:	4613      	mov	r3, r2
 8019dae:	005b      	lsls	r3, r3, #1
 8019db0:	4413      	add	r3, r2
 8019db2:	461a      	mov	r2, r3
 8019db4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8019db8:	4413      	add	r3, r2
 8019dba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 8019dbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8019dc2:	3301      	adds	r3, #1
 8019dc4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8019dc8:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8019dcc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8019dd0:	1ad3      	subs	r3, r2, r3
 8019dd2:	2b03      	cmp	r3, #3
 8019dd4:	bfa8      	it	ge
 8019dd6:	2303      	movge	r3, #3
 8019dd8:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8019ddc:	429a      	cmp	r2, r3
 8019dde:	db83      	blt.n	8019ce8 <arm_depthwise_conv_3x3_s8+0xca4>
                }

                out_buff = arm_nn_requantize(out_buff, output_mult[in_ch], output_shift[in_ch]);
 8019de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019de4:	009b      	lsls	r3, r3, #2
 8019de6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8019dea:	4413      	add	r3, r2
 8019dec:	6819      	ldr	r1, [r3, #0]
 8019dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019df2:	009b      	lsls	r3, r3, #2
 8019df4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8019df8:	4413      	add	r3, r2
 8019dfa:	681a      	ldr	r2, [r3, #0]
 8019dfc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019e00:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8019e04:	6018      	str	r0, [r3, #0]
 8019e06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8019e0a:	6019      	str	r1, [r3, #0]
 8019e0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019e10:	601a      	str	r2, [r3, #0]
 8019e12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e1c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8019e20:	6812      	ldr	r2, [r2, #0]
 8019e22:	409a      	lsls	r2, r3
 8019e24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8019e28:	601a      	str	r2, [r3, #0]
 8019e2a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8019e2e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8019e32:	6812      	ldr	r2, [r2, #0]
 8019e34:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8019e36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8019e3a:	2200      	movs	r2, #0
 8019e3c:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8019e3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019e46:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019e48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019e4c:	2200      	movs	r2, #0
 8019e4e:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019e50:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8019e54:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	4618      	mov	r0, r3
 8019e5c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019e60:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	461a      	mov	r2, r3
 8019e68:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8019e6c:	fb02 f501 	mul.w	r5, r2, r1
 8019e70:	fb00 f403 	mul.w	r4, r0, r3
 8019e74:	442c      	add	r4, r5
 8019e76:	fba0 2302 	umull	r2, r3, r0, r2
 8019e7a:	18e1      	adds	r1, r4, r3
 8019e7c:	460b      	mov	r3, r1
 8019e7e:	eb18 0102 	adds.w	r1, r8, r2
 8019e82:	6039      	str	r1, [r7, #0]
 8019e84:	eb49 0303 	adc.w	r3, r9, r3
 8019e88:	607b      	str	r3, [r7, #4]
 8019e8a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019e8e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 8019e92:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8019e96:	f04f 0200 	mov.w	r2, #0
 8019e9a:	f04f 0300 	mov.w	r3, #0
 8019e9e:	0fc2      	lsrs	r2, r0, #31
 8019ea0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019ea4:	17cb      	asrs	r3, r1, #31
 8019ea6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8019eaa:	4613      	mov	r3, r2
 8019eac:	600b      	str	r3, [r1, #0]
    return result;
 8019eae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8019eb2:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019eb4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	dc04      	bgt.n	8019ec8 <arm_depthwise_conv_3x3_s8+0xe84>
 8019ebe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	425b      	negs	r3, r3
 8019ec6:	e000      	b.n	8019eca <arm_depthwise_conv_3x3_s8+0xe86>
 8019ec8:	2300      	movs	r3, #0
 8019eca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8019ece:	6011      	str	r1, [r2, #0]
 8019ed0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8019ed4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019ed6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8019eda:	2200      	movs	r2, #0
 8019edc:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019ede:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8019ee2:	2201      	movs	r2, #1
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	409a      	lsls	r2, r3
 8019ee8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8019eec:	3a01      	subs	r2, #1
 8019eee:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8019ef0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8019ef4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8019ef8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8019efc:	6809      	ldr	r1, [r1, #0]
 8019efe:	6812      	ldr	r2, [r2, #0]
 8019f00:	400a      	ands	r2, r1
 8019f02:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8019f04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8019f08:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8019f0c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8019f10:	6809      	ldr	r1, [r1, #0]
 8019f12:	6812      	ldr	r2, [r2, #0]
 8019f14:	fa41 f202 	asr.w	r2, r1, r2
 8019f18:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8019f1a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8019f1e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8019f22:	6812      	ldr	r2, [r2, #0]
 8019f24:	1052      	asrs	r2, r2, #1
 8019f26:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8019f28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	da06      	bge.n	8019f40 <arm_depthwise_conv_3x3_s8+0xefc>
        threshold++;
 8019f32:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8019f36:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8019f3a:	6812      	ldr	r2, [r2, #0]
 8019f3c:	3201      	adds	r2, #1
 8019f3e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8019f40:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8019f44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8019f48:	6812      	ldr	r2, [r2, #0]
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	429a      	cmp	r2, r3
 8019f4e:	dd06      	ble.n	8019f5e <arm_depthwise_conv_3x3_s8+0xf1a>
        result++;
 8019f50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8019f54:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8019f58:	6812      	ldr	r2, [r2, #0]
 8019f5a:	3201      	adds	r2, #1
 8019f5c:	601a      	str	r2, [r3, #0]
    return result;
 8019f5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8019f62:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019f64:	bf00      	nop
 8019f66:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                out_buff += output_offset;
 8019f6a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019f6e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019f72:	4413      	add	r3, r2
 8019f74:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                out_buff = MIN(MAX(out_buff, output_activation_min), output_activation_max);
 8019f78:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8019f7c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019f80:	4293      	cmp	r3, r2
 8019f82:	bfb8      	it	lt
 8019f84:	4613      	movlt	r3, r2
 8019f86:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8019f8a:	4293      	cmp	r3, r2
 8019f8c:	bfa8      	it	ge
 8019f8e:	4613      	movge	r3, r2
 8019f90:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                output[out_idx++] = (int8_t)out_buff;
 8019f94:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019f98:	1c5a      	adds	r2, r3, #1
 8019f9a:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8019f9e:	461a      	mov	r2, r3
 8019fa0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019fa4:	4413      	add	r3, r2
 8019fa6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019faa:	b252      	sxtb	r2, r2
 8019fac:	701a      	strb	r2, [r3, #0]
            for (; in_ch < input_ch; ++in_ch)
 8019fae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019fb2:	3301      	adds	r3, #1
 8019fb4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8019fb8:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8019fbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	f6ff ae54 	blt.w	8019c6e <arm_depthwise_conv_3x3_s8+0xc2a>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 8019fc6:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8019fca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8019fce:	4413      	add	r3, r2
 8019fd0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8019fd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8019fd8:	3301      	adds	r3, #1
 8019fda:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8019fde:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8019fe2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8019fe6:	429a      	cmp	r2, r3
 8019fe8:	f6ff a8d8 	blt.w	801919c <arm_depthwise_conv_3x3_s8+0x158>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 8019fec:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8019ff0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8019ff4:	4413      	add	r3, r2
 8019ff6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8019ffa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8019ffe:	3301      	adds	r3, #1
 801a000:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 801a004:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801a008:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801a00c:	429a      	cmp	r2, r3
 801a00e:	f6ff a8b0 	blt.w	8019172 <arm_depthwise_conv_3x3_s8+0x12e>
            }
        }
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801a012:	2300      	movs	r3, #0
}
 801a014:	4618      	mov	r0, r3
 801a016:	f507 7705 	add.w	r7, r7, #532	; 0x214
 801a01a:	46bd      	mov	sp, r7
 801a01c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801a020:	4770      	bx	lr

0801a022 <depthwise_conv_s8_mult_4>:
                                     const int32_t output_y,
                                     const int32_t output_offset,
                                     const int32_t input_offset,
                                     const int32_t output_activation_min,
                                     const int32_t output_activation_max)
{
 801a022:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801a026:	b0d7      	sub	sp, #348	; 0x15c
 801a028:	af00      	add	r7, sp, #0
 801a02a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 801a02e:	6020      	str	r0, [r4, #0]
 801a030:	f107 0020 	add.w	r0, r7, #32
 801a034:	6001      	str	r1, [r0, #0]
 801a036:	f107 011c 	add.w	r1, r7, #28
 801a03a:	600a      	str	r2, [r1, #0]
 801a03c:	f107 0218 	add.w	r2, r7, #24
 801a040:	6013      	str	r3, [r2, #0]
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801a042:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801a046:	425b      	negs	r3, r3
 801a048:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801a04c:	2300      	movs	r3, #0
 801a04e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 801a052:	2300      	movs	r3, #0
 801a054:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801a058:	f000 bcb3 	b.w	801a9c2 <depthwise_conv_s8_mult_4+0x9a0>
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801a05c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801a060:	425b      	negs	r3, r3
 801a062:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801a066:	2300      	movs	r3, #0
 801a068:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801a06c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a070:	2b00      	cmp	r3, #0
 801a072:	dc03      	bgt.n	801a07c <depthwise_conv_s8_mult_4+0x5a>
 801a074:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a078:	425b      	negs	r3, r3
 801a07a:	e000      	b.n	801a07e <depthwise_conv_s8_mult_4+0x5c>
 801a07c:	2300      	movs	r3, #0
 801a07e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801a082:	f000 bc8b 	b.w	801a99c <depthwise_conv_s8_mult_4+0x97a>
        {
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
 801a086:	2300      	movs	r3, #0
 801a088:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801a08c:	2300      	movs	r3, #0
 801a08e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801a092:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a096:	2b00      	cmp	r3, #0
 801a098:	dc03      	bgt.n	801a0a2 <depthwise_conv_s8_mult_4+0x80>
 801a09a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a09e:	425b      	negs	r3, r3
 801a0a0:	e000      	b.n	801a0a4 <depthwise_conv_s8_mult_4+0x82>
 801a0a2:	2300      	movs	r3, #0
 801a0a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801a0a8:	f000 bc65 	b.w	801a976 <depthwise_conv_s8_mult_4+0x954>
                 ++in_ch, out_ch += ch_mult)
            {
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
 801a0ac:	2300      	movs	r3, #0
 801a0ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801a0b2:	f000 bc4d 	b.w	801a950 <depthwise_conv_s8_mult_4+0x92e>
                {
                    int32_t out_buff[4];

                    out_buff[0] = bias[out_ch + 0 + mult_tile];
 801a0b6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a0ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a0be:	4413      	add	r3, r2
 801a0c0:	009b      	lsls	r3, r3, #2
 801a0c2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a0c6:	4413      	add	r3, r2
 801a0c8:	681a      	ldr	r2, [r3, #0]
 801a0ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a0ce:	601a      	str	r2, [r3, #0]
                    out_buff[1] = bias[out_ch + 1 + mult_tile];
 801a0d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a0d4:	1c5a      	adds	r2, r3, #1
 801a0d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a0da:	4413      	add	r3, r2
 801a0dc:	009b      	lsls	r3, r3, #2
 801a0de:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a0e2:	4413      	add	r3, r2
 801a0e4:	681a      	ldr	r2, [r3, #0]
 801a0e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a0ea:	605a      	str	r2, [r3, #4]
                    out_buff[2] = bias[out_ch + 2 + mult_tile];
 801a0ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a0f0:	1c9a      	adds	r2, r3, #2
 801a0f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a0f6:	4413      	add	r3, r2
 801a0f8:	009b      	lsls	r3, r3, #2
 801a0fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a0fe:	4413      	add	r3, r2
 801a100:	681a      	ldr	r2, [r3, #0]
 801a102:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a106:	609a      	str	r2, [r3, #8]
                    out_buff[3] = bias[out_ch + 3 + mult_tile];
 801a108:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a10c:	1cda      	adds	r2, r3, #3
 801a10e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a112:	4413      	add	r3, r2
 801a114:	009b      	lsls	r3, r3, #2
 801a116:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a11a:	4413      	add	r3, r2
 801a11c:	681a      	ldr	r2, [r3, #0]
 801a11e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a122:	60da      	str	r2, [r3, #12]

                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
 801a124:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a128:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801a12c:	e0cd      	b.n	801a2ca <depthwise_conv_s8_mult_4+0x2a8>
                    {
                        int32_t ker_idx = ker_h * (output_ch * kernel_x) + ker_w_start * output_ch + out_ch;
 801a12e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801a132:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 801a136:	fb02 f303 	mul.w	r3, r2, r3
 801a13a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801a13e:	fb02 f203 	mul.w	r2, r2, r3
 801a142:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801a146:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 801a14a:	fb01 f303 	mul.w	r3, r1, r3
 801a14e:	4413      	add	r3, r2
 801a150:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a154:	4413      	add	r3, r2
 801a156:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                        int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + in_ch;
 801a15a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801a15e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801a162:	4413      	add	r3, r2
 801a164:	f107 0218 	add.w	r2, r7, #24
 801a168:	f107 0120 	add.w	r1, r7, #32
 801a16c:	6812      	ldr	r2, [r2, #0]
 801a16e:	6809      	ldr	r1, [r1, #0]
 801a170:	fb01 f202 	mul.w	r2, r1, r2
 801a174:	fb02 f203 	mul.w	r2, r2, r3
 801a178:	f107 0118 	add.w	r1, r7, #24
 801a17c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a180:	6809      	ldr	r1, [r1, #0]
 801a182:	fb01 f303 	mul.w	r3, r1, r3
 801a186:	4413      	add	r3, r2
 801a188:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801a18c:	4413      	add	r3, r2
 801a18e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
 801a192:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801a196:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801a19a:	e081      	b.n	801a2a0 <depthwise_conv_s8_mult_4+0x27e>
                             ++ker_w, ker_idx += output_ch)
                        {
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
 801a19c:	f107 0218 	add.w	r2, r7, #24
 801a1a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a1a4:	6812      	ldr	r2, [r2, #0]
 801a1a6:	fb02 f203 	mul.w	r2, r2, r3
 801a1aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a1ae:	4413      	add	r3, r2
 801a1b0:	461a      	mov	r2, r3
 801a1b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	4413      	add	r3, r2
 801a1ba:	f993 3000 	ldrsb.w	r3, [r3]
 801a1be:	461a      	mov	r2, r3
 801a1c0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a1c4:	4413      	add	r3, r2
 801a1c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                            out_buff[0] += in_val * kernel[ker_idx + 0 + mult_tile];
 801a1ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a1ce:	681a      	ldr	r2, [r3, #0]
 801a1d0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 801a1d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a1d8:	440b      	add	r3, r1
 801a1da:	4619      	mov	r1, r3
 801a1dc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801a1e0:	440b      	add	r3, r1
 801a1e2:	f993 3000 	ldrsb.w	r3, [r3]
 801a1e6:	4619      	mov	r1, r3
 801a1e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a1ec:	fb03 f301 	mul.w	r3, r3, r1
 801a1f0:	441a      	add	r2, r3
 801a1f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a1f6:	601a      	str	r2, [r3, #0]
                            out_buff[1] += in_val * kernel[ker_idx + 1 + mult_tile];
 801a1f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a1fc:	685a      	ldr	r2, [r3, #4]
 801a1fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a202:	1c59      	adds	r1, r3, #1
 801a204:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a208:	440b      	add	r3, r1
 801a20a:	4619      	mov	r1, r3
 801a20c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801a210:	440b      	add	r3, r1
 801a212:	f993 3000 	ldrsb.w	r3, [r3]
 801a216:	4619      	mov	r1, r3
 801a218:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a21c:	fb03 f301 	mul.w	r3, r3, r1
 801a220:	441a      	add	r2, r3
 801a222:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a226:	605a      	str	r2, [r3, #4]
                            out_buff[2] += in_val * kernel[ker_idx + 2 + mult_tile];
 801a228:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a22c:	689a      	ldr	r2, [r3, #8]
 801a22e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a232:	1c99      	adds	r1, r3, #2
 801a234:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a238:	440b      	add	r3, r1
 801a23a:	4619      	mov	r1, r3
 801a23c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801a240:	440b      	add	r3, r1
 801a242:	f993 3000 	ldrsb.w	r3, [r3]
 801a246:	4619      	mov	r1, r3
 801a248:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a24c:	fb03 f301 	mul.w	r3, r3, r1
 801a250:	441a      	add	r2, r3
 801a252:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a256:	609a      	str	r2, [r3, #8]
                            out_buff[3] += in_val * kernel[ker_idx + 3 + mult_tile];
 801a258:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a25c:	68da      	ldr	r2, [r3, #12]
 801a25e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a262:	1cd9      	adds	r1, r3, #3
 801a264:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a268:	440b      	add	r3, r1
 801a26a:	4619      	mov	r1, r3
 801a26c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801a270:	440b      	add	r3, r1
 801a272:	f993 3000 	ldrsb.w	r3, [r3]
 801a276:	4619      	mov	r1, r3
 801a278:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a27c:	fb03 f301 	mul.w	r3, r3, r1
 801a280:	441a      	add	r2, r3
 801a282:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a286:	60da      	str	r2, [r3, #12]
                             ++ker_w, ker_idx += output_ch)
 801a288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a28c:	3301      	adds	r3, #1
 801a28e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801a292:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801a296:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801a29a:	4413      	add	r3, r2
 801a29c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
 801a2a0:	f107 0320 	add.w	r3, r7, #32
 801a2a4:	681a      	ldr	r2, [r3, #0]
 801a2a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a2aa:	1ad2      	subs	r2, r2, r3
 801a2ac:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a2b0:	4293      	cmp	r3, r2
 801a2b2:	bfa8      	it	ge
 801a2b4:	4613      	movge	r3, r2
 801a2b6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801a2ba:	429a      	cmp	r2, r3
 801a2bc:	f6ff af6e 	blt.w	801a19c <depthwise_conv_s8_mult_4+0x17a>
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
 801a2c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801a2c4:	3301      	adds	r3, #1
 801a2c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801a2ca:	f107 031c 	add.w	r3, r7, #28
 801a2ce:	681a      	ldr	r2, [r3, #0]
 801a2d0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a2d4:	1ad2      	subs	r2, r2, r3
 801a2d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801a2da:	4293      	cmp	r3, r2
 801a2dc:	bfa8      	it	ge
 801a2de:	4613      	movge	r3, r2
 801a2e0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801a2e4:	429a      	cmp	r2, r3
 801a2e6:	f6ff af22 	blt.w	801a12e <depthwise_conv_s8_mult_4+0x10c>
                    res = vmaxq_s32(res, vdupq_n_s32(output_activation_min));
                    res = vminq_s32(res, vdupq_n_s32(output_activation_max));
                    vstrbq_s32(output, res);
                    output += 4;
#else
                    out_buff[0] = arm_nn_requantize(
 801a2ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a2ee:	6819      	ldr	r1, [r3, #0]
                        out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 + mult_tile]);
 801a2f0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a2f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a2f8:	4413      	add	r3, r2
 801a2fa:	009b      	lsls	r3, r3, #2
 801a2fc:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a300:	4413      	add	r3, r2
                    out_buff[0] = arm_nn_requantize(
 801a302:	681a      	ldr	r2, [r3, #0]
                        out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 + mult_tile]);
 801a304:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 801a308:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a30c:	4403      	add	r3, r0
 801a30e:	009b      	lsls	r3, r3, #2
 801a310:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801a314:	4403      	add	r3, r0
                    out_buff[0] = arm_nn_requantize(
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801a31c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801a320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801a324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a328:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a32c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a330:	fa02 f303 	lsl.w	r3, r2, r3
 801a334:	67fb      	str	r3, [r7, #124]	; 0x7c
 801a336:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a33a:	67bb      	str	r3, [r7, #120]	; 0x78
    q31_t result = 0;
 801a33c:	2300      	movs	r3, #0
 801a33e:	677b      	str	r3, [r7, #116]	; 0x74
    mult.word.low = 1 << 30;
 801a340:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a348:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a34a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a34e:	2200      	movs	r2, #0
 801a350:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a352:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 801a356:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a358:	461a      	mov	r2, r3
 801a35a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a35e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801a360:	4608      	mov	r0, r1
 801a362:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a366:	fb00 f503 	mul.w	r5, r0, r3
 801a36a:	fb02 f401 	mul.w	r4, r2, r1
 801a36e:	442c      	add	r4, r5
 801a370:	fba2 2300 	umull	r2, r3, r2, r0
 801a374:	18e1      	adds	r1, r4, r3
 801a376:	460b      	mov	r3, r1
 801a378:	eb18 0102 	adds.w	r1, r8, r2
 801a37c:	6039      	str	r1, [r7, #0]
 801a37e:	eb49 0303 	adc.w	r3, r9, r3
 801a382:	607b      	str	r3, [r7, #4]
 801a384:	e9d7 3400 	ldrd	r3, r4, [r7]
 801a388:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    result = (int32_t)(mult.long_long >> 31);
 801a38c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801a390:	f04f 0200 	mov.w	r2, #0
 801a394:	f04f 0300 	mov.w	r3, #0
 801a398:	0fc2      	lsrs	r2, r0, #31
 801a39a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a39e:	17cb      	asrs	r3, r1, #31
 801a3a0:	4613      	mov	r3, r2
 801a3a2:	677b      	str	r3, [r7, #116]	; 0x74
    return result;
 801a3a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a3a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	dc03      	bgt.n	801a3b6 <depthwise_conv_s8_mult_4+0x394>
 801a3ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a3b2:	425b      	negs	r3, r3
 801a3b4:	e000      	b.n	801a3b8 <depthwise_conv_s8_mult_4+0x396>
 801a3b6:	2300      	movs	r3, #0
 801a3b8:	673a      	str	r2, [r7, #112]	; 0x70
 801a3ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    q31_t result = 0;
 801a3bc:	2300      	movs	r3, #0
 801a3be:	66bb      	str	r3, [r7, #104]	; 0x68
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a3c0:	2201      	movs	r2, #1
 801a3c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a3c4:	fa02 f303 	lsl.w	r3, r2, r3
 801a3c8:	3b01      	subs	r3, #1
 801a3ca:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t remainder = remainder_mask & dividend;
 801a3cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a3ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a3d0:	4013      	ands	r3, r2
 801a3d2:	663b      	str	r3, [r7, #96]	; 0x60
    result = dividend >> exponent;
 801a3d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a3d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a3d8:	fa42 f303 	asr.w	r3, r2, r3
 801a3dc:	66bb      	str	r3, [r7, #104]	; 0x68
    q31_t threshold = remainder_mask >> 1;
 801a3de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a3e0:	105b      	asrs	r3, r3, #1
 801a3e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (result < 0)
 801a3e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	da02      	bge.n	801a3f0 <depthwise_conv_s8_mult_4+0x3ce>
        threshold++;
 801a3ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a3ec:	3301      	adds	r3, #1
 801a3ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (remainder > threshold)
 801a3f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a3f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a3f4:	429a      	cmp	r2, r3
 801a3f6:	dd02      	ble.n	801a3fe <depthwise_conv_s8_mult_4+0x3dc>
        result++;
 801a3f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a3fa:	3301      	adds	r3, #1
 801a3fc:	66bb      	str	r3, [r7, #104]	; 0x68
    return result;
 801a3fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a400:	bf00      	nop
 801a402:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a406:	601a      	str	r2, [r3, #0]
                    out_buff[1] = arm_nn_requantize(
 801a408:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a40c:	6859      	ldr	r1, [r3, #4]
                        out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 + mult_tile]);
 801a40e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a412:	1c5a      	adds	r2, r3, #1
 801a414:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a418:	4413      	add	r3, r2
 801a41a:	009b      	lsls	r3, r3, #2
 801a41c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a420:	4413      	add	r3, r2
                    out_buff[1] = arm_nn_requantize(
 801a422:	681a      	ldr	r2, [r3, #0]
                        out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 + mult_tile]);
 801a424:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a428:	1c58      	adds	r0, r3, #1
 801a42a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a42e:	4403      	add	r3, r0
 801a430:	009b      	lsls	r3, r3, #2
 801a432:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801a436:	4403      	add	r3, r0
                    out_buff[1] = arm_nn_requantize(
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 801a43e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801a442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801a446:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a44a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a44e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801a452:	fa02 f303 	lsl.w	r3, r2, r3
 801a456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801a45a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a45e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q31_t result = 0;
 801a462:	2300      	movs	r3, #0
 801a464:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    mult.word.low = 1 << 30;
 801a468:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a46c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a470:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a472:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a476:	2200      	movs	r2, #0
 801a478:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a47a:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 801a47e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a482:	461a      	mov	r2, r3
 801a484:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a488:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801a48c:	4608      	mov	r0, r1
 801a48e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a492:	fb00 f503 	mul.w	r5, r0, r3
 801a496:	fb02 f401 	mul.w	r4, r2, r1
 801a49a:	442c      	add	r4, r5
 801a49c:	fba2 2300 	umull	r2, r3, r2, r0
 801a4a0:	18e1      	adds	r1, r4, r3
 801a4a2:	460b      	mov	r3, r1
 801a4a4:	eb18 0102 	adds.w	r1, r8, r2
 801a4a8:	60b9      	str	r1, [r7, #8]
 801a4aa:	eb49 0303 	adc.w	r3, r9, r3
 801a4ae:	60fb      	str	r3, [r7, #12]
 801a4b0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801a4b4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    result = (int32_t)(mult.long_long >> 31);
 801a4b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801a4bc:	f04f 0200 	mov.w	r2, #0
 801a4c0:	f04f 0300 	mov.w	r3, #0
 801a4c4:	0fc2      	lsrs	r2, r0, #31
 801a4c6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a4ca:	17cb      	asrs	r3, r1, #31
 801a4cc:	4613      	mov	r3, r2
 801a4ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return result;
 801a4d2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a4d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	dc03      	bgt.n	801a4e6 <depthwise_conv_s8_mult_4+0x4c4>
 801a4de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a4e2:	425b      	negs	r3, r3
 801a4e4:	e000      	b.n	801a4e8 <depthwise_conv_s8_mult_4+0x4c6>
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801a4ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    q31_t result = 0;
 801a4f0:	2300      	movs	r3, #0
 801a4f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a4f6:	2201      	movs	r2, #1
 801a4f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a4fc:	fa02 f303 	lsl.w	r3, r2, r3
 801a500:	3b01      	subs	r3, #1
 801a502:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int32_t remainder = remainder_mask & dividend;
 801a506:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801a50a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a50e:	4013      	ands	r3, r2
 801a510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    result = dividend >> exponent;
 801a514:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801a518:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a51c:	fa42 f303 	asr.w	r3, r2, r3
 801a520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    q31_t threshold = remainder_mask >> 1;
 801a524:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a528:	105b      	asrs	r3, r3, #1
 801a52a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (result < 0)
 801a52e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a532:	2b00      	cmp	r3, #0
 801a534:	da04      	bge.n	801a540 <depthwise_conv_s8_mult_4+0x51e>
        threshold++;
 801a536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a53a:	3301      	adds	r3, #1
 801a53c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (remainder > threshold)
 801a540:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801a544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a548:	429a      	cmp	r2, r3
 801a54a:	dd04      	ble.n	801a556 <depthwise_conv_s8_mult_4+0x534>
        result++;
 801a54c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a550:	3301      	adds	r3, #1
 801a552:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return result;
 801a556:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a55a:	bf00      	nop
 801a55c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a560:	605a      	str	r2, [r3, #4]
                    out_buff[2] = arm_nn_requantize(
 801a562:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a566:	6899      	ldr	r1, [r3, #8]
                        out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 + mult_tile]);
 801a568:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a56c:	1c9a      	adds	r2, r3, #2
 801a56e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a572:	4413      	add	r3, r2
 801a574:	009b      	lsls	r3, r3, #2
 801a576:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a57a:	4413      	add	r3, r2
                    out_buff[2] = arm_nn_requantize(
 801a57c:	681a      	ldr	r2, [r3, #0]
                        out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 + mult_tile]);
 801a57e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a582:	1c98      	adds	r0, r3, #2
 801a584:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a588:	4403      	add	r3, r0
 801a58a:	009b      	lsls	r3, r3, #2
 801a58c:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801a590:	4403      	add	r3, r0
                    out_buff[2] = arm_nn_requantize(
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 801a598:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 801a59c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801a5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a5a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a5a8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801a5ac:	fa02 f303 	lsl.w	r3, r2, r3
 801a5b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801a5b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a5b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    q31_t result = 0;
 801a5bc:	2300      	movs	r3, #0
 801a5be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mult.word.low = 1 << 30;
 801a5c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a5c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a5ca:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a5cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a5d4:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 801a5d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801a5dc:	461a      	mov	r2, r3
 801a5de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a5e2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801a5e6:	4608      	mov	r0, r1
 801a5e8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a5ec:	fb00 f503 	mul.w	r5, r0, r3
 801a5f0:	fb02 f401 	mul.w	r4, r2, r1
 801a5f4:	442c      	add	r4, r5
 801a5f6:	fba2 2300 	umull	r2, r3, r2, r0
 801a5fa:	18e1      	adds	r1, r4, r3
 801a5fc:	460b      	mov	r3, r1
 801a5fe:	eb18 0102 	adds.w	r1, r8, r2
 801a602:	6139      	str	r1, [r7, #16]
 801a604:	eb49 0303 	adc.w	r3, r9, r3
 801a608:	617b      	str	r3, [r7, #20]
 801a60a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801a60e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801a612:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801a616:	f04f 0200 	mov.w	r2, #0
 801a61a:	f04f 0300 	mov.w	r3, #0
 801a61e:	0fc2      	lsrs	r2, r0, #31
 801a620:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a624:	17cb      	asrs	r3, r1, #31
 801a626:	4613      	mov	r3, r2
 801a628:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    return result;
 801a62c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a634:	2b00      	cmp	r3, #0
 801a636:	dc03      	bgt.n	801a640 <depthwise_conv_s8_mult_4+0x61e>
 801a638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a63c:	425b      	negs	r3, r3
 801a63e:	e000      	b.n	801a642 <depthwise_conv_s8_mult_4+0x620>
 801a640:	2300      	movs	r3, #0
 801a642:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 801a646:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    q31_t result = 0;
 801a64a:	2300      	movs	r3, #0
 801a64c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a650:	2201      	movs	r2, #1
 801a652:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a656:	fa02 f303 	lsl.w	r3, r2, r3
 801a65a:	3b01      	subs	r3, #1
 801a65c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int32_t remainder = remainder_mask & dividend;
 801a660:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801a664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a668:	4013      	ands	r3, r2
 801a66a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result = dividend >> exponent;
 801a66e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801a672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a676:	fa42 f303 	asr.w	r3, r2, r3
 801a67a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    q31_t threshold = remainder_mask >> 1;
 801a67e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a682:	105b      	asrs	r3, r3, #1
 801a684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (result < 0)
 801a688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	da04      	bge.n	801a69a <depthwise_conv_s8_mult_4+0x678>
        threshold++;
 801a690:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801a694:	3301      	adds	r3, #1
 801a696:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (remainder > threshold)
 801a69a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801a69e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801a6a2:	429a      	cmp	r2, r3
 801a6a4:	dd04      	ble.n	801a6b0 <depthwise_conv_s8_mult_4+0x68e>
        result++;
 801a6a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801a6aa:	3301      	adds	r3, #1
 801a6ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    return result;
 801a6b0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a6b4:	bf00      	nop
 801a6b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a6ba:	609a      	str	r2, [r3, #8]
                    out_buff[3] = arm_nn_requantize(
 801a6bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a6c0:	68d9      	ldr	r1, [r3, #12]
                        out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 + mult_tile]);
 801a6c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a6c6:	1cda      	adds	r2, r3, #3
 801a6c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a6cc:	4413      	add	r3, r2
 801a6ce:	009b      	lsls	r3, r3, #2
 801a6d0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a6d4:	4413      	add	r3, r2
                    out_buff[3] = arm_nn_requantize(
 801a6d6:	681a      	ldr	r2, [r3, #0]
                        out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 + mult_tile]);
 801a6d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a6dc:	1cd8      	adds	r0, r3, #3
 801a6de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a6e2:	4403      	add	r3, r0
 801a6e4:	009b      	lsls	r3, r3, #2
 801a6e6:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801a6ea:	4403      	add	r3, r0
                    out_buff[3] = arm_nn_requantize(
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 801a6f2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 801a6f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801a6fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a6fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a702:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801a706:	fa02 f303 	lsl.w	r3, r2, r3
 801a70a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801a70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801a712:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    q31_t result = 0;
 801a716:	2300      	movs	r3, #0
 801a718:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    mult.word.low = 1 << 30;
 801a71c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a720:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a724:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a72a:	2200      	movs	r2, #0
 801a72c:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a72e:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 801a732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801a736:	461a      	mov	r2, r3
 801a738:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a73c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 801a740:	4608      	mov	r0, r1
 801a742:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a746:	fb00 f503 	mul.w	r5, r0, r3
 801a74a:	fb02 f401 	mul.w	r4, r2, r1
 801a74e:	442c      	add	r4, r5
 801a750:	fba2 2300 	umull	r2, r3, r2, r0
 801a754:	18e1      	adds	r1, r4, r3
 801a756:	460b      	mov	r3, r1
 801a758:	eb18 0a02 	adds.w	sl, r8, r2
 801a75c:	eb49 0b03 	adc.w	fp, r9, r3
 801a760:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
 801a764:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801a768:	f04f 0200 	mov.w	r2, #0
 801a76c:	f04f 0300 	mov.w	r3, #0
 801a770:	0fc2      	lsrs	r2, r0, #31
 801a772:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a776:	17cb      	asrs	r3, r1, #31
 801a778:	4613      	mov	r3, r2
 801a77a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    return result;
 801a77e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a782:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a786:	2b00      	cmp	r3, #0
 801a788:	dc03      	bgt.n	801a792 <depthwise_conv_s8_mult_4+0x770>
 801a78a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a78e:	425b      	negs	r3, r3
 801a790:	e000      	b.n	801a794 <depthwise_conv_s8_mult_4+0x772>
 801a792:	2300      	movs	r3, #0
 801a794:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 801a798:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    q31_t result = 0;
 801a79c:	2300      	movs	r3, #0
 801a79e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a7a2:	2201      	movs	r2, #1
 801a7a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801a7a8:	fa02 f303 	lsl.w	r3, r2, r3
 801a7ac:	3b01      	subs	r3, #1
 801a7ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    int32_t remainder = remainder_mask & dividend;
 801a7b2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801a7b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a7ba:	4013      	ands	r3, r2
 801a7bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    result = dividend >> exponent;
 801a7c0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801a7c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801a7c8:	fa42 f303 	asr.w	r3, r2, r3
 801a7cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    q31_t threshold = remainder_mask >> 1;
 801a7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a7d4:	105b      	asrs	r3, r3, #1
 801a7d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (result < 0)
 801a7da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	da04      	bge.n	801a7ec <depthwise_conv_s8_mult_4+0x7ca>
        threshold++;
 801a7e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a7e6:	3301      	adds	r3, #1
 801a7e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (remainder > threshold)
 801a7ec:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801a7f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a7f4:	429a      	cmp	r2, r3
 801a7f6:	dd04      	ble.n	801a802 <depthwise_conv_s8_mult_4+0x7e0>
        result++;
 801a7f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801a7fc:	3301      	adds	r3, #1
 801a7fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    return result;
 801a802:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a806:	bf00      	nop
 801a808:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a80c:	60da      	str	r2, [r3, #12]

                    out_buff[0] += output_offset;
 801a80e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a812:	681a      	ldr	r2, [r3, #0]
 801a814:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a818:	441a      	add	r2, r3
 801a81a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a81e:	601a      	str	r2, [r3, #0]
                    out_buff[1] += output_offset;
 801a820:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a824:	685a      	ldr	r2, [r3, #4]
 801a826:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a82a:	441a      	add	r2, r3
 801a82c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a830:	605a      	str	r2, [r3, #4]
                    out_buff[2] += output_offset;
 801a832:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a836:	689a      	ldr	r2, [r3, #8]
 801a838:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a83c:	441a      	add	r2, r3
 801a83e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a842:	609a      	str	r2, [r3, #8]
                    out_buff[3] += output_offset;
 801a844:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a848:	68da      	ldr	r2, [r3, #12]
 801a84a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a84e:	441a      	add	r2, r3
 801a850:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a854:	60da      	str	r2, [r3, #12]

                    out_buff[0] = MIN(MAX(out_buff[0], output_activation_min), output_activation_max);
 801a856:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a85a:	681a      	ldr	r2, [r3, #0]
 801a85c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801a860:	429a      	cmp	r2, r3
 801a862:	bfb8      	it	lt
 801a864:	461a      	movlt	r2, r3
 801a866:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a86a:	429a      	cmp	r2, r3
 801a86c:	bfa8      	it	ge
 801a86e:	461a      	movge	r2, r3
 801a870:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a874:	601a      	str	r2, [r3, #0]
                    out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_max);
 801a876:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a87a:	685a      	ldr	r2, [r3, #4]
 801a87c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801a880:	429a      	cmp	r2, r3
 801a882:	bfb8      	it	lt
 801a884:	461a      	movlt	r2, r3
 801a886:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a88a:	429a      	cmp	r2, r3
 801a88c:	bfa8      	it	ge
 801a88e:	461a      	movge	r2, r3
 801a890:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a894:	605a      	str	r2, [r3, #4]
                    out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_max);
 801a896:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a89a:	689a      	ldr	r2, [r3, #8]
 801a89c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801a8a0:	429a      	cmp	r2, r3
 801a8a2:	bfb8      	it	lt
 801a8a4:	461a      	movlt	r2, r3
 801a8a6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a8aa:	429a      	cmp	r2, r3
 801a8ac:	bfa8      	it	ge
 801a8ae:	461a      	movge	r2, r3
 801a8b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a8b4:	609a      	str	r2, [r3, #8]
                    out_buff[3] = MIN(MAX(out_buff[3], output_activation_min), output_activation_max);
 801a8b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a8ba:	68da      	ldr	r2, [r3, #12]
 801a8bc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801a8c0:	429a      	cmp	r2, r3
 801a8c2:	bfb8      	it	lt
 801a8c4:	461a      	movlt	r2, r3
 801a8c6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a8ca:	429a      	cmp	r2, r3
 801a8cc:	bfa8      	it	ge
 801a8ce:	461a      	movge	r2, r3
 801a8d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a8d4:	60da      	str	r2, [r3, #12]

                    output[out_idx++] = (int8_t)out_buff[0];
 801a8d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a8da:	6819      	ldr	r1, [r3, #0]
 801a8dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801a8e0:	1c5a      	adds	r2, r3, #1
 801a8e2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801a8e6:	461a      	mov	r2, r3
 801a8e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801a8ec:	4413      	add	r3, r2
 801a8ee:	b24a      	sxtb	r2, r1
 801a8f0:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[1];
 801a8f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a8f6:	6859      	ldr	r1, [r3, #4]
 801a8f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801a8fc:	1c5a      	adds	r2, r3, #1
 801a8fe:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801a902:	461a      	mov	r2, r3
 801a904:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801a908:	4413      	add	r3, r2
 801a90a:	b24a      	sxtb	r2, r1
 801a90c:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[2];
 801a90e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a912:	6899      	ldr	r1, [r3, #8]
 801a914:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801a918:	1c5a      	adds	r2, r3, #1
 801a91a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801a91e:	461a      	mov	r2, r3
 801a920:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801a924:	4413      	add	r3, r2
 801a926:	b24a      	sxtb	r2, r1
 801a928:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[3];
 801a92a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a92e:	68d9      	ldr	r1, [r3, #12]
 801a930:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801a934:	1c5a      	adds	r2, r3, #1
 801a936:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801a93a:	461a      	mov	r2, r3
 801a93c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801a940:	4413      	add	r3, r2
 801a942:	b24a      	sxtb	r2, r1
 801a944:	701a      	strb	r2, [r3, #0]
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
 801a946:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a94a:	3304      	adds	r3, #4
 801a94c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801a950:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801a954:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a958:	429a      	cmp	r2, r3
 801a95a:	f6ff abac 	blt.w	801a0b6 <depthwise_conv_s8_mult_4+0x94>
                 ++in_ch, out_ch += ch_mult)
 801a95e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801a962:	3301      	adds	r3, #1
 801a964:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801a968:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a96c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a970:	4413      	add	r3, r2
 801a972:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
 801a976:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a97a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801a97e:	429a      	cmp	r2, r3
 801a980:	f6ff ab94 	blt.w	801a0ac <depthwise_conv_s8_mult_4+0x8a>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801a984:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801a988:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801a98c:	4413      	add	r3, r2
 801a98e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801a992:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801a996:	3301      	adds	r3, #1
 801a998:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801a99c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801a9a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801a9a4:	429a      	cmp	r2, r3
 801a9a6:	f6ff ab6e 	blt.w	801a086 <depthwise_conv_s8_mult_4+0x64>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801a9aa:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801a9ae:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801a9b2:	4413      	add	r3, r2
 801a9b4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801a9b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801a9bc:	3301      	adds	r3, #1
 801a9be:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 801a9c2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801a9c6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801a9ca:	429a      	cmp	r2, r3
 801a9cc:	f6ff ab46 	blt.w	801a05c <depthwise_conv_s8_mult_4+0x3a>
#endif
                }
            }
        }
    }
}
 801a9d0:	bf00      	nop
 801a9d2:	bf00      	nop
 801a9d4:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801a9de:	4770      	bx	lr

0801a9e0 <depthwise_conv_s8_generic>:
                                      const uint16_t output_y,
                                      const int32_t output_offset,
                                      const int32_t input_offset,
                                      const int32_t output_activation_min,
                                      const int32_t output_activation_max)
{
 801a9e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801a9e4:	b0a6      	sub	sp, #152	; 0x98
 801a9e6:	af00      	add	r7, sp, #0
 801a9e8:	60f8      	str	r0, [r7, #12]
 801a9ea:	4608      	mov	r0, r1
 801a9ec:	4611      	mov	r1, r2
 801a9ee:	461a      	mov	r2, r3
 801a9f0:	4603      	mov	r3, r0
 801a9f2:	817b      	strh	r3, [r7, #10]
 801a9f4:	460b      	mov	r3, r1
 801a9f6:	813b      	strh	r3, [r7, #8]
 801a9f8:	4613      	mov	r3, r2
 801a9fa:	80fb      	strh	r3, [r7, #6]
    (void)output_ch;
    int i_out = 0;
 801a9fc:	2300      	movs	r3, #0
 801a9fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int i_batch;

    for (i_batch = 0; i_batch < input_batches; i_batch++)
 801aa02:	2300      	movs	r3, #0
 801aa04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801aa08:	e189      	b.n	801ad1e <depthwise_conv_s8_generic+0x33e>
    {
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801aa0a:	2300      	movs	r3, #0
 801aa0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801aa10:	e16d      	b.n	801acee <depthwise_conv_s8_generic+0x30e>
        {
            const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
 801aa12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801aa16:	b29b      	uxth	r3, r3
 801aa18:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 801aa1c:	fb12 f303 	smulbb	r3, r2, r3
 801aa20:	b29a      	uxth	r2, r3
 801aa22:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 801aa26:	1ad3      	subs	r3, r2, r3
 801aa28:	b29b      	uxth	r3, r3
 801aa2a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801aa2e:	2300      	movs	r3, #0
 801aa30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801aa34:	e14f      	b.n	801acd6 <depthwise_conv_s8_generic+0x2f6>
            {
                const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
 801aa36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801aa3a:	b29b      	uxth	r3, r3
 801aa3c:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 801aa40:	fb12 f303 	smulbb	r3, r2, r3
 801aa44:	b29a      	uxth	r2, r3
 801aa46:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 801aa4a:	1ad3      	subs	r3, r2, r3
 801aa4c:	b29b      	uxth	r3, r3
 801aa4e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 801aa52:	2300      	movs	r3, #0
 801aa54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801aa58:	e131      	b.n	801acbe <depthwise_conv_s8_generic+0x2de>
                {
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801aa60:	e121      	b.n	801aca6 <depthwise_conv_s8_generic+0x2c6>
                    {
                        const int idx_out_ch = i_ch_mult + i_input_ch * ch_mult;
 801aa62:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 801aa66:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801aa6a:	fb02 f303 	mul.w	r3, r2, r3
 801aa6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801aa72:	4413      	add	r3, r2
 801aa74:	66fb      	str	r3, [r7, #108]	; 0x6c
                        int32_t acc_0;
                        /* Condition for kernel start dimension: (base_idx_<x,y> + ker_<x,y>_start) >= 0 */
                        const int ker_y_start = MAX(0, -base_idx_y);
 801aa76:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	dc03      	bgt.n	801aa86 <depthwise_conv_s8_generic+0xa6>
 801aa7e:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801aa82:	425b      	negs	r3, r3
 801aa84:	e000      	b.n	801aa88 <depthwise_conv_s8_generic+0xa8>
 801aa86:	2300      	movs	r3, #0
 801aa88:	66bb      	str	r3, [r7, #104]	; 0x68
                        const int ker_x_start = MAX(0, -base_idx_x);
 801aa8a:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	dc03      	bgt.n	801aa9a <depthwise_conv_s8_generic+0xba>
 801aa92:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801aa96:	425b      	negs	r3, r3
 801aa98:	e000      	b.n	801aa9c <depthwise_conv_s8_generic+0xbc>
 801aa9a:	2300      	movs	r3, #0
 801aa9c:	667b      	str	r3, [r7, #100]	; 0x64
                        /* Condition for kernel end dimension: (base_idx_<x,y> + ker_<x,y>_end) < input_<x,y> */
                        const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 801aa9e:	88fa      	ldrh	r2, [r7, #6]
 801aaa0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801aaa4:	1ad2      	subs	r2, r2, r3
 801aaa6:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 801aaaa:	4293      	cmp	r3, r2
 801aaac:	bfa8      	it	ge
 801aaae:	4613      	movge	r3, r2
 801aab0:	663b      	str	r3, [r7, #96]	; 0x60
                        const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
 801aab2:	893a      	ldrh	r2, [r7, #8]
 801aab4:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801aab8:	1ad2      	subs	r2, r2, r3
 801aaba:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 801aabe:	4293      	cmp	r3, r2
 801aac0:	bfa8      	it	ge
 801aac2:	4613      	movge	r3, r2
 801aac4:	65fb      	str	r3, [r7, #92]	; 0x5c
                        acc_0 = bias[idx_out_ch];
 801aac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801aac8:	009b      	lsls	r3, r3, #2
 801aaca:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801aace:	4413      	add	r3, r2
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	67fb      	str	r3, [r7, #124]	; 0x7c

                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801aad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801aad6:	67bb      	str	r3, [r7, #120]	; 0x78
 801aad8:	e04a      	b.n	801ab70 <depthwise_conv_s8_generic+0x190>
                        {
                            const int32_t idx_y = base_idx_y + i_ker_y;
 801aada:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801aade:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801aae0:	4413      	add	r3, r2
 801aae2:	65bb      	str	r3, [r7, #88]	; 0x58
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 801aae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801aae6:	677b      	str	r3, [r7, #116]	; 0x74
 801aae8:	e03b      	b.n	801ab62 <depthwise_conv_s8_generic+0x182>
                            {
                                const int32_t idx_x = base_idx_x + i_ker_x;
 801aaea:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801aaee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801aaf0:	4413      	add	r3, r2
 801aaf2:	657b      	str	r3, [r7, #84]	; 0x54
                                int32_t idx_0 = (idx_y * input_x + idx_x) * input_ch + i_input_ch;
 801aaf4:	893b      	ldrh	r3, [r7, #8]
 801aaf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801aaf8:	fb02 f203 	mul.w	r2, r2, r3
 801aafc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aafe:	4413      	add	r3, r2
 801ab00:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 801ab04:	fb02 f303 	mul.w	r3, r2, r3
 801ab08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801ab0c:	4413      	add	r3, r2
 801ab0e:	653b      	str	r3, [r7, #80]	; 0x50
                                int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
 801ab10:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 801ab14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801ab16:	fb02 f203 	mul.w	r2, r2, r3
 801ab1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ab1c:	4413      	add	r3, r2
 801ab1e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 801ab22:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 801ab26:	fb01 f202 	mul.w	r2, r1, r2
 801ab2a:	fb02 f303 	mul.w	r3, r2, r3
 801ab2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ab30:	4413      	add	r3, r2
 801ab32:	64fb      	str	r3, [r7, #76]	; 0x4c

                                acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
 801ab34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab36:	68fa      	ldr	r2, [r7, #12]
 801ab38:	4413      	add	r3, r2
 801ab3a:	f993 3000 	ldrsb.w	r3, [r3]
 801ab3e:	461a      	mov	r2, r3
 801ab40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ab44:	4413      	add	r3, r2
 801ab46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ab48:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801ab4c:	440a      	add	r2, r1
 801ab4e:	f992 2000 	ldrsb.w	r2, [r2]
 801ab52:	fb02 f303 	mul.w	r3, r2, r3
 801ab56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ab58:	4413      	add	r3, r2
 801ab5a:	67fb      	str	r3, [r7, #124]	; 0x7c
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 801ab5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ab5e:	3301      	adds	r3, #1
 801ab60:	677b      	str	r3, [r7, #116]	; 0x74
 801ab62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ab64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ab66:	429a      	cmp	r2, r3
 801ab68:	dbbf      	blt.n	801aaea <depthwise_conv_s8_generic+0x10a>
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801ab6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ab6c:	3301      	adds	r3, #1
 801ab6e:	67bb      	str	r3, [r7, #120]	; 0x78
 801ab70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801ab72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ab74:	429a      	cmp	r2, r3
 801ab76:	dbb0      	blt.n	801aada <depthwise_conv_s8_generic+0xfa>
                            }
                        }

                        /* Requantize and clamp output to provided range */
                        acc_0 = arm_nn_requantize(acc_0, output_mult[idx_out_ch], output_shift[idx_out_ch]);
 801ab78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ab7a:	009b      	lsls	r3, r3, #2
 801ab7c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801ab80:	4413      	add	r3, r2
 801ab82:	681a      	ldr	r2, [r3, #0]
 801ab84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ab86:	009b      	lsls	r3, r3, #2
 801ab88:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 801ab8c:	440b      	add	r3, r1
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801ab92:	64b9      	str	r1, [r7, #72]	; 0x48
 801ab94:	647a      	str	r2, [r7, #68]	; 0x44
 801ab96:	643b      	str	r3, [r7, #64]	; 0x40
 801ab98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801aba0:	fa02 f303 	lsl.w	r3, r2, r3
 801aba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801aba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aba8:	63bb      	str	r3, [r7, #56]	; 0x38
    q31_t result = 0;
 801abaa:	2300      	movs	r3, #0
 801abac:	637b      	str	r3, [r7, #52]	; 0x34
    mult.word.low = 1 << 30;
 801abae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801abb2:	613b      	str	r3, [r7, #16]
    mult.word.high = 0;
 801abb4:	2300      	movs	r3, #0
 801abb6:	617b      	str	r3, [r7, #20]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801abb8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801abbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abbe:	4618      	mov	r0, r3
 801abc0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801abc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abc6:	461a      	mov	r2, r3
 801abc8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801abcc:	fb02 fc01 	mul.w	ip, r2, r1
 801abd0:	fb00 f603 	mul.w	r6, r0, r3
 801abd4:	4466      	add	r6, ip
 801abd6:	fba0 2302 	umull	r2, r3, r0, r2
 801abda:	18f1      	adds	r1, r6, r3
 801abdc:	460b      	mov	r3, r1
 801abde:	eb14 0802 	adds.w	r8, r4, r2
 801abe2:	eb45 0903 	adc.w	r9, r5, r3
 801abe6:	e9c7 8904 	strd	r8, r9, [r7, #16]
    result = (int32_t)(mult.long_long >> 31);
 801abea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801abee:	f04f 0200 	mov.w	r2, #0
 801abf2:	f04f 0300 	mov.w	r3, #0
 801abf6:	0fc2      	lsrs	r2, r0, #31
 801abf8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801abfc:	17cb      	asrs	r3, r1, #31
 801abfe:	4613      	mov	r3, r2
 801ac00:	637b      	str	r3, [r7, #52]	; 0x34
    return result;
 801ac02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ac04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	dc02      	bgt.n	801ac10 <depthwise_conv_s8_generic+0x230>
 801ac0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ac0c:	425b      	negs	r3, r3
 801ac0e:	e000      	b.n	801ac12 <depthwise_conv_s8_generic+0x232>
 801ac10:	2300      	movs	r3, #0
 801ac12:	633a      	str	r2, [r7, #48]	; 0x30
 801ac14:	62fb      	str	r3, [r7, #44]	; 0x2c
    q31_t result = 0;
 801ac16:	2300      	movs	r3, #0
 801ac18:	62bb      	str	r3, [r7, #40]	; 0x28
    const q31_t remainder_mask = (1 << exponent) - 1;
 801ac1a:	2201      	movs	r2, #1
 801ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac1e:	fa02 f303 	lsl.w	r3, r2, r3
 801ac22:	3b01      	subs	r3, #1
 801ac24:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t remainder = remainder_mask & dividend;
 801ac26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac2a:	4013      	ands	r3, r2
 801ac2c:	623b      	str	r3, [r7, #32]
    result = dividend >> exponent;
 801ac2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac32:	fa42 f303 	asr.w	r3, r2, r3
 801ac36:	62bb      	str	r3, [r7, #40]	; 0x28
    q31_t threshold = remainder_mask >> 1;
 801ac38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac3a:	105b      	asrs	r3, r3, #1
 801ac3c:	61fb      	str	r3, [r7, #28]
    if (result < 0)
 801ac3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	da02      	bge.n	801ac4a <depthwise_conv_s8_generic+0x26a>
        threshold++;
 801ac44:	69fb      	ldr	r3, [r7, #28]
 801ac46:	3301      	adds	r3, #1
 801ac48:	61fb      	str	r3, [r7, #28]
    if (remainder > threshold)
 801ac4a:	6a3a      	ldr	r2, [r7, #32]
 801ac4c:	69fb      	ldr	r3, [r7, #28]
 801ac4e:	429a      	cmp	r2, r3
 801ac50:	dd02      	ble.n	801ac58 <depthwise_conv_s8_generic+0x278>
        result++;
 801ac52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac54:	3301      	adds	r3, #1
 801ac56:	62bb      	str	r3, [r7, #40]	; 0x28
    return result;
 801ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ac5a:	bf00      	nop
 801ac5c:	67fb      	str	r3, [r7, #124]	; 0x7c
                        acc_0 += output_offset;
 801ac5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ac60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801ac64:	4413      	add	r3, r2
 801ac66:	67fb      	str	r3, [r7, #124]	; 0x7c
                        acc_0 = MAX(acc_0, output_activation_min);
 801ac68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ac6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801ac6e:	4293      	cmp	r3, r2
 801ac70:	bfb8      	it	lt
 801ac72:	4613      	movlt	r3, r2
 801ac74:	67fb      	str	r3, [r7, #124]	; 0x7c
                        acc_0 = MIN(acc_0, output_activation_max);
 801ac76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ac78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ac7c:	4293      	cmp	r3, r2
 801ac7e:	bfa8      	it	ge
 801ac80:	4613      	movge	r3, r2
 801ac82:	67fb      	str	r3, [r7, #124]	; 0x7c

                        output[i_out++] = acc_0;
 801ac84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ac88:	1c5a      	adds	r2, r3, #1
 801ac8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801ac8e:	461a      	mov	r2, r3
 801ac90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ac94:	4413      	add	r3, r2
 801ac96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ac98:	b252      	sxtb	r2, r2
 801ac9a:	701a      	strb	r2, [r3, #0]
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
 801ac9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801aca0:	3301      	adds	r3, #1
 801aca2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801aca6:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 801acaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801acae:	429a      	cmp	r2, r3
 801acb0:	f6ff aed7 	blt.w	801aa62 <depthwise_conv_s8_generic+0x82>
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 801acb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801acb8:	3301      	adds	r3, #1
 801acba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801acbe:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 801acc2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801acc6:	429a      	cmp	r2, r3
 801acc8:	f6ff aec7 	blt.w	801aa5a <depthwise_conv_s8_generic+0x7a>
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801accc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801acd0:	3301      	adds	r3, #1
 801acd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801acd6:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 801acda:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801acde:	429a      	cmp	r2, r3
 801ace0:	f6ff aea9 	blt.w	801aa36 <depthwise_conv_s8_generic+0x56>
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801ace4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ace8:	3301      	adds	r3, #1
 801acea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801acee:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 801acf2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801acf6:	429a      	cmp	r2, r3
 801acf8:	f6ff ae8b 	blt.w	801aa12 <depthwise_conv_s8_generic+0x32>
                    }
                }
            }
        }
        /* Advance to the next batch */
        input += (input_x * input_y * input_ch);
 801acfc:	893b      	ldrh	r3, [r7, #8]
 801acfe:	88fa      	ldrh	r2, [r7, #6]
 801ad00:	fb02 f303 	mul.w	r3, r2, r3
 801ad04:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 801ad08:	fb02 f303 	mul.w	r3, r2, r3
 801ad0c:	461a      	mov	r2, r3
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	4413      	add	r3, r2
 801ad12:	60fb      	str	r3, [r7, #12]
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 801ad14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ad18:	3301      	adds	r3, #1
 801ad1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801ad1e:	897b      	ldrh	r3, [r7, #10]
 801ad20:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801ad24:	429a      	cmp	r2, r3
 801ad26:	f6ff ae70 	blt.w	801aa0a <depthwise_conv_s8_generic+0x2a>
    }
}
 801ad2a:	bf00      	nop
 801ad2c:	bf00      	nop
 801ad2e:	3798      	adds	r7, #152	; 0x98
 801ad30:	46bd      	mov	sp, r7
 801ad32:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801ad36:	4770      	bx	lr

0801ad38 <arm_depthwise_conv_s8>:
                                 const q7_t *kernel,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output)
{
 801ad38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad3c:	b0a4      	sub	sp, #144	; 0x90
 801ad3e:	af14      	add	r7, sp, #80	; 0x50
 801ad40:	63f8      	str	r0, [r7, #60]	; 0x3c
 801ad42:	63b9      	str	r1, [r7, #56]	; 0x38
 801ad44:	637a      	str	r2, [r7, #52]	; 0x34
 801ad46:	633b      	str	r3, [r7, #48]	; 0x30
    (void)dw_conv_params->dilation;
    (void)bias_dims;
    (void)ctx;

    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1)
 801ad48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad4a:	689b      	ldr	r3, [r3, #8]
 801ad4c:	f003 0303 	and.w	r3, r3, #3
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d15b      	bne.n	801ae0c <arm_depthwise_conv_s8+0xd4>
 801ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	2b01      	cmp	r3, #1
 801ad5a:	d157      	bne.n	801ae0c <arm_depthwise_conv_s8+0xd4>
    {
        depthwise_conv_s8_mult_4(input,
 801ad5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad5e:	689b      	ldr	r3, [r3, #8]
 801ad60:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad64:	685a      	ldr	r2, [r3, #4]
 801ad66:	62ba      	str	r2, [r7, #40]	; 0x28
 801ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad6a:	68d8      	ldr	r0, [r3, #12]
 801ad6c:	6278      	str	r0, [r7, #36]	; 0x24
 801ad6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ad70:	68de      	ldr	r6, [r3, #12]
 801ad72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad74:	689c      	ldr	r4, [r3, #8]
 801ad76:	623c      	str	r4, [r7, #32]
 801ad78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ad7a:	689d      	ldr	r5, [r3, #8]
 801ad7c:	61fd      	str	r5, [r7, #28]
 801ad7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ad80:	6859      	ldr	r1, [r3, #4]
 801ad82:	61b9      	str	r1, [r7, #24]
 801ad84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad86:	6958      	ldr	r0, [r3, #20]
 801ad88:	6178      	str	r0, [r7, #20]
 801ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad8c:	699b      	ldr	r3, [r3, #24]
 801ad8e:	613b      	str	r3, [r7, #16]
 801ad90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad92:	68da      	ldr	r2, [r3, #12]
 801ad94:	60fa      	str	r2, [r7, #12]
 801ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad98:	691c      	ldr	r4, [r3, #16]
 801ad9a:	60bc      	str	r4, [r7, #8]
                                 dw_conv_params->padding.h,
                                 dw_conv_params->stride.w,
                                 dw_conv_params->stride.h,
                                 bias,
                                 output,
                                 quant_params->shift,
 801ad9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad9e:	685d      	ldr	r5, [r3, #4]
 801ada0:	607d      	str	r5, [r7, #4]
                                 quant_params->multiplier,
 801ada2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ada4:	6819      	ldr	r1, [r3, #0]
 801ada6:	6039      	str	r1, [r7, #0]
        depthwise_conv_s8_mult_4(input,
 801ada8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801adaa:	689d      	ldr	r5, [r3, #8]
 801adac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801adae:	685c      	ldr	r4, [r3, #4]
 801adb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adb2:	6858      	ldr	r0, [r3, #4]
 801adb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adb6:	6819      	ldr	r1, [r3, #0]
 801adb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801adbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801adc0:	9312      	str	r3, [sp, #72]	; 0x48
 801adc2:	9211      	str	r2, [sp, #68]	; 0x44
 801adc4:	9110      	str	r1, [sp, #64]	; 0x40
 801adc6:	900f      	str	r0, [sp, #60]	; 0x3c
 801adc8:	940e      	str	r4, [sp, #56]	; 0x38
 801adca:	950d      	str	r5, [sp, #52]	; 0x34
 801adcc:	6839      	ldr	r1, [r7, #0]
 801adce:	910c      	str	r1, [sp, #48]	; 0x30
 801add0:	687d      	ldr	r5, [r7, #4]
 801add2:	950b      	str	r5, [sp, #44]	; 0x2c
 801add4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801add6:	930a      	str	r3, [sp, #40]	; 0x28
 801add8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801adda:	9309      	str	r3, [sp, #36]	; 0x24
 801addc:	68bc      	ldr	r4, [r7, #8]
 801adde:	9408      	str	r4, [sp, #32]
 801ade0:	68fa      	ldr	r2, [r7, #12]
 801ade2:	9207      	str	r2, [sp, #28]
 801ade4:	693b      	ldr	r3, [r7, #16]
 801ade6:	9306      	str	r3, [sp, #24]
 801ade8:	6978      	ldr	r0, [r7, #20]
 801adea:	9005      	str	r0, [sp, #20]
 801adec:	69b9      	ldr	r1, [r7, #24]
 801adee:	9104      	str	r1, [sp, #16]
 801adf0:	69fd      	ldr	r5, [r7, #28]
 801adf2:	9503      	str	r5, [sp, #12]
 801adf4:	6a3c      	ldr	r4, [r7, #32]
 801adf6:	9402      	str	r4, [sp, #8]
 801adf8:	9601      	str	r6, [sp, #4]
 801adfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801adfc:	9300      	str	r3, [sp, #0]
 801adfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ae02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ae04:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ae06:	f7ff f90c 	bl	801a022 <depthwise_conv_s8_mult_4>
 801ae0a:	e069      	b.n	801aee0 <arm_depthwise_conv_s8+0x1a8>
                                 dw_conv_params->activation.max);
    }
    else
    {
        depthwise_conv_s8_generic(input,
                                  input_dims->n,
 801ae0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae0e:	681b      	ldr	r3, [r3, #0]
        depthwise_conv_s8_generic(input,
 801ae10:	fa1f fc83 	uxth.w	ip, r3
                                  input_dims->w,
 801ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae16:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801ae18:	fa1f fe83 	uxth.w	lr, r3
                                  input_dims->h,
 801ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae1e:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801ae20:	fa1f f883 	uxth.w	r8, r3
                                  input_dims->c,
 801ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae26:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801ae28:	b29b      	uxth	r3, r3
 801ae2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  kernel,
                                  output_dims->c,
 801ae2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ae2e:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801ae30:	b29a      	uxth	r2, r3
 801ae32:	62ba      	str	r2, [r7, #40]	; 0x28
                                  dw_conv_params->ch_mult,
 801ae34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae36:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801ae38:	b299      	uxth	r1, r3
 801ae3a:	6279      	str	r1, [r7, #36]	; 0x24
                                  filter_dims->w,
 801ae3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ae3e:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801ae40:	b298      	uxth	r0, r3
 801ae42:	6238      	str	r0, [r7, #32]
                                  filter_dims->h,
 801ae44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ae46:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801ae48:	b29c      	uxth	r4, r3
 801ae4a:	61fc      	str	r4, [r7, #28]
                                  dw_conv_params->padding.w,
 801ae4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae4e:	695b      	ldr	r3, [r3, #20]
        depthwise_conv_s8_generic(input,
 801ae50:	b29d      	uxth	r5, r3
 801ae52:	61bd      	str	r5, [r7, #24]
                                  dw_conv_params->padding.h,
 801ae54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae56:	699b      	ldr	r3, [r3, #24]
        depthwise_conv_s8_generic(input,
 801ae58:	b29e      	uxth	r6, r3
 801ae5a:	617e      	str	r6, [r7, #20]
                                  dw_conv_params->stride.w,
 801ae5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae5e:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801ae60:	b29b      	uxth	r3, r3
 801ae62:	613b      	str	r3, [r7, #16]
                                  dw_conv_params->stride.h,
 801ae64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae66:	691b      	ldr	r3, [r3, #16]
        depthwise_conv_s8_generic(input,
 801ae68:	b29a      	uxth	r2, r3
 801ae6a:	60fa      	str	r2, [r7, #12]
                                  bias,
                                  output,
                                  quant_params->shift,
 801ae6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae6e:	6859      	ldr	r1, [r3, #4]
 801ae70:	60b9      	str	r1, [r7, #8]
                                  quant_params->multiplier,
 801ae72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae74:	681e      	ldr	r6, [r3, #0]
                                  output_dims->w,
 801ae76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ae78:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801ae7a:	b29d      	uxth	r5, r3
                                  output_dims->h,
 801ae7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ae7e:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801ae80:	b29c      	uxth	r4, r3
 801ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae84:	6858      	ldr	r0, [r3, #4]
 801ae86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae88:	6819      	ldr	r1, [r3, #0]
 801ae8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ae8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae92:	9313      	str	r3, [sp, #76]	; 0x4c
 801ae94:	9212      	str	r2, [sp, #72]	; 0x48
 801ae96:	9111      	str	r1, [sp, #68]	; 0x44
 801ae98:	9010      	str	r0, [sp, #64]	; 0x40
 801ae9a:	940f      	str	r4, [sp, #60]	; 0x3c
 801ae9c:	950e      	str	r5, [sp, #56]	; 0x38
 801ae9e:	960d      	str	r6, [sp, #52]	; 0x34
 801aea0:	68b9      	ldr	r1, [r7, #8]
 801aea2:	910c      	str	r1, [sp, #48]	; 0x30
 801aea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801aea6:	930b      	str	r3, [sp, #44]	; 0x2c
 801aea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801aeaa:	930a      	str	r3, [sp, #40]	; 0x28
 801aeac:	68fa      	ldr	r2, [r7, #12]
 801aeae:	9209      	str	r2, [sp, #36]	; 0x24
 801aeb0:	693b      	ldr	r3, [r7, #16]
 801aeb2:	9308      	str	r3, [sp, #32]
 801aeb4:	697e      	ldr	r6, [r7, #20]
 801aeb6:	9607      	str	r6, [sp, #28]
 801aeb8:	69bd      	ldr	r5, [r7, #24]
 801aeba:	9506      	str	r5, [sp, #24]
 801aebc:	69fc      	ldr	r4, [r7, #28]
 801aebe:	9405      	str	r4, [sp, #20]
 801aec0:	6a38      	ldr	r0, [r7, #32]
 801aec2:	9004      	str	r0, [sp, #16]
 801aec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801aec6:	9103      	str	r1, [sp, #12]
 801aec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aeca:	9202      	str	r2, [sp, #8]
 801aecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801aece:	9301      	str	r3, [sp, #4]
 801aed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aed2:	9300      	str	r3, [sp, #0]
 801aed4:	4643      	mov	r3, r8
 801aed6:	4672      	mov	r2, lr
 801aed8:	4661      	mov	r1, ip
 801aeda:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801aedc:	f7ff fd80 	bl	801a9e0 <depthwise_conv_s8_generic>
                                  dw_conv_params->activation.min,
                                  dw_conv_params->activation.max);
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801aee0:	2300      	movs	r3, #0
}
 801aee2:	4618      	mov	r0, r3
 801aee4:	3740      	adds	r7, #64	; 0x40
 801aee6:	46bd      	mov	sp, r7
 801aee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801aeec <arm_depthwise_conv_s8_opt>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
 801aeec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801aef0:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 801aefa:	6020      	str	r0, [r4, #0]
 801aefc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801af00:	6001      	str	r1, [r0, #0]
 801af02:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801af06:	600a      	str	r2, [r1, #0]
 801af08:	f107 0220 	add.w	r2, r7, #32
 801af0c:	6013      	str	r3, [r2, #0]

    const int32_t input_ch = input_dims->c;
 801af0e:	f107 0320 	add.w	r3, r7, #32
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	68db      	ldr	r3, [r3, #12]
 801af16:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
    const int32_t output_ch = output_dims->c;
 801af1a:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801af1e:	68db      	ldr	r3, [r3, #12]
 801af20:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
 801af24:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801af28:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801af2c:	429a      	cmp	r2, r3
 801af2e:	d003      	beq.n	801af38 <arm_depthwise_conv_s8_opt+0x4c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 801af30:	f06f 0302 	mvn.w	r3, #2
 801af34:	f001 b99b 	b.w	801c26e <arm_depthwise_conv_s8_opt+0x1382>
    }
#ifdef ARM_MATH_DSP
    const int32_t input_x = input_dims->w;
 801af38:	f107 0320 	add.w	r3, r7, #32
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	689b      	ldr	r3, [r3, #8]
 801af40:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
    const int32_t input_y = input_dims->h;
 801af44:	f107 0320 	add.w	r3, r7, #32
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	685b      	ldr	r3, [r3, #4]
 801af4c:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
    const int32_t kernel_x = filter_dims->w;
 801af50:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801af54:	689b      	ldr	r3, [r3, #8]
 801af56:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
    const int32_t kernel_y = filter_dims->h;
 801af5a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801af5e:	685b      	ldr	r3, [r3, #4]
 801af60:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
    const int32_t pad_x = dw_conv_params->padding.w;
 801af64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	695b      	ldr	r3, [r3, #20]
 801af6c:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
    const int32_t pad_y = dw_conv_params->padding.h;
 801af70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	699b      	ldr	r3, [r3, #24]
 801af78:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
    const int32_t stride_x = dw_conv_params->stride.w;
 801af7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	68db      	ldr	r3, [r3, #12]
 801af84:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    const int32_t stride_y = dw_conv_params->stride.h;
 801af88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	691b      	ldr	r3, [r3, #16]
 801af90:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
    const int32_t *output_shift = quant_params->shift;
 801af94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801af98:	681b      	ldr	r3, [r3, #0]
 801af9a:	685b      	ldr	r3, [r3, #4]
 801af9c:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
    const int32_t *output_mult = quant_params->multiplier;
 801afa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
    const int32_t output_x = output_dims->w;
 801afac:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801afb0:	689b      	ldr	r3, [r3, #8]
 801afb2:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
    const int32_t output_y = output_dims->h;
 801afb6:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801afba:	685b      	ldr	r3, [r3, #4]
 801afbc:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
    const int32_t output_offset = dw_conv_params->output_offset;
 801afc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	685b      	ldr	r3, [r3, #4]
 801afc8:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
    const int32_t input_offset = dw_conv_params->input_offset;
 801afcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
    const int32_t output_activation_min = dw_conv_params->activation.min;
 801afd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afe0:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
    const int32_t output_activation_max = dw_conv_params->activation.max;
 801afe4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801afec:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
    q15_t *buffer_a = (q15_t *)ctx->buf;
 801aff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    }

#else // ARM_MATH_DSP
    (void)bias_dims;
    /* Run the following code in cores using DSP extension */
    q15_t *const col_buffer_start = buffer_a;
 801affc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801b000:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    q15_t *col_buffer = col_buffer_start;
 801b004:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b008:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
    const int32_t *const bias_start_pos = bias;
 801b00c:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b010:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    const q31_t *const out_mult_start_pos = output_mult;
 801b014:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801b018:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    const q31_t *const out_shift_start_pos = output_shift;
 801b01c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801b020:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    uint16_t row_count;
    uint16_t row_shift;

    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801b024:	2300      	movs	r3, #0
 801b026:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801b02a:	f001 b918 	b.w	801c25e <arm_depthwise_conv_s8_opt+0x1372>
    {
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
 801b02e:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801b032:	b29a      	uxth	r2, r3
 801b034:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 801b038:	b29b      	uxth	r3, r3
 801b03a:	fb12 f303 	smulbb	r3, r2, r3
 801b03e:	b29a      	uxth	r2, r3
 801b040:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 801b044:	b29b      	uxth	r3, r3
 801b046:	1ad3      	subs	r3, r2, r3
 801b048:	b29b      	uxth	r3, r3
 801b04a:	f8a7 328a 	strh.w	r3, [r7, #650]	; 0x28a
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801b04e:	2300      	movs	r3, #0
 801b050:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 801b054:	f001 b8f7 	b.w	801c246 <arm_depthwise_conv_s8_opt+0x135a>
        {
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
 801b058:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801b05c:	b29a      	uxth	r2, r3
 801b05e:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 801b062:	b29b      	uxth	r3, r3
 801b064:	fb12 f303 	smulbb	r3, r2, r3
 801b068:	b29a      	uxth	r2, r3
 801b06a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 801b06e:	b29b      	uxth	r3, r3
 801b070:	1ad3      	subs	r3, r2, r3
 801b072:	b29b      	uxth	r3, r3
 801b074:	f8a7 3288 	strh.w	r3, [r7, #648]	; 0x288

            /* Out of bounds is only considered for the y axis as it provides a contiguous zero'ing opportunity than
               along the x axis */
            const int ker_y_start = MAX(0, -base_idx_y);
 801b078:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	dc03      	bgt.n	801b088 <arm_depthwise_conv_s8_opt+0x19c>
 801b080:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801b084:	425b      	negs	r3, r3
 801b086:	e000      	b.n	801b08a <arm_depthwise_conv_s8_opt+0x19e>
 801b088:	2300      	movs	r3, #0
 801b08a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
            /* Condition for kernel end dimension: (base_idx_y + ker_y_end) < input_y */
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 801b08e:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801b092:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 801b096:	1ad3      	subs	r3, r2, r3
 801b098:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801b09c:	4293      	cmp	r3, r2
 801b09e:	bfa8      	it	ge
 801b0a0:	4613      	movge	r3, r2
 801b0a2:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

            int32_t index = 0;
 801b0a6:	2300      	movs	r3, #0
 801b0a8:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
            if (ker_y_start != 0)
 801b0ac:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d023      	beq.n	801b0fc <arm_depthwise_conv_s8_opt+0x210>
            {
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
 801b0b4:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801b0b8:	005b      	lsls	r3, r3, #1
 801b0ba:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801b0be:	18d0      	adds	r0, r2, r3
 801b0c0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b0c4:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b0c8:	fb02 f303 	mul.w	r3, r2, r3
 801b0cc:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 801b0d0:	fb02 f303 	mul.w	r3, r2, r3
 801b0d4:	005b      	lsls	r3, r3, #1
 801b0d6:	461a      	mov	r2, r3
 801b0d8:	2100      	movs	r1, #0
 801b0da:	f009 ffa3 	bl	8025024 <memset>
                index += (kernel_x * input_ch) * ker_y_start;
 801b0de:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b0e2:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b0e6:	fb02 f303 	mul.w	r3, r2, r3
 801b0ea:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 801b0ee:	fb02 f303 	mul.w	r3, r2, r3
 801b0f2:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 801b0f6:	4413      	add	r3, r2
 801b0f8:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
            }

            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801b0fc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801b100:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 801b104:	e064      	b.n	801b1d0 <arm_depthwise_conv_s8_opt+0x2e4>
            {
                const int32_t idx_y = base_idx_y + i_ker_y;
 801b106:	f9b7 228a 	ldrsh.w	r2, [r7, #650]	; 0x28a
 801b10a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801b10e:	f8d7 1308 	ldr.w	r1, [r7, #776]	; 0x308
 801b112:	440a      	add	r2, r1
 801b114:	601a      	str	r2, [r3, #0]

                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 801b116:	2300      	movs	r3, #0
 801b118:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801b11c:	e04d      	b.n	801b1ba <arm_depthwise_conv_s8_opt+0x2ce>
                {
                    const int32_t idx_x = base_idx_x + i_ker_x;
 801b11e:	f9b7 2288 	ldrsh.w	r2, [r7, #648]	; 0x288
 801b122:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801b126:	f8d7 1304 	ldr.w	r1, [r7, #772]	; 0x304
 801b12a:	440a      	add	r2, r1
 801b12c:	601a      	str	r2, [r3, #0]
                    if (idx_x < 0 || idx_x >= input_x)
 801b12e:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	2b00      	cmp	r3, #0
 801b136:	db06      	blt.n	801b146 <arm_depthwise_conv_s8_opt+0x25a>
 801b138:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801b13c:	681a      	ldr	r2, [r3, #0]
 801b13e:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 801b142:	429a      	cmp	r2, r3
 801b144:	db0d      	blt.n	801b162 <arm_depthwise_conv_s8_opt+0x276>
                    {
                        memset(&col_buffer[index], 0, input_ch * sizeof(q15_t));
 801b146:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801b14a:	005b      	lsls	r3, r3, #1
 801b14c:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801b150:	18d0      	adds	r0, r2, r3
 801b152:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b156:	005b      	lsls	r3, r3, #1
 801b158:	461a      	mov	r2, r3
 801b15a:	2100      	movs	r1, #0
 801b15c:	f009 ff62 	bl	8025024 <memset>
 801b160:	e01f      	b.n	801b1a2 <arm_depthwise_conv_s8_opt+0x2b6>
                    }
                    else
                    {
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
 801b162:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 801b16c:	fb02 f203 	mul.w	r2, r2, r3
 801b170:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	4413      	add	r3, r2
 801b178:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b17c:	fb02 f303 	mul.w	r3, r2, r3
 801b180:	461a      	mov	r2, r3
 801b182:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 801b186:	1898      	adds	r0, r3, r2
                                                  &col_buffer[index],
 801b188:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801b18c:	005b      	lsls	r3, r3, #1
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
 801b18e:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801b192:	18d1      	adds	r1, r2, r3
 801b194:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b198:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801b19c:	b21b      	sxth	r3, r3
 801b19e:	f005 ff62 	bl	8021066 <arm_q7_to_q15_with_offset>
                                                  input_ch,
                                                  input_offset);
                    }
                    index += input_ch;
 801b1a2:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 801b1a6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b1aa:	4413      	add	r3, r2
 801b1ac:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 801b1b0:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 801b1b4:	3301      	adds	r3, #1
 801b1b6:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801b1ba:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 801b1be:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b1c2:	429a      	cmp	r2, r3
 801b1c4:	dbab      	blt.n	801b11e <arm_depthwise_conv_s8_opt+0x232>
            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801b1c6:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 801b1ca:	3301      	adds	r3, #1
 801b1cc:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 801b1d0:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 801b1d4:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801b1d8:	429a      	cmp	r2, r3
 801b1da:	db94      	blt.n	801b106 <arm_depthwise_conv_s8_opt+0x21a>
                }
            }

            const int diff = kernel_y - ker_y_end;
 801b1dc:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801b1e0:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801b1e4:	1ad3      	subs	r3, r2, r3
 801b1e6:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
            if (diff != 0)
 801b1ea:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d014      	beq.n	801b21c <arm_depthwise_conv_s8_opt+0x330>
            {
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * diff * sizeof(q15_t));
 801b1f2:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801b1f6:	005b      	lsls	r3, r3, #1
 801b1f8:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801b1fc:	18d0      	adds	r0, r2, r3
 801b1fe:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b202:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b206:	fb02 f303 	mul.w	r3, r2, r3
 801b20a:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 801b20e:	fb02 f303 	mul.w	r3, r2, r3
 801b212:	005b      	lsls	r3, r3, #1
 801b214:	461a      	mov	r2, r3
 801b216:	2100      	movs	r1, #0
 801b218:	f009 ff04 	bl	8025024 <memset>
            }

            row_count = output_ch / 4;
 801b21c:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801b220:	2b00      	cmp	r3, #0
 801b222:	da00      	bge.n	801b226 <arm_depthwise_conv_s8_opt+0x33a>
 801b224:	3303      	adds	r3, #3
 801b226:	109b      	asrs	r3, r3, #2
 801b228:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            row_shift = 0;
 801b22c:	2300      	movs	r3, #0
 801b22e:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318
            bias = bias_start_pos;
 801b232:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801b236:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
            output_mult = out_mult_start_pos;
 801b23a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801b23e:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
            output_shift = out_shift_start_pos;
 801b242:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b246:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

            while (row_count)
 801b24a:	f000 bea2 	b.w	801bf92 <arm_depthwise_conv_s8_opt+0x10a6>
            {
                q31_t sum = *bias++;
 801b24e:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b252:	1d1a      	adds	r2, r3, #4
 801b254:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                q31_t sum_2 = *bias++;
 801b25e:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b262:	1d1a      	adds	r2, r3, #4
 801b264:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801b268:	681b      	ldr	r3, [r3, #0]
 801b26a:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                q31_t sum_3 = *bias++;
 801b26e:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b272:	1d1a      	adds	r2, r3, #4
 801b274:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                q31_t sum_4 = *bias++;
 801b27e:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801b282:	1d1a      	adds	r2, r3, #4
 801b284:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                uint16_t col_count = (kernel_x * kernel_y) / 2;
 801b28e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b292:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801b296:	fb02 f303 	mul.w	r3, r2, r3
 801b29a:	0fda      	lsrs	r2, r3, #31
 801b29c:	4413      	add	r3, r2
 801b29e:	105b      	asrs	r3, r3, #1
 801b2a0:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                q15_t *col_pos = col_buffer_start + row_shift;
 801b2a4:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801b2a8:	005b      	lsls	r3, r3, #1
 801b2aa:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801b2ae:	4413      	add	r3, r2
 801b2b0:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
                const q7_t *row_pos = kernel + row_shift;
 801b2b4:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801b2b8:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 801b2bc:	4413      	add	r3, r2
 801b2be:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                row_shift += 4;
 801b2c2:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801b2c6:	3304      	adds	r3, #4
 801b2c8:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

                while (col_count)
 801b2cc:	e25b      	b.n	801b786 <arm_depthwise_conv_s8_opt+0x89a>
 801b2ce:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801b2d2:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801b2d6:	601a      	str	r2, [r3, #0]
 801b2d8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b2e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b2e6:	601a      	str	r2, [r3, #0]
    return (val);
 801b2e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b2ec:	681b      	ldr	r3, [r3, #0]
                    /* General idea is to read 4 + 4 (input, kernel) pair and re-arrange them in the right order to
                    use in a SMLAD instruction . One run of this loop produces 4 partial outputs with 8 MACs. */
                    /* Note: variable names can be improved here to align with rows and columns. */
                    q31_t ip_a1, ip_a2, ip_b1, ip_b2, op_a, op_b, op_c;
                    /* Read 4 weights */
                    ip_b1 = arm_nn_read_q7x4(row_pos);
 801b2ee:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
                    ip_a1 = arm_nn_read_q7x4(row_pos + input_ch);
 801b2f2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b2f6:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801b2fa:	441a      	add	r2, r3
 801b2fc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801b300:	601a      	str	r2, [r3, #0]
 801b302:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b30c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b310:	601a      	str	r2, [r3, #0]
    return (val);
 801b312:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801b31c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801b320:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801b324:	601a      	str	r2, [r3, #0]
 801b326:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801b330:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b334:	601a      	str	r2, [r3, #0]
    return (val);
 801b336:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b33a:	681b      	ldr	r3, [r3, #0]
                    op_a = arm_nn_read_q15x2(col_pos);
 801b33c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = arm_nn_read_q15x2(col_pos + input_ch);
 801b340:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b344:	005b      	lsls	r3, r3, #1
 801b346:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801b34a:	441a      	add	r2, r3
 801b34c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801b350:	601a      	str	r2, [r3, #0]
 801b352:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801b35c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b360:	601a      	str	r2, [r3, #0]
    return (val);
 801b362:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

                    ip_a2 = __SXTB16(ip_b1);
 801b36c:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801b370:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801b374:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b376:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	fa2f f283 	sxtb16	r2, r3
 801b380:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801b384:	601a      	str	r2, [r3, #0]
  return(result);
 801b386:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
                    ip_b1 = __SXTB16(__ROR(ip_b1, 8));
 801b390:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801b394:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801b398:	601a      	str	r2, [r3, #0]
 801b39a:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801b39e:	2208      	movs	r2, #8
 801b3a0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801b3a2:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801b3a6:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 801b3aa:	6812      	ldr	r2, [r2, #0]
 801b3ac:	f002 021f 	and.w	r2, r2, #31
 801b3b0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801b3b2:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d103      	bne.n	801b3c4 <arm_depthwise_conv_s8_opt+0x4d8>
    return op1;
 801b3bc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801b3c0:	681b      	ldr	r3, [r3, #0]
 801b3c2:	e007      	b.n	801b3d4 <arm_depthwise_conv_s8_opt+0x4e8>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b3c4:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801b3c8:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801b3cc:	6812      	ldr	r2, [r2, #0]
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	fa62 f303 	ror.w	r3, r2, r3
 801b3d4:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 801b3d8:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b3da:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	fa2f f283 	sxtb16	r2, r3
 801b3e4:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801b3e8:	601a      	str	r2, [r3, #0]
  return(result);
 801b3ea:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c

                    ip_b2 = __SXTB16(ip_a1);
 801b3f4:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801b3f8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801b3fc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b3fe:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	fa2f f283 	sxtb16	r2, r3
 801b408:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801b40c:	601a      	str	r2, [r3, #0]
  return(result);
 801b40e:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
                    ip_a1 = __SXTB16(__ROR(ip_a1, 8));
 801b418:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801b41c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801b420:	601a      	str	r2, [r3, #0]
 801b422:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801b426:	2208      	movs	r2, #8
 801b428:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801b42a:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801b42e:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801b432:	6812      	ldr	r2, [r2, #0]
 801b434:	f002 021f 	and.w	r2, r2, #31
 801b438:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801b43a:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	2b00      	cmp	r3, #0
 801b442:	d103      	bne.n	801b44c <arm_depthwise_conv_s8_opt+0x560>
    return op1;
 801b444:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	e007      	b.n	801b45c <arm_depthwise_conv_s8_opt+0x570>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b44c:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 801b450:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801b454:	6812      	ldr	r2, [r2, #0]
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	fa62 f303 	ror.w	r3, r2, r3
 801b45c:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 801b460:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b462:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	fa2f f283 	sxtb16	r2, r3
 801b46c:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801b470:	601a      	str	r2, [r3, #0]
  return(result);
 801b472:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268

                    op_c = __PKHBT(op_b, op_a, 16);
 801b47c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801b480:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 801b484:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801b488:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 801b48c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801b490:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801b494:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801b498:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 801b49c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b4a0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
                    op_a = __PKHTB(op_b, op_a, 16);
 801b4a4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801b4a8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 801b4ac:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801b4b0:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 801b4b4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801b4b8:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801b4bc:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 801b4c0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 801b4c4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801b4c8:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = __PKHBT(ip_b2, ip_a2, 16);
 801b4cc:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801b4d0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 801b4d4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801b4d8:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 801b4dc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b4e0:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801b4e4:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801b4e8:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 801b4ec:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b4f0:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum = __SMLAD(op_c, op_b, sum);
 801b4f4:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 801b4f8:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b4fc:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801b500:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801b504:	6018      	str	r0, [r3, #0]
 801b506:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801b50a:	6019      	str	r1, [r3, #0]
 801b50c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801b510:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b512:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 801b51c:	6812      	ldr	r2, [r2, #0]
 801b51e:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 801b522:	6809      	ldr	r1, [r1, #0]
 801b524:	fb23 1202 	smlad	r2, r3, r2, r1
 801b528:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801b52c:	601a      	str	r2, [r3, #0]
  return(result);
 801b52e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300

                    op_b = __PKHBT(ip_b1, ip_a1, 16);
 801b538:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801b53c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 801b540:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801b544:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801b548:	601a      	str	r2, [r3, #0]
 801b54a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b54e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801b552:	6812      	ldr	r2, [r2, #0]
 801b554:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801b558:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801b55c:	601a      	str	r2, [r3, #0]
 801b55e:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_2 = __SMLAD(op_a, op_b, sum_2);
 801b568:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 801b56c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b570:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801b574:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801b578:	6018      	str	r0, [r3, #0]
 801b57a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801b57e:	6019      	str	r1, [r3, #0]
 801b580:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801b584:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b586:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 801b590:	6812      	ldr	r2, [r2, #0]
 801b592:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 801b596:	6809      	ldr	r1, [r1, #0]
 801b598:	fb23 1202 	smlad	r2, r3, r2, r1
 801b59c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801b5a0:	601a      	str	r2, [r3, #0]
  return(result);
 801b5a2:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc

                    op_a = arm_nn_read_q15x2(col_pos + 2);
 801b5ac:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801b5b0:	1d1a      	adds	r2, r3, #4
 801b5b2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801b5b6:	601a      	str	r2, [r3, #0]
 801b5b8:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801b5bc:	681b      	ldr	r3, [r3, #0]
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801b5c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b5c6:	601a      	str	r2, [r3, #0]
    return (val);
 801b5c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b5cc:	681b      	ldr	r3, [r3, #0]
 801b5ce:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = arm_nn_read_q15x2(col_pos + input_ch + 2);
 801b5d2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b5d6:	3302      	adds	r3, #2
 801b5d8:	005b      	lsls	r3, r3, #1
 801b5da:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801b5de:	441a      	add	r2, r3
 801b5e0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801b5e4:	601a      	str	r2, [r3, #0]
 801b5e6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801b5ea:	681b      	ldr	r3, [r3, #0]
 801b5ec:	681b      	ldr	r3, [r3, #0]
 801b5ee:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801b5f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b5f4:	601a      	str	r2, [r3, #0]
    return (val);
 801b5f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

                    op_c = __PKHBT(op_b, op_a, 16);
 801b600:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801b604:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801b608:	601a      	str	r2, [r3, #0]
 801b60a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801b60e:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801b612:	601a      	str	r2, [r3, #0]
 801b614:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 801b61e:	6812      	ldr	r2, [r2, #0]
 801b620:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801b624:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801b628:	601a      	str	r2, [r3, #0]
 801b62a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
                    op_a = __PKHTB(op_b, op_a, 16);
 801b634:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801b638:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801b63c:	601a      	str	r2, [r3, #0]
 801b63e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801b642:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801b646:	601a      	str	r2, [r3, #0]
 801b648:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 801b652:	6812      	ldr	r2, [r2, #0]
 801b654:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801b658:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801b65c:	601a      	str	r2, [r3, #0]
 801b65e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = __PKHTB(ip_a2, ip_b2, 16);
 801b668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801b66c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801b670:	601a      	str	r2, [r3, #0]
 801b672:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801b676:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801b67a:	601a      	str	r2, [r3, #0]
 801b67c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801b680:	681b      	ldr	r3, [r3, #0]
 801b682:	f507 7201 	add.w	r2, r7, #516	; 0x204
 801b686:	6812      	ldr	r2, [r2, #0]
 801b688:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801b68c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801b690:	601a      	str	r2, [r3, #0]
 801b692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_3 = __SMLAD(op_c, op_b, sum_3);
 801b69c:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 801b6a0:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b6a4:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801b6a8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801b6ac:	6018      	str	r0, [r3, #0]
 801b6ae:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801b6b2:	6019      	str	r1, [r3, #0]
 801b6b4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b6b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b6ba:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 801b6c4:	6812      	ldr	r2, [r2, #0]
 801b6c6:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 801b6ca:	6809      	ldr	r1, [r1, #0]
 801b6cc:	fb23 1202 	smlad	r2, r3, r2, r1
 801b6d0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801b6d4:	601a      	str	r2, [r3, #0]
  return(result);
 801b6d6:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801b6da:	681b      	ldr	r3, [r3, #0]
 801b6dc:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8

                    op_b = __PKHTB(ip_a1, ip_b1, 16);
 801b6e0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801b6e4:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801b6e8:	601a      	str	r2, [r3, #0]
 801b6ea:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801b6ee:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801b6f2:	601a      	str	r2, [r3, #0]
 801b6f4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801b6fe:	6812      	ldr	r2, [r2, #0]
 801b700:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801b704:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801b708:	601a      	str	r2, [r3, #0]
 801b70a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_4 = __SMLAD(op_a, op_b, sum_4);
 801b714:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 801b718:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b71c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801b720:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801b724:	6018      	str	r0, [r3, #0]
 801b726:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801b72a:	6019      	str	r1, [r3, #0]
 801b72c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801b730:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b732:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 801b73c:	6812      	ldr	r2, [r2, #0]
 801b73e:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 801b742:	6809      	ldr	r1, [r1, #0]
 801b744:	fb23 1202 	smlad	r2, r3, r2, r1
 801b748:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801b74c:	601a      	str	r2, [r3, #0]
  return(result);
 801b74e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801b752:	681b      	ldr	r3, [r3, #0]
 801b754:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                    row_pos += input_ch << 1;
 801b758:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b75c:	005b      	lsls	r3, r3, #1
 801b75e:	461a      	mov	r2, r3
 801b760:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801b764:	4413      	add	r3, r2
 801b766:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                    col_pos += input_ch << 1;
 801b76a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b76e:	005b      	lsls	r3, r3, #1
 801b770:	005b      	lsls	r3, r3, #1
 801b772:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801b776:	4413      	add	r3, r2
 801b778:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
                    col_count--;
 801b77c:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801b780:	3b01      	subs	r3, #1
 801b782:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801b786:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	f47f ad9f 	bne.w	801b2ce <arm_depthwise_conv_s8_opt+0x3e2>
                }

                col_count = (kernel_x * kernel_y) & 0x1;
 801b790:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801b794:	b29a      	uxth	r2, r3
 801b796:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801b79a:	b29b      	uxth	r3, r3
 801b79c:	fb12 f303 	smulbb	r3, r2, r3
 801b7a0:	b29b      	uxth	r3, r3
 801b7a2:	f003 0301 	and.w	r3, r3, #1
 801b7a6:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801b7aa:	e059      	b.n	801b860 <arm_depthwise_conv_s8_opt+0x974>
                {
                    sum += row_pos[0] * col_pos[0];
 801b7ac:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801b7b0:	f993 3000 	ldrsb.w	r3, [r3]
 801b7b4:	461a      	mov	r2, r3
 801b7b6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801b7ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b7be:	fb03 f302 	mul.w	r3, r3, r2
 801b7c2:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801b7c6:	4413      	add	r3, r2
 801b7c8:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                    sum_2 += row_pos[1] * col_pos[1];
 801b7cc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801b7d0:	3301      	adds	r3, #1
 801b7d2:	f993 3000 	ldrsb.w	r3, [r3]
 801b7d6:	461a      	mov	r2, r3
 801b7d8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801b7dc:	3302      	adds	r3, #2
 801b7de:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b7e2:	fb03 f302 	mul.w	r3, r3, r2
 801b7e6:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801b7ea:	4413      	add	r3, r2
 801b7ec:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                    sum_3 += row_pos[2] * col_pos[2];
 801b7f0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801b7f4:	3302      	adds	r3, #2
 801b7f6:	f993 3000 	ldrsb.w	r3, [r3]
 801b7fa:	461a      	mov	r2, r3
 801b7fc:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801b800:	3304      	adds	r3, #4
 801b802:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b806:	fb03 f302 	mul.w	r3, r3, r2
 801b80a:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801b80e:	4413      	add	r3, r2
 801b810:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                    sum_4 += row_pos[3] * col_pos[3];
 801b814:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801b818:	3303      	adds	r3, #3
 801b81a:	f993 3000 	ldrsb.w	r3, [r3]
 801b81e:	461a      	mov	r2, r3
 801b820:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801b824:	3306      	adds	r3, #6
 801b826:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b82a:	fb03 f302 	mul.w	r3, r3, r2
 801b82e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801b832:	4413      	add	r3, r2
 801b834:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                    row_pos += input_ch;
 801b838:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b83c:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801b840:	4413      	add	r3, r2
 801b842:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                    col_pos += input_ch;
 801b846:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801b84a:	005b      	lsls	r3, r3, #1
 801b84c:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801b850:	4413      	add	r3, r2
 801b852:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec

                    col_count--;
 801b856:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801b85a:	3b01      	subs	r3, #1
 801b85c:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801b860:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801b864:	2b00      	cmp	r3, #0
 801b866:	d1a1      	bne.n	801b7ac <arm_depthwise_conv_s8_opt+0x8c0>
                }
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
 801b868:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801b86c:	1d1a      	adds	r2, r3, #4
 801b86e:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801b872:	6819      	ldr	r1, [r3, #0]
 801b874:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801b878:	1d1a      	adds	r2, r3, #4
 801b87a:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801b87e:	681a      	ldr	r2, [r3, #0]
 801b880:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801b884:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 801b888:	6018      	str	r0, [r3, #0]
 801b88a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801b88e:	6019      	str	r1, [r3, #0]
 801b890:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b894:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b896:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8a0:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801b8a4:	6812      	ldr	r2, [r2, #0]
 801b8a6:	409a      	lsls	r2, r3
 801b8a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801b8ac:	601a      	str	r2, [r3, #0]
 801b8ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801b8b2:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801b8b6:	6812      	ldr	r2, [r2, #0]
 801b8b8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b8ba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801b8be:	2200      	movs	r2, #0
 801b8c0:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801b8c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b8c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b8ca:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801b8cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b8d0:	2200      	movs	r2, #0
 801b8d2:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b8d4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 801b8d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	4618      	mov	r0, r3
 801b8e0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801b8e4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	461a      	mov	r2, r3
 801b8ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801b8f0:	fb02 f501 	mul.w	r5, r2, r1
 801b8f4:	fb00 f403 	mul.w	r4, r0, r3
 801b8f8:	442c      	add	r4, r5
 801b8fa:	fba0 2302 	umull	r2, r3, r0, r2
 801b8fe:	18e1      	adds	r1, r4, r3
 801b900:	460b      	mov	r3, r1
 801b902:	eb18 0102 	adds.w	r1, r8, r2
 801b906:	60b9      	str	r1, [r7, #8]
 801b908:	eb49 0303 	adc.w	r3, r9, r3
 801b90c:	60fb      	str	r3, [r7, #12]
 801b90e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801b912:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    result = (int32_t)(mult.long_long >> 31);
 801b916:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801b91a:	f04f 0200 	mov.w	r2, #0
 801b91e:	f04f 0300 	mov.w	r3, #0
 801b922:	0fc2      	lsrs	r2, r0, #31
 801b924:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801b928:	17cb      	asrs	r3, r1, #31
 801b92a:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 801b92e:	4613      	mov	r3, r2
 801b930:	600b      	str	r3, [r1, #0]
    return result;
 801b932:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801b936:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b938:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	2b00      	cmp	r3, #0
 801b940:	dc04      	bgt.n	801b94c <arm_depthwise_conv_s8_opt+0xa60>
 801b942:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	425b      	negs	r3, r3
 801b94a:	e000      	b.n	801b94e <arm_depthwise_conv_s8_opt+0xa62>
 801b94c:	2300      	movs	r3, #0
 801b94e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801b952:	6011      	str	r1, [r2, #0]
 801b954:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801b958:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b95a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b95e:	2200      	movs	r2, #0
 801b960:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b962:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801b966:	2201      	movs	r2, #1
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	409a      	lsls	r2, r3
 801b96c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801b970:	3a01      	subs	r2, #1
 801b972:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801b974:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801b978:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801b97c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801b980:	6809      	ldr	r1, [r1, #0]
 801b982:	6812      	ldr	r2, [r2, #0]
 801b984:	400a      	ands	r2, r1
 801b986:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801b988:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b98c:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801b990:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801b994:	6809      	ldr	r1, [r1, #0]
 801b996:	6812      	ldr	r2, [r2, #0]
 801b998:	fa41 f202 	asr.w	r2, r1, r2
 801b99c:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801b99e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801b9a2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801b9a6:	6812      	ldr	r2, [r2, #0]
 801b9a8:	1052      	asrs	r2, r2, #1
 801b9aa:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801b9ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	da06      	bge.n	801b9c4 <arm_depthwise_conv_s8_opt+0xad8>
        threshold++;
 801b9b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801b9ba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801b9be:	6812      	ldr	r2, [r2, #0]
 801b9c0:	3201      	adds	r2, #1
 801b9c2:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801b9c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801b9c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801b9cc:	6812      	ldr	r2, [r2, #0]
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	429a      	cmp	r2, r3
 801b9d2:	dd06      	ble.n	801b9e2 <arm_depthwise_conv_s8_opt+0xaf6>
        result++;
 801b9d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b9d8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801b9dc:	6812      	ldr	r2, [r2, #0]
 801b9de:	3201      	adds	r2, #1
 801b9e0:	601a      	str	r2, [r3, #0]
    return result;
 801b9e2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b9e6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b9e8:	bf00      	nop
 801b9ea:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum += output_offset;
 801b9ee:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801b9f2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801b9f6:	4413      	add	r3, r2
 801b9f8:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum = MAX(sum, output_activation_min);
 801b9fc:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801ba00:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801ba04:	4293      	cmp	r3, r2
 801ba06:	bfb8      	it	lt
 801ba08:	4613      	movlt	r3, r2
 801ba0a:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum = MIN(sum, output_activation_max);
 801ba0e:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801ba12:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801ba16:	4293      	cmp	r3, r2
 801ba18:	bfa8      	it	ge
 801ba1a:	4613      	movge	r3, r2
 801ba1c:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                *output++ = (q7_t)sum;
 801ba20:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801ba24:	1c5a      	adds	r2, r3, #1
 801ba26:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801ba2a:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801ba2e:	b252      	sxtb	r2, r2
 801ba30:	701a      	strb	r2, [r3, #0]

                sum_2 = arm_nn_requantize(sum_2, *output_mult++, *output_shift++);
 801ba32:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801ba36:	1d1a      	adds	r2, r3, #4
 801ba38:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801ba3c:	6819      	ldr	r1, [r3, #0]
 801ba3e:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801ba42:	1d1a      	adds	r2, r3, #4
 801ba44:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801ba48:	681a      	ldr	r2, [r3, #0]
 801ba4a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801ba4e:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 801ba52:	6018      	str	r0, [r3, #0]
 801ba54:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801ba58:	6019      	str	r1, [r3, #0]
 801ba5a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ba5e:	601a      	str	r2, [r3, #0]
 801ba60:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba6a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801ba6e:	6812      	ldr	r2, [r2, #0]
 801ba70:	409a      	lsls	r2, r3
 801ba72:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801ba76:	601a      	str	r2, [r3, #0]
 801ba78:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ba7c:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801ba80:	6812      	ldr	r2, [r2, #0]
 801ba82:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801ba84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801ba88:	2200      	movs	r2, #0
 801ba8a:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801ba8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ba90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801ba94:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801ba96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ba9a:	2200      	movs	r2, #0
 801ba9c:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801ba9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801baa2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	4618      	mov	r0, r3
 801baaa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801baae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801bab2:	681b      	ldr	r3, [r3, #0]
 801bab4:	461a      	mov	r2, r3
 801bab6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801baba:	fb02 f501 	mul.w	r5, r2, r1
 801babe:	fb00 f403 	mul.w	r4, r0, r3
 801bac2:	442c      	add	r4, r5
 801bac4:	fba0 2302 	umull	r2, r3, r0, r2
 801bac8:	18e1      	adds	r1, r4, r3
 801baca:	460b      	mov	r3, r1
 801bacc:	eb18 0102 	adds.w	r1, r8, r2
 801bad0:	6139      	str	r1, [r7, #16]
 801bad2:	eb49 0303 	adc.w	r3, r9, r3
 801bad6:	617b      	str	r3, [r7, #20]
 801bad8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801badc:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801bae0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801bae4:	f04f 0200 	mov.w	r2, #0
 801bae8:	f04f 0300 	mov.w	r3, #0
 801baec:	0fc2      	lsrs	r2, r0, #31
 801baee:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801baf2:	17cb      	asrs	r3, r1, #31
 801baf4:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 801baf8:	4613      	mov	r3, r2
 801bafa:	600b      	str	r3, [r1, #0]
    return result;
 801bafc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801bb00:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bb02:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	dc04      	bgt.n	801bb16 <arm_depthwise_conv_s8_opt+0xc2a>
 801bb0c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	425b      	negs	r3, r3
 801bb14:	e000      	b.n	801bb18 <arm_depthwise_conv_s8_opt+0xc2c>
 801bb16:	2300      	movs	r3, #0
 801bb18:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801bb1c:	6011      	str	r1, [r2, #0]
 801bb1e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801bb22:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bb24:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bb28:	2200      	movs	r2, #0
 801bb2a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801bb2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801bb30:	2201      	movs	r2, #1
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	409a      	lsls	r2, r3
 801bb36:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801bb3a:	3a01      	subs	r2, #1
 801bb3c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801bb3e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801bb42:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801bb46:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801bb4a:	6809      	ldr	r1, [r1, #0]
 801bb4c:	6812      	ldr	r2, [r2, #0]
 801bb4e:	400a      	ands	r2, r1
 801bb50:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801bb52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bb56:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801bb5a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801bb5e:	6809      	ldr	r1, [r1, #0]
 801bb60:	6812      	ldr	r2, [r2, #0]
 801bb62:	fa41 f202 	asr.w	r2, r1, r2
 801bb66:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801bb68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801bb6c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801bb70:	6812      	ldr	r2, [r2, #0]
 801bb72:	1052      	asrs	r2, r2, #1
 801bb74:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801bb76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	da06      	bge.n	801bb8e <arm_depthwise_conv_s8_opt+0xca2>
        threshold++;
 801bb80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801bb84:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801bb88:	6812      	ldr	r2, [r2, #0]
 801bb8a:	3201      	adds	r2, #1
 801bb8c:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801bb8e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801bb92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801bb96:	6812      	ldr	r2, [r2, #0]
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	429a      	cmp	r2, r3
 801bb9c:	dd06      	ble.n	801bbac <arm_depthwise_conv_s8_opt+0xcc0>
        result++;
 801bb9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bba2:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801bba6:	6812      	ldr	r2, [r2, #0]
 801bba8:	3201      	adds	r2, #1
 801bbaa:	601a      	str	r2, [r3, #0]
    return result;
 801bbac:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bbb0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bbb2:	bf00      	nop
 801bbb4:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 += output_offset;
 801bbb8:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801bbbc:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801bbc0:	4413      	add	r3, r2
 801bbc2:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 = MAX(sum_2, output_activation_min);
 801bbc6:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801bbca:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801bbce:	4293      	cmp	r3, r2
 801bbd0:	bfb8      	it	lt
 801bbd2:	4613      	movlt	r3, r2
 801bbd4:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 = MIN(sum_2, output_activation_max);
 801bbd8:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801bbdc:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801bbe0:	4293      	cmp	r3, r2
 801bbe2:	bfa8      	it	ge
 801bbe4:	4613      	movge	r3, r2
 801bbe6:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                *output++ = (q7_t)sum_2;
 801bbea:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801bbee:	1c5a      	adds	r2, r3, #1
 801bbf0:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801bbf4:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801bbf8:	b252      	sxtb	r2, r2
 801bbfa:	701a      	strb	r2, [r3, #0]
                sum_3 = arm_nn_requantize(sum_3, *output_mult++, *output_shift++);
 801bbfc:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801bc00:	1d1a      	adds	r2, r3, #4
 801bc02:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801bc06:	6819      	ldr	r1, [r3, #0]
 801bc08:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801bc0c:	1d1a      	adds	r2, r3, #4
 801bc0e:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801bc12:	681a      	ldr	r2, [r3, #0]
 801bc14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801bc18:	f8d7 02f8 	ldr.w	r0, [r7, #760]	; 0x2f8
 801bc1c:	6018      	str	r0, [r3, #0]
 801bc1e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801bc22:	6019      	str	r1, [r3, #0]
 801bc24:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bc28:	601a      	str	r2, [r3, #0]
 801bc2a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc34:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801bc38:	6812      	ldr	r2, [r2, #0]
 801bc3a:	409a      	lsls	r2, r3
 801bc3c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801bc40:	601a      	str	r2, [r3, #0]
 801bc42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801bc46:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 801bc4a:	6812      	ldr	r2, [r2, #0]
 801bc4c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801bc4e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801bc52:	2200      	movs	r2, #0
 801bc54:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801bc56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bc5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801bc5e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801bc60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bc64:	2200      	movs	r2, #0
 801bc66:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801bc68:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 801bc6c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	4618      	mov	r0, r3
 801bc74:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801bc78:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	461a      	mov	r2, r3
 801bc80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801bc84:	fb02 f501 	mul.w	r5, r2, r1
 801bc88:	fb00 f403 	mul.w	r4, r0, r3
 801bc8c:	442c      	add	r4, r5
 801bc8e:	fba0 2302 	umull	r2, r3, r0, r2
 801bc92:	18e1      	adds	r1, r4, r3
 801bc94:	460b      	mov	r3, r1
 801bc96:	eb18 0102 	adds.w	r1, r8, r2
 801bc9a:	61b9      	str	r1, [r7, #24]
 801bc9c:	eb49 0303 	adc.w	r3, r9, r3
 801bca0:	61fb      	str	r3, [r7, #28]
 801bca2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801bca6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 801bcaa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801bcae:	f04f 0200 	mov.w	r2, #0
 801bcb2:	f04f 0300 	mov.w	r3, #0
 801bcb6:	0fc2      	lsrs	r2, r0, #31
 801bcb8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801bcbc:	17cb      	asrs	r3, r1, #31
 801bcbe:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 801bcc2:	4613      	mov	r3, r2
 801bcc4:	600b      	str	r3, [r1, #0]
    return result;
 801bcc6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801bcca:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bccc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bcd0:	681b      	ldr	r3, [r3, #0]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	dc04      	bgt.n	801bce0 <arm_depthwise_conv_s8_opt+0xdf4>
 801bcd6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bcda:	681b      	ldr	r3, [r3, #0]
 801bcdc:	425b      	negs	r3, r3
 801bcde:	e000      	b.n	801bce2 <arm_depthwise_conv_s8_opt+0xdf6>
 801bce0:	2300      	movs	r3, #0
 801bce2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801bce6:	6011      	str	r1, [r2, #0]
 801bce8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 801bcec:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bcee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bcf2:	2200      	movs	r2, #0
 801bcf4:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801bcf6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801bcfa:	2201      	movs	r2, #1
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	409a      	lsls	r2, r3
 801bd00:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801bd04:	3a01      	subs	r2, #1
 801bd06:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801bd08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801bd0c:	f507 718c 	add.w	r1, r7, #280	; 0x118
 801bd10:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801bd14:	6809      	ldr	r1, [r1, #0]
 801bd16:	6812      	ldr	r2, [r2, #0]
 801bd18:	400a      	ands	r2, r1
 801bd1a:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801bd1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bd20:	f507 718c 	add.w	r1, r7, #280	; 0x118
 801bd24:	f507 728a 	add.w	r2, r7, #276	; 0x114
 801bd28:	6809      	ldr	r1, [r1, #0]
 801bd2a:	6812      	ldr	r2, [r2, #0]
 801bd2c:	fa41 f202 	asr.w	r2, r1, r2
 801bd30:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801bd32:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801bd36:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801bd3a:	6812      	ldr	r2, [r2, #0]
 801bd3c:	1052      	asrs	r2, r2, #1
 801bd3e:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801bd40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	da06      	bge.n	801bd58 <arm_depthwise_conv_s8_opt+0xe6c>
        threshold++;
 801bd4a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801bd4e:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801bd52:	6812      	ldr	r2, [r2, #0]
 801bd54:	3201      	adds	r2, #1
 801bd56:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801bd58:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801bd5c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801bd60:	6812      	ldr	r2, [r2, #0]
 801bd62:	681b      	ldr	r3, [r3, #0]
 801bd64:	429a      	cmp	r2, r3
 801bd66:	dd06      	ble.n	801bd76 <arm_depthwise_conv_s8_opt+0xe8a>
        result++;
 801bd68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bd6c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801bd70:	6812      	ldr	r2, [r2, #0]
 801bd72:	3201      	adds	r2, #1
 801bd74:	601a      	str	r2, [r3, #0]
    return result;
 801bd76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bd7a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bd7c:	bf00      	nop
 801bd7e:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 += output_offset;
 801bd82:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801bd86:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801bd8a:	4413      	add	r3, r2
 801bd8c:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 = MAX(sum_3, output_activation_min);
 801bd90:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801bd94:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801bd98:	4293      	cmp	r3, r2
 801bd9a:	bfb8      	it	lt
 801bd9c:	4613      	movlt	r3, r2
 801bd9e:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 = MIN(sum_3, output_activation_max);
 801bda2:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801bda6:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801bdaa:	4293      	cmp	r3, r2
 801bdac:	bfa8      	it	ge
 801bdae:	4613      	movge	r3, r2
 801bdb0:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                *output++ = (q7_t)sum_3;
 801bdb4:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801bdb8:	1c5a      	adds	r2, r3, #1
 801bdba:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801bdbe:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801bdc2:	b252      	sxtb	r2, r2
 801bdc4:	701a      	strb	r2, [r3, #0]

                sum_4 = arm_nn_requantize(sum_4, *output_mult++, *output_shift++);
 801bdc6:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801bdca:	1d1a      	adds	r2, r3, #4
 801bdcc:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801bdd0:	6819      	ldr	r1, [r3, #0]
 801bdd2:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801bdd6:	1d1a      	adds	r2, r3, #4
 801bdd8:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801bddc:	681a      	ldr	r2, [r3, #0]
 801bdde:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801bde2:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 801bde6:	6018      	str	r0, [r3, #0]
 801bde8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801bdec:	6019      	str	r1, [r3, #0]
 801bdee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801bdf2:	601a      	str	r2, [r3, #0]
 801bdf4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bdfe:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801be02:	6812      	ldr	r2, [r2, #0]
 801be04:	409a      	lsls	r2, r3
 801be06:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801be0a:	601a      	str	r2, [r3, #0]
 801be0c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801be10:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 801be14:	6812      	ldr	r2, [r2, #0]
 801be16:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801be18:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801be1c:	2200      	movs	r2, #0
 801be1e:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801be20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801be24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801be28:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801be2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801be2e:	2200      	movs	r2, #0
 801be30:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801be32:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 801be36:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	4618      	mov	r0, r3
 801be3e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801be42:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801be46:	681b      	ldr	r3, [r3, #0]
 801be48:	461a      	mov	r2, r3
 801be4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801be4e:	fb02 f501 	mul.w	r5, r2, r1
 801be52:	fb00 f403 	mul.w	r4, r0, r3
 801be56:	442c      	add	r4, r5
 801be58:	fba0 2302 	umull	r2, r3, r0, r2
 801be5c:	18e1      	adds	r1, r4, r3
 801be5e:	460b      	mov	r3, r1
 801be60:	eb18 0a02 	adds.w	sl, r8, r2
 801be64:	eb49 0b03 	adc.w	fp, r9, r3
 801be68:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
    result = (int32_t)(mult.long_long >> 31);
 801be6c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801be70:	f04f 0200 	mov.w	r2, #0
 801be74:	f04f 0300 	mov.w	r3, #0
 801be78:	0fc2      	lsrs	r2, r0, #31
 801be7a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801be7e:	17cb      	asrs	r3, r1, #31
 801be80:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 801be84:	4613      	mov	r3, r2
 801be86:	600b      	str	r3, [r1, #0]
    return result;
 801be88:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801be8c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801be8e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	2b00      	cmp	r3, #0
 801be96:	dc04      	bgt.n	801bea2 <arm_depthwise_conv_s8_opt+0xfb6>
 801be98:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	425b      	negs	r3, r3
 801bea0:	e000      	b.n	801bea4 <arm_depthwise_conv_s8_opt+0xfb8>
 801bea2:	2300      	movs	r3, #0
 801bea4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801bea8:	6011      	str	r1, [r2, #0]
 801beaa:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801beae:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801beb0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801beb4:	2200      	movs	r2, #0
 801beb6:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801beb8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801bebc:	2201      	movs	r2, #1
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	409a      	lsls	r2, r3
 801bec2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801bec6:	3a01      	subs	r2, #1
 801bec8:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801beca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801bece:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 801bed2:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 801bed6:	6809      	ldr	r1, [r1, #0]
 801bed8:	6812      	ldr	r2, [r2, #0]
 801beda:	400a      	ands	r2, r1
 801bedc:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801bede:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801bee2:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 801bee6:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801beea:	6809      	ldr	r1, [r1, #0]
 801beec:	6812      	ldr	r2, [r2, #0]
 801beee:	fa41 f202 	asr.w	r2, r1, r2
 801bef2:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801bef4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801bef8:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 801befc:	6812      	ldr	r2, [r2, #0]
 801befe:	1052      	asrs	r2, r2, #1
 801bf00:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801bf02:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	da06      	bge.n	801bf1a <arm_depthwise_conv_s8_opt+0x102e>
        threshold++;
 801bf0c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801bf10:	f507 729a 	add.w	r2, r7, #308	; 0x134
 801bf14:	6812      	ldr	r2, [r2, #0]
 801bf16:	3201      	adds	r2, #1
 801bf18:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801bf1a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801bf1e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801bf22:	6812      	ldr	r2, [r2, #0]
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	429a      	cmp	r2, r3
 801bf28:	dd06      	ble.n	801bf38 <arm_depthwise_conv_s8_opt+0x104c>
        result++;
 801bf2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801bf2e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801bf32:	6812      	ldr	r2, [r2, #0]
 801bf34:	3201      	adds	r2, #1
 801bf36:	601a      	str	r2, [r3, #0]
    return result;
 801bf38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801bf3c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bf3e:	bf00      	nop
 801bf40:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 += output_offset;
 801bf44:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801bf48:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801bf4c:	4413      	add	r3, r2
 801bf4e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 = MAX(sum_4, output_activation_min);
 801bf52:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801bf56:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801bf5a:	4293      	cmp	r3, r2
 801bf5c:	bfb8      	it	lt
 801bf5e:	4613      	movlt	r3, r2
 801bf60:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 = MIN(sum_4, output_activation_max);
 801bf64:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801bf68:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801bf6c:	4293      	cmp	r3, r2
 801bf6e:	bfa8      	it	ge
 801bf70:	4613      	movge	r3, r2
 801bf72:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                *output++ = (q7_t)sum_4;
 801bf76:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801bf7a:	1c5a      	adds	r2, r3, #1
 801bf7c:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801bf80:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801bf84:	b252      	sxtb	r2, r2
 801bf86:	701a      	strb	r2, [r3, #0]

                row_count--;
 801bf88:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801bf8c:	3b01      	subs	r3, #1
 801bf8e:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801bf92:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	f47f a959 	bne.w	801b24e <arm_depthwise_conv_s8_opt+0x362>
            }

            row_count = output_ch & 0x3;
 801bf9c:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801bfa0:	b29b      	uxth	r3, r3
 801bfa2:	f003 0303 	and.w	r3, r3, #3
 801bfa6:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801bfaa:	e13e      	b.n	801c22a <arm_depthwise_conv_s8_opt+0x133e>
            {
                q15_t *col_pos = col_buffer_start + row_shift;
 801bfac:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801bfb0:	005b      	lsls	r3, r3, #1
 801bfb2:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801bfb6:	4413      	add	r3, r2
 801bfb8:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
                const q7_t *row_pos = kernel + row_shift;
 801bfbc:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801bfc0:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 801bfc4:	4413      	add	r3, r2
 801bfc6:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
                q31_t sum = *bias++;
 801bfca:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801bfce:	1d1a      	adds	r2, r3, #4
 801bfd0:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                const uint16_t col_count = (kernel_x * kernel_y);
 801bfda:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801bfde:	b29a      	uxth	r2, r3
 801bfe0:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801bfe4:	b29b      	uxth	r3, r3
 801bfe6:	fb12 f303 	smulbb	r3, r2, r3
 801bfea:	f8a7 3272 	strh.w	r3, [r7, #626]	; 0x272
                row_shift += 1;
 801bfee:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801bff2:	3301      	adds	r3, #1
 801bff4:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

                for (int i = 0; i < col_count; i++)
 801bff8:	2300      	movs	r3, #0
 801bffa:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801bffe:	e024      	b.n	801c04a <arm_depthwise_conv_s8_opt+0x115e>
                {
                    sum += row_pos[i * input_ch] * col_pos[i * input_ch];
 801c000:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801c004:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801c008:	fb02 f303 	mul.w	r3, r2, r3
 801c00c:	461a      	mov	r2, r3
 801c00e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801c012:	4413      	add	r3, r2
 801c014:	f993 3000 	ldrsb.w	r3, [r3]
 801c018:	4619      	mov	r1, r3
 801c01a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801c01e:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801c022:	fb02 f303 	mul.w	r3, r2, r3
 801c026:	005b      	lsls	r3, r3, #1
 801c028:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 801c02c:	4413      	add	r3, r2
 801c02e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c032:	fb03 f301 	mul.w	r3, r3, r1
 801c036:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c03a:	4413      	add	r3, r2
 801c03c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                for (int i = 0; i < col_count; i++)
 801c040:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801c044:	3301      	adds	r3, #1
 801c046:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801c04a:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 801c04e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 801c052:	429a      	cmp	r2, r3
 801c054:	dbd4      	blt.n	801c000 <arm_depthwise_conv_s8_opt+0x1114>
                }
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
 801c056:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801c05a:	1d1a      	adds	r2, r3, #4
 801c05c:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801c060:	6819      	ldr	r1, [r3, #0]
 801c062:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801c066:	1d1a      	adds	r2, r3, #4
 801c068:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801c06c:	681a      	ldr	r2, [r3, #0]
 801c06e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c072:	f8d7 02e4 	ldr.w	r0, [r7, #740]	; 0x2e4
 801c076:	6018      	str	r0, [r3, #0]
 801c078:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801c07c:	6019      	str	r1, [r3, #0]
 801c07e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c082:	601a      	str	r2, [r3, #0]
 801c084:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c088:	681b      	ldr	r3, [r3, #0]
 801c08a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c08e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801c092:	6812      	ldr	r2, [r2, #0]
 801c094:	409a      	lsls	r2, r3
 801c096:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801c09a:	601a      	str	r2, [r3, #0]
 801c09c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c0a0:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801c0a4:	6812      	ldr	r2, [r2, #0]
 801c0a6:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801c0a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c0ac:	2200      	movs	r2, #0
 801c0ae:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801c0b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c0b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c0b8:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801c0ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c0be:	2200      	movs	r2, #0
 801c0c0:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c0c2:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 801c0c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	4618      	mov	r0, r3
 801c0ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c0d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	461a      	mov	r2, r3
 801c0da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c0de:	fb02 f501 	mul.w	r5, r2, r1
 801c0e2:	fb00 f403 	mul.w	r4, r0, r3
 801c0e6:	442c      	add	r4, r5
 801c0e8:	fba0 2302 	umull	r2, r3, r0, r2
 801c0ec:	18e1      	adds	r1, r4, r3
 801c0ee:	460b      	mov	r3, r1
 801c0f0:	eb18 0102 	adds.w	r1, r8, r2
 801c0f4:	6039      	str	r1, [r7, #0]
 801c0f6:	eb49 0303 	adc.w	r3, r9, r3
 801c0fa:	607b      	str	r3, [r7, #4]
 801c0fc:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c100:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801c104:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801c108:	f04f 0200 	mov.w	r2, #0
 801c10c:	f04f 0300 	mov.w	r3, #0
 801c110:	0fc2      	lsrs	r2, r0, #31
 801c112:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801c116:	17cb      	asrs	r3, r1, #31
 801c118:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801c11c:	4613      	mov	r3, r2
 801c11e:	600b      	str	r3, [r1, #0]
    return result;
 801c120:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c124:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c126:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	dc04      	bgt.n	801c13a <arm_depthwise_conv_s8_opt+0x124e>
 801c130:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c134:	681b      	ldr	r3, [r3, #0]
 801c136:	425b      	negs	r3, r3
 801c138:	e000      	b.n	801c13c <arm_depthwise_conv_s8_opt+0x1250>
 801c13a:	2300      	movs	r3, #0
 801c13c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801c140:	6011      	str	r1, [r2, #0]
 801c142:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801c146:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c148:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c14c:	2200      	movs	r2, #0
 801c14e:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c150:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c154:	2201      	movs	r2, #1
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	409a      	lsls	r2, r3
 801c15a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801c15e:	3a01      	subs	r2, #1
 801c160:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801c162:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c166:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801c16a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801c16e:	6809      	ldr	r1, [r1, #0]
 801c170:	6812      	ldr	r2, [r2, #0]
 801c172:	400a      	ands	r2, r1
 801c174:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801c176:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c17a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801c17e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801c182:	6809      	ldr	r1, [r1, #0]
 801c184:	6812      	ldr	r2, [r2, #0]
 801c186:	fa41 f202 	asr.w	r2, r1, r2
 801c18a:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801c18c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c190:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801c194:	6812      	ldr	r2, [r2, #0]
 801c196:	1052      	asrs	r2, r2, #1
 801c198:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801c19a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	da06      	bge.n	801c1b2 <arm_depthwise_conv_s8_opt+0x12c6>
        threshold++;
 801c1a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c1a8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801c1ac:	6812      	ldr	r2, [r2, #0]
 801c1ae:	3201      	adds	r2, #1
 801c1b0:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801c1b2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801c1b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c1ba:	6812      	ldr	r2, [r2, #0]
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	429a      	cmp	r2, r3
 801c1c0:	dd06      	ble.n	801c1d0 <arm_depthwise_conv_s8_opt+0x12e4>
        result++;
 801c1c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c1c6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801c1ca:	6812      	ldr	r2, [r2, #0]
 801c1cc:	3201      	adds	r2, #1
 801c1ce:	601a      	str	r2, [r3, #0]
    return result;
 801c1d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c1d4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c1d6:	bf00      	nop
 801c1d8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum += output_offset;
 801c1dc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c1e0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801c1e4:	4413      	add	r3, r2
 801c1e6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum = MAX(sum, output_activation_min);
 801c1ea:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c1ee:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801c1f2:	4293      	cmp	r3, r2
 801c1f4:	bfb8      	it	lt
 801c1f6:	4613      	movlt	r3, r2
 801c1f8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum = MIN(sum, output_activation_max);
 801c1fc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c200:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801c204:	4293      	cmp	r3, r2
 801c206:	bfa8      	it	ge
 801c208:	4613      	movge	r3, r2
 801c20a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                *output++ = (q7_t)sum;
 801c20e:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801c212:	1c5a      	adds	r2, r3, #1
 801c214:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801c218:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c21c:	b252      	sxtb	r2, r2
 801c21e:	701a      	strb	r2, [r3, #0]

                row_count--;
 801c220:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801c224:	3b01      	subs	r3, #1
 801c226:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801c22a:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801c22e:	2b00      	cmp	r3, #0
 801c230:	f47f aebc 	bne.w	801bfac <arm_depthwise_conv_s8_opt+0x10c0>
            }

            // clear counter and pointers
            col_buffer = col_buffer_start;
 801c234:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c238:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801c23c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801c240:	3301      	adds	r3, #1
 801c242:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 801c246:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 801c24a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801c24e:	429a      	cmp	r2, r3
 801c250:	f6fe af02 	blt.w	801b058 <arm_depthwise_conv_s8_opt+0x16c>
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801c254:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801c258:	3301      	adds	r3, #1
 801c25a:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801c25e:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 801c262:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 801c266:	429a      	cmp	r2, r3
 801c268:	f6fe aee1 	blt.w	801b02e <arm_depthwise_conv_s8_opt+0x142>
                                 output_dims,
                                 output);
#endif /* ARM_MATH_MVEI | ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801c26c:	2300      	movs	r3, #0
}
 801c26e:	4618      	mov	r0, r3
 801c270:	f507 774a 	add.w	r7, r7, #808	; 0x328
 801c274:	46bd      	mov	sp, r7
 801c276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801c27a <arm_depthwise_conv_s8_opt_get_buffer_size>:

int32_t arm_depthwise_conv_s8_opt_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 801c27a:	b480      	push	{r7}
 801c27c:	b083      	sub	sp, #12
 801c27e:	af00      	add	r7, sp, #0
 801c280:	6078      	str	r0, [r7, #4]
 801c282:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_MVEI)
    /* The + 4 accounts for out of bounds read of the lhs buffers in the *_nt_t_* functions.  */
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t) + 4;
#elif defined(ARM_MATH_DSP)
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	68db      	ldr	r3, [r3, #12]
 801c288:	683a      	ldr	r2, [r7, #0]
 801c28a:	6892      	ldr	r2, [r2, #8]
 801c28c:	fb02 f303 	mul.w	r3, r2, r3
 801c290:	683a      	ldr	r2, [r7, #0]
 801c292:	6852      	ldr	r2, [r2, #4]
 801c294:	fb02 f303 	mul.w	r3, r2, r3
 801c298:	005b      	lsls	r3, r3, #1
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 801c29a:	4618      	mov	r0, r3
 801c29c:	370c      	adds	r7, #12
 801c29e:	46bd      	mov	sp, r7
 801c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2a4:	4770      	bx	lr

0801c2a6 <arm_depthwise_conv_wrapper_s8>:
                                         const q7_t *filter,
                                         const cmsis_nn_dims *bias_dims,
                                         const int32_t *bias,
                                         const cmsis_nn_dims *output_dims,
                                         q7_t *output)
{
 801c2a6:	b580      	push	{r7, lr}
 801c2a8:	b08e      	sub	sp, #56	; 0x38
 801c2aa:	af08      	add	r7, sp, #32
 801c2ac:	60f8      	str	r0, [r7, #12]
 801c2ae:	60b9      	str	r1, [r7, #8]
 801c2b0:	607a      	str	r2, [r7, #4]
 801c2b2:	603b      	str	r3, [r7, #0]
    arm_status status = ARM_MATH_SUCCESS;
 801c2b4:	2300      	movs	r3, #0
 801c2b6:	75fb      	strb	r3, [r7, #23]
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1)
 801c2b8:	68bb      	ldr	r3, [r7, #8]
 801c2ba:	689b      	ldr	r3, [r3, #8]
 801c2bc:	2b01      	cmp	r3, #1
 801c2be:	d13e      	bne.n	801c33e <arm_depthwise_conv_wrapper_s8+0x98>
 801c2c0:	683b      	ldr	r3, [r7, #0]
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	2b01      	cmp	r3, #1
 801c2c6:	d13a      	bne.n	801c33e <arm_depthwise_conv_wrapper_s8+0x98>
    {
#if !defined(ARM_MATH_MVEI)
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1))
 801c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2ca:	689b      	ldr	r3, [r3, #8]
 801c2cc:	2b03      	cmp	r3, #3
 801c2ce:	d11f      	bne.n	801c310 <arm_depthwise_conv_wrapper_s8+0x6a>
 801c2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2d2:	685b      	ldr	r3, [r3, #4]
 801c2d4:	2b03      	cmp	r3, #3
 801c2d6:	d11b      	bne.n	801c310 <arm_depthwise_conv_wrapper_s8+0x6a>
 801c2d8:	68bb      	ldr	r3, [r7, #8]
 801c2da:	699b      	ldr	r3, [r3, #24]
 801c2dc:	2b01      	cmp	r3, #1
 801c2de:	dc17      	bgt.n	801c310 <arm_depthwise_conv_wrapper_s8+0x6a>
        {
            status = arm_depthwise_conv_3x3_s8(ctx,
 801c2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2e2:	9306      	str	r3, [sp, #24]
 801c2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2e6:	9305      	str	r3, [sp, #20]
 801c2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2ea:	9304      	str	r3, [sp, #16]
 801c2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2ee:	9303      	str	r3, [sp, #12]
 801c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2f2:	9302      	str	r3, [sp, #8]
 801c2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2f6:	9301      	str	r3, [sp, #4]
 801c2f8:	6a3b      	ldr	r3, [r7, #32]
 801c2fa:	9300      	str	r3, [sp, #0]
 801c2fc:	683b      	ldr	r3, [r7, #0]
 801c2fe:	687a      	ldr	r2, [r7, #4]
 801c300:	68b9      	ldr	r1, [r7, #8]
 801c302:	68f8      	ldr	r0, [r7, #12]
 801c304:	f7fc fe9e 	bl	8019044 <arm_depthwise_conv_3x3_s8>
 801c308:	4603      	mov	r3, r0
 801c30a:	75fb      	strb	r3, [r7, #23]
 801c30c:	bf00      	nop
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1))
 801c30e:	e02c      	b.n	801c36a <arm_depthwise_conv_wrapper_s8+0xc4>
                                               output);
        }
        else
#endif
        {
            status = arm_depthwise_conv_s8_opt(ctx,
 801c310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c312:	9306      	str	r3, [sp, #24]
 801c314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c316:	9305      	str	r3, [sp, #20]
 801c318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c31a:	9304      	str	r3, [sp, #16]
 801c31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c31e:	9303      	str	r3, [sp, #12]
 801c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c322:	9302      	str	r3, [sp, #8]
 801c324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c326:	9301      	str	r3, [sp, #4]
 801c328:	6a3b      	ldr	r3, [r7, #32]
 801c32a:	9300      	str	r3, [sp, #0]
 801c32c:	683b      	ldr	r3, [r7, #0]
 801c32e:	687a      	ldr	r2, [r7, #4]
 801c330:	68b9      	ldr	r1, [r7, #8]
 801c332:	68f8      	ldr	r0, [r7, #12]
 801c334:	f7fe fdda 	bl	801aeec <arm_depthwise_conv_s8_opt>
 801c338:	4603      	mov	r3, r0
 801c33a:	75fb      	strb	r3, [r7, #23]
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1))
 801c33c:	e015      	b.n	801c36a <arm_depthwise_conv_wrapper_s8+0xc4>
                                               output);
        }
    }
    else
    {
        status = arm_depthwise_conv_s8(ctx,
 801c33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c340:	9306      	str	r3, [sp, #24]
 801c342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c344:	9305      	str	r3, [sp, #20]
 801c346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c348:	9304      	str	r3, [sp, #16]
 801c34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c34c:	9303      	str	r3, [sp, #12]
 801c34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c350:	9302      	str	r3, [sp, #8]
 801c352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c354:	9301      	str	r3, [sp, #4]
 801c356:	6a3b      	ldr	r3, [r7, #32]
 801c358:	9300      	str	r3, [sp, #0]
 801c35a:	683b      	ldr	r3, [r7, #0]
 801c35c:	687a      	ldr	r2, [r7, #4]
 801c35e:	68b9      	ldr	r1, [r7, #8]
 801c360:	68f8      	ldr	r0, [r7, #12]
 801c362:	f7fe fce9 	bl	801ad38 <arm_depthwise_conv_s8>
 801c366:	4603      	mov	r3, r0
 801c368:	75fb      	strb	r3, [r7, #23]
                                       output_dims,
                                       output);
    }

    /* Return to application */
    return status;
 801c36a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c36e:	4618      	mov	r0, r3
 801c370:	3718      	adds	r7, #24
 801c372:	46bd      	mov	sp, r7
 801c374:	bd80      	pop	{r7, pc}

0801c376 <arm_depthwise_conv_wrapper_s8_get_buffer_size>:

int32_t arm_depthwise_conv_wrapper_s8_get_buffer_size(const cmsis_nn_dw_conv_params *dw_conv_params,
                                                      const cmsis_nn_dims *input_dims,
                                                      const cmsis_nn_dims *filter_dims,
                                                      const cmsis_nn_dims *output_dims)
{
 801c376:	b580      	push	{r7, lr}
 801c378:	b086      	sub	sp, #24
 801c37a:	af00      	add	r7, sp, #0
 801c37c:	60f8      	str	r0, [r7, #12]
 801c37e:	60b9      	str	r1, [r7, #8]
 801c380:	607a      	str	r2, [r7, #4]
 801c382:	603b      	str	r3, [r7, #0]
    (void)dw_conv_params;
    int32_t size = 0;
 801c384:	2300      	movs	r3, #0
 801c386:	617b      	str	r3, [r7, #20]

    if (input_dims->c == output_dims->c && input_dims->n == 1)
 801c388:	68bb      	ldr	r3, [r7, #8]
 801c38a:	68da      	ldr	r2, [r3, #12]
 801c38c:	683b      	ldr	r3, [r7, #0]
 801c38e:	68db      	ldr	r3, [r3, #12]
 801c390:	429a      	cmp	r2, r3
 801c392:	d108      	bne.n	801c3a6 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0x30>
 801c394:	68bb      	ldr	r3, [r7, #8]
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	2b01      	cmp	r3, #1
 801c39a:	d104      	bne.n	801c3a6 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0x30>
    {
        size = arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims);
 801c39c:	6879      	ldr	r1, [r7, #4]
 801c39e:	68b8      	ldr	r0, [r7, #8]
 801c3a0:	f7ff ff6b 	bl	801c27a <arm_depthwise_conv_s8_opt_get_buffer_size>
 801c3a4:	6178      	str	r0, [r7, #20]
    }

    return size;
 801c3a6:	697b      	ldr	r3, [r7, #20]
}
 801c3a8:	4618      	mov	r0, r3
 801c3aa:	3718      	adds	r7, #24
 801c3ac:	46bd      	mov	sp, r7
 801c3ae:	bd80      	pop	{r7, pc}

0801c3b0 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 801c3b0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801c3b4:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	f107 0434 	add.w	r4, r7, #52	; 0x34
 801c3be:	6020      	str	r0, [r4, #0]
 801c3c0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801c3c4:	6001      	str	r1, [r0, #0]
 801c3c6:	4611      	mov	r1, r2
 801c3c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801c3cc:	6013      	str	r3, [r2, #0]
 801c3ce:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 801c3d2:	460b      	mov	r3, r1
 801c3d4:	8013      	strh	r3, [r2, #0]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 801c3d6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801c3da:	881b      	ldrh	r3, [r3, #0]
 801c3dc:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 801c3e0:	4413      	add	r3, r2
 801c3e2:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    const int32_t *bias = output_bias;
 801c3e6:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 801c3ea:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

    uint16_t row_count = output_ch / 2;
 801c3ee:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801c3f2:	881b      	ldrh	r3, [r3, #0]
 801c3f4:	085b      	lsrs	r3, r3, #1
 801c3f6:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
    const q7_t *ip_a0 = input_a;
 801c3fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    /* this loop over rows in A */
    while (row_count)
 801c404:	f000 bf0e 	b.w	801d224 <arm_nn_mat_mult_kernel_s8_s16+0xe74>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 801c408:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 801c40c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c410:	681b      	ldr	r3, [r3, #0]
 801c412:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 801c414:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c418:	681a      	ldr	r2, [r3, #0]
 801c41a:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801c41e:	005b      	lsls	r3, r3, #1
 801c420:	441a      	add	r2, r3
 801c422:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801c426:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 801c428:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801c42c:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 801c430:	4413      	add	r3, r2
 801c432:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

        /* Init accumulator with bias for channel N and N + 1 */
        q31_t ch_0_out_0 = *bias;
 801c436:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        q31_t ch_0_out_1 = *bias++;
 801c440:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801c444:	1d1a      	adds	r2, r3, #4
 801c446:	f8c7 2410 	str.w	r2, [r7, #1040]	; 0x410
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        q31_t ch_1_out_0 = *bias;
 801c450:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        q31_t ch_1_out_1 = *bias++;
 801c45a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801c45e:	1d1a      	adds	r2, r3, #4
 801c460:	f8c7 2410 	str.w	r2, [r7, #1040]	; 0x410
 801c464:	681b      	ldr	r3, [r3, #0]
 801c466:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4

        uint16_t col_count = num_col_a / 4;
 801c46a:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801c46e:	089b      	lsrs	r3, r3, #2
 801c470:	f8a7 33f2 	strh.w	r3, [r7, #1010]	; 0x3f2
        /* accumulate over the vector */
        while (col_count)
 801c474:	e2c5      	b.n	801ca02 <arm_nn_mat_mult_kernel_s8_s16+0x652>
 801c476:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801c47a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 801c47e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801c480:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	461a      	mov	r2, r3
 801c48c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c490:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801c492:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	1d1a      	adds	r2, r3, #4
 801c49c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	601a      	str	r2, [r3, #0]
    return (val);
 801c4a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c4a8:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02, a11, a12;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801c4aa:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 801c4ae:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801c4b2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801c4b6:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801c4b8:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801c4bc:	681b      	ldr	r3, [r3, #0]
 801c4be:	681b      	ldr	r3, [r3, #0]
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	461a      	mov	r2, r3
 801c4c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c4c8:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801c4ca:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	1d1a      	adds	r2, r3, #4
 801c4d4:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801c4d8:	681b      	ldr	r3, [r3, #0]
 801c4da:	601a      	str	r2, [r3, #0]
    return (val);
 801c4dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c4e0:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801c4e2:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 801c4e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c4ea:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 801c4ee:	601a      	str	r2, [r3, #0]
 801c4f0:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801c4f4:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801c4f8:	601a      	str	r2, [r3, #0]
 801c4fa:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 801c4fe:	f107 0298 	add.w	r2, r7, #152	; 0x98
 801c502:	601a      	str	r2, [r3, #0]
 801c504:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 801c508:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801c50c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801c50e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	681b      	ldr	r3, [r3, #0]
 801c518:	461a      	mov	r2, r3
 801c51a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c51e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c520:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	1d1a      	adds	r2, r3, #4
 801c52a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 801c52e:	681b      	ldr	r3, [r3, #0]
 801c530:	601a      	str	r2, [r3, #0]
    return (val);
 801c532:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c536:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801c538:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801c53c:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 801c53e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801c542:	681a      	ldr	r2, [r3, #0]
 801c544:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801c548:	601a      	str	r2, [r3, #0]
 801c54a:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 801c54e:	2208      	movs	r2, #8
 801c550:	601a      	str	r2, [r3, #0]
 801c552:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 801c556:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	6013      	str	r3, [r2, #0]
 801c55e:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 801c562:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c56a:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 801c56e:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	f003 031f 	and.w	r3, r3, #31
 801c578:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c57a:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	2b00      	cmp	r3, #0
 801c582:	d103      	bne.n	801c58c <arm_nn_mat_mult_kernel_s8_s16+0x1dc>
    return op1;
 801c584:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	e007      	b.n	801c59c <arm_nn_mat_mult_kernel_s8_s16+0x1ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c58c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801c590:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 801c594:	681a      	ldr	r2, [r3, #0]
 801c596:	680b      	ldr	r3, [r1, #0]
 801c598:	fa62 f303 	ror.w	r3, r2, r3
 801c59c:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 801c5a0:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c5a2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	fa2f f283 	sxtb16	r2, r3
 801c5ac:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801c5b0:	601a      	str	r2, [r3, #0]
  return(result);
 801c5b2:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801c5b6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c5b8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801c5bc:	601a      	str	r2, [r3, #0]
  return result;
 801c5be:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801c5c2:	681a      	ldr	r2, [r3, #0]
 801c5c4:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801c5c8:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 801c5ca:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801c5ce:	681a      	ldr	r2, [r3, #0]
 801c5d0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801c5d4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c5d6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	fa2f f283 	sxtb16	r2, r3
 801c5e0:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 801c5e4:	601a      	str	r2, [r3, #0]
  return(result);
 801c5e6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 801c5ea:	681a      	ldr	r2, [r3, #0]
 801c5ec:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801c5f0:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801c5f2:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 801c5f6:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	6013      	str	r3, [r2, #0]
 801c5fe:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 801c602:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	6013      	str	r3, [r2, #0]
 801c60a:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801c60e:	681a      	ldr	r2, [r3, #0]
 801c610:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 801c61a:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 801c61e:	601a      	str	r2, [r3, #0]
 801c620:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	461a      	mov	r2, r3
 801c628:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801c630:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 801c634:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	6013      	str	r3, [r2, #0]
 801c63c:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 801c640:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801c644:	681b      	ldr	r3, [r3, #0]
 801c646:	6013      	str	r3, [r2, #0]
 801c648:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801c64c:	681a      	ldr	r2, [r3, #0]
 801c64e:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801c658:	f507 7326 	add.w	r3, r7, #664	; 0x298
 801c65c:	601a      	str	r2, [r3, #0]
 801c65e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	461a      	mov	r2, r3
 801c666:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	601a      	str	r2, [r3, #0]
    return source;
 801c66e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c672:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 801c674:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 801c678:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801c67c:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 801c680:	601a      	str	r2, [r3, #0]
 801c682:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801c686:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 801c68a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c68e:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 801c692:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801c696:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
    memcpy(&val, *in_q7, 4);
 801c69a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	681b      	ldr	r3, [r3, #0]
 801c6a2:	461a      	mov	r2, r3
 801c6a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c6a8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c6aa:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	1d1a      	adds	r2, r3, #4
 801c6b2:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 801c6b6:	601a      	str	r2, [r3, #0]
    return (val);
 801c6b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c6bc:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801c6be:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 801c6c2:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 801c6c6:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 801c6ca:	2308      	movs	r3, #8
 801c6cc:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 801c6d0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801c6d4:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 801c6d8:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 801c6dc:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
  op2 %= 32U;
 801c6e0:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801c6e4:	f003 031f 	and.w	r3, r3, #31
 801c6e8:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
  if (op2 == 0U)
 801c6ec:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d102      	bne.n	801c6fa <arm_nn_mat_mult_kernel_s8_s16+0x34a>
    return op1;
 801c6f4:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801c6f8:	e005      	b.n	801c706 <arm_nn_mat_mult_kernel_s8_s16+0x356>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c6fa:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 801c6fe:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801c702:	fa62 f303 	ror.w	r3, r2, r3
 801c706:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c70a:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 801c70e:	fa2f f283 	sxtb16	r2, r3
 801c712:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801c716:	601a      	str	r2, [r3, #0]
  return(result);
 801c718:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801c71c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c71e:	f507 7345 	add.w	r3, r7, #788	; 0x314
 801c722:	601a      	str	r2, [r3, #0]
  return result;
 801c724:	f507 7345 	add.w	r3, r7, #788	; 0x314
 801c728:	681a      	ldr	r2, [r3, #0]
 801c72a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 801c72e:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 801c730:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 801c734:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 801c738:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c73a:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	fa2f f283 	sxtb16	r2, r3
 801c744:	f507 7342 	add.w	r3, r7, #776	; 0x308
 801c748:	601a      	str	r2, [r3, #0]
  return(result);
 801c74a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 801c74e:	681a      	ldr	r2, [r3, #0]
 801c750:	f507 7341 	add.w	r3, r7, #772	; 0x304
 801c754:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801c756:	f507 7240 	add.w	r2, r7, #768	; 0x300
 801c75a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	6013      	str	r3, [r2, #0]
 801c762:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 801c766:	f507 7341 	add.w	r3, r7, #772	; 0x304
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	6013      	str	r3, [r2, #0]
 801c76e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 801c772:	681a      	ldr	r2, [r3, #0]
 801c774:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 801c77e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 801c782:	601a      	str	r2, [r3, #0]
 801c784:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	461a      	mov	r2, r3
 801c78c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801c790:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801c792:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 801c796:	f507 7341 	add.w	r3, r7, #772	; 0x304
 801c79a:	681b      	ldr	r3, [r3, #0]
 801c79c:	6013      	str	r3, [r2, #0]
 801c79e:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 801c7a2:	f507 7344 	add.w	r3, r7, #784	; 0x310
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	6013      	str	r3, [r2, #0]
 801c7aa:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 801c7ae:	681a      	ldr	r2, [r3, #0]
 801c7b0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801c7b4:	681b      	ldr	r3, [r3, #0]
 801c7b6:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801c7ba:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 801c7be:	601a      	str	r2, [r3, #0]
 801c7c0:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	461a      	mov	r2, r3
 801c7c8:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 801c7cc:	601a      	str	r2, [r3, #0]
    return source;
 801c7ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801c7d2:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 801c7d4:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 801c7d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	4619      	mov	r1, r3
 801c7e0:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801c7e4:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 801c7e8:	f8c7 134c 	str.w	r1, [r7, #844]	; 0x34c
 801c7ec:	f8c7 2348 	str.w	r2, [r7, #840]	; 0x348
 801c7f0:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c7f4:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 801c7f8:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 801c7fc:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 801c800:	fb22 3301 	smlad	r3, r2, r1, r3
 801c804:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
  return(result);
 801c808:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 801c80c:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 801c810:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801c814:	681b      	ldr	r3, [r3, #0]
 801c816:	4619      	mov	r1, r3
 801c818:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 801c81c:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 801c820:	f8c7 135c 	str.w	r1, [r7, #860]	; 0x35c
 801c824:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801c828:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c82c:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 801c830:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 801c834:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 801c838:	fb22 3301 	smlad	r3, r2, r1, r3
 801c83c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
  return(result);
 801c840:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 801c844:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
            ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 801c848:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	4619      	mov	r1, r3
 801c850:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801c854:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 801c858:	f8c7 136c 	str.w	r1, [r7, #876]	; 0x36c
 801c85c:	f8c7 2368 	str.w	r2, [r7, #872]	; 0x368
 801c860:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c864:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 801c868:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 801c86c:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 801c870:	fb22 3301 	smlad	r3, r2, r1, r3
 801c874:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
  return(result);
 801c878:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801c87c:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
            ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 801c880:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	4619      	mov	r1, r3
 801c888:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 801c88c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 801c890:	f8c7 137c 	str.w	r1, [r7, #892]	; 0x37c
 801c894:	f8c7 2378 	str.w	r2, [r7, #888]	; 0x378
 801c898:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c89c:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 801c8a0:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 801c8a4:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 801c8a8:	fb22 3301 	smlad	r3, r2, r1, r3
 801c8ac:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
  return(result);
 801c8b0:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 801c8b4:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 801c8b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c8bc:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
    memcpy(&val, *in_q15, 4);
 801c8c0:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	461a      	mov	r2, r3
 801c8ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c8ce:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801c8d0:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	1d1a      	adds	r2, r3, #4
 801c8d8:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 801c8dc:	601a      	str	r2, [r3, #0]
    return (val);
 801c8de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c8e2:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801c8e4:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 801c8e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801c8ec:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
    memcpy(&val, *in_q15, 4);
 801c8f0:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	681b      	ldr	r3, [r3, #0]
 801c8f8:	461a      	mov	r2, r3
 801c8fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c8fe:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801c900:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	1d1a      	adds	r2, r3, #4
 801c908:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 801c90c:	601a      	str	r2, [r3, #0]
    return (val);
 801c90e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c912:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801c914:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8

            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 801c918:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	4619      	mov	r1, r3
 801c920:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801c924:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 801c928:	f8c7 1394 	str.w	r1, [r7, #916]	; 0x394
 801c92c:	f8c7 2390 	str.w	r2, [r7, #912]	; 0x390
 801c930:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c934:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 801c938:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 801c93c:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 801c940:	fb22 3301 	smlad	r3, r2, r1, r3
 801c944:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
  return(result);
 801c948:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 801c94c:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 801c950:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	4619      	mov	r1, r3
 801c958:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 801c95c:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 801c960:	f8c7 13a4 	str.w	r1, [r7, #932]	; 0x3a4
 801c964:	f8c7 23a0 	str.w	r2, [r7, #928]	; 0x3a0
 801c968:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c96c:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801c970:	f8d7 13a0 	ldr.w	r1, [r7, #928]	; 0x3a0
 801c974:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 801c978:	fb22 3301 	smlad	r3, r2, r1, r3
 801c97c:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
  return(result);
 801c980:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 801c984:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 801c988:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	4619      	mov	r1, r3
 801c990:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801c994:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 801c998:	f8c7 13b4 	str.w	r1, [r7, #948]	; 0x3b4
 801c99c:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 801c9a0:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c9a4:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 801c9a8:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 801c9ac:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 801c9b0:	fb22 3301 	smlad	r3, r2, r1, r3
 801c9b4:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
  return(result);
 801c9b8:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 801c9bc:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 801c9c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	4619      	mov	r1, r3
 801c9c8:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 801c9cc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 801c9d0:	f8c7 13c4 	str.w	r1, [r7, #964]	; 0x3c4
 801c9d4:	f8c7 23c0 	str.w	r2, [r7, #960]	; 0x3c0
 801c9d8:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c9dc:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801c9e0:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 801c9e4:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 801c9e8:	fb22 3301 	smlad	r3, r2, r1, r3
 801c9ec:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
  return(result);
 801c9f0:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 801c9f4:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4

            col_count--;
 801c9f8:	f8b7 33f2 	ldrh.w	r3, [r7, #1010]	; 0x3f2
 801c9fc:	3b01      	subs	r3, #1
 801c9fe:	f8a7 33f2 	strh.w	r3, [r7, #1010]	; 0x3f2
        while (col_count)
 801ca02:	f8b7 33f2 	ldrh.w	r3, [r7, #1010]	; 0x3f2
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	f47f ad35 	bne.w	801c476 <arm_nn_mat_mult_kernel_s8_s16+0xc6>
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 801ca0c:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801ca10:	f003 0303 	and.w	r3, r3, #3
 801ca14:	f8a7 33f2 	strh.w	r3, [r7, #1010]	; 0x3f2
        while (col_count)
 801ca18:	e054      	b.n	801cac4 <arm_nn_mat_mult_kernel_s8_s16+0x714>
        {
            q7_t a0 = *ip_a0++;
 801ca1a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 801ca1e:	1c5a      	adds	r2, r3, #1
 801ca20:	f8c7 2408 	str.w	r2, [r7, #1032]	; 0x408
 801ca24:	781b      	ldrb	r3, [r3, #0]
 801ca26:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
            q15_t b0 = *ip_b0++;
 801ca2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801ca2e:	681a      	ldr	r2, [r3, #0]
 801ca30:	1c91      	adds	r1, r2, #2
 801ca32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801ca36:	6019      	str	r1, [r3, #0]
 801ca38:	8813      	ldrh	r3, [r2, #0]
 801ca3a:	f8a7 33d4 	strh.w	r3, [r7, #980]	; 0x3d4
            q7_t a1 = *ip_a1++;
 801ca3e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 801ca42:	1c5a      	adds	r2, r3, #1
 801ca44:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 801ca48:	781b      	ldrb	r3, [r3, #0]
 801ca4a:	f887 33d3 	strb.w	r3, [r7, #979]	; 0x3d3
            q15_t b1 = *ip_b1++;
 801ca4e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801ca52:	681a      	ldr	r2, [r3, #0]
 801ca54:	1c91      	adds	r1, r2, #2
 801ca56:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801ca5a:	6019      	str	r1, [r3, #0]
 801ca5c:	8813      	ldrh	r3, [r2, #0]
 801ca5e:	f8a7 33d0 	strh.w	r3, [r7, #976]	; 0x3d0

            ch_0_out_0 += a0 * b0;
 801ca62:	f997 33d7 	ldrsb.w	r3, [r7, #983]	; 0x3d7
 801ca66:	f9b7 23d4 	ldrsh.w	r2, [r7, #980]	; 0x3d4
 801ca6a:	fb02 f303 	mul.w	r3, r2, r3
 801ca6e:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 801ca72:	4413      	add	r3, r2
 801ca74:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
            ch_0_out_1 += a0 * b1;
 801ca78:	f997 33d7 	ldrsb.w	r3, [r7, #983]	; 0x3d7
 801ca7c:	f9b7 23d0 	ldrsh.w	r2, [r7, #976]	; 0x3d0
 801ca80:	fb02 f303 	mul.w	r3, r2, r3
 801ca84:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 801ca88:	4413      	add	r3, r2
 801ca8a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
            ch_1_out_0 += a1 * b0;
 801ca8e:	f997 33d3 	ldrsb.w	r3, [r7, #979]	; 0x3d3
 801ca92:	f9b7 23d4 	ldrsh.w	r2, [r7, #980]	; 0x3d4
 801ca96:	fb02 f303 	mul.w	r3, r2, r3
 801ca9a:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 801ca9e:	4413      	add	r3, r2
 801caa0:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
            ch_1_out_1 += a1 * b1;
 801caa4:	f997 33d3 	ldrsb.w	r3, [r7, #979]	; 0x3d3
 801caa8:	f9b7 23d0 	ldrsh.w	r2, [r7, #976]	; 0x3d0
 801caac:	fb02 f303 	mul.w	r3, r2, r3
 801cab0:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 801cab4:	4413      	add	r3, r2
 801cab6:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
            col_count--;
 801caba:	f8b7 33f2 	ldrh.w	r3, [r7, #1010]	; 0x3f2
 801cabe:	3b01      	subs	r3, #1
 801cac0:	f8a7 33f2 	strh.w	r3, [r7, #1010]	; 0x3f2
        while (col_count)
 801cac4:	f8b7 33f2 	ldrh.w	r3, [r7, #1010]	; 0x3f2
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d1a6      	bne.n	801ca1a <arm_nn_mat_mult_kernel_s8_s16+0x66a>
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 801cacc:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801cad0:	6818      	ldr	r0, [r3, #0]
 801cad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	6819      	ldr	r1, [r3, #0]
 801cada:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 801cade:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 801cae2:	6013      	str	r3, [r2, #0]
 801cae4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801cae8:	6018      	str	r0, [r3, #0]
 801caea:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801caee:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801caf0:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801caf4:	681b      	ldr	r3, [r3, #0]
 801caf6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801cafa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	fa03 f202 	lsl.w	r2, r3, r2
 801cb04:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801cb08:	601a      	str	r2, [r3, #0]
 801cb0a:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 801cb0e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801cb12:	681b      	ldr	r3, [r3, #0]
 801cb14:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801cb16:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801cb1a:	2200      	movs	r2, #0
 801cb1c:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801cb1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cb22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801cb26:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801cb28:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cb2c:	2200      	movs	r2, #0
 801cb2e:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801cb30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801cb34:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	4618      	mov	r0, r3
 801cb3c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801cb40:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	461a      	mov	r2, r3
 801cb48:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801cb4c:	fb02 f501 	mul.w	r5, r2, r1
 801cb50:	fb00 f403 	mul.w	r4, r0, r3
 801cb54:	442c      	add	r4, r5
 801cb56:	fba0 2302 	umull	r2, r3, r0, r2
 801cb5a:	18e1      	adds	r1, r4, r3
 801cb5c:	460b      	mov	r3, r1
 801cb5e:	eb18 0102 	adds.w	r1, r8, r2
 801cb62:	60b9      	str	r1, [r7, #8]
 801cb64:	eb49 0303 	adc.w	r3, r9, r3
 801cb68:	60fb      	str	r3, [r7, #12]
 801cb6a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801cb6e:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
    result = (int32_t)(mult.long_long >> 31);
 801cb72:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801cb76:	f04f 0000 	mov.w	r0, #0
 801cb7a:	f04f 0100 	mov.w	r1, #0
 801cb7e:	0fd0      	lsrs	r0, r2, #31
 801cb80:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801cb84:	17d9      	asrs	r1, r3, #31
 801cb86:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 801cb8a:	4603      	mov	r3, r0
 801cb8c:	6013      	str	r3, [r2, #0]
    return result;
 801cb8e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801cb92:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cb94:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801cb98:	681b      	ldr	r3, [r3, #0]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	dc04      	bgt.n	801cba8 <arm_nn_mat_mult_kernel_s8_s16+0x7f8>
 801cb9e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801cba2:	681b      	ldr	r3, [r3, #0]
 801cba4:	425a      	negs	r2, r3
 801cba6:	e000      	b.n	801cbaa <arm_nn_mat_mult_kernel_s8_s16+0x7fa>
 801cba8:	2200      	movs	r2, #0
 801cbaa:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801cbae:	6019      	str	r1, [r3, #0]
 801cbb0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801cbb4:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801cbb6:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801cbba:	2200      	movs	r2, #0
 801cbbc:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801cbbe:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801cbc2:	2201      	movs	r2, #1
 801cbc4:	681b      	ldr	r3, [r3, #0]
 801cbc6:	fa02 f303 	lsl.w	r3, r2, r3
 801cbca:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 801cbce:	3b01      	subs	r3, #1
 801cbd0:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801cbd2:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 801cbd6:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 801cbda:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801cbde:	6812      	ldr	r2, [r2, #0]
 801cbe0:	681b      	ldr	r3, [r3, #0]
 801cbe2:	4013      	ands	r3, r2
 801cbe4:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801cbe6:	f507 71ee 	add.w	r1, r7, #476	; 0x1dc
 801cbea:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 801cbee:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801cbf2:	6812      	ldr	r2, [r2, #0]
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	fa42 f303 	asr.w	r3, r2, r3
 801cbfa:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801cbfc:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 801cc00:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	105b      	asrs	r3, r3, #1
 801cc08:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801cc0a:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	da06      	bge.n	801cc22 <arm_nn_mat_mult_kernel_s8_s16+0x872>
        threshold++;
 801cc14:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 801cc18:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801cc1c:	681b      	ldr	r3, [r3, #0]
 801cc1e:	3301      	adds	r3, #1
 801cc20:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801cc22:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801cc26:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 801cc2a:	681a      	ldr	r2, [r3, #0]
 801cc2c:	680b      	ldr	r3, [r1, #0]
 801cc2e:	429a      	cmp	r2, r3
 801cc30:	dd06      	ble.n	801cc40 <arm_nn_mat_mult_kernel_s8_s16+0x890>
        result++;
 801cc32:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801cc36:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801cc3a:	681b      	ldr	r3, [r3, #0]
 801cc3c:	3301      	adds	r3, #1
 801cc3e:	6013      	str	r3, [r2, #0]
    return result;
 801cc40:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801cc44:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cc46:	bf00      	nop
 801cc48:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        ch_0_out_0 += out_offset;
 801cc4c:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 801cc50:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801cc54:	4413      	add	r3, r2
 801cc56:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801cc5a:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 801cc5e:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 801cc62:	4293      	cmp	r3, r2
 801cc64:	bfb8      	it	lt
 801cc66:	4613      	movlt	r3, r2
 801cc68:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801cc6c:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 801cc70:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 801cc74:	4293      	cmp	r3, r2
 801cc76:	bfa8      	it	ge
 801cc78:	4613      	movge	r3, r2
 801cc7a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        *out_0++ = (q7_t)ch_0_out_0;
 801cc7e:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 801cc82:	1c53      	adds	r3, r2, #1
 801cc84:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 801cc88:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 801cc8c:	b25b      	sxtb	r3, r3
 801cc8e:	7013      	strb	r3, [r2, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 801cc90:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801cc94:	6818      	ldr	r0, [r3, #0]
 801cc96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cc9a:	681b      	ldr	r3, [r3, #0]
 801cc9c:	6819      	ldr	r1, [r3, #0]
 801cc9e:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 801cca2:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 801cca6:	6013      	str	r3, [r2, #0]
 801cca8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801ccac:	6018      	str	r0, [r3, #0]
 801ccae:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801ccb2:	6019      	str	r1, [r3, #0]
 801ccb4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801ccb8:	681b      	ldr	r3, [r3, #0]
 801ccba:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801ccbe:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	fa03 f202 	lsl.w	r2, r3, r2
 801ccc8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801cccc:	601a      	str	r2, [r3, #0]
 801ccce:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 801ccd2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801ccd6:	681b      	ldr	r3, [r3, #0]
 801ccd8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801ccda:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801ccde:	2200      	movs	r2, #0
 801cce0:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801cce2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801ccea:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801ccec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ccf0:	2200      	movs	r2, #0
 801ccf2:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801ccf4:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 801ccf8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	4618      	mov	r0, r3
 801cd00:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801cd04:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	461a      	mov	r2, r3
 801cd0c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801cd10:	fb02 f501 	mul.w	r5, r2, r1
 801cd14:	fb00 f403 	mul.w	r4, r0, r3
 801cd18:	442c      	add	r4, r5
 801cd1a:	fba0 2302 	umull	r2, r3, r0, r2
 801cd1e:	18e1      	adds	r1, r4, r3
 801cd20:	460b      	mov	r3, r1
 801cd22:	eb18 0102 	adds.w	r1, r8, r2
 801cd26:	6139      	str	r1, [r7, #16]
 801cd28:	eb49 0303 	adc.w	r3, r9, r3
 801cd2c:	617b      	str	r3, [r7, #20]
 801cd2e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801cd32:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
    result = (int32_t)(mult.long_long >> 31);
 801cd36:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801cd3a:	f04f 0000 	mov.w	r0, #0
 801cd3e:	f04f 0100 	mov.w	r1, #0
 801cd42:	0fd0      	lsrs	r0, r2, #31
 801cd44:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801cd48:	17d9      	asrs	r1, r3, #31
 801cd4a:	f507 7206 	add.w	r2, r7, #536	; 0x218
 801cd4e:	4603      	mov	r3, r0
 801cd50:	6013      	str	r3, [r2, #0]
    return result;
 801cd52:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801cd56:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cd58:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801cd5c:	681b      	ldr	r3, [r3, #0]
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	dc04      	bgt.n	801cd6c <arm_nn_mat_mult_kernel_s8_s16+0x9bc>
 801cd62:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801cd66:	681b      	ldr	r3, [r3, #0]
 801cd68:	425a      	negs	r2, r3
 801cd6a:	e000      	b.n	801cd6e <arm_nn_mat_mult_kernel_s8_s16+0x9be>
 801cd6c:	2200      	movs	r2, #0
 801cd6e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801cd72:	6019      	str	r1, [r3, #0]
 801cd74:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801cd78:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801cd7a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801cd7e:	2200      	movs	r2, #0
 801cd80:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801cd82:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801cd86:	2201      	movs	r2, #1
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	fa02 f303 	lsl.w	r3, r2, r3
 801cd8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801cd92:	3b01      	subs	r3, #1
 801cd94:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801cd96:	f507 7101 	add.w	r1, r7, #516	; 0x204
 801cd9a:	f507 7205 	add.w	r2, r7, #532	; 0x214
 801cd9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801cda2:	6812      	ldr	r2, [r2, #0]
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	4013      	ands	r3, r2
 801cda8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801cdaa:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 801cdae:	f507 7205 	add.w	r2, r7, #532	; 0x214
 801cdb2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801cdb6:	6812      	ldr	r2, [r2, #0]
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	fa42 f303 	asr.w	r3, r2, r3
 801cdbe:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801cdc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801cdc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801cdc8:	681b      	ldr	r3, [r3, #0]
 801cdca:	105b      	asrs	r3, r3, #1
 801cdcc:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801cdce:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801cdd2:	681b      	ldr	r3, [r3, #0]
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	da06      	bge.n	801cde6 <arm_nn_mat_mult_kernel_s8_s16+0xa36>
        threshold++;
 801cdd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801cddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801cde0:	681b      	ldr	r3, [r3, #0]
 801cde2:	3301      	adds	r3, #1
 801cde4:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801cde6:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801cdea:	f507 7100 	add.w	r1, r7, #512	; 0x200
 801cdee:	681a      	ldr	r2, [r3, #0]
 801cdf0:	680b      	ldr	r3, [r1, #0]
 801cdf2:	429a      	cmp	r2, r3
 801cdf4:	dd06      	ble.n	801ce04 <arm_nn_mat_mult_kernel_s8_s16+0xa54>
        result++;
 801cdf6:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 801cdfa:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801cdfe:	681b      	ldr	r3, [r3, #0]
 801ce00:	3301      	adds	r3, #1
 801ce02:	6013      	str	r3, [r2, #0]
    return result;
 801ce04:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801ce08:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ce0a:	bf00      	nop
 801ce0c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        ch_0_out_1 += out_offset;
 801ce10:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 801ce14:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801ce18:	4413      	add	r3, r2
 801ce1a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801ce1e:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 801ce22:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 801ce26:	4293      	cmp	r3, r2
 801ce28:	bfb8      	it	lt
 801ce2a:	4613      	movlt	r3, r2
 801ce2c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801ce30:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 801ce34:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 801ce38:	4293      	cmp	r3, r2
 801ce3a:	bfa8      	it	ge
 801ce3c:	4613      	movge	r3, r2
 801ce3e:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        *out_1++ = (q7_t)ch_0_out_1;
 801ce42:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801ce46:	1c53      	adds	r3, r2, #1
 801ce48:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 801ce4c:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 801ce50:	b25b      	sxtb	r3, r3
 801ce52:	7013      	strb	r3, [r2, #0]
        out_mult++;
 801ce54:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801ce58:	3304      	adds	r3, #4
 801ce5a:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
        out_shift++;
 801ce5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ce62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	3304      	adds	r3, #4
 801ce6a:	6013      	str	r3, [r2, #0]

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 801ce6c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801ce70:	6818      	ldr	r0, [r3, #0]
 801ce72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	6819      	ldr	r1, [r3, #0]
 801ce7a:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 801ce7e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 801ce82:	6013      	str	r3, [r2, #0]
 801ce84:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801ce88:	6018      	str	r0, [r3, #0]
 801ce8a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801ce8e:	6019      	str	r1, [r3, #0]
 801ce90:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801ce94:	681b      	ldr	r3, [r3, #0]
 801ce96:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801ce9a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	fa03 f202 	lsl.w	r2, r3, r2
 801cea4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801cea8:	601a      	str	r2, [r3, #0]
 801ceaa:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 801ceae:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801ceb6:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801ceba:	2200      	movs	r2, #0
 801cebc:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801cebe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801cec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801cec6:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801cec8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801cecc:	2200      	movs	r2, #0
 801cece:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801ced0:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 801ced4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	4618      	mov	r0, r3
 801cedc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801cee0:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	461a      	mov	r2, r3
 801cee8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801ceec:	fb02 f501 	mul.w	r5, r2, r1
 801cef0:	fb00 f403 	mul.w	r4, r0, r3
 801cef4:	442c      	add	r4, r5
 801cef6:	fba0 2302 	umull	r2, r3, r0, r2
 801cefa:	18e1      	adds	r1, r4, r3
 801cefc:	460b      	mov	r3, r1
 801cefe:	eb18 0102 	adds.w	r1, r8, r2
 801cf02:	61b9      	str	r1, [r7, #24]
 801cf04:	eb49 0303 	adc.w	r3, r9, r3
 801cf08:	61fb      	str	r3, [r7, #28]
 801cf0a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801cf0e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    result = (int32_t)(mult.long_long >> 31);
 801cf12:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801cf16:	f04f 0000 	mov.w	r0, #0
 801cf1a:	f04f 0100 	mov.w	r1, #0
 801cf1e:	0fd0      	lsrs	r0, r2, #31
 801cf20:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801cf24:	17d9      	asrs	r1, r3, #31
 801cf26:	f507 7212 	add.w	r2, r7, #584	; 0x248
 801cf2a:	4603      	mov	r3, r0
 801cf2c:	6013      	str	r3, [r2, #0]
    return result;
 801cf2e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801cf32:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cf34:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	dc04      	bgt.n	801cf48 <arm_nn_mat_mult_kernel_s8_s16+0xb98>
 801cf3e:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	425a      	negs	r2, r3
 801cf46:	e000      	b.n	801cf4a <arm_nn_mat_mult_kernel_s8_s16+0xb9a>
 801cf48:	2200      	movs	r2, #0
 801cf4a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801cf4e:	6019      	str	r1, [r3, #0]
 801cf50:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801cf54:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801cf56:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801cf5a:	2200      	movs	r2, #0
 801cf5c:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801cf5e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801cf62:	2201      	movs	r2, #1
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	fa02 f303 	lsl.w	r3, r2, r3
 801cf6a:	f507 720e 	add.w	r2, r7, #568	; 0x238
 801cf6e:	3b01      	subs	r3, #1
 801cf70:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801cf72:	f507 710d 	add.w	r1, r7, #564	; 0x234
 801cf76:	f507 7211 	add.w	r2, r7, #580	; 0x244
 801cf7a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801cf7e:	6812      	ldr	r2, [r2, #0]
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	4013      	ands	r3, r2
 801cf84:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801cf86:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 801cf8a:	f507 7211 	add.w	r2, r7, #580	; 0x244
 801cf8e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801cf92:	6812      	ldr	r2, [r2, #0]
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	fa42 f303 	asr.w	r3, r2, r3
 801cf9a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801cf9c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 801cfa0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801cfa4:	681b      	ldr	r3, [r3, #0]
 801cfa6:	105b      	asrs	r3, r3, #1
 801cfa8:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801cfaa:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801cfae:	681b      	ldr	r3, [r3, #0]
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	da06      	bge.n	801cfc2 <arm_nn_mat_mult_kernel_s8_s16+0xc12>
        threshold++;
 801cfb4:	f507 720c 	add.w	r2, r7, #560	; 0x230
 801cfb8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	3301      	adds	r3, #1
 801cfc0:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801cfc2:	f507 730d 	add.w	r3, r7, #564	; 0x234
 801cfc6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 801cfca:	681a      	ldr	r2, [r3, #0]
 801cfcc:	680b      	ldr	r3, [r1, #0]
 801cfce:	429a      	cmp	r2, r3
 801cfd0:	dd06      	ble.n	801cfe0 <arm_nn_mat_mult_kernel_s8_s16+0xc30>
        result++;
 801cfd2:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 801cfd6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801cfda:	681b      	ldr	r3, [r3, #0]
 801cfdc:	3301      	adds	r3, #1
 801cfde:	6013      	str	r3, [r2, #0]
    return result;
 801cfe0:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801cfe4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cfe6:	bf00      	nop
 801cfe8:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        ch_1_out_0 += out_offset;
 801cfec:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 801cff0:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801cff4:	4413      	add	r3, r2
 801cff6:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 801cffa:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 801cffe:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 801d002:	4293      	cmp	r3, r2
 801d004:	bfb8      	it	lt
 801d006:	4613      	movlt	r3, r2
 801d008:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 801d00c:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 801d010:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 801d014:	4293      	cmp	r3, r2
 801d016:	bfa8      	it	ge
 801d018:	4613      	movge	r3, r2
 801d01a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        *out_0++ = (q7_t)ch_1_out_0;
 801d01e:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 801d022:	1c53      	adds	r3, r2, #1
 801d024:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 801d028:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 801d02c:	b25b      	sxtb	r3, r3
 801d02e:	7013      	strb	r3, [r2, #0]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 801d030:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801d034:	6818      	ldr	r0, [r3, #0]
 801d036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d03a:	681b      	ldr	r3, [r3, #0]
 801d03c:	6819      	ldr	r1, [r3, #0]
 801d03e:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 801d042:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 801d046:	6013      	str	r3, [r2, #0]
 801d048:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801d04c:	6018      	str	r0, [r3, #0]
 801d04e:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801d052:	6019      	str	r1, [r3, #0]
 801d054:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801d058:	681b      	ldr	r3, [r3, #0]
 801d05a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d05e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	fa03 f202 	lsl.w	r2, r3, r2
 801d068:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801d06c:	601a      	str	r2, [r3, #0]
 801d06e:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 801d072:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d07a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801d07e:	2200      	movs	r2, #0
 801d080:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d082:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d08a:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d08c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d090:	2200      	movs	r2, #0
 801d092:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d094:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801d098:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	4618      	mov	r0, r3
 801d0a0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d0a4:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 801d0a8:	681b      	ldr	r3, [r3, #0]
 801d0aa:	461a      	mov	r2, r3
 801d0ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d0b0:	fb02 f501 	mul.w	r5, r2, r1
 801d0b4:	fb00 f403 	mul.w	r4, r0, r3
 801d0b8:	442c      	add	r4, r5
 801d0ba:	fba0 2302 	umull	r2, r3, r0, r2
 801d0be:	18e1      	adds	r1, r4, r3
 801d0c0:	460b      	mov	r3, r1
 801d0c2:	eb18 0102 	adds.w	r1, r8, r2
 801d0c6:	6239      	str	r1, [r7, #32]
 801d0c8:	eb49 0303 	adc.w	r3, r9, r3
 801d0cc:	627b      	str	r3, [r7, #36]	; 0x24
 801d0ce:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801d0d2:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
    result = (int32_t)(mult.long_long >> 31);
 801d0d6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 801d0da:	f04f 0000 	mov.w	r0, #0
 801d0de:	f04f 0100 	mov.w	r1, #0
 801d0e2:	0fd0      	lsrs	r0, r2, #31
 801d0e4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801d0e8:	17d9      	asrs	r1, r3, #31
 801d0ea:	f507 721e 	add.w	r2, r7, #632	; 0x278
 801d0ee:	4603      	mov	r3, r0
 801d0f0:	6013      	str	r3, [r2, #0]
    return result;
 801d0f2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801d0f6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d0f8:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801d0fc:	681b      	ldr	r3, [r3, #0]
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	dc04      	bgt.n	801d10c <arm_nn_mat_mult_kernel_s8_s16+0xd5c>
 801d102:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801d106:	681b      	ldr	r3, [r3, #0]
 801d108:	425a      	negs	r2, r3
 801d10a:	e000      	b.n	801d10e <arm_nn_mat_mult_kernel_s8_s16+0xd5e>
 801d10c:	2200      	movs	r2, #0
 801d10e:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801d112:	6019      	str	r1, [r3, #0]
 801d114:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801d118:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d11a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801d11e:	2200      	movs	r2, #0
 801d120:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d122:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801d126:	2201      	movs	r2, #1
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	fa02 f303 	lsl.w	r3, r2, r3
 801d12e:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801d132:	3b01      	subs	r3, #1
 801d134:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801d136:	f507 7119 	add.w	r1, r7, #612	; 0x264
 801d13a:	f507 721d 	add.w	r2, r7, #628	; 0x274
 801d13e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801d142:	6812      	ldr	r2, [r2, #0]
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	4013      	ands	r3, r2
 801d148:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801d14a:	f507 711b 	add.w	r1, r7, #620	; 0x26c
 801d14e:	f507 721d 	add.w	r2, r7, #628	; 0x274
 801d152:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801d156:	6812      	ldr	r2, [r2, #0]
 801d158:	681b      	ldr	r3, [r3, #0]
 801d15a:	fa42 f303 	asr.w	r3, r2, r3
 801d15e:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801d160:	f507 7218 	add.w	r2, r7, #608	; 0x260
 801d164:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801d168:	681b      	ldr	r3, [r3, #0]
 801d16a:	105b      	asrs	r3, r3, #1
 801d16c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801d16e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	2b00      	cmp	r3, #0
 801d176:	da06      	bge.n	801d186 <arm_nn_mat_mult_kernel_s8_s16+0xdd6>
        threshold++;
 801d178:	f507 7218 	add.w	r2, r7, #608	; 0x260
 801d17c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801d180:	681b      	ldr	r3, [r3, #0]
 801d182:	3301      	adds	r3, #1
 801d184:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801d186:	f507 7319 	add.w	r3, r7, #612	; 0x264
 801d18a:	f507 7118 	add.w	r1, r7, #608	; 0x260
 801d18e:	681a      	ldr	r2, [r3, #0]
 801d190:	680b      	ldr	r3, [r1, #0]
 801d192:	429a      	cmp	r2, r3
 801d194:	dd06      	ble.n	801d1a4 <arm_nn_mat_mult_kernel_s8_s16+0xdf4>
        result++;
 801d196:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 801d19a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	3301      	adds	r3, #1
 801d1a2:	6013      	str	r3, [r2, #0]
    return result;
 801d1a4:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801d1a8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d1aa:	bf00      	nop
 801d1ac:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        ch_1_out_1 += out_offset;
 801d1b0:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 801d1b4:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801d1b8:	4413      	add	r3, r2
 801d1ba:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 801d1be:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 801d1c2:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 801d1c6:	4293      	cmp	r3, r2
 801d1c8:	bfb8      	it	lt
 801d1ca:	4613      	movlt	r3, r2
 801d1cc:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 801d1d0:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 801d1d4:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 801d1d8:	4293      	cmp	r3, r2
 801d1da:	bfa8      	it	ge
 801d1dc:	4613      	movge	r3, r2
 801d1de:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        *out_1++ = (q7_t)ch_1_out_1;
 801d1e2:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801d1e6:	1c53      	adds	r3, r2, #1
 801d1e8:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 801d1ec:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 801d1f0:	b25b      	sxtb	r3, r3
 801d1f2:	7013      	strb	r3, [r2, #0]
        out_mult++;
 801d1f4:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801d1f8:	3304      	adds	r3, #4
 801d1fa:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
        out_shift++;
 801d1fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	3304      	adds	r3, #4
 801d20a:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 801d20c:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801d210:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 801d214:	4413      	add	r3, r2
 801d216:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
        row_count--;
 801d21a:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 801d21e:	3b01      	subs	r3, #1
 801d220:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
    while (row_count)
 801d224:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 801d228:	2b00      	cmp	r3, #0
 801d22a:	f47f a8ed 	bne.w	801c408 <arm_nn_mat_mult_kernel_s8_s16+0x58>
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 801d22e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801d232:	881b      	ldrh	r3, [r3, #0]
 801d234:	f003 0301 	and.w	r3, r3, #1
 801d238:	2b00      	cmp	r3, #0
 801d23a:	f000 83ff 	beq.w	801da3c <arm_nn_mat_mult_kernel_s8_s16+0x168c>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 801d23e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801d242:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801d246:	6812      	ldr	r2, [r2, #0]
 801d248:	601a      	str	r2, [r3, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 801d24a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801d24e:	681a      	ldr	r2, [r3, #0]
 801d250:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801d254:	005b      	lsls	r3, r3, #1
 801d256:	441a      	add	r2, r3
 801d258:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d25c:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 801d25e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        q31_t ch_0_out_1 = *bias++;
 801d268:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d26c:	1d1a      	adds	r2, r3, #4
 801d26e:	f8c7 2410 	str.w	r2, [r7, #1040]	; 0x410
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        uint16_t col_count = num_col_a >> 2;
 801d278:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801d27c:	089b      	lsrs	r3, r3, #2
 801d27e:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
        while (col_count)
 801d282:	e1cd      	b.n	801d620 <arm_nn_mat_mult_kernel_s8_s16+0x1270>
 801d284:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d288:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801d28c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d28e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	681b      	ldr	r3, [r3, #0]
 801d296:	681b      	ldr	r3, [r3, #0]
 801d298:	461a      	mov	r2, r3
 801d29a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801d29e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d2a0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	681b      	ldr	r3, [r3, #0]
 801d2a8:	1d1a      	adds	r2, r3, #4
 801d2aa:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d2ae:	681b      	ldr	r3, [r3, #0]
 801d2b0:	601a      	str	r2, [r3, #0]
    return (val);
 801d2b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801d2b6:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801d2b8:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 801d2bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d2c0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801d2c4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d2c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	681b      	ldr	r3, [r3, #0]
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	461a      	mov	r2, r3
 801d2d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d2d6:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d2d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	1d1a      	adds	r2, r3, #4
 801d2e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	601a      	str	r2, [r3, #0]
    return (val);
 801d2ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d2ee:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801d2f0:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 801d2f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d2f8:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 801d2fc:	601a      	str	r2, [r3, #0]
 801d2fe:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801d302:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801d306:	601a      	str	r2, [r3, #0]
 801d308:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801d30c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d310:	601a      	str	r2, [r3, #0]
 801d312:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801d316:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801d31a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801d31c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801d320:	681b      	ldr	r3, [r3, #0]
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	681b      	ldr	r3, [r3, #0]
 801d326:	461a      	mov	r2, r3
 801d328:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d32c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801d32e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	1d1a      	adds	r2, r3, #4
 801d338:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	601a      	str	r2, [r3, #0]
    return (val);
 801d340:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d344:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801d346:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801d34a:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 801d34c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801d350:	681a      	ldr	r2, [r3, #0]
 801d352:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801d356:	601a      	str	r2, [r3, #0]
 801d358:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801d35c:	2208      	movs	r2, #8
 801d35e:	601a      	str	r2, [r3, #0]
 801d360:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d364:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 801d368:	6812      	ldr	r2, [r2, #0]
 801d36a:	601a      	str	r2, [r3, #0]
 801d36c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d370:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801d374:	6812      	ldr	r2, [r2, #0]
 801d376:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801d378:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d37c:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 801d380:	6812      	ldr	r2, [r2, #0]
 801d382:	f002 021f 	and.w	r2, r2, #31
 801d386:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801d388:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d38c:	681b      	ldr	r3, [r3, #0]
 801d38e:	2b00      	cmp	r3, #0
 801d390:	d103      	bne.n	801d39a <arm_nn_mat_mult_kernel_s8_s16+0xfea>
    return op1;
 801d392:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	e007      	b.n	801d3aa <arm_nn_mat_mult_kernel_s8_s16+0xffa>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d39a:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 801d39e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d3a2:	6812      	ldr	r2, [r2, #0]
 801d3a4:	681b      	ldr	r3, [r3, #0]
 801d3a6:	fa62 f303 	ror.w	r3, r2, r3
 801d3aa:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 801d3ae:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d3b0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	fa2f f283 	sxtb16	r2, r3
 801d3ba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801d3be:	601a      	str	r2, [r3, #0]
  return(result);
 801d3c0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801d3c4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801d3c6:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801d3ca:	601a      	str	r2, [r3, #0]
  return result;
 801d3cc:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801d3d0:	681a      	ldr	r2, [r3, #0]
 801d3d2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801d3d6:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 801d3d8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801d3dc:	681a      	ldr	r2, [r3, #0]
 801d3de:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801d3e2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d3e4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	fa2f f283 	sxtb16	r2, r3
 801d3ee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801d3f2:	601a      	str	r2, [r3, #0]
  return(result);
 801d3f4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801d3f8:	681a      	ldr	r2, [r3, #0]
 801d3fa:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801d3fe:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801d400:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801d404:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d408:	6812      	ldr	r2, [r2, #0]
 801d40a:	601a      	str	r2, [r3, #0]
 801d40c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801d410:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 801d414:	6812      	ldr	r2, [r2, #0]
 801d416:	601a      	str	r2, [r3, #0]
 801d418:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801d422:	6812      	ldr	r2, [r2, #0]
 801d424:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801d428:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801d42c:	601a      	str	r2, [r3, #0]
 801d42e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801d432:	681b      	ldr	r3, [r3, #0]
 801d434:	461a      	mov	r2, r3
 801d436:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801d43e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801d442:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 801d446:	6812      	ldr	r2, [r2, #0]
 801d448:	601a      	str	r2, [r3, #0]
 801d44a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801d44e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d452:	6812      	ldr	r2, [r2, #0]
 801d454:	601a      	str	r2, [r3, #0]
 801d456:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801d460:	6812      	ldr	r2, [r2, #0]
 801d462:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801d466:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801d46a:	601a      	str	r2, [r3, #0]
 801d46c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	461a      	mov	r2, r3
 801d474:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	601a      	str	r2, [r3, #0]
    return source;
 801d47c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d480:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 801d482:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 801d486:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	4618      	mov	r0, r3
 801d48e:	f8d7 13dc 	ldr.w	r1, [r7, #988]	; 0x3dc
 801d492:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801d496:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801d49a:	6018      	str	r0, [r3, #0]
 801d49c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801d4a0:	6019      	str	r1, [r3, #0]
 801d4a2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801d4a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d4a8:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 801d4b2:	6812      	ldr	r2, [r2, #0]
 801d4b4:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 801d4b8:	6809      	ldr	r1, [r1, #0]
 801d4ba:	fb23 1202 	smlad	r2, r3, r2, r1
 801d4be:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801d4c2:	601a      	str	r2, [r3, #0]
  return(result);
 801d4c4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 801d4ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	4618      	mov	r0, r3
 801d4d6:	f8d7 13d8 	ldr.w	r1, [r7, #984]	; 0x3d8
 801d4da:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801d4de:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801d4e2:	6018      	str	r0, [r3, #0]
 801d4e4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801d4e8:	6019      	str	r1, [r3, #0]
 801d4ea:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801d4ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d4f0:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801d4f4:	681b      	ldr	r3, [r3, #0]
 801d4f6:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 801d4fa:	6812      	ldr	r2, [r2, #0]
 801d4fc:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 801d500:	6809      	ldr	r1, [r1, #0]
 801d502:	fb23 1202 	smlad	r2, r3, r2, r1
 801d506:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801d50a:	601a      	str	r2, [r3, #0]
  return(result);
 801d50c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 801d516:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801d51a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801d51e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d520:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	681b      	ldr	r3, [r3, #0]
 801d528:	681b      	ldr	r3, [r3, #0]
 801d52a:	461a      	mov	r2, r3
 801d52c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d530:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d532:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801d536:	681b      	ldr	r3, [r3, #0]
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	1d1a      	adds	r2, r3, #4
 801d53c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	601a      	str	r2, [r3, #0]
    return (val);
 801d544:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d548:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801d54a:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 801d54e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801d552:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801d556:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d558:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	681b      	ldr	r3, [r3, #0]
 801d562:	461a      	mov	r2, r3
 801d564:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d568:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d56a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801d56e:	681b      	ldr	r3, [r3, #0]
 801d570:	681b      	ldr	r3, [r3, #0]
 801d572:	1d1a      	adds	r2, r3, #4
 801d574:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	601a      	str	r2, [r3, #0]
    return (val);
 801d57c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d580:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801d582:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 801d586:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d58a:	681b      	ldr	r3, [r3, #0]
 801d58c:	4618      	mov	r0, r3
 801d58e:	f8d7 13dc 	ldr.w	r1, [r7, #988]	; 0x3dc
 801d592:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801d596:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801d59a:	6018      	str	r0, [r3, #0]
 801d59c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801d5a0:	6019      	str	r1, [r3, #0]
 801d5a2:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801d5a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d5a8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 801d5b2:	6812      	ldr	r2, [r2, #0]
 801d5b4:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 801d5b8:	6809      	ldr	r1, [r1, #0]
 801d5ba:	fb23 1202 	smlad	r2, r3, r2, r1
 801d5be:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801d5c2:	601a      	str	r2, [r3, #0]
  return(result);
 801d5c4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801d5c8:	681b      	ldr	r3, [r3, #0]
 801d5ca:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 801d5ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	4618      	mov	r0, r3
 801d5d6:	f8d7 13d8 	ldr.w	r1, [r7, #984]	; 0x3d8
 801d5da:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801d5de:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801d5e2:	6018      	str	r0, [r3, #0]
 801d5e4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801d5e8:	6019      	str	r1, [r3, #0]
 801d5ea:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801d5ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d5f0:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801d5f4:	681b      	ldr	r3, [r3, #0]
 801d5f6:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801d5fa:	6812      	ldr	r2, [r2, #0]
 801d5fc:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 801d600:	6809      	ldr	r1, [r1, #0]
 801d602:	fb23 1202 	smlad	r2, r3, r2, r1
 801d606:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801d60a:	601a      	str	r2, [r3, #0]
  return(result);
 801d60c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801d610:	681b      	ldr	r3, [r3, #0]
 801d612:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

            col_count--;
 801d616:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801d61a:	3b01      	subs	r3, #1
 801d61c:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
        while (col_count)
 801d620:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801d624:	2b00      	cmp	r3, #0
 801d626:	f47f ae2d 	bne.w	801d284 <arm_nn_mat_mult_kernel_s8_s16+0xed4>
        }
        col_count = num_col_a & 0x3;
 801d62a:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801d62e:	f003 0303 	and.w	r3, r3, #3
 801d632:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
        while (col_count)
 801d636:	e036      	b.n	801d6a6 <arm_nn_mat_mult_kernel_s8_s16+0x12f6>
        {
            q7_t a0 = *ip_a0++;
 801d638:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 801d63c:	1c5a      	adds	r2, r3, #1
 801d63e:	f8c7 2408 	str.w	r2, [r7, #1032]	; 0x408
 801d642:	781b      	ldrb	r3, [r3, #0]
 801d644:	f887 33e5 	strb.w	r3, [r7, #997]	; 0x3e5
            q15_t b0 = *ip_b0++;
 801d648:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801d64c:	681b      	ldr	r3, [r3, #0]
 801d64e:	1c99      	adds	r1, r3, #2
 801d650:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801d654:	6011      	str	r1, [r2, #0]
 801d656:	881b      	ldrh	r3, [r3, #0]
 801d658:	f8a7 33e2 	strh.w	r3, [r7, #994]	; 0x3e2
            q15_t b1 = *ip_b1++;
 801d65c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d660:	681b      	ldr	r3, [r3, #0]
 801d662:	1c99      	adds	r1, r3, #2
 801d664:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801d668:	6011      	str	r1, [r2, #0]
 801d66a:	881b      	ldrh	r3, [r3, #0]
 801d66c:	f8a7 33e0 	strh.w	r3, [r7, #992]	; 0x3e0

            ch_0_out_0 += a0 * b0;
 801d670:	f997 33e5 	ldrsb.w	r3, [r7, #997]	; 0x3e5
 801d674:	f9b7 23e2 	ldrsh.w	r2, [r7, #994]	; 0x3e2
 801d678:	fb02 f303 	mul.w	r3, r2, r3
 801d67c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801d680:	4413      	add	r3, r2
 801d682:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
            ch_0_out_1 += a0 * b1;
 801d686:	f997 33e5 	ldrsb.w	r3, [r7, #997]	; 0x3e5
 801d68a:	f9b7 23e0 	ldrsh.w	r2, [r7, #992]	; 0x3e0
 801d68e:	fb02 f303 	mul.w	r3, r2, r3
 801d692:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801d696:	4413      	add	r3, r2
 801d698:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
            col_count--;
 801d69c:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801d6a0:	3b01      	subs	r3, #1
 801d6a2:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
        while (col_count)
 801d6a6:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d1c4      	bne.n	801d638 <arm_nn_mat_mult_kernel_s8_s16+0x1288>
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 801d6ae:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801d6b2:	6819      	ldr	r1, [r3, #0]
 801d6b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	681a      	ldr	r2, [r3, #0]
 801d6bc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d6c0:	f8d7 03ec 	ldr.w	r0, [r7, #1004]	; 0x3ec
 801d6c4:	6018      	str	r0, [r3, #0]
 801d6c6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801d6ca:	6019      	str	r1, [r3, #0]
 801d6cc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d6d0:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d6d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d6d6:	681b      	ldr	r3, [r3, #0]
 801d6d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d6dc:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801d6e0:	6812      	ldr	r2, [r2, #0]
 801d6e2:	409a      	lsls	r2, r3
 801d6e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801d6e8:	601a      	str	r2, [r3, #0]
 801d6ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801d6ee:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 801d6f2:	6812      	ldr	r2, [r2, #0]
 801d6f4:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d6f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801d6fa:	2200      	movs	r2, #0
 801d6fc:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d6fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d706:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d708:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d70c:	2200      	movs	r2, #0
 801d70e:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d710:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801d714:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801d718:	681b      	ldr	r3, [r3, #0]
 801d71a:	4618      	mov	r0, r3
 801d71c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d720:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	461a      	mov	r2, r3
 801d728:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d72c:	fb02 fc01 	mul.w	ip, r2, r1
 801d730:	fb00 f603 	mul.w	r6, r0, r3
 801d734:	4466      	add	r6, ip
 801d736:	fba0 2302 	umull	r2, r3, r0, r2
 801d73a:	18f1      	adds	r1, r6, r3
 801d73c:	460b      	mov	r3, r1
 801d73e:	18a1      	adds	r1, r4, r2
 801d740:	6039      	str	r1, [r7, #0]
 801d742:	eb45 0303 	adc.w	r3, r5, r3
 801d746:	607b      	str	r3, [r7, #4]
 801d748:	e9d7 3400 	ldrd	r3, r4, [r7]
 801d74c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801d750:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801d754:	f04f 0200 	mov.w	r2, #0
 801d758:	f04f 0300 	mov.w	r3, #0
 801d75c:	0fc2      	lsrs	r2, r0, #31
 801d75e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801d762:	17cb      	asrs	r3, r1, #31
 801d764:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 801d768:	4613      	mov	r3, r2
 801d76a:	600b      	str	r3, [r1, #0]
    return result;
 801d76c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801d770:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d772:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	2b00      	cmp	r3, #0
 801d77a:	dc04      	bgt.n	801d786 <arm_nn_mat_mult_kernel_s8_s16+0x13d6>
 801d77c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d780:	681b      	ldr	r3, [r3, #0]
 801d782:	425b      	negs	r3, r3
 801d784:	e000      	b.n	801d788 <arm_nn_mat_mult_kernel_s8_s16+0x13d8>
 801d786:	2300      	movs	r3, #0
 801d788:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801d78c:	6011      	str	r1, [r2, #0]
 801d78e:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801d792:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d794:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d798:	2200      	movs	r2, #0
 801d79a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d79c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801d7a0:	2201      	movs	r2, #1
 801d7a2:	681b      	ldr	r3, [r3, #0]
 801d7a4:	409a      	lsls	r2, r3
 801d7a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801d7aa:	3a01      	subs	r2, #1
 801d7ac:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801d7ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d7b2:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 801d7b6:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801d7ba:	6809      	ldr	r1, [r1, #0]
 801d7bc:	6812      	ldr	r2, [r2, #0]
 801d7be:	400a      	ands	r2, r1
 801d7c0:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801d7c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d7c6:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 801d7ca:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801d7ce:	6809      	ldr	r1, [r1, #0]
 801d7d0:	6812      	ldr	r2, [r2, #0]
 801d7d2:	fa41 f202 	asr.w	r2, r1, r2
 801d7d6:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801d7d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801d7dc:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801d7e0:	6812      	ldr	r2, [r2, #0]
 801d7e2:	1052      	asrs	r2, r2, #1
 801d7e4:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801d7e6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	da06      	bge.n	801d7fe <arm_nn_mat_mult_kernel_s8_s16+0x144e>
        threshold++;
 801d7f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801d7f4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801d7f8:	6812      	ldr	r2, [r2, #0]
 801d7fa:	3201      	adds	r2, #1
 801d7fc:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801d7fe:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801d802:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801d806:	6812      	ldr	r2, [r2, #0]
 801d808:	681b      	ldr	r3, [r3, #0]
 801d80a:	429a      	cmp	r2, r3
 801d80c:	dd06      	ble.n	801d81c <arm_nn_mat_mult_kernel_s8_s16+0x146c>
        result++;
 801d80e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d812:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801d816:	6812      	ldr	r2, [r2, #0]
 801d818:	3201      	adds	r2, #1
 801d81a:	601a      	str	r2, [r3, #0]
    return result;
 801d81c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d820:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d822:	bf00      	nop
 801d824:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        ch_0_out_0 += out_offset;
 801d828:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801d82c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801d830:	4413      	add	r3, r2
 801d832:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801d836:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 801d83a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801d83e:	4293      	cmp	r3, r2
 801d840:	bfb8      	it	lt
 801d842:	4613      	movlt	r3, r2
 801d844:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801d848:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 801d84c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801d850:	4293      	cmp	r3, r2
 801d852:	bfa8      	it	ge
 801d854:	4613      	movge	r3, r2
 801d856:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        *out_0++ = (q7_t)ch_0_out_0;
 801d85a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 801d85e:	1c5a      	adds	r2, r3, #1
 801d860:	f8c7 2450 	str.w	r2, [r7, #1104]	; 0x450
 801d864:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801d868:	b252      	sxtb	r2, r2
 801d86a:	701a      	strb	r2, [r3, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 801d86c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801d870:	6819      	ldr	r1, [r3, #0]
 801d872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	681a      	ldr	r2, [r3, #0]
 801d87a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d87e:	f8d7 03e8 	ldr.w	r0, [r7, #1000]	; 0x3e8
 801d882:	6018      	str	r0, [r3, #0]
 801d884:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801d888:	6019      	str	r1, [r3, #0]
 801d88a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d88e:	601a      	str	r2, [r3, #0]
 801d890:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d89a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 801d89e:	6812      	ldr	r2, [r2, #0]
 801d8a0:	409a      	lsls	r2, r3
 801d8a2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801d8a6:	601a      	str	r2, [r3, #0]
 801d8a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d8ac:	f507 7292 	add.w	r2, r7, #292	; 0x124
 801d8b0:	6812      	ldr	r2, [r2, #0]
 801d8b2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d8b4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801d8b8:	2200      	movs	r2, #0
 801d8ba:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d8bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d8c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d8c4:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d8c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d8ca:	2200      	movs	r2, #0
 801d8cc:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d8ce:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801d8d2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801d8d6:	681b      	ldr	r3, [r3, #0]
 801d8d8:	4618      	mov	r0, r3
 801d8da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d8de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d8e2:	681b      	ldr	r3, [r3, #0]
 801d8e4:	461a      	mov	r2, r3
 801d8e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d8ea:	fb02 fc01 	mul.w	ip, r2, r1
 801d8ee:	fb00 f603 	mul.w	r6, r0, r3
 801d8f2:	4466      	add	r6, ip
 801d8f4:	fba0 2302 	umull	r2, r3, r0, r2
 801d8f8:	18f1      	adds	r1, r6, r3
 801d8fa:	460b      	mov	r3, r1
 801d8fc:	eb14 0a02 	adds.w	sl, r4, r2
 801d900:	eb45 0b03 	adc.w	fp, r5, r3
 801d904:	e9c7 ab16 	strd	sl, fp, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 801d908:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801d90c:	f04f 0200 	mov.w	r2, #0
 801d910:	f04f 0300 	mov.w	r3, #0
 801d914:	0fc2      	lsrs	r2, r0, #31
 801d916:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801d91a:	17cb      	asrs	r3, r1, #31
 801d91c:	f507 718a 	add.w	r1, r7, #276	; 0x114
 801d920:	4613      	mov	r3, r2
 801d922:	600b      	str	r3, [r1, #0]
    return result;
 801d924:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801d928:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d92a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d92e:	681b      	ldr	r3, [r3, #0]
 801d930:	2b00      	cmp	r3, #0
 801d932:	dc04      	bgt.n	801d93e <arm_nn_mat_mult_kernel_s8_s16+0x158e>
 801d934:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	425b      	negs	r3, r3
 801d93c:	e000      	b.n	801d940 <arm_nn_mat_mult_kernel_s8_s16+0x1590>
 801d93e:	2300      	movs	r3, #0
 801d940:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801d944:	6011      	str	r1, [r2, #0]
 801d946:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801d94a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d950:	2200      	movs	r2, #0
 801d952:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d954:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801d958:	2201      	movs	r2, #1
 801d95a:	681b      	ldr	r3, [r3, #0]
 801d95c:	409a      	lsls	r2, r3
 801d95e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801d962:	3a01      	subs	r2, #1
 801d964:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801d966:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801d96a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801d96e:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801d972:	6809      	ldr	r1, [r1, #0]
 801d974:	6812      	ldr	r2, [r2, #0]
 801d976:	400a      	ands	r2, r1
 801d978:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801d97a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d97e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801d982:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801d986:	6809      	ldr	r1, [r1, #0]
 801d988:	6812      	ldr	r2, [r2, #0]
 801d98a:	fa41 f202 	asr.w	r2, r1, r2
 801d98e:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801d990:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801d994:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801d998:	6812      	ldr	r2, [r2, #0]
 801d99a:	1052      	asrs	r2, r2, #1
 801d99c:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801d99e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d9a2:	681b      	ldr	r3, [r3, #0]
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	da06      	bge.n	801d9b6 <arm_nn_mat_mult_kernel_s8_s16+0x1606>
        threshold++;
 801d9a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801d9ac:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801d9b0:	6812      	ldr	r2, [r2, #0]
 801d9b2:	3201      	adds	r2, #1
 801d9b4:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801d9b6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801d9ba:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801d9be:	6812      	ldr	r2, [r2, #0]
 801d9c0:	681b      	ldr	r3, [r3, #0]
 801d9c2:	429a      	cmp	r2, r3
 801d9c4:	dd06      	ble.n	801d9d4 <arm_nn_mat_mult_kernel_s8_s16+0x1624>
        result++;
 801d9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d9ca:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801d9ce:	6812      	ldr	r2, [r2, #0]
 801d9d0:	3201      	adds	r2, #1
 801d9d2:	601a      	str	r2, [r3, #0]
    return result;
 801d9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d9d8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d9da:	bf00      	nop
 801d9dc:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        ch_0_out_1 += out_offset;
 801d9e0:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801d9e4:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801d9e8:	4413      	add	r3, r2
 801d9ea:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801d9ee:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 801d9f2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801d9f6:	4293      	cmp	r3, r2
 801d9f8:	bfb8      	it	lt
 801d9fa:	4613      	movlt	r3, r2
 801d9fc:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801da00:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 801da04:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801da08:	4293      	cmp	r3, r2
 801da0a:	bfa8      	it	ge
 801da0c:	4613      	movge	r3, r2
 801da0e:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        *out_1++ = (q7_t)ch_0_out_1;
 801da12:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801da16:	1c5a      	adds	r2, r3, #1
 801da18:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 801da1c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801da20:	b252      	sxtb	r2, r2
 801da22:	701a      	strb	r2, [r3, #0]
        out_mult++;
 801da24:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801da28:	3304      	adds	r3, #4
 801da2a:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
        out_shift++;
 801da2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801da32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801da36:	6812      	ldr	r2, [r2, #0]
 801da38:	3204      	adds	r2, #4
 801da3a:	601a      	str	r2, [r3, #0]
    }

    out_0 += output_ch;
 801da3c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801da40:	881b      	ldrh	r3, [r3, #0]
 801da42:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 801da46:	4413      	add	r3, r2
 801da48:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450

    /* return the new output pointer with offset */
    return out_0;
 801da4c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 801da50:	4618      	mov	r0, r3
 801da52:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 801da56:	46bd      	mov	sp, r7
 801da58:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801da5c:	4770      	bx	lr

0801da5e <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 801da5e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801da62:	f5ad 6d24 	sub.w	sp, sp, #2624	; 0xa40
 801da66:	af00      	add	r7, sp, #0
 801da68:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801da6c:	6020      	str	r0, [r4, #0]
 801da6e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801da72:	6001      	str	r1, [r0, #0]
 801da74:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801da78:	600a      	str	r2, [r1, #0]
 801da7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801da7e:	6013      	str	r3, [r2, #0]
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 801da80:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801da84:	3b04      	subs	r3, #4
 801da86:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801da8a:	2300      	movs	r3, #0
 801da8c:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 801da90:	f003 b977 	b.w	8020d82 <arm_nn_mat_mult_nt_t_s8+0x3324>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801da94:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801da98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	6013      	str	r3, [r2, #0]
        q7_t *dst_ptr = &dst[0];
 801daa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801daa4:	681b      	ldr	r3, [r3, #0]
 801daa6:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38

        q31_t lhs_offset_contribution0 = 0;
 801daaa:	2300      	movs	r3, #0
 801daac:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
        q31_t lhs_offset_contribution1 = 0;
 801dab0:	2300      	movs	r3, #0
 801dab2:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30

        for (int32_t x = 0; x < rhs_cols; ++x)
 801dab6:	2300      	movs	r3, #0
 801dab8:	f8c7 3a2c 	str.w	r3, [r7, #2604]	; 0xa2c
 801dabc:	e024      	b.n	801db08 <arm_nn_mat_mult_nt_t_s8+0xaa>
        {
            lhs_offset_contribution0 += rhs[x];
 801dabe:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801dac2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	4413      	add	r3, r2
 801daca:	f993 3000 	ldrsb.w	r3, [r3]
 801dace:	461a      	mov	r2, r3
 801dad0:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801dad4:	4413      	add	r3, r2
 801dad6:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 801dada:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801dade:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801dae2:	4413      	add	r3, r2
 801dae4:	461a      	mov	r2, r3
 801dae6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801daea:	681b      	ldr	r3, [r3, #0]
 801daec:	4413      	add	r3, r2
 801daee:	f993 3000 	ldrsb.w	r3, [r3]
 801daf2:	461a      	mov	r2, r3
 801daf4:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801daf8:	4413      	add	r3, r2
 801dafa:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        for (int32_t x = 0; x < rhs_cols; ++x)
 801dafe:	f8d7 3a2c 	ldr.w	r3, [r7, #2604]	; 0xa2c
 801db02:	3301      	adds	r3, #1
 801db04:	f8c7 3a2c 	str.w	r3, [r7, #2604]	; 0xa2c
 801db08:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801db0c:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801db10:	429a      	cmp	r2, r3
 801db12:	dbd4      	blt.n	801dabe <arm_nn_mat_mult_nt_t_s8+0x60>
        }

        lhs_offset_contribution0 *= lhs_offset;
 801db14:	f8d7 2a34 	ldr.w	r2, [r7, #2612]	; 0xa34
 801db18:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 801db1c:	fb03 f302 	mul.w	r3, r3, r2
 801db20:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
        lhs_offset_contribution1 *= lhs_offset;
 801db24:	f8d7 2a30 	ldr.w	r2, [r7, #2608]	; 0xa30
 801db28:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 801db2c:	fb03 f302 	mul.w	r3, r3, r2
 801db30:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        if (bias)
 801db34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801db38:	681b      	ldr	r3, [r3, #0]
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	d01a      	beq.n	801db74 <arm_nn_mat_mult_nt_t_s8+0x116>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 801db3e:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801db42:	009a      	lsls	r2, r3, #2
 801db44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	4413      	add	r3, r2
 801db4c:	681a      	ldr	r2, [r3, #0]
 801db4e:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801db52:	4413      	add	r3, r2
 801db54:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 801db58:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801db5c:	3301      	adds	r3, #1
 801db5e:	009a      	lsls	r2, r3, #2
 801db60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801db64:	681b      	ldr	r3, [r3, #0]
 801db66:	4413      	add	r3, r2
 801db68:	681a      	ldr	r2, [r3, #0]
 801db6a:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801db6e:	4413      	add	r3, r2
 801db70:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 801db74:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 801db78:	105b      	asrs	r3, r3, #1
 801db7a:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28

        while (lhs_rows_idx)
 801db7e:	f001 bf48 	b.w	801fa12 <arm_nn_mat_mult_nt_t_s8+0x1fb4>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801db82:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 801db86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801db8a:	681b      	ldr	r3, [r3, #0]
 801db8c:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801db8e:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801db92:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            q31_t res01 = lhs_offset_contribution1;
 801db96:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801db9a:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            q31_t res10 = lhs_offset_contribution0;
 801db9e:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801dba2:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            q31_t res11 = lhs_offset_contribution1;
 801dba6:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801dbaa:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            int32_t rhs_cols_idx = 0;
 801dbae:	2300      	movs	r3, #0
 801dbb0:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14

            q31_t val0, val1, val2, val3, val4, val5;

            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801dbb4:	f001 baee 	b.w	801f194 <arm_nn_mat_mult_nt_t_s8+0x1736>
 801dbb8:	f207 522c 	addw	r2, r7, #1324	; 0x52c
 801dbbc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801dbc0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801dbc2:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801dbc6:	681b      	ldr	r3, [r3, #0]
 801dbc8:	681b      	ldr	r3, [r3, #0]
 801dbca:	681b      	ldr	r3, [r3, #0]
 801dbcc:	461a      	mov	r2, r3
 801dbce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801dbd2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801dbd4:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801dbd8:	681b      	ldr	r3, [r3, #0]
 801dbda:	681b      	ldr	r3, [r3, #0]
 801dbdc:	1d1a      	adds	r2, r3, #4
 801dbde:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801dbe2:	681b      	ldr	r3, [r3, #0]
 801dbe4:	601a      	str	r2, [r3, #0]
    return (val);
 801dbe6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801dbea:	681b      	ldr	r3, [r3, #0]
            {
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801dbec:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val2 = __SXTB16(val1);
 801dbf0:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801dbf4:	f207 5334 	addw	r3, r7, #1332	; 0x534
 801dbf8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801dbfa:	f207 5334 	addw	r3, r7, #1332	; 0x534
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	fa2f f283 	sxtb16	r2, r3
 801dc04:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 801dc08:	601a      	str	r2, [r3, #0]
  return(result);
 801dc0a:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 801dc0e:	681b      	ldr	r3, [r3, #0]
 801dc10:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801dc14:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 801dc18:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801dc1c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801dc1e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	461a      	mov	r2, r3
 801dc2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801dc2e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801dc30:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801dc34:	681b      	ldr	r3, [r3, #0]
 801dc36:	681b      	ldr	r3, [r3, #0]
 801dc38:	1d1a      	adds	r2, r3, #4
 801dc3a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	601a      	str	r2, [r3, #0]
    return (val);
 801dc42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801dc46:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801dc48:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801dc4c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801dc50:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 801dc54:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801dc56:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	fa2f f283 	sxtb16	r2, r3
 801dc60:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 801dc64:	601a      	str	r2, [r3, #0]
  return(result);
 801dc66:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 801dc6a:	681b      	ldr	r3, [r3, #0]
 801dc6c:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801dc70:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801dc74:	681a      	ldr	r2, [r3, #0]
 801dc76:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801dc7a:	441a      	add	r2, r3
 801dc7c:	f207 5344 	addw	r3, r7, #1348	; 0x544
 801dc80:	601a      	str	r2, [r3, #0]
 801dc82:	f207 5344 	addw	r3, r7, #1348	; 0x544
 801dc86:	681b      	ldr	r3, [r3, #0]
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801dc8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801dc90:	601a      	str	r2, [r3, #0]
    return (val);
 801dc92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801dc96:	681b      	ldr	r3, [r3, #0]
 801dc98:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val1 = __SXTB16_RORn(val1, 8);
 801dc9c:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801dca0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 801dca4:	601a      	str	r2, [r3, #0]
 801dca6:	f207 525c 	addw	r2, r7, #1372	; 0x55c
 801dcaa:	2308      	movs	r3, #8
 801dcac:	6013      	str	r3, [r2, #0]
 801dcae:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 801dcb2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	6013      	str	r3, [r2, #0]
 801dcba:	f207 5254 	addw	r2, r7, #1364	; 0x554
 801dcbe:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801dcc6:	f207 5254 	addw	r2, r7, #1364	; 0x554
 801dcca:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801dcce:	681b      	ldr	r3, [r3, #0]
 801dcd0:	f003 031f 	and.w	r3, r3, #31
 801dcd4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801dcd6:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801dcda:	681b      	ldr	r3, [r3, #0]
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d103      	bne.n	801dce8 <arm_nn_mat_mult_nt_t_s8+0x28a>
    return op1;
 801dce0:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 801dce4:	681a      	ldr	r2, [r3, #0]
 801dce6:	e006      	b.n	801dcf6 <arm_nn_mat_mult_nt_t_s8+0x298>
  return (op1 >> op2) | (op1 << (32U - op2));
 801dce8:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 801dcec:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801dcf0:	6812      	ldr	r2, [r2, #0]
 801dcf2:	681b      	ldr	r3, [r3, #0]
 801dcf4:	41da      	rors	r2, r3
 801dcf6:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 801dcfa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801dcfc:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 801dd00:	681b      	ldr	r3, [r3, #0]
 801dd02:	fa2f f283 	sxtb16	r2, r3
 801dd06:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 801dd0a:	601a      	str	r2, [r3, #0]
  return(result);
 801dd0c:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 801dd10:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801dd12:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801dd16:	601a      	str	r2, [r3, #0]
  return result;
 801dd18:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801dd22:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801dd26:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 801dd2a:	601a      	str	r2, [r3, #0]
 801dd2c:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 801dd30:	2308      	movs	r3, #8
 801dd32:	6013      	str	r3, [r2, #0]
 801dd34:	f207 5274 	addw	r2, r7, #1396	; 0x574
 801dd38:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 801dd3c:	681b      	ldr	r3, [r3, #0]
 801dd3e:	6013      	str	r3, [r2, #0]
 801dd40:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 801dd44:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 801dd48:	681b      	ldr	r3, [r3, #0]
 801dd4a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801dd4c:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 801dd50:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	f003 031f 	and.w	r3, r3, #31
 801dd5a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801dd5c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	d103      	bne.n	801dd6e <arm_nn_mat_mult_nt_t_s8+0x310>
    return op1;
 801dd66:	f207 5374 	addw	r3, r7, #1396	; 0x574
 801dd6a:	681a      	ldr	r2, [r3, #0]
 801dd6c:	e006      	b.n	801dd7c <arm_nn_mat_mult_nt_t_s8+0x31e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801dd6e:	f207 5274 	addw	r2, r7, #1396	; 0x574
 801dd72:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801dd76:	6812      	ldr	r2, [r2, #0]
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	41da      	rors	r2, r3
 801dd7c:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 801dd80:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801dd82:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 801dd86:	681b      	ldr	r3, [r3, #0]
 801dd88:	fa2f f283 	sxtb16	r2, r3
 801dd8c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 801dd90:	601a      	str	r2, [r3, #0]
  return(result);
 801dd92:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 801dd96:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801dd98:	f207 5364 	addw	r3, r7, #1380	; 0x564
 801dd9c:	601a      	str	r2, [r3, #0]
  return result;
 801dd9e:	f207 5364 	addw	r3, r7, #1380	; 0x564
 801dda2:	681b      	ldr	r3, [r3, #0]
 801dda4:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801dda8:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801ddac:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801ddb0:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801ddb4:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801ddb8:	601a      	str	r2, [r3, #0]
 801ddba:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 801ddbe:	6019      	str	r1, [r3, #0]
 801ddc0:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801ddc4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ddc6:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801ddca:	6819      	ldr	r1, [r3, #0]
 801ddcc:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 801ddd0:	681a      	ldr	r2, [r3, #0]
 801ddd2:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	fb21 3202 	smlad	r2, r1, r2, r3
 801dddc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801dde0:	601a      	str	r2, [r3, #0]
  return(result);
 801dde2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801dde6:	681b      	ldr	r3, [r3, #0]
 801dde8:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801ddec:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801ddf0:	f207 5394 	addw	r3, r7, #1428	; 0x594
 801ddf4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ddf6:	f207 5394 	addw	r3, r7, #1428	; 0x594
 801ddfa:	681b      	ldr	r3, [r3, #0]
 801ddfc:	fa2f f283 	sxtb16	r2, r3
 801de00:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 801de04:	601a      	str	r2, [r3, #0]
  return(result);
 801de06:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 801de0a:	681b      	ldr	r3, [r3, #0]
 801de0c:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801de10:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801de14:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801de18:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801de1c:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 801de20:	601a      	str	r2, [r3, #0]
 801de22:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 801de26:	6019      	str	r1, [r3, #0]
 801de28:	f207 539c 	addw	r3, r7, #1436	; 0x59c
 801de2c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801de2e:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 801de32:	6819      	ldr	r1, [r3, #0]
 801de34:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 801de38:	681a      	ldr	r2, [r3, #0]
 801de3a:	f207 539c 	addw	r3, r7, #1436	; 0x59c
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	fb21 3202 	smlad	r2, r1, r2, r3
 801de44:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 801de48:	601a      	str	r2, [r3, #0]
  return(result);
 801de4a:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801de54:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801de58:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 801de5c:	601a      	str	r2, [r3, #0]
 801de5e:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 801de62:	2308      	movs	r3, #8
 801de64:	6013      	str	r3, [r2, #0]
 801de66:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 801de6a:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 801de6e:	681b      	ldr	r3, [r3, #0]
 801de70:	6013      	str	r3, [r2, #0]
 801de72:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 801de76:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 801de7a:	681b      	ldr	r3, [r3, #0]
 801de7c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801de7e:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 801de82:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801de86:	681b      	ldr	r3, [r3, #0]
 801de88:	f003 031f 	and.w	r3, r3, #31
 801de8c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801de8e:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	2b00      	cmp	r3, #0
 801de96:	d103      	bne.n	801dea0 <arm_nn_mat_mult_nt_t_s8+0x442>
    return op1;
 801de98:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801de9c:	681a      	ldr	r2, [r3, #0]
 801de9e:	e006      	b.n	801deae <arm_nn_mat_mult_nt_t_s8+0x450>
  return (op1 >> op2) | (op1 << (32U - op2));
 801dea0:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 801dea4:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801dea8:	6812      	ldr	r2, [r2, #0]
 801deaa:	681b      	ldr	r3, [r3, #0]
 801deac:	41da      	rors	r2, r3
 801deae:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 801deb2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801deb4:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	fa2f f283 	sxtb16	r2, r3
 801debe:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 801dec2:	601a      	str	r2, [r3, #0]
  return(result);
 801dec4:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 801dec8:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801deca:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 801dece:	601a      	str	r2, [r3, #0]
  return result;
 801ded0:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801deda:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801dede:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801dee2:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801dee6:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 801deea:	601a      	str	r2, [r3, #0]
 801deec:	f207 53cc 	addw	r3, r7, #1484	; 0x5cc
 801def0:	6019      	str	r1, [r3, #0]
 801def2:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 801def6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801def8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 801defc:	6819      	ldr	r1, [r3, #0]
 801defe:	f207 53cc 	addw	r3, r7, #1484	; 0x5cc
 801df02:	681a      	ldr	r2, [r3, #0]
 801df04:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	fb21 3202 	smlad	r2, r1, r2, r3
 801df0e:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 801df12:	601a      	str	r2, [r3, #0]
  return(result);
 801df14:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 801df18:	681b      	ldr	r3, [r3, #0]
 801df1a:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801df1e:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801df22:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801df26:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801df2a:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 801df2e:	601a      	str	r2, [r3, #0]
 801df30:	f207 53dc 	addw	r3, r7, #1500	; 0x5dc
 801df34:	6019      	str	r1, [r3, #0]
 801df36:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 801df3a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801df3c:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 801df40:	6819      	ldr	r1, [r3, #0]
 801df42:	f207 53dc 	addw	r3, r7, #1500	; 0x5dc
 801df46:	681a      	ldr	r2, [r3, #0]
 801df48:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	fb21 3202 	smlad	r2, r1, r2, r3
 801df52:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 801df56:	601a      	str	r2, [r3, #0]
  return(result);
 801df58:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 801df5c:	681b      	ldr	r3, [r3, #0]
 801df5e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801df62:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801df66:	681a      	ldr	r2, [r3, #0]
 801df68:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801df6c:	441a      	add	r2, r3
 801df6e:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 801df72:	601a      	str	r2, [r3, #0]
 801df74:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	681b      	ldr	r3, [r3, #0]
 801df7c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801df7e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801df82:	601a      	str	r2, [r3, #0]
    return (val);
 801df84:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801df88:	681b      	ldr	r3, [r3, #0]
 801df8a:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801df8e:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801df92:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 801df96:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801df98:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 801df9c:	681b      	ldr	r3, [r3, #0]
 801df9e:	fa2f f283 	sxtb16	r2, r3
 801dfa2:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801dfa6:	601a      	str	r2, [r3, #0]
  return(result);
 801dfa8:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801dfac:	681b      	ldr	r3, [r3, #0]
 801dfae:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801dfb2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801dfb6:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 801dfba:	601a      	str	r2, [r3, #0]
 801dfbc:	f207 6204 	addw	r2, r7, #1540	; 0x604
 801dfc0:	2308      	movs	r3, #8
 801dfc2:	6013      	str	r3, [r2, #0]
 801dfc4:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801dfc8:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 801dfcc:	681b      	ldr	r3, [r3, #0]
 801dfce:	6013      	str	r3, [r2, #0]
 801dfd0:	f207 52fc 	addw	r2, r7, #1532	; 0x5fc
 801dfd4:	f207 6304 	addw	r3, r7, #1540	; 0x604
 801dfd8:	681b      	ldr	r3, [r3, #0]
 801dfda:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801dfdc:	f207 52fc 	addw	r2, r7, #1532	; 0x5fc
 801dfe0:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801dfe4:	681b      	ldr	r3, [r3, #0]
 801dfe6:	f003 031f 	and.w	r3, r3, #31
 801dfea:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801dfec:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801dff0:	681b      	ldr	r3, [r3, #0]
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	d103      	bne.n	801dffe <arm_nn_mat_mult_nt_t_s8+0x5a0>
    return op1;
 801dff6:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 801dffa:	681a      	ldr	r2, [r3, #0]
 801dffc:	e006      	b.n	801e00c <arm_nn_mat_mult_nt_t_s8+0x5ae>
  return (op1 >> op2) | (op1 << (32U - op2));
 801dffe:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801e002:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801e006:	6812      	ldr	r2, [r2, #0]
 801e008:	681b      	ldr	r3, [r3, #0]
 801e00a:	41da      	rors	r2, r3
 801e00c:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 801e010:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e012:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 801e016:	681b      	ldr	r3, [r3, #0]
 801e018:	fa2f f283 	sxtb16	r2, r3
 801e01c:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 801e020:	601a      	str	r2, [r3, #0]
  return(result);
 801e022:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 801e026:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e028:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801e02c:	601a      	str	r2, [r3, #0]
  return result;
 801e02e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801e032:	681b      	ldr	r3, [r3, #0]
 801e034:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801e038:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e03c:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801e040:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801e044:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 801e048:	601a      	str	r2, [r3, #0]
 801e04a:	f207 6314 	addw	r3, r7, #1556	; 0x614
 801e04e:	6019      	str	r1, [r3, #0]
 801e050:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801e054:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e056:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 801e05a:	6819      	ldr	r1, [r3, #0]
 801e05c:	f207 6314 	addw	r3, r7, #1556	; 0x614
 801e060:	681a      	ldr	r2, [r3, #0]
 801e062:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	fb21 3202 	smlad	r2, r1, r2, r3
 801e06c:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 801e070:	601a      	str	r2, [r3, #0]
  return(result);
 801e072:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801e07c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e080:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801e084:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801e088:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801e08c:	601a      	str	r2, [r3, #0]
 801e08e:	f207 6324 	addw	r3, r7, #1572	; 0x624
 801e092:	6019      	str	r1, [r3, #0]
 801e094:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801e098:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e09a:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801e09e:	6819      	ldr	r1, [r3, #0]
 801e0a0:	f207 6324 	addw	r3, r7, #1572	; 0x624
 801e0a4:	681a      	ldr	r2, [r3, #0]
 801e0a6:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	fb21 3202 	smlad	r2, r1, r2, r3
 801e0b0:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 801e0b4:	601a      	str	r2, [r3, #0]
  return(result);
 801e0b6:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 801e0ba:	681b      	ldr	r3, [r3, #0]
 801e0bc:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801e0c0:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e0c4:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801e0c8:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801e0cc:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 801e0d0:	601a      	str	r2, [r3, #0]
 801e0d2:	f207 6334 	addw	r3, r7, #1588	; 0x634
 801e0d6:	6019      	str	r1, [r3, #0]
 801e0d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e0dc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e0de:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 801e0e2:	6819      	ldr	r1, [r3, #0]
 801e0e4:	f207 6334 	addw	r3, r7, #1588	; 0x634
 801e0e8:	681a      	ldr	r2, [r3, #0]
 801e0ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e0ee:	681b      	ldr	r3, [r3, #0]
 801e0f0:	fb21 3202 	smlad	r2, r1, r2, r3
 801e0f4:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 801e0f8:	601a      	str	r2, [r3, #0]
  return(result);
 801e0fa:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 801e0fe:	681b      	ldr	r3, [r3, #0]
 801e100:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801e104:	f207 623c 	addw	r2, r7, #1596	; 0x63c
 801e108:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e10c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e10e:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	681b      	ldr	r3, [r3, #0]
 801e116:	681b      	ldr	r3, [r3, #0]
 801e118:	461a      	mov	r2, r3
 801e11a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e11e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e120:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801e124:	681b      	ldr	r3, [r3, #0]
 801e126:	681b      	ldr	r3, [r3, #0]
 801e128:	1d1a      	adds	r2, r3, #4
 801e12a:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801e12e:	681b      	ldr	r3, [r3, #0]
 801e130:	601a      	str	r2, [r3, #0]
    return (val);
 801e132:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e136:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801e138:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801e13c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e140:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801e144:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801e148:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 801e14c:	601a      	str	r2, [r3, #0]
 801e14e:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 801e152:	6019      	str	r1, [r3, #0]
 801e154:	f207 6344 	addw	r3, r7, #1604	; 0x644
 801e158:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e15a:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 801e15e:	6819      	ldr	r1, [r3, #0]
 801e160:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 801e164:	681a      	ldr	r2, [r3, #0]
 801e166:	f207 6344 	addw	r3, r7, #1604	; 0x644
 801e16a:	681b      	ldr	r3, [r3, #0]
 801e16c:	fb21 3202 	smlad	r2, r1, r2, r3
 801e170:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801e174:	601a      	str	r2, [r3, #0]
  return(result);
 801e176:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801e17a:	681b      	ldr	r3, [r3, #0]
 801e17c:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801e180:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e184:	681a      	ldr	r2, [r3, #0]
 801e186:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801e18a:	441a      	add	r2, r3
 801e18c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801e190:	601a      	str	r2, [r3, #0]
 801e192:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801e196:	681b      	ldr	r3, [r3, #0]
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801e19c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e1a0:	601a      	str	r2, [r3, #0]
    return (val);
 801e1a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801e1ac:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801e1b0:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 801e1b4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e1b6:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	fa2f f283 	sxtb16	r2, r3
 801e1c0:	f207 6354 	addw	r3, r7, #1620	; 0x654
 801e1c4:	601a      	str	r2, [r3, #0]
  return(result);
 801e1c6:	f207 6354 	addw	r3, r7, #1620	; 0x654
 801e1ca:	681b      	ldr	r3, [r3, #0]
 801e1cc:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801e1d0:	f207 625c 	addw	r2, r7, #1628	; 0x65c
 801e1d4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e1d8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e1da:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801e1de:	681b      	ldr	r3, [r3, #0]
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	681b      	ldr	r3, [r3, #0]
 801e1e4:	461a      	mov	r2, r3
 801e1e6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801e1ea:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e1ec:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801e1f0:	681b      	ldr	r3, [r3, #0]
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	1d1a      	adds	r2, r3, #4
 801e1f6:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	601a      	str	r2, [r3, #0]
    return (val);
 801e1fe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801e202:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801e204:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801e208:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e20c:	f207 6364 	addw	r3, r7, #1636	; 0x664
 801e210:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e212:	f207 6364 	addw	r3, r7, #1636	; 0x664
 801e216:	681b      	ldr	r3, [r3, #0]
 801e218:	fa2f f283 	sxtb16	r2, r3
 801e21c:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801e220:	601a      	str	r2, [r3, #0]
  return(result);
 801e222:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801e226:	681b      	ldr	r3, [r3, #0]
 801e228:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801e22c:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801e230:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 801e234:	601a      	str	r2, [r3, #0]
 801e236:	f207 627c 	addw	r2, r7, #1660	; 0x67c
 801e23a:	2308      	movs	r3, #8
 801e23c:	6013      	str	r3, [r2, #0]
 801e23e:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 801e242:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 801e246:	681b      	ldr	r3, [r3, #0]
 801e248:	6013      	str	r3, [r2, #0]
 801e24a:	f207 6274 	addw	r2, r7, #1652	; 0x674
 801e24e:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e256:	f207 6274 	addw	r2, r7, #1652	; 0x674
 801e25a:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801e25e:	681b      	ldr	r3, [r3, #0]
 801e260:	f003 031f 	and.w	r3, r3, #31
 801e264:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e266:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d103      	bne.n	801e278 <arm_nn_mat_mult_nt_t_s8+0x81a>
    return op1;
 801e270:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801e274:	681a      	ldr	r2, [r3, #0]
 801e276:	e006      	b.n	801e286 <arm_nn_mat_mult_nt_t_s8+0x828>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e278:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 801e27c:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801e280:	6812      	ldr	r2, [r2, #0]
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	41da      	rors	r2, r3
 801e286:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 801e28a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e28c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 801e290:	681b      	ldr	r3, [r3, #0]
 801e292:	fa2f f283 	sxtb16	r2, r3
 801e296:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 801e29a:	601a      	str	r2, [r3, #0]
  return(result);
 801e29c:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 801e2a0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e2a2:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 801e2a6:	601a      	str	r2, [r3, #0]
  return result;
 801e2a8:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 801e2ac:	681b      	ldr	r3, [r3, #0]
 801e2ae:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801e2b2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e2b6:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 801e2ba:	601a      	str	r2, [r3, #0]
 801e2bc:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 801e2c0:	2308      	movs	r3, #8
 801e2c2:	6013      	str	r3, [r2, #0]
 801e2c4:	f207 6294 	addw	r2, r7, #1684	; 0x694
 801e2c8:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 801e2cc:	681b      	ldr	r3, [r3, #0]
 801e2ce:	6013      	str	r3, [r2, #0]
 801e2d0:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 801e2d4:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 801e2d8:	681b      	ldr	r3, [r3, #0]
 801e2da:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e2dc:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 801e2e0:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	f003 031f 	and.w	r3, r3, #31
 801e2ea:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e2ec:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801e2f0:	681b      	ldr	r3, [r3, #0]
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	d103      	bne.n	801e2fe <arm_nn_mat_mult_nt_t_s8+0x8a0>
    return op1;
 801e2f6:	f207 6394 	addw	r3, r7, #1684	; 0x694
 801e2fa:	681a      	ldr	r2, [r3, #0]
 801e2fc:	e006      	b.n	801e30c <arm_nn_mat_mult_nt_t_s8+0x8ae>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e2fe:	f207 6294 	addw	r2, r7, #1684	; 0x694
 801e302:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801e306:	6812      	ldr	r2, [r2, #0]
 801e308:	681b      	ldr	r3, [r3, #0]
 801e30a:	41da      	rors	r2, r3
 801e30c:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 801e310:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e312:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 801e316:	681b      	ldr	r3, [r3, #0]
 801e318:	fa2f f283 	sxtb16	r2, r3
 801e31c:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 801e320:	601a      	str	r2, [r3, #0]
  return(result);
 801e322:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 801e326:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e328:	f207 6384 	addw	r3, r7, #1668	; 0x684
 801e32c:	601a      	str	r2, [r3, #0]
  return result;
 801e32e:	f207 6384 	addw	r3, r7, #1668	; 0x684
 801e332:	681b      	ldr	r3, [r3, #0]
 801e334:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801e338:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e33c:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801e340:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e344:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 801e348:	601a      	str	r2, [r3, #0]
 801e34a:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 801e34e:	6019      	str	r1, [r3, #0]
 801e350:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 801e354:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e356:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 801e35a:	6819      	ldr	r1, [r3, #0]
 801e35c:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 801e360:	681a      	ldr	r2, [r3, #0]
 801e362:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 801e366:	681b      	ldr	r3, [r3, #0]
 801e368:	fb21 3202 	smlad	r2, r1, r2, r3
 801e36c:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801e370:	601a      	str	r2, [r3, #0]
  return(result);
 801e372:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801e37c:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e380:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 801e384:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e386:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 801e38a:	681b      	ldr	r3, [r3, #0]
 801e38c:	fa2f f283 	sxtb16	r2, r3
 801e390:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801e394:	601a      	str	r2, [r3, #0]
  return(result);
 801e396:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801e39a:	681b      	ldr	r3, [r3, #0]
 801e39c:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801e3a0:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e3a4:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801e3a8:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e3ac:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 801e3b0:	601a      	str	r2, [r3, #0]
 801e3b2:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 801e3b6:	6019      	str	r1, [r3, #0]
 801e3b8:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 801e3bc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e3be:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 801e3c2:	6819      	ldr	r1, [r3, #0]
 801e3c4:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 801e3c8:	681a      	ldr	r2, [r3, #0]
 801e3ca:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	fb21 3202 	smlad	r2, r1, r2, r3
 801e3d4:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 801e3d8:	601a      	str	r2, [r3, #0]
  return(result);
 801e3da:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801e3e4:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e3e8:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 801e3ec:	601a      	str	r2, [r3, #0]
 801e3ee:	f207 62dc 	addw	r2, r7, #1756	; 0x6dc
 801e3f2:	2308      	movs	r3, #8
 801e3f4:	6013      	str	r3, [r2, #0]
 801e3f6:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801e3fa:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 801e3fe:	681b      	ldr	r3, [r3, #0]
 801e400:	6013      	str	r3, [r2, #0]
 801e402:	f207 62d4 	addw	r2, r7, #1748	; 0x6d4
 801e406:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e40e:	f207 62d4 	addw	r2, r7, #1748	; 0x6d4
 801e412:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801e416:	681b      	ldr	r3, [r3, #0]
 801e418:	f003 031f 	and.w	r3, r3, #31
 801e41c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e41e:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801e422:	681b      	ldr	r3, [r3, #0]
 801e424:	2b00      	cmp	r3, #0
 801e426:	d103      	bne.n	801e430 <arm_nn_mat_mult_nt_t_s8+0x9d2>
    return op1;
 801e428:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 801e42c:	681a      	ldr	r2, [r3, #0]
 801e42e:	e006      	b.n	801e43e <arm_nn_mat_mult_nt_t_s8+0x9e0>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e430:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801e434:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801e438:	6812      	ldr	r2, [r2, #0]
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	41da      	rors	r2, r3
 801e43e:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 801e442:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e444:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	fa2f f283 	sxtb16	r2, r3
 801e44e:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 801e452:	601a      	str	r2, [r3, #0]
  return(result);
 801e454:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 801e458:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e45a:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 801e45e:	601a      	str	r2, [r3, #0]
  return result;
 801e460:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 801e464:	681b      	ldr	r3, [r3, #0]
 801e466:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801e46a:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e46e:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801e472:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801e476:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801e47a:	601a      	str	r2, [r3, #0]
 801e47c:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 801e480:	6019      	str	r1, [r3, #0]
 801e482:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 801e486:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e488:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801e48c:	6819      	ldr	r1, [r3, #0]
 801e48e:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 801e492:	681a      	ldr	r2, [r3, #0]
 801e494:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	fb21 3202 	smlad	r2, r1, r2, r3
 801e49e:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 801e4a2:	601a      	str	r2, [r3, #0]
  return(result);
 801e4a4:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 801e4a8:	681b      	ldr	r3, [r3, #0]
 801e4aa:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801e4ae:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e4b2:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801e4b6:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801e4ba:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 801e4be:	601a      	str	r2, [r3, #0]
 801e4c0:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 801e4c4:	6019      	str	r1, [r3, #0]
 801e4c6:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 801e4ca:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e4cc:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 801e4d0:	6819      	ldr	r1, [r3, #0]
 801e4d2:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 801e4d6:	681a      	ldr	r2, [r3, #0]
 801e4d8:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 801e4dc:	681b      	ldr	r3, [r3, #0]
 801e4de:	fb21 3202 	smlad	r2, r1, r2, r3
 801e4e2:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 801e4e6:	601a      	str	r2, [r3, #0]
  return(result);
 801e4e8:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 801e4ec:	681b      	ldr	r3, [r3, #0]
 801e4ee:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801e4f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e4f6:	681a      	ldr	r2, [r3, #0]
 801e4f8:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801e4fc:	441a      	add	r2, r3
 801e4fe:	f207 7304 	addw	r3, r7, #1796	; 0x704
 801e502:	601a      	str	r2, [r3, #0]
 801e504:	f207 7304 	addw	r3, r7, #1796	; 0x704
 801e508:	681b      	ldr	r3, [r3, #0]
 801e50a:	681b      	ldr	r3, [r3, #0]
 801e50c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801e50e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e512:	601a      	str	r2, [r3, #0]
    return (val);
 801e514:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801e51e:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e522:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 801e526:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e528:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 801e52c:	681b      	ldr	r3, [r3, #0]
 801e52e:	fa2f f283 	sxtb16	r2, r3
 801e532:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 801e536:	601a      	str	r2, [r3, #0]
  return(result);
 801e538:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 801e53c:	681b      	ldr	r3, [r3, #0]
 801e53e:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801e542:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e546:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 801e54a:	601a      	str	r2, [r3, #0]
 801e54c:	f207 7224 	addw	r2, r7, #1828	; 0x724
 801e550:	2308      	movs	r3, #8
 801e552:	6013      	str	r3, [r2, #0]
 801e554:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801e558:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	6013      	str	r3, [r2, #0]
 801e560:	f207 721c 	addw	r2, r7, #1820	; 0x71c
 801e564:	f207 7324 	addw	r3, r7, #1828	; 0x724
 801e568:	681b      	ldr	r3, [r3, #0]
 801e56a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e56c:	f207 721c 	addw	r2, r7, #1820	; 0x71c
 801e570:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801e574:	681b      	ldr	r3, [r3, #0]
 801e576:	f003 031f 	and.w	r3, r3, #31
 801e57a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e57c:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801e580:	681b      	ldr	r3, [r3, #0]
 801e582:	2b00      	cmp	r3, #0
 801e584:	d103      	bne.n	801e58e <arm_nn_mat_mult_nt_t_s8+0xb30>
    return op1;
 801e586:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801e58a:	681a      	ldr	r2, [r3, #0]
 801e58c:	e006      	b.n	801e59c <arm_nn_mat_mult_nt_t_s8+0xb3e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e58e:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801e592:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801e596:	6812      	ldr	r2, [r2, #0]
 801e598:	681b      	ldr	r3, [r3, #0]
 801e59a:	41da      	rors	r2, r3
 801e59c:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 801e5a0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e5a2:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	fa2f f283 	sxtb16	r2, r3
 801e5ac:	f207 7314 	addw	r3, r7, #1812	; 0x714
 801e5b0:	601a      	str	r2, [r3, #0]
  return(result);
 801e5b2:	f207 7314 	addw	r3, r7, #1812	; 0x714
 801e5b6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e5b8:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 801e5bc:	601a      	str	r2, [r3, #0]
  return result;
 801e5be:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801e5c8:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e5cc:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801e5d0:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801e5d4:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 801e5d8:	601a      	str	r2, [r3, #0]
 801e5da:	f207 7334 	addw	r3, r7, #1844	; 0x734
 801e5de:	6019      	str	r1, [r3, #0]
 801e5e0:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 801e5e4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e5e6:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 801e5ea:	6819      	ldr	r1, [r3, #0]
 801e5ec:	f207 7334 	addw	r3, r7, #1844	; 0x734
 801e5f0:	681a      	ldr	r2, [r3, #0]
 801e5f2:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 801e5f6:	681b      	ldr	r3, [r3, #0]
 801e5f8:	fb21 3202 	smlad	r2, r1, r2, r3
 801e5fc:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 801e600:	601a      	str	r2, [r3, #0]
  return(result);
 801e602:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 801e606:	681b      	ldr	r3, [r3, #0]
 801e608:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801e60c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e610:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801e614:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801e618:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 801e61c:	601a      	str	r2, [r3, #0]
 801e61e:	f207 7344 	addw	r3, r7, #1860	; 0x744
 801e622:	6019      	str	r1, [r3, #0]
 801e624:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 801e628:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e62a:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 801e62e:	6819      	ldr	r1, [r3, #0]
 801e630:	f207 7344 	addw	r3, r7, #1860	; 0x744
 801e634:	681a      	ldr	r2, [r3, #0]
 801e636:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	fb21 3202 	smlad	r2, r1, r2, r3
 801e640:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 801e644:	601a      	str	r2, [r3, #0]
  return(result);
 801e646:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801e650:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e654:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801e658:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801e65c:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 801e660:	601a      	str	r2, [r3, #0]
 801e662:	f207 7354 	addw	r3, r7, #1876	; 0x754
 801e666:	6019      	str	r1, [r3, #0]
 801e668:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801e66c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e66e:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 801e672:	6819      	ldr	r1, [r3, #0]
 801e674:	f207 7354 	addw	r3, r7, #1876	; 0x754
 801e678:	681a      	ldr	r2, [r3, #0]
 801e67a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801e67e:	681b      	ldr	r3, [r3, #0]
 801e680:	fb21 3202 	smlad	r2, r1, r2, r3
 801e684:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 801e688:	601a      	str	r2, [r3, #0]
  return(result);
 801e68a:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 801e68e:	681b      	ldr	r3, [r3, #0]
 801e690:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801e694:	f207 725c 	addw	r2, r7, #1884	; 0x75c
 801e698:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e69c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e69e:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801e6a2:	681b      	ldr	r3, [r3, #0]
 801e6a4:	681b      	ldr	r3, [r3, #0]
 801e6a6:	681b      	ldr	r3, [r3, #0]
 801e6a8:	461a      	mov	r2, r3
 801e6aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801e6ae:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e6b0:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801e6b4:	681b      	ldr	r3, [r3, #0]
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	1d1a      	adds	r2, r3, #4
 801e6ba:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801e6be:	681b      	ldr	r3, [r3, #0]
 801e6c0:	601a      	str	r2, [r3, #0]
    return (val);
 801e6c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801e6c6:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801e6c8:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801e6cc:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e6d0:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801e6d4:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801e6d8:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 801e6dc:	601a      	str	r2, [r3, #0]
 801e6de:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801e6e2:	6019      	str	r1, [r3, #0]
 801e6e4:	f207 7364 	addw	r3, r7, #1892	; 0x764
 801e6e8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e6ea:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 801e6ee:	6819      	ldr	r1, [r3, #0]
 801e6f0:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801e6f4:	681a      	ldr	r2, [r3, #0]
 801e6f6:	f207 7364 	addw	r3, r7, #1892	; 0x764
 801e6fa:	681b      	ldr	r3, [r3, #0]
 801e6fc:	fb21 3202 	smlad	r2, r1, r2, r3
 801e700:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 801e704:	601a      	str	r2, [r3, #0]
  return(result);
 801e706:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801e710:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e714:	681a      	ldr	r2, [r3, #0]
 801e716:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801e71a:	441a      	add	r2, r3
 801e71c:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 801e720:	601a      	str	r2, [r3, #0]
 801e722:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 801e726:	681b      	ldr	r3, [r3, #0]
 801e728:	681b      	ldr	r3, [r3, #0]
 801e72a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801e72c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e730:	601a      	str	r2, [r3, #0]
    return (val);
 801e732:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e736:	681b      	ldr	r3, [r3, #0]
 801e738:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801e73c:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801e740:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 801e744:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e746:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 801e74a:	681b      	ldr	r3, [r3, #0]
 801e74c:	fa2f f283 	sxtb16	r2, r3
 801e750:	f207 7374 	addw	r3, r7, #1908	; 0x774
 801e754:	601a      	str	r2, [r3, #0]
  return(result);
 801e756:	f207 7374 	addw	r3, r7, #1908	; 0x774
 801e75a:	681b      	ldr	r3, [r3, #0]
 801e75c:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801e760:	f207 727c 	addw	r2, r7, #1916	; 0x77c
 801e764:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e768:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e76a:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	681b      	ldr	r3, [r3, #0]
 801e772:	681b      	ldr	r3, [r3, #0]
 801e774:	461a      	mov	r2, r3
 801e776:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801e77a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e77c:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801e780:	681b      	ldr	r3, [r3, #0]
 801e782:	681b      	ldr	r3, [r3, #0]
 801e784:	1d1a      	adds	r2, r3, #4
 801e786:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801e78a:	681b      	ldr	r3, [r3, #0]
 801e78c:	601a      	str	r2, [r3, #0]
    return (val);
 801e78e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801e792:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801e794:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801e798:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e79c:	f207 7384 	addw	r3, r7, #1924	; 0x784
 801e7a0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e7a2:	f207 7384 	addw	r3, r7, #1924	; 0x784
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	fa2f f283 	sxtb16	r2, r3
 801e7ac:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801e7b0:	601a      	str	r2, [r3, #0]
  return(result);
 801e7b2:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801e7bc:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801e7c0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801e7c4:	601a      	str	r2, [r3, #0]
 801e7c6:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 801e7ca:	2308      	movs	r3, #8
 801e7cc:	6013      	str	r3, [r2, #0]
 801e7ce:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 801e7d2:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801e7d6:	681b      	ldr	r3, [r3, #0]
 801e7d8:	6013      	str	r3, [r2, #0]
 801e7da:	f207 7294 	addw	r2, r7, #1940	; 0x794
 801e7de:	f207 739c 	addw	r3, r7, #1948	; 0x79c
 801e7e2:	681b      	ldr	r3, [r3, #0]
 801e7e4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e7e6:	f207 7294 	addw	r2, r7, #1940	; 0x794
 801e7ea:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801e7ee:	681b      	ldr	r3, [r3, #0]
 801e7f0:	f003 031f 	and.w	r3, r3, #31
 801e7f4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e7f6:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801e7fa:	681b      	ldr	r3, [r3, #0]
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	d103      	bne.n	801e808 <arm_nn_mat_mult_nt_t_s8+0xdaa>
    return op1;
 801e800:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 801e804:	681a      	ldr	r2, [r3, #0]
 801e806:	e006      	b.n	801e816 <arm_nn_mat_mult_nt_t_s8+0xdb8>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e808:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 801e80c:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801e810:	6812      	ldr	r2, [r2, #0]
 801e812:	681b      	ldr	r3, [r3, #0]
 801e814:	41da      	rors	r2, r3
 801e816:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 801e81a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e81c:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 801e820:	681b      	ldr	r3, [r3, #0]
 801e822:	fa2f f283 	sxtb16	r2, r3
 801e826:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 801e82a:	601a      	str	r2, [r3, #0]
  return(result);
 801e82c:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 801e830:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e832:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 801e836:	601a      	str	r2, [r3, #0]
  return result;
 801e838:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801e842:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e846:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 801e84a:	601a      	str	r2, [r3, #0]
 801e84c:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 801e850:	2308      	movs	r3, #8
 801e852:	6013      	str	r3, [r2, #0]
 801e854:	f207 72b4 	addw	r2, r7, #1972	; 0x7b4
 801e858:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 801e85c:	681b      	ldr	r3, [r3, #0]
 801e85e:	6013      	str	r3, [r2, #0]
 801e860:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 801e864:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 801e868:	681b      	ldr	r3, [r3, #0]
 801e86a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e86c:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 801e870:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	f003 031f 	and.w	r3, r3, #31
 801e87a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e87c:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801e880:	681b      	ldr	r3, [r3, #0]
 801e882:	2b00      	cmp	r3, #0
 801e884:	d103      	bne.n	801e88e <arm_nn_mat_mult_nt_t_s8+0xe30>
    return op1;
 801e886:	f207 73b4 	addw	r3, r7, #1972	; 0x7b4
 801e88a:	681a      	ldr	r2, [r3, #0]
 801e88c:	e006      	b.n	801e89c <arm_nn_mat_mult_nt_t_s8+0xe3e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e88e:	f207 72b4 	addw	r2, r7, #1972	; 0x7b4
 801e892:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801e896:	6812      	ldr	r2, [r2, #0]
 801e898:	681b      	ldr	r3, [r3, #0]
 801e89a:	41da      	rors	r2, r3
 801e89c:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 801e8a0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e8a2:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 801e8a6:	681b      	ldr	r3, [r3, #0]
 801e8a8:	fa2f f283 	sxtb16	r2, r3
 801e8ac:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 801e8b0:	601a      	str	r2, [r3, #0]
  return(result);
 801e8b2:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 801e8b6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e8b8:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 801e8bc:	601a      	str	r2, [r3, #0]
  return result;
 801e8be:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 801e8c2:	681b      	ldr	r3, [r3, #0]
 801e8c4:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801e8c8:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e8cc:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801e8d0:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e8d4:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 801e8d8:	601a      	str	r2, [r3, #0]
 801e8da:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 801e8de:	6019      	str	r1, [r3, #0]
 801e8e0:	f207 73c4 	addw	r3, r7, #1988	; 0x7c4
 801e8e4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e8e6:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 801e8ea:	6819      	ldr	r1, [r3, #0]
 801e8ec:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 801e8f0:	681a      	ldr	r2, [r3, #0]
 801e8f2:	f207 73c4 	addw	r3, r7, #1988	; 0x7c4
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	fb21 3202 	smlad	r2, r1, r2, r3
 801e8fc:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 801e900:	601a      	str	r2, [r3, #0]
  return(result);
 801e902:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801e90c:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e910:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 801e914:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e916:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 801e91a:	681b      	ldr	r3, [r3, #0]
 801e91c:	fa2f f283 	sxtb16	r2, r3
 801e920:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 801e924:	601a      	str	r2, [r3, #0]
  return(result);
 801e926:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801e930:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e934:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801e938:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e93c:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 801e940:	601a      	str	r2, [r3, #0]
 801e942:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 801e946:	6019      	str	r1, [r3, #0]
 801e948:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 801e94c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e94e:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 801e952:	6819      	ldr	r1, [r3, #0]
 801e954:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 801e958:	681a      	ldr	r2, [r3, #0]
 801e95a:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	fb21 3202 	smlad	r2, r1, r2, r3
 801e964:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801e968:	601a      	str	r2, [r3, #0]
  return(result);
 801e96a:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801e974:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e978:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 801e97c:	601a      	str	r2, [r3, #0]
 801e97e:	f207 72fc 	addw	r2, r7, #2044	; 0x7fc
 801e982:	2308      	movs	r3, #8
 801e984:	6013      	str	r3, [r2, #0]
 801e986:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 801e98a:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	6013      	str	r3, [r2, #0]
 801e992:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 801e996:	f207 73fc 	addw	r3, r7, #2044	; 0x7fc
 801e99a:	681b      	ldr	r3, [r3, #0]
 801e99c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e99e:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 801e9a2:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801e9a6:	681b      	ldr	r3, [r3, #0]
 801e9a8:	f003 031f 	and.w	r3, r3, #31
 801e9ac:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e9ae:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801e9b2:	681b      	ldr	r3, [r3, #0]
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d103      	bne.n	801e9c0 <arm_nn_mat_mult_nt_t_s8+0xf62>
    return op1;
 801e9b8:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 801e9bc:	681a      	ldr	r2, [r3, #0]
 801e9be:	e006      	b.n	801e9ce <arm_nn_mat_mult_nt_t_s8+0xf70>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e9c0:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 801e9c4:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801e9c8:	6812      	ldr	r2, [r2, #0]
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	41da      	rors	r2, r3
 801e9ce:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801e9d2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e9d4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801e9d8:	681b      	ldr	r3, [r3, #0]
 801e9da:	fa2f f283 	sxtb16	r2, r3
 801e9de:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 801e9e2:	601a      	str	r2, [r3, #0]
  return(result);
 801e9e4:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 801e9e8:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e9ea:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 801e9ee:	601a      	str	r2, [r3, #0]
  return result;
 801e9f0:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 801e9f4:	681b      	ldr	r3, [r3, #0]
 801e9f6:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801e9fa:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e9fe:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801ea02:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801ea06:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801ea0a:	601a      	str	r2, [r3, #0]
 801ea0c:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 801ea10:	6019      	str	r1, [r3, #0]
 801ea12:	f607 0308 	addw	r3, r7, #2056	; 0x808
 801ea16:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ea18:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801ea1c:	6819      	ldr	r1, [r3, #0]
 801ea1e:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 801ea22:	681a      	ldr	r2, [r3, #0]
 801ea24:	f607 0308 	addw	r3, r7, #2056	; 0x808
 801ea28:	681b      	ldr	r3, [r3, #0]
 801ea2a:	fb21 3202 	smlad	r2, r1, r2, r3
 801ea2e:	f607 0304 	addw	r3, r7, #2052	; 0x804
 801ea32:	601a      	str	r2, [r3, #0]
  return(result);
 801ea34:	f607 0304 	addw	r3, r7, #2052	; 0x804
 801ea38:	681b      	ldr	r3, [r3, #0]
 801ea3a:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801ea3e:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ea42:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801ea46:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801ea4a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 801ea4e:	601a      	str	r2, [r3, #0]
 801ea50:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 801ea54:	6019      	str	r1, [r3, #0]
 801ea56:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801ea5a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ea5c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 801ea60:	6819      	ldr	r1, [r3, #0]
 801ea62:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 801ea66:	681a      	ldr	r2, [r3, #0]
 801ea68:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801ea6c:	681b      	ldr	r3, [r3, #0]
 801ea6e:	fb21 3202 	smlad	r2, r1, r2, r3
 801ea72:	f607 0314 	addw	r3, r7, #2068	; 0x814
 801ea76:	601a      	str	r2, [r3, #0]
  return(result);
 801ea78:	f607 0314 	addw	r3, r7, #2068	; 0x814
 801ea7c:	681b      	ldr	r3, [r3, #0]
 801ea7e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801ea82:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ea86:	681a      	ldr	r2, [r3, #0]
 801ea88:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801ea8c:	441a      	add	r2, r3
 801ea8e:	f607 0324 	addw	r3, r7, #2084	; 0x824
 801ea92:	601a      	str	r2, [r3, #0]
 801ea94:	f607 0324 	addw	r3, r7, #2084	; 0x824
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	681b      	ldr	r3, [r3, #0]
 801ea9c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ea9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801eaa2:	601a      	str	r2, [r3, #0]
    return (val);
 801eaa4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801eaa8:	681b      	ldr	r3, [r3, #0]
 801eaaa:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801eaae:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801eab2:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 801eab6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eab8:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 801eabc:	681b      	ldr	r3, [r3, #0]
 801eabe:	fa2f f283 	sxtb16	r2, r3
 801eac2:	f607 0328 	addw	r3, r7, #2088	; 0x828
 801eac6:	601a      	str	r2, [r3, #0]
  return(result);
 801eac8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 801eacc:	681b      	ldr	r3, [r3, #0]
 801eace:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801ead2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ead6:	f607 0348 	addw	r3, r7, #2120	; 0x848
 801eada:	601a      	str	r2, [r3, #0]
 801eadc:	f607 0244 	addw	r2, r7, #2116	; 0x844
 801eae0:	2308      	movs	r3, #8
 801eae2:	6013      	str	r3, [r2, #0]
 801eae4:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 801eae8:	f607 0348 	addw	r3, r7, #2120	; 0x848
 801eaec:	681b      	ldr	r3, [r3, #0]
 801eaee:	6013      	str	r3, [r2, #0]
 801eaf0:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 801eaf4:	f607 0344 	addw	r3, r7, #2116	; 0x844
 801eaf8:	681b      	ldr	r3, [r3, #0]
 801eafa:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801eafc:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 801eb00:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801eb04:	681b      	ldr	r3, [r3, #0]
 801eb06:	f003 031f 	and.w	r3, r3, #31
 801eb0a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801eb0c:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d103      	bne.n	801eb1e <arm_nn_mat_mult_nt_t_s8+0x10c0>
    return op1;
 801eb16:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 801eb1a:	681a      	ldr	r2, [r3, #0]
 801eb1c:	e006      	b.n	801eb2c <arm_nn_mat_mult_nt_t_s8+0x10ce>
  return (op1 >> op2) | (op1 << (32U - op2));
 801eb1e:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 801eb22:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801eb26:	6812      	ldr	r2, [r2, #0]
 801eb28:	681b      	ldr	r3, [r3, #0]
 801eb2a:	41da      	rors	r2, r3
 801eb2c:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801eb30:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eb32:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801eb36:	681b      	ldr	r3, [r3, #0]
 801eb38:	fa2f f283 	sxtb16	r2, r3
 801eb3c:	f607 0334 	addw	r3, r7, #2100	; 0x834
 801eb40:	601a      	str	r2, [r3, #0]
  return(result);
 801eb42:	f607 0334 	addw	r3, r7, #2100	; 0x834
 801eb46:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801eb48:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 801eb4c:	601a      	str	r2, [r3, #0]
  return result;
 801eb4e:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 801eb52:	681b      	ldr	r3, [r3, #0]
 801eb54:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801eb58:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801eb5c:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801eb60:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801eb64:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801eb68:	601a      	str	r2, [r3, #0]
 801eb6a:	f607 0354 	addw	r3, r7, #2132	; 0x854
 801eb6e:	6019      	str	r1, [r3, #0]
 801eb70:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801eb74:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801eb76:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801eb7a:	6819      	ldr	r1, [r3, #0]
 801eb7c:	f607 0354 	addw	r3, r7, #2132	; 0x854
 801eb80:	681a      	ldr	r2, [r3, #0]
 801eb82:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801eb86:	681b      	ldr	r3, [r3, #0]
 801eb88:	fb21 3202 	smlad	r2, r1, r2, r3
 801eb8c:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 801eb90:	601a      	str	r2, [r3, #0]
  return(result);
 801eb92:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 801eb96:	681b      	ldr	r3, [r3, #0]
 801eb98:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801eb9c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801eba0:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801eba4:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801eba8:	f607 0368 	addw	r3, r7, #2152	; 0x868
 801ebac:	601a      	str	r2, [r3, #0]
 801ebae:	f607 0364 	addw	r3, r7, #2148	; 0x864
 801ebb2:	6019      	str	r1, [r3, #0]
 801ebb4:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801ebb8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ebba:	f607 0368 	addw	r3, r7, #2152	; 0x868
 801ebbe:	6819      	ldr	r1, [r3, #0]
 801ebc0:	f607 0364 	addw	r3, r7, #2148	; 0x864
 801ebc4:	681a      	ldr	r2, [r3, #0]
 801ebc6:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801ebca:	681b      	ldr	r3, [r3, #0]
 801ebcc:	fb21 3202 	smlad	r2, r1, r2, r3
 801ebd0:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 801ebd4:	601a      	str	r2, [r3, #0]
  return(result);
 801ebd6:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 801ebda:	681b      	ldr	r3, [r3, #0]
 801ebdc:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801ebe0:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ebe4:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801ebe8:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801ebec:	f607 0378 	addw	r3, r7, #2168	; 0x878
 801ebf0:	601a      	str	r2, [r3, #0]
 801ebf2:	f607 0374 	addw	r3, r7, #2164	; 0x874
 801ebf6:	6019      	str	r1, [r3, #0]
 801ebf8:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 801ebfc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ebfe:	f607 0378 	addw	r3, r7, #2168	; 0x878
 801ec02:	6819      	ldr	r1, [r3, #0]
 801ec04:	f607 0374 	addw	r3, r7, #2164	; 0x874
 801ec08:	681a      	ldr	r2, [r3, #0]
 801ec0a:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 801ec0e:	681b      	ldr	r3, [r3, #0]
 801ec10:	fb21 3202 	smlad	r2, r1, r2, r3
 801ec14:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 801ec18:	601a      	str	r2, [r3, #0]
  return(result);
 801ec1a:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 801ec1e:	681b      	ldr	r3, [r3, #0]
 801ec20:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801ec24:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 801ec28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801ec2c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ec2e:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801ec32:	681b      	ldr	r3, [r3, #0]
 801ec34:	681b      	ldr	r3, [r3, #0]
 801ec36:	681b      	ldr	r3, [r3, #0]
 801ec38:	461a      	mov	r2, r3
 801ec3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801ec3e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ec40:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801ec44:	681b      	ldr	r3, [r3, #0]
 801ec46:	681b      	ldr	r3, [r3, #0]
 801ec48:	1d1a      	adds	r2, r3, #4
 801ec4a:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801ec4e:	681b      	ldr	r3, [r3, #0]
 801ec50:	601a      	str	r2, [r3, #0]
    return (val);
 801ec52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801ec56:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801ec58:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801ec5c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ec60:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801ec64:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801ec68:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 801ec6c:	601a      	str	r2, [r3, #0]
 801ec6e:	f607 0388 	addw	r3, r7, #2184	; 0x888
 801ec72:	6019      	str	r1, [r3, #0]
 801ec74:	f607 0384 	addw	r3, r7, #2180	; 0x884
 801ec78:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ec7a:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 801ec7e:	6819      	ldr	r1, [r3, #0]
 801ec80:	f607 0388 	addw	r3, r7, #2184	; 0x888
 801ec84:	681a      	ldr	r2, [r3, #0]
 801ec86:	f607 0384 	addw	r3, r7, #2180	; 0x884
 801ec8a:	681b      	ldr	r3, [r3, #0]
 801ec8c:	fb21 3202 	smlad	r2, r1, r2, r3
 801ec90:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801ec94:	601a      	str	r2, [r3, #0]
  return(result);
 801ec96:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801ec9a:	681b      	ldr	r3, [r3, #0]
 801ec9c:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801eca0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801eca4:	681a      	ldr	r2, [r3, #0]
 801eca6:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801ecaa:	441a      	add	r2, r3
 801ecac:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801ecb0:	601a      	str	r2, [r3, #0]
 801ecb2:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801ecb6:	681b      	ldr	r3, [r3, #0]
 801ecb8:	681b      	ldr	r3, [r3, #0]
 801ecba:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ecbc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ecc0:	601a      	str	r2, [r3, #0]
    return (val);
 801ecc2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ecc6:	681b      	ldr	r3, [r3, #0]
 801ecc8:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801eccc:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801ecd0:	f607 0398 	addw	r3, r7, #2200	; 0x898
 801ecd4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ecd6:	f607 0398 	addw	r3, r7, #2200	; 0x898
 801ecda:	681b      	ldr	r3, [r3, #0]
 801ecdc:	fa2f f283 	sxtb16	r2, r3
 801ece0:	f607 0394 	addw	r3, r7, #2196	; 0x894
 801ece4:	601a      	str	r2, [r3, #0]
  return(result);
 801ece6:	f607 0394 	addw	r3, r7, #2196	; 0x894
 801ecea:	681b      	ldr	r3, [r3, #0]
 801ecec:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801ecf0:	f607 029c 	addw	r2, r7, #2204	; 0x89c
 801ecf4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ecf8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ecfa:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801ecfe:	681b      	ldr	r3, [r3, #0]
 801ed00:	681b      	ldr	r3, [r3, #0]
 801ed02:	681b      	ldr	r3, [r3, #0]
 801ed04:	461a      	mov	r2, r3
 801ed06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801ed0a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ed0c:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801ed10:	681b      	ldr	r3, [r3, #0]
 801ed12:	681b      	ldr	r3, [r3, #0]
 801ed14:	1d1a      	adds	r2, r3, #4
 801ed16:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801ed1a:	681b      	ldr	r3, [r3, #0]
 801ed1c:	601a      	str	r2, [r3, #0]
    return (val);
 801ed1e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801ed22:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801ed24:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801ed28:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ed2c:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 801ed30:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ed32:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 801ed36:	681b      	ldr	r3, [r3, #0]
 801ed38:	fa2f f283 	sxtb16	r2, r3
 801ed3c:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801ed40:	601a      	str	r2, [r3, #0]
  return(result);
 801ed42:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801ed46:	681b      	ldr	r3, [r3, #0]
 801ed48:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801ed4c:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801ed50:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 801ed54:	601a      	str	r2, [r3, #0]
 801ed56:	f607 02bc 	addw	r2, r7, #2236	; 0x8bc
 801ed5a:	2308      	movs	r3, #8
 801ed5c:	6013      	str	r3, [r2, #0]
 801ed5e:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 801ed62:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 801ed66:	681b      	ldr	r3, [r3, #0]
 801ed68:	6013      	str	r3, [r2, #0]
 801ed6a:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 801ed6e:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ed76:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 801ed7a:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801ed7e:	681b      	ldr	r3, [r3, #0]
 801ed80:	f003 031f 	and.w	r3, r3, #31
 801ed84:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ed86:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801ed8a:	681b      	ldr	r3, [r3, #0]
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d103      	bne.n	801ed98 <arm_nn_mat_mult_nt_t_s8+0x133a>
    return op1;
 801ed90:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 801ed94:	681a      	ldr	r2, [r3, #0]
 801ed96:	e006      	b.n	801eda6 <arm_nn_mat_mult_nt_t_s8+0x1348>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ed98:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 801ed9c:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801eda0:	6812      	ldr	r2, [r2, #0]
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	41da      	rors	r2, r3
 801eda6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801edaa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801edac:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	fa2f f283 	sxtb16	r2, r3
 801edb6:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 801edba:	601a      	str	r2, [r3, #0]
  return(result);
 801edbc:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 801edc0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801edc2:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 801edc6:	601a      	str	r2, [r3, #0]
  return result;
 801edc8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 801edcc:	681b      	ldr	r3, [r3, #0]
 801edce:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801edd2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801edd6:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 801edda:	601a      	str	r2, [r3, #0]
 801eddc:	f607 02d8 	addw	r2, r7, #2264	; 0x8d8
 801ede0:	2308      	movs	r3, #8
 801ede2:	6013      	str	r3, [r2, #0]
 801ede4:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 801ede8:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 801edec:	681b      	ldr	r3, [r3, #0]
 801edee:	6013      	str	r3, [r2, #0]
 801edf0:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 801edf4:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801edf8:	681b      	ldr	r3, [r3, #0]
 801edfa:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801edfc:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 801ee00:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801ee04:	681b      	ldr	r3, [r3, #0]
 801ee06:	f003 031f 	and.w	r3, r3, #31
 801ee0a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ee0c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801ee10:	681b      	ldr	r3, [r3, #0]
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	d103      	bne.n	801ee1e <arm_nn_mat_mult_nt_t_s8+0x13c0>
    return op1;
 801ee16:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 801ee1a:	681a      	ldr	r2, [r3, #0]
 801ee1c:	e006      	b.n	801ee2c <arm_nn_mat_mult_nt_t_s8+0x13ce>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ee1e:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 801ee22:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801ee26:	6812      	ldr	r2, [r2, #0]
 801ee28:	681b      	ldr	r3, [r3, #0]
 801ee2a:	41da      	rors	r2, r3
 801ee2c:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 801ee30:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ee32:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 801ee36:	681b      	ldr	r3, [r3, #0]
 801ee38:	fa2f f283 	sxtb16	r2, r3
 801ee3c:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801ee40:	601a      	str	r2, [r3, #0]
  return(result);
 801ee42:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801ee46:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ee48:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 801ee4c:	601a      	str	r2, [r3, #0]
  return result;
 801ee4e:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 801ee52:	681b      	ldr	r3, [r3, #0]
 801ee54:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801ee58:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801ee5c:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801ee60:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801ee64:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 801ee68:	601a      	str	r2, [r3, #0]
 801ee6a:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 801ee6e:	6019      	str	r1, [r3, #0]
 801ee70:	f607 03e4 	addw	r3, r7, #2276	; 0x8e4
 801ee74:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ee76:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 801ee7a:	6819      	ldr	r1, [r3, #0]
 801ee7c:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 801ee80:	681a      	ldr	r2, [r3, #0]
 801ee82:	f607 03e4 	addw	r3, r7, #2276	; 0x8e4
 801ee86:	681b      	ldr	r3, [r3, #0]
 801ee88:	fb21 3202 	smlad	r2, r1, r2, r3
 801ee8c:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 801ee90:	601a      	str	r2, [r3, #0]
  return(result);
 801ee92:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 801ee96:	681b      	ldr	r3, [r3, #0]
 801ee98:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801ee9c:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801eea0:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 801eea4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eea6:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 801eeaa:	681b      	ldr	r3, [r3, #0]
 801eeac:	fa2f f283 	sxtb16	r2, r3
 801eeb0:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 801eeb4:	601a      	str	r2, [r3, #0]
  return(result);
 801eeb6:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 801eeba:	681b      	ldr	r3, [r3, #0]
 801eebc:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801eec0:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801eec4:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801eec8:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801eecc:	f607 1304 	addw	r3, r7, #2308	; 0x904
 801eed0:	601a      	str	r2, [r3, #0]
 801eed2:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801eed6:	6019      	str	r1, [r3, #0]
 801eed8:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 801eedc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801eede:	f607 1304 	addw	r3, r7, #2308	; 0x904
 801eee2:	6819      	ldr	r1, [r3, #0]
 801eee4:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801eee8:	681a      	ldr	r2, [r3, #0]
 801eeea:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 801eeee:	681b      	ldr	r3, [r3, #0]
 801eef0:	fb21 3202 	smlad	r2, r1, r2, r3
 801eef4:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 801eef8:	601a      	str	r2, [r3, #0]
  return(result);
 801eefa:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 801eefe:	681b      	ldr	r3, [r3, #0]
 801ef00:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801ef04:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801ef08:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801ef0c:	601a      	str	r2, [r3, #0]
 801ef0e:	f607 121c 	addw	r2, r7, #2332	; 0x91c
 801ef12:	2308      	movs	r3, #8
 801ef14:	6013      	str	r3, [r2, #0]
 801ef16:	f607 1218 	addw	r2, r7, #2328	; 0x918
 801ef1a:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	6013      	str	r3, [r2, #0]
 801ef22:	f607 1214 	addw	r2, r7, #2324	; 0x914
 801ef26:	f607 131c 	addw	r3, r7, #2332	; 0x91c
 801ef2a:	681b      	ldr	r3, [r3, #0]
 801ef2c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ef2e:	f607 1214 	addw	r2, r7, #2324	; 0x914
 801ef32:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801ef36:	681b      	ldr	r3, [r3, #0]
 801ef38:	f003 031f 	and.w	r3, r3, #31
 801ef3c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ef3e:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801ef42:	681b      	ldr	r3, [r3, #0]
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d103      	bne.n	801ef50 <arm_nn_mat_mult_nt_t_s8+0x14f2>
    return op1;
 801ef48:	f607 1318 	addw	r3, r7, #2328	; 0x918
 801ef4c:	681a      	ldr	r2, [r3, #0]
 801ef4e:	e006      	b.n	801ef5e <arm_nn_mat_mult_nt_t_s8+0x1500>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ef50:	f607 1218 	addw	r2, r7, #2328	; 0x918
 801ef54:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801ef58:	6812      	ldr	r2, [r2, #0]
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	41da      	rors	r2, r3
 801ef5e:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 801ef62:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ef64:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 801ef68:	681b      	ldr	r3, [r3, #0]
 801ef6a:	fa2f f283 	sxtb16	r2, r3
 801ef6e:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 801ef72:	601a      	str	r2, [r3, #0]
  return(result);
 801ef74:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 801ef78:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ef7a:	f607 1308 	addw	r3, r7, #2312	; 0x908
 801ef7e:	601a      	str	r2, [r3, #0]
  return result;
 801ef80:	f607 1308 	addw	r3, r7, #2312	; 0x908
 801ef84:	681b      	ldr	r3, [r3, #0]
 801ef86:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801ef8a:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801ef8e:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801ef92:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801ef96:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801ef9a:	601a      	str	r2, [r3, #0]
 801ef9c:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 801efa0:	6019      	str	r1, [r3, #0]
 801efa2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801efa6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801efa8:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801efac:	6819      	ldr	r1, [r3, #0]
 801efae:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 801efb2:	681a      	ldr	r2, [r3, #0]
 801efb4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801efb8:	681b      	ldr	r3, [r3, #0]
 801efba:	fb21 3202 	smlad	r2, r1, r2, r3
 801efbe:	f607 1324 	addw	r3, r7, #2340	; 0x924
 801efc2:	601a      	str	r2, [r3, #0]
  return(result);
 801efc4:	f607 1324 	addw	r3, r7, #2340	; 0x924
 801efc8:	681b      	ldr	r3, [r3, #0]
 801efca:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801efce:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801efd2:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801efd6:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801efda:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801efde:	601a      	str	r2, [r3, #0]
 801efe0:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 801efe4:	6019      	str	r1, [r3, #0]
 801efe6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801efea:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801efec:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801eff0:	6819      	ldr	r1, [r3, #0]
 801eff2:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 801eff6:	681a      	ldr	r2, [r3, #0]
 801eff8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	fb21 3202 	smlad	r2, r1, r2, r3
 801f002:	f607 1334 	addw	r3, r7, #2356	; 0x934
 801f006:	601a      	str	r2, [r3, #0]
  return(result);
 801f008:	f607 1334 	addw	r3, r7, #2356	; 0x934
 801f00c:	681b      	ldr	r3, [r3, #0]
 801f00e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801f012:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f016:	681a      	ldr	r2, [r3, #0]
 801f018:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801f01c:	4413      	add	r3, r2
 801f01e:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 801f022:	f8d7 3944 	ldr.w	r3, [r7, #2372]	; 0x944
 801f026:	681b      	ldr	r3, [r3, #0]
 801f028:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801f02a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f02e:	601a      	str	r2, [r3, #0]
    return (val);
 801f030:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f034:	681b      	ldr	r3, [r3, #0]
 801f036:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801f03a:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 801f03e:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f042:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 801f046:	fa2f f383 	sxtb16	r3, r3
 801f04a:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
  return(result);
 801f04e:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
 801f052:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801f056:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 801f05a:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 801f05e:	2308      	movs	r3, #8
 801f060:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801f064:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 801f068:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 801f06c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801f070:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
  op2 %= 32U;
 801f074:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801f078:	f003 031f 	and.w	r3, r3, #31
 801f07c:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
  if (op2 == 0U)
 801f080:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801f084:	2b00      	cmp	r3, #0
 801f086:	d102      	bne.n	801f08e <arm_nn_mat_mult_nt_t_s8+0x1630>
    return op1;
 801f088:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 801f08c:	e005      	b.n	801f09a <arm_nn_mat_mult_nt_t_s8+0x163c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f08e:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 801f092:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801f096:	fa62 f303 	ror.w	r3, r2, r3
 801f09a:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f09e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801f0a2:	fa2f f383 	sxtb16	r3, r3
 801f0a6:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
  return(result);
 801f0aa:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f0ae:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
  return result;
 801f0b2:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 801f0b6:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801f0ba:	f8d7 19b4 	ldr.w	r1, [r7, #2484]	; 0x9b4
 801f0be:	f8d7 29bc 	ldr.w	r2, [r7, #2492]	; 0x9bc
 801f0c2:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f0c6:	f8c7 1978 	str.w	r1, [r7, #2424]	; 0x978
 801f0ca:	f8c7 2974 	str.w	r2, [r7, #2420]	; 0x974
 801f0ce:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f0d2:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 801f0d6:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 801f0da:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 801f0de:	fb21 3302 	smlad	r3, r1, r2, r3
 801f0e2:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
  return(result);
 801f0e6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801f0ea:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801f0ee:	f8d7 19b4 	ldr.w	r1, [r7, #2484]	; 0x9b4
 801f0f2:	f8d7 29ac 	ldr.w	r2, [r7, #2476]	; 0x9ac
 801f0f6:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801f0fa:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 801f0fe:	f8c7 2984 	str.w	r2, [r7, #2436]	; 0x984
 801f102:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f106:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 801f10a:	f8d7 2984 	ldr.w	r2, [r7, #2436]	; 0x984
 801f10e:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 801f112:	fb21 3302 	smlad	r3, r1, r2, r3
 801f116:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
  return(result);
 801f11a:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 801f11e:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801f122:	f8d7 19b8 	ldr.w	r1, [r7, #2488]	; 0x9b8
 801f126:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801f12a:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f12e:	f8c7 1998 	str.w	r1, [r7, #2456]	; 0x998
 801f132:	f8c7 2994 	str.w	r2, [r7, #2452]	; 0x994
 801f136:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f13a:	f8d7 1998 	ldr.w	r1, [r7, #2456]	; 0x998
 801f13e:	f8d7 2994 	ldr.w	r2, [r7, #2452]	; 0x994
 801f142:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 801f146:	fb21 3302 	smlad	r3, r1, r2, r3
 801f14a:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
  return(result);
 801f14e:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 801f152:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val0, val4, res11);
 801f156:	f8d7 19b8 	ldr.w	r1, [r7, #2488]	; 0x9b8
 801f15a:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801f15e:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801f162:	f8c7 19a8 	str.w	r1, [r7, #2472]	; 0x9a8
 801f166:	f8c7 29a4 	str.w	r2, [r7, #2468]	; 0x9a4
 801f16a:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f16e:	f8d7 19a8 	ldr.w	r1, [r7, #2472]	; 0x9a8
 801f172:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801f176:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 801f17a:	fb21 3302 	smlad	r3, r1, r2, r3
 801f17e:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c
  return(result);
 801f182:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 801f186:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801f18a:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801f18e:	3310      	adds	r3, #16
 801f190:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 801f194:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f198:	f1a3 020f 	sub.w	r2, r3, #15
 801f19c:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801f1a0:	4293      	cmp	r3, r2
 801f1a2:	f6fe ad09 	blt.w	801dbb8 <arm_nn_mat_mult_nt_t_s8+0x15a>
            }

            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801f1a6:	e05c      	b.n	801f262 <arm_nn_mat_mult_nt_t_s8+0x1804>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 801f1a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f1ac:	681b      	ldr	r3, [r3, #0]
 801f1ae:	781b      	ldrb	r3, [r3, #0]
 801f1b0:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 801f1b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f1b8:	681a      	ldr	r2, [r3, #0]
 801f1ba:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f1be:	4413      	add	r3, r2
 801f1c0:	781b      	ldrb	r3, [r3, #0]
 801f1c2:	f887 39c6 	strb.w	r3, [r7, #2502]	; 0x9c6
                q7_t lhs_value = lhs_ptr[0];
 801f1c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	781b      	ldrb	r3, [r3, #0]
 801f1ce:	f887 39c5 	strb.w	r3, [r7, #2501]	; 0x9c5

                res00 += lhs_value * rhs_value0;
 801f1d2:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801f1d6:	f997 39c7 	ldrsb.w	r3, [r7, #2503]	; 0x9c7
 801f1da:	fb03 f202 	mul.w	r2, r3, r2
 801f1de:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801f1e2:	4413      	add	r3, r2
 801f1e4:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                res01 += lhs_value * rhs_value1;
 801f1e8:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801f1ec:	f997 39c6 	ldrsb.w	r3, [r7, #2502]	; 0x9c6
 801f1f0:	fb03 f202 	mul.w	r2, r3, r2
 801f1f4:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801f1f8:	4413      	add	r3, r2
 801f1fa:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                lhs_value = lhs_ptr[rhs_cols];
 801f1fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f202:	681a      	ldr	r2, [r3, #0]
 801f204:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f208:	4413      	add	r3, r2
 801f20a:	781b      	ldrb	r3, [r3, #0]
 801f20c:	f887 39c5 	strb.w	r3, [r7, #2501]	; 0x9c5
                res10 += lhs_value * rhs_value0;
 801f210:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801f214:	f997 39c7 	ldrsb.w	r3, [r7, #2503]	; 0x9c7
 801f218:	fb03 f202 	mul.w	r2, r3, r2
 801f21c:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f220:	4413      	add	r3, r2
 801f222:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 += lhs_value * rhs_value1;
 801f226:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801f22a:	f997 39c6 	ldrsb.w	r3, [r7, #2502]	; 0x9c6
 801f22e:	fb03 f202 	mul.w	r2, r3, r2
 801f232:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801f236:	4413      	add	r3, r2
 801f238:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                ++rhs_ptr;
 801f23c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f240:	681b      	ldr	r3, [r3, #0]
 801f242:	1c5a      	adds	r2, r3, #1
 801f244:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f248:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 801f24a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	1c5a      	adds	r2, r3, #1
 801f252:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f256:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801f258:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801f25c:	3301      	adds	r3, #1
 801f25e:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 801f262:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	; 0xa14
 801f266:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f26a:	429a      	cmp	r2, r3
 801f26c:	db9c      	blt.n	801f1a8 <arm_nn_mat_mult_nt_t_s8+0x174a>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801f26e:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f272:	009a      	lsls	r2, r3, #2
 801f274:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801f278:	4413      	add	r3, r2
 801f27a:	6818      	ldr	r0, [r3, #0]
 801f27c:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f280:	009a      	lsls	r2, r3, #2
 801f282:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801f286:	4413      	add	r3, r2
 801f288:	6819      	ldr	r1, [r3, #0]
 801f28a:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 801f28e:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801f292:	6013      	str	r3, [r2, #0]
 801f294:	f207 4394 	addw	r3, r7, #1172	; 0x494
 801f298:	6018      	str	r0, [r3, #0]
 801f29a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801f29e:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f2a0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801f2aa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801f2ae:	681b      	ldr	r3, [r3, #0]
 801f2b0:	fa03 f202 	lsl.w	r2, r3, r2
 801f2b4:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 801f2b8:	601a      	str	r2, [r3, #0]
 801f2ba:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 801f2be:	f207 4394 	addw	r3, r7, #1172	; 0x494
 801f2c2:	681b      	ldr	r3, [r3, #0]
 801f2c4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f2c6:	f207 4284 	addw	r2, r7, #1156	; 0x484
 801f2ca:	2300      	movs	r3, #0
 801f2cc:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801f2ce:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801f2d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f2d6:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801f2d8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801f2dc:	2300      	movs	r3, #0
 801f2de:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f2e0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f2e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f2e8:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 801f2ec:	681b      	ldr	r3, [r3, #0]
 801f2ee:	4618      	mov	r0, r3
 801f2f0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f2f4:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 801f2f8:	681b      	ldr	r3, [r3, #0]
 801f2fa:	461a      	mov	r2, r3
 801f2fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f300:	fb02 f501 	mul.w	r5, r2, r1
 801f304:	fb00 f403 	mul.w	r4, r0, r3
 801f308:	442c      	add	r4, r5
 801f30a:	fba0 2302 	umull	r2, r3, r0, r2
 801f30e:	18e1      	adds	r1, r4, r3
 801f310:	460b      	mov	r3, r1
 801f312:	eb18 0102 	adds.w	r1, r8, r2
 801f316:	6139      	str	r1, [r7, #16]
 801f318:	eb49 0303 	adc.w	r3, r9, r3
 801f31c:	617b      	str	r3, [r7, #20]
 801f31e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f322:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801f326:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801f32a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f332:	f04f 0000 	mov.w	r0, #0
 801f336:	f04f 0100 	mov.w	r1, #0
 801f33a:	0fd0      	lsrs	r0, r2, #31
 801f33c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f340:	17d9      	asrs	r1, r3, #31
 801f342:	f207 4284 	addw	r2, r7, #1156	; 0x484
 801f346:	4603      	mov	r3, r0
 801f348:	6013      	str	r3, [r2, #0]
    return result;
 801f34a:	f207 4384 	addw	r3, r7, #1156	; 0x484
 801f34e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f350:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801f354:	681b      	ldr	r3, [r3, #0]
 801f356:	2b00      	cmp	r3, #0
 801f358:	dc04      	bgt.n	801f364 <arm_nn_mat_mult_nt_t_s8+0x1906>
 801f35a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801f35e:	681b      	ldr	r3, [r3, #0]
 801f360:	425a      	negs	r2, r3
 801f362:	e000      	b.n	801f366 <arm_nn_mat_mult_nt_t_s8+0x1908>
 801f364:	2200      	movs	r2, #0
 801f366:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801f36a:	6019      	str	r1, [r3, #0]
 801f36c:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801f370:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f372:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 801f376:	2300      	movs	r3, #0
 801f378:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f37a:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801f37e:	2201      	movs	r2, #1
 801f380:	681b      	ldr	r3, [r3, #0]
 801f382:	fa02 f303 	lsl.w	r3, r2, r3
 801f386:	f207 4274 	addw	r2, r7, #1140	; 0x474
 801f38a:	3b01      	subs	r3, #1
 801f38c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801f38e:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 801f392:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 801f396:	f207 4374 	addw	r3, r7, #1140	; 0x474
 801f39a:	6812      	ldr	r2, [r2, #0]
 801f39c:	681b      	ldr	r3, [r3, #0]
 801f39e:	4013      	ands	r3, r2
 801f3a0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801f3a2:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 801f3a6:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 801f3aa:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801f3ae:	6812      	ldr	r2, [r2, #0]
 801f3b0:	681b      	ldr	r3, [r3, #0]
 801f3b2:	fa42 f303 	asr.w	r3, r2, r3
 801f3b6:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801f3b8:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 801f3bc:	f207 4374 	addw	r3, r7, #1140	; 0x474
 801f3c0:	681b      	ldr	r3, [r3, #0]
 801f3c2:	105b      	asrs	r3, r3, #1
 801f3c4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801f3c6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801f3ca:	681b      	ldr	r3, [r3, #0]
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	da06      	bge.n	801f3de <arm_nn_mat_mult_nt_t_s8+0x1980>
        threshold++;
 801f3d0:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 801f3d4:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	3301      	adds	r3, #1
 801f3dc:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801f3de:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 801f3e2:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 801f3e6:	6812      	ldr	r2, [r2, #0]
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	429a      	cmp	r2, r3
 801f3ec:	dd06      	ble.n	801f3fc <arm_nn_mat_mult_nt_t_s8+0x199e>
        result++;
 801f3ee:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 801f3f2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	3301      	adds	r3, #1
 801f3fa:	6013      	str	r3, [r2, #0]
    return result;
 801f3fc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801f400:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f402:	bf00      	nop
 801f404:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801f408:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f40c:	3301      	adds	r3, #1
 801f40e:	009a      	lsls	r2, r3, #2
 801f410:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801f414:	4413      	add	r3, r2
 801f416:	6818      	ldr	r0, [r3, #0]
 801f418:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f41c:	3301      	adds	r3, #1
 801f41e:	009a      	lsls	r2, r3, #2
 801f420:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801f424:	4413      	add	r3, r2
 801f426:	6819      	ldr	r1, [r3, #0]
 801f428:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 801f42c:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801f430:	6013      	str	r3, [r2, #0]
 801f432:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 801f436:	6018      	str	r0, [r3, #0]
 801f438:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801f43c:	6019      	str	r1, [r3, #0]
 801f43e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801f442:	681b      	ldr	r3, [r3, #0]
 801f444:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801f448:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 801f44c:	681b      	ldr	r3, [r3, #0]
 801f44e:	fa03 f202 	lsl.w	r2, r3, r2
 801f452:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 801f456:	601a      	str	r2, [r3, #0]
 801f458:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 801f45c:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f464:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 801f468:	2300      	movs	r3, #0
 801f46a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801f46c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801f470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f474:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801f476:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801f47a:	2300      	movs	r3, #0
 801f47c:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f47e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f482:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f486:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 801f48a:	681b      	ldr	r3, [r3, #0]
 801f48c:	4618      	mov	r0, r3
 801f48e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f492:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 801f496:	681b      	ldr	r3, [r3, #0]
 801f498:	461a      	mov	r2, r3
 801f49a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f49e:	fb02 f501 	mul.w	r5, r2, r1
 801f4a2:	fb00 f403 	mul.w	r4, r0, r3
 801f4a6:	442c      	add	r4, r5
 801f4a8:	fba0 2302 	umull	r2, r3, r0, r2
 801f4ac:	18e1      	adds	r1, r4, r3
 801f4ae:	460b      	mov	r3, r1
 801f4b0:	eb18 0102 	adds.w	r1, r8, r2
 801f4b4:	61b9      	str	r1, [r7, #24]
 801f4b6:	eb49 0303 	adc.w	r3, r9, r3
 801f4ba:	61fb      	str	r3, [r7, #28]
 801f4bc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f4c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801f4c4:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801f4c8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4d0:	f04f 0000 	mov.w	r0, #0
 801f4d4:	f04f 0100 	mov.w	r1, #0
 801f4d8:	0fd0      	lsrs	r0, r2, #31
 801f4da:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f4de:	17d9      	asrs	r1, r3, #31
 801f4e0:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 801f4e4:	4603      	mov	r3, r0
 801f4e6:	6013      	str	r3, [r2, #0]
    return result;
 801f4e8:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 801f4ec:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f4ee:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801f4f2:	681b      	ldr	r3, [r3, #0]
 801f4f4:	2b00      	cmp	r3, #0
 801f4f6:	dc04      	bgt.n	801f502 <arm_nn_mat_mult_nt_t_s8+0x1aa4>
 801f4f8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801f4fc:	681b      	ldr	r3, [r3, #0]
 801f4fe:	425a      	negs	r2, r3
 801f500:	e000      	b.n	801f504 <arm_nn_mat_mult_nt_t_s8+0x1aa6>
 801f502:	2200      	movs	r2, #0
 801f504:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 801f508:	6019      	str	r1, [r3, #0]
 801f50a:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 801f50e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f510:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 801f514:	2300      	movs	r3, #0
 801f516:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f518:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 801f51c:	2201      	movs	r2, #1
 801f51e:	681b      	ldr	r3, [r3, #0]
 801f520:	fa02 f303 	lsl.w	r3, r2, r3
 801f524:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 801f528:	3b01      	subs	r3, #1
 801f52a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801f52c:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 801f530:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 801f534:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 801f538:	6812      	ldr	r2, [r2, #0]
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	4013      	ands	r3, r2
 801f53e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801f540:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 801f544:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 801f548:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 801f54c:	6812      	ldr	r2, [r2, #0]
 801f54e:	681b      	ldr	r3, [r3, #0]
 801f550:	fa42 f303 	asr.w	r3, r2, r3
 801f554:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801f556:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 801f55a:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	105b      	asrs	r3, r3, #1
 801f562:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801f564:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801f568:	681b      	ldr	r3, [r3, #0]
 801f56a:	2b00      	cmp	r3, #0
 801f56c:	da06      	bge.n	801f57c <arm_nn_mat_mult_nt_t_s8+0x1b1e>
        threshold++;
 801f56e:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 801f572:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 801f576:	681b      	ldr	r3, [r3, #0]
 801f578:	3301      	adds	r3, #1
 801f57a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801f57c:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 801f580:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 801f584:	6812      	ldr	r2, [r2, #0]
 801f586:	681b      	ldr	r3, [r3, #0]
 801f588:	429a      	cmp	r2, r3
 801f58a:	dd06      	ble.n	801f59a <arm_nn_mat_mult_nt_t_s8+0x1b3c>
        result++;
 801f58c:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 801f590:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801f594:	681b      	ldr	r3, [r3, #0]
 801f596:	3301      	adds	r3, #1
 801f598:	6013      	str	r3, [r2, #0]
    return result;
 801f59a:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801f59e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f5a0:	bf00      	nop
 801f5a2:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801f5a6:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f5aa:	009a      	lsls	r2, r3, #2
 801f5ac:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801f5b0:	4413      	add	r3, r2
 801f5b2:	6818      	ldr	r0, [r3, #0]
 801f5b4:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f5b8:	009a      	lsls	r2, r3, #2
 801f5ba:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801f5be:	4413      	add	r3, r2
 801f5c0:	6819      	ldr	r1, [r3, #0]
 801f5c2:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 801f5c6:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f5ca:	6013      	str	r3, [r2, #0]
 801f5cc:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 801f5d0:	6018      	str	r0, [r3, #0]
 801f5d2:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801f5d6:	6019      	str	r1, [r3, #0]
 801f5d8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801f5dc:	681b      	ldr	r3, [r3, #0]
 801f5de:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801f5e2:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 801f5e6:	681b      	ldr	r3, [r3, #0]
 801f5e8:	fa03 f202 	lsl.w	r2, r3, r2
 801f5ec:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 801f5f0:	601a      	str	r2, [r3, #0]
 801f5f2:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 801f5f6:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 801f5fa:	681b      	ldr	r3, [r3, #0]
 801f5fc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f5fe:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 801f602:	2300      	movs	r3, #0
 801f604:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801f606:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801f60a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f60e:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801f610:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801f614:	2300      	movs	r3, #0
 801f616:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f618:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f61c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f620:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 801f624:	681b      	ldr	r3, [r3, #0]
 801f626:	4618      	mov	r0, r3
 801f628:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f62c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 801f630:	681b      	ldr	r3, [r3, #0]
 801f632:	461a      	mov	r2, r3
 801f634:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f638:	fb02 f501 	mul.w	r5, r2, r1
 801f63c:	fb00 f403 	mul.w	r4, r0, r3
 801f640:	442c      	add	r4, r5
 801f642:	fba0 2302 	umull	r2, r3, r0, r2
 801f646:	18e1      	adds	r1, r4, r3
 801f648:	460b      	mov	r3, r1
 801f64a:	eb18 0102 	adds.w	r1, r8, r2
 801f64e:	6239      	str	r1, [r7, #32]
 801f650:	eb49 0303 	adc.w	r3, r9, r3
 801f654:	627b      	str	r3, [r7, #36]	; 0x24
 801f656:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f65a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801f65e:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801f662:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f66a:	f04f 0000 	mov.w	r0, #0
 801f66e:	f04f 0100 	mov.w	r1, #0
 801f672:	0fd0      	lsrs	r0, r2, #31
 801f674:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f678:	17d9      	asrs	r1, r3, #31
 801f67a:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 801f67e:	4603      	mov	r3, r0
 801f680:	6013      	str	r3, [r2, #0]
    return result;
 801f682:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 801f686:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f688:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801f68c:	681b      	ldr	r3, [r3, #0]
 801f68e:	2b00      	cmp	r3, #0
 801f690:	dc04      	bgt.n	801f69c <arm_nn_mat_mult_nt_t_s8+0x1c3e>
 801f692:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801f696:	681b      	ldr	r3, [r3, #0]
 801f698:	425a      	negs	r2, r3
 801f69a:	e000      	b.n	801f69e <arm_nn_mat_mult_nt_t_s8+0x1c40>
 801f69c:	2200      	movs	r2, #0
 801f69e:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 801f6a2:	6019      	str	r1, [r3, #0]
 801f6a4:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801f6a8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f6aa:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 801f6ae:	2300      	movs	r3, #0
 801f6b0:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f6b2:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801f6b6:	2201      	movs	r2, #1
 801f6b8:	681b      	ldr	r3, [r3, #0]
 801f6ba:	fa02 f303 	lsl.w	r3, r2, r3
 801f6be:	f207 42d4 	addw	r2, r7, #1236	; 0x4d4
 801f6c2:	3b01      	subs	r3, #1
 801f6c4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801f6c6:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 801f6ca:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 801f6ce:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 801f6d2:	6812      	ldr	r2, [r2, #0]
 801f6d4:	681b      	ldr	r3, [r3, #0]
 801f6d6:	4013      	ands	r3, r2
 801f6d8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801f6da:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 801f6de:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 801f6e2:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801f6e6:	6812      	ldr	r2, [r2, #0]
 801f6e8:	681b      	ldr	r3, [r3, #0]
 801f6ea:	fa42 f303 	asr.w	r3, r2, r3
 801f6ee:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801f6f0:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 801f6f4:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 801f6f8:	681b      	ldr	r3, [r3, #0]
 801f6fa:	105b      	asrs	r3, r3, #1
 801f6fc:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801f6fe:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801f702:	681b      	ldr	r3, [r3, #0]
 801f704:	2b00      	cmp	r3, #0
 801f706:	da06      	bge.n	801f716 <arm_nn_mat_mult_nt_t_s8+0x1cb8>
        threshold++;
 801f708:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 801f70c:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 801f710:	681b      	ldr	r3, [r3, #0]
 801f712:	3301      	adds	r3, #1
 801f714:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801f716:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 801f71a:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 801f71e:	6812      	ldr	r2, [r2, #0]
 801f720:	681b      	ldr	r3, [r3, #0]
 801f722:	429a      	cmp	r2, r3
 801f724:	dd06      	ble.n	801f734 <arm_nn_mat_mult_nt_t_s8+0x1cd6>
        result++;
 801f726:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 801f72a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801f72e:	681b      	ldr	r3, [r3, #0]
 801f730:	3301      	adds	r3, #1
 801f732:	6013      	str	r3, [r2, #0]
    return result;
 801f734:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801f738:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f73a:	bf00      	nop
 801f73c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801f740:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f744:	3301      	adds	r3, #1
 801f746:	009a      	lsls	r2, r3, #2
 801f748:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801f74c:	4413      	add	r3, r2
 801f74e:	6818      	ldr	r0, [r3, #0]
 801f750:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f754:	3301      	adds	r3, #1
 801f756:	009a      	lsls	r2, r3, #2
 801f758:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801f75c:	4413      	add	r3, r2
 801f75e:	6819      	ldr	r1, [r3, #0]
 801f760:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 801f764:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801f768:	6013      	str	r3, [r2, #0]
 801f76a:	f207 5324 	addw	r3, r7, #1316	; 0x524
 801f76e:	6018      	str	r0, [r3, #0]
 801f770:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f774:	6019      	str	r1, [r3, #0]
 801f776:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f77a:	681b      	ldr	r3, [r3, #0]
 801f77c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801f780:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801f784:	681b      	ldr	r3, [r3, #0]
 801f786:	fa03 f202 	lsl.w	r2, r3, r2
 801f78a:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 801f78e:	601a      	str	r2, [r3, #0]
 801f790:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 801f794:	f207 5324 	addw	r3, r7, #1316	; 0x524
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f79c:	f207 5214 	addw	r2, r7, #1300	; 0x514
 801f7a0:	2300      	movs	r3, #0
 801f7a2:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801f7a4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801f7a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f7ac:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801f7ae:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801f7b2:	2300      	movs	r3, #0
 801f7b4:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f7b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f7ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f7be:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 801f7c2:	681b      	ldr	r3, [r3, #0]
 801f7c4:	4618      	mov	r0, r3
 801f7c6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f7ca:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 801f7ce:	681b      	ldr	r3, [r3, #0]
 801f7d0:	461a      	mov	r2, r3
 801f7d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f7d6:	fb02 f501 	mul.w	r5, r2, r1
 801f7da:	fb00 f403 	mul.w	r4, r0, r3
 801f7de:	442c      	add	r4, r5
 801f7e0:	fba0 2302 	umull	r2, r3, r0, r2
 801f7e4:	18e1      	adds	r1, r4, r3
 801f7e6:	460b      	mov	r3, r1
 801f7e8:	eb18 0102 	adds.w	r1, r8, r2
 801f7ec:	62b9      	str	r1, [r7, #40]	; 0x28
 801f7ee:	eb49 0303 	adc.w	r3, r9, r3
 801f7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f7f4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f7f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801f7fc:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801f800:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f804:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f808:	f04f 0000 	mov.w	r0, #0
 801f80c:	f04f 0100 	mov.w	r1, #0
 801f810:	0fd0      	lsrs	r0, r2, #31
 801f812:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f816:	17d9      	asrs	r1, r3, #31
 801f818:	f207 5214 	addw	r2, r7, #1300	; 0x514
 801f81c:	4603      	mov	r3, r0
 801f81e:	6013      	str	r3, [r2, #0]
    return result;
 801f820:	f207 5314 	addw	r3, r7, #1300	; 0x514
 801f824:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f826:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f82a:	681b      	ldr	r3, [r3, #0]
 801f82c:	2b00      	cmp	r3, #0
 801f82e:	dc04      	bgt.n	801f83a <arm_nn_mat_mult_nt_t_s8+0x1ddc>
 801f830:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f834:	681b      	ldr	r3, [r3, #0]
 801f836:	425a      	negs	r2, r3
 801f838:	e000      	b.n	801f83c <arm_nn_mat_mult_nt_t_s8+0x1dde>
 801f83a:	2200      	movs	r2, #0
 801f83c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 801f840:	6019      	str	r1, [r3, #0]
 801f842:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 801f846:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f848:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 801f84c:	2300      	movs	r3, #0
 801f84e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f850:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 801f854:	2201      	movs	r2, #1
 801f856:	681b      	ldr	r3, [r3, #0]
 801f858:	fa02 f303 	lsl.w	r3, r2, r3
 801f85c:	f207 5204 	addw	r2, r7, #1284	; 0x504
 801f860:	3b01      	subs	r3, #1
 801f862:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801f864:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 801f868:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 801f86c:	f207 5304 	addw	r3, r7, #1284	; 0x504
 801f870:	6812      	ldr	r2, [r2, #0]
 801f872:	681b      	ldr	r3, [r3, #0]
 801f874:	4013      	ands	r3, r2
 801f876:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801f878:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 801f87c:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 801f880:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 801f884:	6812      	ldr	r2, [r2, #0]
 801f886:	681b      	ldr	r3, [r3, #0]
 801f888:	fa42 f303 	asr.w	r3, r2, r3
 801f88c:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801f88e:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 801f892:	f207 5304 	addw	r3, r7, #1284	; 0x504
 801f896:	681b      	ldr	r3, [r3, #0]
 801f898:	105b      	asrs	r3, r3, #1
 801f89a:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801f89c:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 801f8a0:	681b      	ldr	r3, [r3, #0]
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	da06      	bge.n	801f8b4 <arm_nn_mat_mult_nt_t_s8+0x1e56>
        threshold++;
 801f8a6:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 801f8aa:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 801f8ae:	681b      	ldr	r3, [r3, #0]
 801f8b0:	3301      	adds	r3, #1
 801f8b2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801f8b4:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 801f8b8:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 801f8bc:	6812      	ldr	r2, [r2, #0]
 801f8be:	681b      	ldr	r3, [r3, #0]
 801f8c0:	429a      	cmp	r2, r3
 801f8c2:	dd06      	ble.n	801f8d2 <arm_nn_mat_mult_nt_t_s8+0x1e74>
        result++;
 801f8c4:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 801f8c8:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 801f8cc:	681b      	ldr	r3, [r3, #0]
 801f8ce:	3301      	adds	r3, #1
 801f8d0:	6013      	str	r3, [r2, #0]
    return result;
 801f8d2:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 801f8d6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f8d8:	bf00      	nop
 801f8da:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            // Add offset
            res00 += dst_offset;
 801f8de:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 801f8e2:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801f8e6:	4413      	add	r3, r2
 801f8e8:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 += dst_offset;
 801f8ec:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 801f8f0:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801f8f4:	4413      	add	r3, r2
 801f8f6:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 += dst_offset;
 801f8fa:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801f8fe:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801f902:	4413      	add	r3, r2
 801f904:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 += dst_offset;
 801f908:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 801f90c:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801f910:	4413      	add	r3, r2
 801f912:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801f916:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 801f91a:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801f91e:	4293      	cmp	r3, r2
 801f920:	bfb8      	it	lt
 801f922:	4613      	movlt	r3, r2
 801f924:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res00 = MIN(res00, activation_max);
 801f928:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 801f92c:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801f930:	4293      	cmp	r3, r2
 801f932:	bfa8      	it	ge
 801f934:	4613      	movge	r3, r2
 801f936:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 = MAX(res01, activation_min);
 801f93a:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 801f93e:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801f942:	4293      	cmp	r3, r2
 801f944:	bfb8      	it	lt
 801f946:	4613      	movlt	r3, r2
 801f948:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res01 = MIN(res01, activation_max);
 801f94c:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 801f950:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801f954:	4293      	cmp	r3, r2
 801f956:	bfa8      	it	ge
 801f958:	4613      	movge	r3, r2
 801f95a:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 = MAX(res10, activation_min);
 801f95e:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801f962:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801f966:	4293      	cmp	r3, r2
 801f968:	bfb8      	it	lt
 801f96a:	4613      	movlt	r3, r2
 801f96c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res10 = MIN(res10, activation_max);
 801f970:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801f974:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801f978:	4293      	cmp	r3, r2
 801f97a:	bfa8      	it	ge
 801f97c:	4613      	movge	r3, r2
 801f97e:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 = MAX(res11, activation_min);
 801f982:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 801f986:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801f98a:	4293      	cmp	r3, r2
 801f98c:	bfb8      	it	lt
 801f98e:	4613      	movlt	r3, r2
 801f990:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
            res11 = MIN(res11, activation_max);
 801f994:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 801f998:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801f99c:	4293      	cmp	r3, r2
 801f99e:	bfa8      	it	ge
 801f9a0:	4613      	movge	r3, r2
 801f9a2:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            dst_ptr[0] = (q7_t)res00;
 801f9a6:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801f9aa:	b25b      	sxtb	r3, r3
 801f9ac:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 801f9b0:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 801f9b2:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801f9b6:	1c5a      	adds	r2, r3, #1
 801f9b8:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801f9bc:	b25b      	sxtb	r3, r3
 801f9be:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801f9c0:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801f9c4:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801f9c8:	4413      	add	r3, r2
 801f9ca:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38
            dst_ptr[0] = (q7_t)res10;
 801f9ce:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801f9d2:	b25b      	sxtb	r3, r3
 801f9d4:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 801f9d8:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res11;
 801f9da:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801f9de:	1c5a      	adds	r2, r3, #1
 801f9e0:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801f9e4:	b25b      	sxtb	r3, r3
 801f9e6:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801f9e8:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801f9ec:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801f9f0:	4413      	add	r3, r2
 801f9f2:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38

            lhs_ptr += rhs_cols;
 801f9f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f9fa:	681a      	ldr	r2, [r3, #0]
 801f9fc:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801fa00:	441a      	add	r2, r3
 801fa02:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fa06:	601a      	str	r2, [r3, #0]

            lhs_rows_idx--;
 801fa08:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 801fa0c:	3b01      	subs	r3, #1
 801fa0e:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
        while (lhs_rows_idx)
 801fa12:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 801fa16:	2b00      	cmp	r3, #0
 801fa18:	f47e a8b3 	bne.w	801db82 <arm_nn_mat_mult_nt_t_s8+0x124>
        }

        // Left-over rows
        if (lhs_rows % 2)
 801fa1c:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 801fa20:	f003 0301 	and.w	r3, r3, #1
 801fa24:	2b00      	cmp	r3, #0
 801fa26:	f001 8195 	beq.w	8020d54 <arm_nn_mat_mult_nt_t_s8+0x32f6>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801fa2a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 801fa2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801fa36:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801fa3a:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            q31_t res01 = lhs_offset_contribution1;
 801fa3e:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801fa42:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            int32_t rhs_cols_idx = 0;
 801fa46:	2300      	movs	r3, #0
 801fa48:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08

            q31_t val0, val1, val2, val3, val4, val5;
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801fa4c:	f000 bf59 	b.w	8020902 <arm_nn_mat_mult_nt_t_s8+0x2ea4>
 801fa50:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 801fa54:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801fa58:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801fa5a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801fa5e:	681b      	ldr	r3, [r3, #0]
 801fa60:	681b      	ldr	r3, [r3, #0]
 801fa62:	681b      	ldr	r3, [r3, #0]
 801fa64:	461a      	mov	r2, r3
 801fa66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801fa6a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fa6c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801fa70:	681b      	ldr	r3, [r3, #0]
 801fa72:	681b      	ldr	r3, [r3, #0]
 801fa74:	1d1a      	adds	r2, r3, #4
 801fa76:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801fa7a:	681b      	ldr	r3, [r3, #0]
 801fa7c:	601a      	str	r2, [r3, #0]
    return (val);
 801fa7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801fa82:	681b      	ldr	r3, [r3, #0]
            {
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801fa84:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801fa88:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801fa8c:	681a      	ldr	r2, [r3, #0]
 801fa8e:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801fa92:	441a      	add	r2, r3
 801fa94:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801fa98:	601a      	str	r2, [r3, #0]
 801fa9a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801fa9e:	681b      	ldr	r3, [r3, #0]
 801faa0:	681b      	ldr	r3, [r3, #0]
 801faa2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801faa4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801faa8:	601a      	str	r2, [r3, #0]
    return (val);
 801faaa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801faae:	681b      	ldr	r3, [r3, #0]
 801fab0:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 801fab4:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 801fab8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fabc:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801fabe:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801fac2:	681b      	ldr	r3, [r3, #0]
 801fac4:	681b      	ldr	r3, [r3, #0]
 801fac6:	681b      	ldr	r3, [r3, #0]
 801fac8:	461a      	mov	r2, r3
 801faca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801face:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fad0:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801fad4:	681b      	ldr	r3, [r3, #0]
 801fad6:	681b      	ldr	r3, [r3, #0]
 801fad8:	1d1a      	adds	r2, r3, #4
 801fada:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801fade:	681b      	ldr	r3, [r3, #0]
 801fae0:	601a      	str	r2, [r3, #0]
    return (val);
 801fae2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801fae6:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801fae8:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 801faec:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801faf0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801faf4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801faf6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801fafa:	681b      	ldr	r3, [r3, #0]
 801fafc:	fa2f f283 	sxtb16	r2, r3
 801fb00:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801fb04:	601a      	str	r2, [r3, #0]
  return(result);
 801fb06:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801fb0a:	681b      	ldr	r3, [r3, #0]
 801fb0c:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 801fb10:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801fb14:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801fb18:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fb1a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801fb1e:	681b      	ldr	r3, [r3, #0]
 801fb20:	fa2f f283 	sxtb16	r2, r3
 801fb24:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801fb28:	601a      	str	r2, [r3, #0]
  return(result);
 801fb2a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801fb2e:	681b      	ldr	r3, [r3, #0]
 801fb30:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 801fb34:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801fb38:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801fb3c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fb3e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801fb42:	681b      	ldr	r3, [r3, #0]
 801fb44:	fa2f f283 	sxtb16	r2, r3
 801fb48:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801fb4c:	601a      	str	r2, [r3, #0]
  return(result);
 801fb4e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801fb52:	681b      	ldr	r3, [r3, #0]
 801fb54:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 801fb58:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801fb5c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801fb60:	601a      	str	r2, [r3, #0]
 801fb62:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 801fb66:	2308      	movs	r3, #8
 801fb68:	6013      	str	r3, [r2, #0]
 801fb6a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801fb6e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801fb72:	681b      	ldr	r3, [r3, #0]
 801fb74:	6013      	str	r3, [r2, #0]
 801fb76:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 801fb7a:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801fb7e:	681b      	ldr	r3, [r3, #0]
 801fb80:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fb82:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 801fb86:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801fb8a:	681b      	ldr	r3, [r3, #0]
 801fb8c:	f003 031f 	and.w	r3, r3, #31
 801fb90:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fb92:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801fb96:	681b      	ldr	r3, [r3, #0]
 801fb98:	2b00      	cmp	r3, #0
 801fb9a:	d103      	bne.n	801fba4 <arm_nn_mat_mult_nt_t_s8+0x2146>
    return op1;
 801fb9c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801fba0:	681a      	ldr	r2, [r3, #0]
 801fba2:	e006      	b.n	801fbb2 <arm_nn_mat_mult_nt_t_s8+0x2154>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fba4:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801fba8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801fbac:	6812      	ldr	r2, [r2, #0]
 801fbae:	681b      	ldr	r3, [r3, #0]
 801fbb0:	41da      	rors	r2, r3
 801fbb2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801fbb6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fbb8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801fbbc:	681b      	ldr	r3, [r3, #0]
 801fbbe:	fa2f f283 	sxtb16	r2, r3
 801fbc2:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801fbc6:	601a      	str	r2, [r3, #0]
  return(result);
 801fbc8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801fbcc:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801fbce:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801fbd2:	601a      	str	r2, [r3, #0]
  return result;
 801fbd4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801fbd8:	681b      	ldr	r3, [r3, #0]
 801fbda:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 801fbde:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801fbe2:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801fbe6:	601a      	str	r2, [r3, #0]
 801fbe8:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 801fbec:	2308      	movs	r3, #8
 801fbee:	6013      	str	r3, [r2, #0]
 801fbf0:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801fbf4:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801fbf8:	681b      	ldr	r3, [r3, #0]
 801fbfa:	6013      	str	r3, [r2, #0]
 801fbfc:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 801fc00:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801fc04:	681b      	ldr	r3, [r3, #0]
 801fc06:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fc08:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 801fc0c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801fc10:	681b      	ldr	r3, [r3, #0]
 801fc12:	f003 031f 	and.w	r3, r3, #31
 801fc16:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fc18:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801fc1c:	681b      	ldr	r3, [r3, #0]
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	d103      	bne.n	801fc2a <arm_nn_mat_mult_nt_t_s8+0x21cc>
    return op1;
 801fc22:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801fc26:	681a      	ldr	r2, [r3, #0]
 801fc28:	e006      	b.n	801fc38 <arm_nn_mat_mult_nt_t_s8+0x21da>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fc2a:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801fc2e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801fc32:	6812      	ldr	r2, [r2, #0]
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	41da      	rors	r2, r3
 801fc38:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801fc3c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fc3e:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801fc42:	681b      	ldr	r3, [r3, #0]
 801fc44:	fa2f f283 	sxtb16	r2, r3
 801fc48:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801fc4c:	601a      	str	r2, [r3, #0]
  return(result);
 801fc4e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801fc52:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801fc54:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801fc58:	601a      	str	r2, [r3, #0]
  return result;
 801fc5a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801fc5e:	681b      	ldr	r3, [r3, #0]
 801fc60:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 801fc64:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801fc68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801fc6c:	601a      	str	r2, [r3, #0]
 801fc6e:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 801fc72:	2308      	movs	r3, #8
 801fc74:	6013      	str	r3, [r2, #0]
 801fc76:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801fc7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801fc7e:	681b      	ldr	r3, [r3, #0]
 801fc80:	6013      	str	r3, [r2, #0]
 801fc82:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 801fc86:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801fc8a:	681b      	ldr	r3, [r3, #0]
 801fc8c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fc8e:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 801fc92:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801fc96:	681b      	ldr	r3, [r3, #0]
 801fc98:	f003 031f 	and.w	r3, r3, #31
 801fc9c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fc9e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801fca2:	681b      	ldr	r3, [r3, #0]
 801fca4:	2b00      	cmp	r3, #0
 801fca6:	d103      	bne.n	801fcb0 <arm_nn_mat_mult_nt_t_s8+0x2252>
    return op1;
 801fca8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801fcac:	681a      	ldr	r2, [r3, #0]
 801fcae:	e006      	b.n	801fcbe <arm_nn_mat_mult_nt_t_s8+0x2260>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fcb0:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801fcb4:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801fcb8:	6812      	ldr	r2, [r2, #0]
 801fcba:	681b      	ldr	r3, [r3, #0]
 801fcbc:	41da      	rors	r2, r3
 801fcbe:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801fcc2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fcc4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801fcc8:	681b      	ldr	r3, [r3, #0]
 801fcca:	fa2f f283 	sxtb16	r2, r3
 801fcce:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801fcd2:	601a      	str	r2, [r3, #0]
  return(result);
 801fcd4:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801fcd8:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801fcda:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801fcde:	601a      	str	r2, [r3, #0]
  return result;
 801fce0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801fce4:	681b      	ldr	r3, [r3, #0]
 801fce6:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801fcea:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 801fcee:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 801fcf2:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 801fcf6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801fcfa:	601a      	str	r2, [r3, #0]
 801fcfc:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801fd00:	6019      	str	r1, [r3, #0]
 801fd02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801fd06:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fd08:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801fd0c:	6819      	ldr	r1, [r3, #0]
 801fd0e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801fd12:	681a      	ldr	r2, [r3, #0]
 801fd14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801fd18:	681b      	ldr	r3, [r3, #0]
 801fd1a:	fb21 3202 	smlad	r2, r1, r2, r3
 801fd1e:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801fd22:	601a      	str	r2, [r3, #0]
  return(result);
 801fd24:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 801fd2e:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801fd32:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 801fd36:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 801fd3a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801fd3e:	601a      	str	r2, [r3, #0]
 801fd40:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801fd44:	6019      	str	r1, [r3, #0]
 801fd46:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801fd4a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fd4c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801fd50:	6819      	ldr	r1, [r3, #0]
 801fd52:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801fd56:	681a      	ldr	r2, [r3, #0]
 801fd58:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801fd5c:	681b      	ldr	r3, [r3, #0]
 801fd5e:	fb21 3202 	smlad	r2, r1, r2, r3
 801fd62:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801fd66:	601a      	str	r2, [r3, #0]
  return(result);
 801fd68:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801fd6c:	681b      	ldr	r3, [r3, #0]
 801fd6e:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 801fd72:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 801fd76:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 801fd7a:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 801fd7e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801fd82:	601a      	str	r2, [r3, #0]
 801fd84:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801fd88:	6019      	str	r1, [r3, #0]
 801fd8a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801fd8e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fd90:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801fd94:	6819      	ldr	r1, [r3, #0]
 801fd96:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801fd9a:	681a      	ldr	r2, [r3, #0]
 801fd9c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801fda0:	681b      	ldr	r3, [r3, #0]
 801fda2:	fb21 3202 	smlad	r2, r1, r2, r3
 801fda6:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801fdaa:	601a      	str	r2, [r3, #0]
  return(result);
 801fdac:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801fdb0:	681b      	ldr	r3, [r3, #0]
 801fdb2:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 801fdb6:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801fdba:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 801fdbe:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 801fdc2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801fdc6:	601a      	str	r2, [r3, #0]
 801fdc8:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801fdcc:	6019      	str	r1, [r3, #0]
 801fdce:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801fdd2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fdd4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801fdd8:	6819      	ldr	r1, [r3, #0]
 801fdda:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801fdde:	681a      	ldr	r2, [r3, #0]
 801fde0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801fde4:	681b      	ldr	r3, [r3, #0]
 801fde6:	fb21 3202 	smlad	r2, r1, r2, r3
 801fdea:	f507 730d 	add.w	r3, r7, #564	; 0x234
 801fdee:	601a      	str	r2, [r3, #0]
  return(result);
 801fdf0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 801fdf4:	681b      	ldr	r3, [r3, #0]
 801fdf6:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 801fdfa:	f507 7211 	add.w	r2, r7, #580	; 0x244
 801fdfe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801fe02:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801fe04:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801fe08:	681b      	ldr	r3, [r3, #0]
 801fe0a:	681b      	ldr	r3, [r3, #0]
 801fe0c:	681b      	ldr	r3, [r3, #0]
 801fe0e:	461a      	mov	r2, r3
 801fe10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801fe14:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fe16:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801fe1a:	681b      	ldr	r3, [r3, #0]
 801fe1c:	681b      	ldr	r3, [r3, #0]
 801fe1e:	1d1a      	adds	r2, r3, #4
 801fe20:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801fe24:	681b      	ldr	r3, [r3, #0]
 801fe26:	601a      	str	r2, [r3, #0]
    return (val);
 801fe28:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801fe2c:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801fe2e:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801fe32:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801fe36:	681a      	ldr	r2, [r3, #0]
 801fe38:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801fe3c:	441a      	add	r2, r3
 801fe3e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801fe42:	601a      	str	r2, [r3, #0]
 801fe44:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	681b      	ldr	r3, [r3, #0]
 801fe4c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801fe4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801fe52:	601a      	str	r2, [r3, #0]
    return (val);
 801fe54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801fe58:	681b      	ldr	r3, [r3, #0]
 801fe5a:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 801fe5e:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 801fe62:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fe66:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801fe68:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801fe6c:	681b      	ldr	r3, [r3, #0]
 801fe6e:	681b      	ldr	r3, [r3, #0]
 801fe70:	681b      	ldr	r3, [r3, #0]
 801fe72:	461a      	mov	r2, r3
 801fe74:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801fe78:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fe7a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801fe7e:	681b      	ldr	r3, [r3, #0]
 801fe80:	681b      	ldr	r3, [r3, #0]
 801fe82:	1d1a      	adds	r2, r3, #4
 801fe84:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801fe88:	681b      	ldr	r3, [r3, #0]
 801fe8a:	601a      	str	r2, [r3, #0]
    return (val);
 801fe8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801fe90:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801fe92:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 801fe96:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801fe9a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801fe9e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fea0:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801fea4:	681b      	ldr	r3, [r3, #0]
 801fea6:	fa2f f283 	sxtb16	r2, r3
 801feaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801feae:	601a      	str	r2, [r3, #0]
  return(result);
 801feb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801feb4:	681b      	ldr	r3, [r3, #0]
 801feb6:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 801feba:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801febe:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801fec2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fec4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801fec8:	681b      	ldr	r3, [r3, #0]
 801feca:	fa2f f283 	sxtb16	r2, r3
 801fece:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801fed2:	601a      	str	r2, [r3, #0]
  return(result);
 801fed4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801fed8:	681b      	ldr	r3, [r3, #0]
 801feda:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 801fede:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801fee2:	f507 7319 	add.w	r3, r7, #612	; 0x264
 801fee6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fee8:	f507 7319 	add.w	r3, r7, #612	; 0x264
 801feec:	681b      	ldr	r3, [r3, #0]
 801feee:	fa2f f283 	sxtb16	r2, r3
 801fef2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801fef6:	601a      	str	r2, [r3, #0]
  return(result);
 801fef8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801fefc:	681b      	ldr	r3, [r3, #0]
 801fefe:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 801ff02:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801ff06:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801ff0a:	601a      	str	r2, [r3, #0]
 801ff0c:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 801ff10:	2308      	movs	r3, #8
 801ff12:	6013      	str	r3, [r2, #0]
 801ff14:	f507 721e 	add.w	r2, r7, #632	; 0x278
 801ff18:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801ff1c:	681b      	ldr	r3, [r3, #0]
 801ff1e:	6013      	str	r3, [r2, #0]
 801ff20:	f507 721d 	add.w	r2, r7, #628	; 0x274
 801ff24:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 801ff28:	681b      	ldr	r3, [r3, #0]
 801ff2a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ff2c:	f507 721d 	add.w	r2, r7, #628	; 0x274
 801ff30:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801ff34:	681b      	ldr	r3, [r3, #0]
 801ff36:	f003 031f 	and.w	r3, r3, #31
 801ff3a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ff3c:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801ff40:	681b      	ldr	r3, [r3, #0]
 801ff42:	2b00      	cmp	r3, #0
 801ff44:	d103      	bne.n	801ff4e <arm_nn_mat_mult_nt_t_s8+0x24f0>
    return op1;
 801ff46:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801ff4a:	681a      	ldr	r2, [r3, #0]
 801ff4c:	e006      	b.n	801ff5c <arm_nn_mat_mult_nt_t_s8+0x24fe>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ff4e:	f507 721e 	add.w	r2, r7, #632	; 0x278
 801ff52:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801ff56:	6812      	ldr	r2, [r2, #0]
 801ff58:	681b      	ldr	r3, [r3, #0]
 801ff5a:	41da      	rors	r2, r3
 801ff5c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801ff60:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ff62:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801ff66:	681b      	ldr	r3, [r3, #0]
 801ff68:	fa2f f283 	sxtb16	r2, r3
 801ff6c:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801ff70:	601a      	str	r2, [r3, #0]
  return(result);
 801ff72:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801ff76:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ff78:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801ff7c:	601a      	str	r2, [r3, #0]
  return result;
 801ff7e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801ff82:	681b      	ldr	r3, [r3, #0]
 801ff84:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 801ff88:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801ff8c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 801ff90:	601a      	str	r2, [r3, #0]
 801ff92:	f507 7226 	add.w	r2, r7, #664	; 0x298
 801ff96:	2308      	movs	r3, #8
 801ff98:	6013      	str	r3, [r2, #0]
 801ff9a:	f507 7225 	add.w	r2, r7, #660	; 0x294
 801ff9e:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 801ffa2:	681b      	ldr	r3, [r3, #0]
 801ffa4:	6013      	str	r3, [r2, #0]
 801ffa6:	f507 7224 	add.w	r2, r7, #656	; 0x290
 801ffaa:	f507 7326 	add.w	r3, r7, #664	; 0x298
 801ffae:	681b      	ldr	r3, [r3, #0]
 801ffb0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ffb2:	f507 7224 	add.w	r2, r7, #656	; 0x290
 801ffb6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801ffba:	681b      	ldr	r3, [r3, #0]
 801ffbc:	f003 031f 	and.w	r3, r3, #31
 801ffc0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ffc2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801ffc6:	681b      	ldr	r3, [r3, #0]
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d103      	bne.n	801ffd4 <arm_nn_mat_mult_nt_t_s8+0x2576>
    return op1;
 801ffcc:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801ffd0:	681a      	ldr	r2, [r3, #0]
 801ffd2:	e006      	b.n	801ffe2 <arm_nn_mat_mult_nt_t_s8+0x2584>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ffd4:	f507 7225 	add.w	r2, r7, #660	; 0x294
 801ffd8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801ffdc:	6812      	ldr	r2, [r2, #0]
 801ffde:	681b      	ldr	r3, [r3, #0]
 801ffe0:	41da      	rors	r2, r3
 801ffe2:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 801ffe6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ffe8:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 801ffec:	681b      	ldr	r3, [r3, #0]
 801ffee:	fa2f f283 	sxtb16	r2, r3
 801fff2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801fff6:	601a      	str	r2, [r3, #0]
  return(result);
 801fff8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801fffc:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801fffe:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8020002:	601a      	str	r2, [r3, #0]
  return result;
 8020004:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8020008:	681b      	ldr	r3, [r3, #0]
 802000a:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 802000e:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020012:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8020016:	601a      	str	r2, [r3, #0]
 8020018:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 802001c:	2308      	movs	r3, #8
 802001e:	6013      	str	r3, [r2, #0]
 8020020:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8020024:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8020028:	681b      	ldr	r3, [r3, #0]
 802002a:	6013      	str	r3, [r2, #0]
 802002c:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8020030:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8020034:	681b      	ldr	r3, [r3, #0]
 8020036:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020038:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 802003c:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8020040:	681b      	ldr	r3, [r3, #0]
 8020042:	f003 031f 	and.w	r3, r3, #31
 8020046:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020048:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 802004c:	681b      	ldr	r3, [r3, #0]
 802004e:	2b00      	cmp	r3, #0
 8020050:	d103      	bne.n	802005a <arm_nn_mat_mult_nt_t_s8+0x25fc>
    return op1;
 8020052:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8020056:	681a      	ldr	r2, [r3, #0]
 8020058:	e006      	b.n	8020068 <arm_nn_mat_mult_nt_t_s8+0x260a>
  return (op1 >> op2) | (op1 << (32U - op2));
 802005a:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 802005e:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8020062:	6812      	ldr	r2, [r2, #0]
 8020064:	681b      	ldr	r3, [r3, #0]
 8020066:	41da      	rors	r2, r3
 8020068:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802006c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802006e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8020072:	681b      	ldr	r3, [r3, #0]
 8020074:	fa2f f283 	sxtb16	r2, r3
 8020078:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 802007c:	601a      	str	r2, [r3, #0]
  return(result);
 802007e:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8020082:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020084:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8020088:	601a      	str	r2, [r3, #0]
  return result;
 802008a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 802008e:	681b      	ldr	r3, [r3, #0]
 8020090:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8020094:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020098:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 802009c:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 80200a0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80200a4:	601a      	str	r2, [r3, #0]
 80200a6:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80200aa:	6019      	str	r1, [r3, #0]
 80200ac:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80200b0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80200b2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80200b6:	6819      	ldr	r1, [r3, #0]
 80200b8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80200bc:	681a      	ldr	r2, [r3, #0]
 80200be:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80200c2:	681b      	ldr	r3, [r3, #0]
 80200c4:	fb21 3202 	smlad	r2, r1, r2, r3
 80200c8:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80200cc:	601a      	str	r2, [r3, #0]
  return(result);
 80200ce:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80200d2:	681b      	ldr	r3, [r3, #0]
 80200d4:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 80200d8:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80200dc:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 80200e0:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 80200e4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80200e8:	601a      	str	r2, [r3, #0]
 80200ea:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80200ee:	6019      	str	r1, [r3, #0]
 80200f0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80200f4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80200f6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80200fa:	6819      	ldr	r1, [r3, #0]
 80200fc:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8020100:	681a      	ldr	r2, [r3, #0]
 8020102:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8020106:	681b      	ldr	r3, [r3, #0]
 8020108:	fb21 3202 	smlad	r2, r1, r2, r3
 802010c:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8020110:	601a      	str	r2, [r3, #0]
  return(result);
 8020112:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8020116:	681b      	ldr	r3, [r3, #0]
 8020118:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 802011c:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020120:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 8020124:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8020128:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 802012c:	601a      	str	r2, [r3, #0]
 802012e:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8020132:	6019      	str	r1, [r3, #0]
 8020134:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8020138:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802013a:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 802013e:	6819      	ldr	r1, [r3, #0]
 8020140:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8020144:	681a      	ldr	r2, [r3, #0]
 8020146:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 802014a:	681b      	ldr	r3, [r3, #0]
 802014c:	fb21 3202 	smlad	r2, r1, r2, r3
 8020150:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8020154:	601a      	str	r2, [r3, #0]
  return(result);
 8020156:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 802015a:	681b      	ldr	r3, [r3, #0]
 802015c:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 8020160:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020164:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 8020168:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 802016c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8020170:	601a      	str	r2, [r3, #0]
 8020172:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8020176:	6019      	str	r1, [r3, #0]
 8020178:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 802017c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802017e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8020182:	6819      	ldr	r1, [r3, #0]
 8020184:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8020188:	681a      	ldr	r2, [r3, #0]
 802018a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 802018e:	681b      	ldr	r3, [r3, #0]
 8020190:	fb21 3202 	smlad	r2, r1, r2, r3
 8020194:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8020198:	601a      	str	r2, [r3, #0]
  return(result);
 802019a:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 802019e:	681b      	ldr	r3, [r3, #0]
 80201a0:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 80201a4:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 80201a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80201ac:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80201ae:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	681b      	ldr	r3, [r3, #0]
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	461a      	mov	r2, r3
 80201ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80201be:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80201c0:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80201c4:	681b      	ldr	r3, [r3, #0]
 80201c6:	681b      	ldr	r3, [r3, #0]
 80201c8:	1d1a      	adds	r2, r3, #4
 80201ca:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80201ce:	681b      	ldr	r3, [r3, #0]
 80201d0:	601a      	str	r2, [r3, #0]
    return (val);
 80201d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80201d6:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80201d8:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 80201dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80201e0:	681a      	ldr	r2, [r3, #0]
 80201e2:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 80201e6:	441a      	add	r2, r3
 80201e8:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80201ec:	601a      	str	r2, [r3, #0]
 80201ee:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80201f2:	681b      	ldr	r3, [r3, #0]
 80201f4:	681b      	ldr	r3, [r3, #0]
 80201f6:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80201f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80201fc:	601a      	str	r2, [r3, #0]
    return (val);
 80201fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020202:	681b      	ldr	r3, [r3, #0]
 8020204:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 8020208:	f507 7241 	add.w	r2, r7, #772	; 0x304
 802020c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020210:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020212:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8020216:	681b      	ldr	r3, [r3, #0]
 8020218:	681b      	ldr	r3, [r3, #0]
 802021a:	681b      	ldr	r3, [r3, #0]
 802021c:	461a      	mov	r2, r3
 802021e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8020222:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020224:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8020228:	681b      	ldr	r3, [r3, #0]
 802022a:	681b      	ldr	r3, [r3, #0]
 802022c:	1d1a      	adds	r2, r3, #4
 802022e:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8020232:	681b      	ldr	r3, [r3, #0]
 8020234:	601a      	str	r2, [r3, #0]
    return (val);
 8020236:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802023a:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 802023c:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 8020240:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8020244:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8020248:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802024a:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 802024e:	681b      	ldr	r3, [r3, #0]
 8020250:	fa2f f283 	sxtb16	r2, r3
 8020254:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8020258:	601a      	str	r2, [r3, #0]
  return(result);
 802025a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 802025e:	681b      	ldr	r3, [r3, #0]
 8020260:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 8020264:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020268:	f507 7345 	add.w	r3, r7, #788	; 0x314
 802026c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802026e:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8020272:	681b      	ldr	r3, [r3, #0]
 8020274:	fa2f f283 	sxtb16	r2, r3
 8020278:	f507 7344 	add.w	r3, r7, #784	; 0x310
 802027c:	601a      	str	r2, [r3, #0]
  return(result);
 802027e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8020282:	681b      	ldr	r3, [r3, #0]
 8020284:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 8020288:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 802028c:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8020290:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020292:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8020296:	681b      	ldr	r3, [r3, #0]
 8020298:	fa2f f283 	sxtb16	r2, r3
 802029c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80202a0:	601a      	str	r2, [r3, #0]
  return(result);
 80202a2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 80202ac:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 80202b0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80202b4:	601a      	str	r2, [r3, #0]
 80202b6:	f507 724d 	add.w	r2, r7, #820	; 0x334
 80202ba:	2308      	movs	r3, #8
 80202bc:	6013      	str	r3, [r2, #0]
 80202be:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80202c2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80202c6:	681b      	ldr	r3, [r3, #0]
 80202c8:	6013      	str	r3, [r2, #0]
 80202ca:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 80202ce:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80202d2:	681b      	ldr	r3, [r3, #0]
 80202d4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80202d6:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 80202da:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80202de:	681b      	ldr	r3, [r3, #0]
 80202e0:	f003 031f 	and.w	r3, r3, #31
 80202e4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80202e6:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80202ea:	681b      	ldr	r3, [r3, #0]
 80202ec:	2b00      	cmp	r3, #0
 80202ee:	d103      	bne.n	80202f8 <arm_nn_mat_mult_nt_t_s8+0x289a>
    return op1;
 80202f0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80202f4:	681a      	ldr	r2, [r3, #0]
 80202f6:	e006      	b.n	8020306 <arm_nn_mat_mult_nt_t_s8+0x28a8>
  return (op1 >> op2) | (op1 << (32U - op2));
 80202f8:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80202fc:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8020300:	6812      	ldr	r2, [r2, #0]
 8020302:	681b      	ldr	r3, [r3, #0]
 8020304:	41da      	rors	r2, r3
 8020306:	f507 734a 	add.w	r3, r7, #808	; 0x328
 802030a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802030c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8020310:	681b      	ldr	r3, [r3, #0]
 8020312:	fa2f f283 	sxtb16	r2, r3
 8020316:	f507 7349 	add.w	r3, r7, #804	; 0x324
 802031a:	601a      	str	r2, [r3, #0]
  return(result);
 802031c:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8020320:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020322:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8020326:	601a      	str	r2, [r3, #0]
  return result;
 8020328:	f507 7348 	add.w	r3, r7, #800	; 0x320
 802032c:	681b      	ldr	r3, [r3, #0]
 802032e:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 8020332:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020336:	f507 7355 	add.w	r3, r7, #852	; 0x354
 802033a:	601a      	str	r2, [r3, #0]
 802033c:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8020340:	2308      	movs	r3, #8
 8020342:	6013      	str	r3, [r2, #0]
 8020344:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 8020348:	f507 7355 	add.w	r3, r7, #852	; 0x354
 802034c:	681b      	ldr	r3, [r3, #0]
 802034e:	6013      	str	r3, [r2, #0]
 8020350:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8020354:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8020358:	681b      	ldr	r3, [r3, #0]
 802035a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 802035c:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8020360:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8020364:	681b      	ldr	r3, [r3, #0]
 8020366:	f003 031f 	and.w	r3, r3, #31
 802036a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 802036c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8020370:	681b      	ldr	r3, [r3, #0]
 8020372:	2b00      	cmp	r3, #0
 8020374:	d103      	bne.n	802037e <arm_nn_mat_mult_nt_t_s8+0x2920>
    return op1;
 8020376:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 802037a:	681a      	ldr	r2, [r3, #0]
 802037c:	e006      	b.n	802038c <arm_nn_mat_mult_nt_t_s8+0x292e>
  return (op1 >> op2) | (op1 << (32U - op2));
 802037e:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 8020382:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8020386:	6812      	ldr	r2, [r2, #0]
 8020388:	681b      	ldr	r3, [r3, #0]
 802038a:	41da      	rors	r2, r3
 802038c:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8020390:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020392:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8020396:	681b      	ldr	r3, [r3, #0]
 8020398:	fa2f f283 	sxtb16	r2, r3
 802039c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80203a0:	601a      	str	r2, [r3, #0]
  return(result);
 80203a2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80203a6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80203a8:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80203ac:	601a      	str	r2, [r3, #0]
  return result;
 80203ae:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80203b2:	681b      	ldr	r3, [r3, #0]
 80203b4:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 80203b8:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 80203bc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80203c0:	601a      	str	r2, [r3, #0]
 80203c2:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 80203c6:	2308      	movs	r3, #8
 80203c8:	6013      	str	r3, [r2, #0]
 80203ca:	f507 725a 	add.w	r2, r7, #872	; 0x368
 80203ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80203d2:	681b      	ldr	r3, [r3, #0]
 80203d4:	6013      	str	r3, [r2, #0]
 80203d6:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80203da:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80203de:	681b      	ldr	r3, [r3, #0]
 80203e0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80203e2:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80203e6:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	f003 031f 	and.w	r3, r3, #31
 80203f0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80203f2:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80203f6:	681b      	ldr	r3, [r3, #0]
 80203f8:	2b00      	cmp	r3, #0
 80203fa:	d103      	bne.n	8020404 <arm_nn_mat_mult_nt_t_s8+0x29a6>
    return op1;
 80203fc:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8020400:	681a      	ldr	r2, [r3, #0]
 8020402:	e006      	b.n	8020412 <arm_nn_mat_mult_nt_t_s8+0x29b4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020404:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8020408:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802040c:	6812      	ldr	r2, [r2, #0]
 802040e:	681b      	ldr	r3, [r3, #0]
 8020410:	41da      	rors	r2, r3
 8020412:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8020416:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020418:	f507 7358 	add.w	r3, r7, #864	; 0x360
 802041c:	681b      	ldr	r3, [r3, #0]
 802041e:	fa2f f283 	sxtb16	r2, r3
 8020422:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8020426:	601a      	str	r2, [r3, #0]
  return(result);
 8020428:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 802042c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 802042e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8020432:	601a      	str	r2, [r3, #0]
  return result;
 8020434:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8020438:	681b      	ldr	r3, [r3, #0]
 802043a:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 802043e:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020442:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 8020446:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 802044a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 802044e:	601a      	str	r2, [r3, #0]
 8020450:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8020454:	6019      	str	r1, [r3, #0]
 8020456:	f507 735e 	add.w	r3, r7, #888	; 0x378
 802045a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802045c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8020460:	6819      	ldr	r1, [r3, #0]
 8020462:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8020466:	681a      	ldr	r2, [r3, #0]
 8020468:	f507 735e 	add.w	r3, r7, #888	; 0x378
 802046c:	681b      	ldr	r3, [r3, #0]
 802046e:	fb21 3202 	smlad	r2, r1, r2, r3
 8020472:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8020476:	601a      	str	r2, [r3, #0]
  return(result);
 8020478:	f507 735d 	add.w	r3, r7, #884	; 0x374
 802047c:	681b      	ldr	r3, [r3, #0]
 802047e:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 8020482:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020486:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 802048a:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 802048e:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8020492:	601a      	str	r2, [r3, #0]
 8020494:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8020498:	6019      	str	r1, [r3, #0]
 802049a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 802049e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80204a0:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80204a4:	6819      	ldr	r1, [r3, #0]
 80204a6:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80204aa:	681a      	ldr	r2, [r3, #0]
 80204ac:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80204b0:	681b      	ldr	r3, [r3, #0]
 80204b2:	fb21 3202 	smlad	r2, r1, r2, r3
 80204b6:	f507 7361 	add.w	r3, r7, #900	; 0x384
 80204ba:	601a      	str	r2, [r3, #0]
  return(result);
 80204bc:	f507 7361 	add.w	r3, r7, #900	; 0x384
 80204c0:	681b      	ldr	r3, [r3, #0]
 80204c2:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 80204c6:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 80204ca:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 80204ce:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 80204d2:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80204d6:	601a      	str	r2, [r3, #0]
 80204d8:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 80204dc:	6019      	str	r1, [r3, #0]
 80204de:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80204e2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80204e4:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80204e8:	6819      	ldr	r1, [r3, #0]
 80204ea:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 80204ee:	681a      	ldr	r2, [r3, #0]
 80204f0:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80204f4:	681b      	ldr	r3, [r3, #0]
 80204f6:	fb21 3202 	smlad	r2, r1, r2, r3
 80204fa:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80204fe:	601a      	str	r2, [r3, #0]
  return(result);
 8020500:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 802050a:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 802050e:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 8020512:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8020516:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 802051a:	601a      	str	r2, [r3, #0]
 802051c:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8020520:	6019      	str	r1, [r3, #0]
 8020522:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8020526:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020528:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 802052c:	6819      	ldr	r1, [r3, #0]
 802052e:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8020532:	681a      	ldr	r2, [r3, #0]
 8020534:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8020538:	681b      	ldr	r3, [r3, #0]
 802053a:	fb21 3202 	smlad	r2, r1, r2, r3
 802053e:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8020542:	601a      	str	r2, [r3, #0]
  return(result);
 8020544:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8020548:	681b      	ldr	r3, [r3, #0]
 802054a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 802054e:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 8020552:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020556:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020558:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 802055c:	681b      	ldr	r3, [r3, #0]
 802055e:	681b      	ldr	r3, [r3, #0]
 8020560:	681b      	ldr	r3, [r3, #0]
 8020562:	461a      	mov	r2, r3
 8020564:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8020568:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 802056a:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 802056e:	681b      	ldr	r3, [r3, #0]
 8020570:	681b      	ldr	r3, [r3, #0]
 8020572:	1d1a      	adds	r2, r3, #4
 8020574:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8020578:	681b      	ldr	r3, [r3, #0]
 802057a:	601a      	str	r2, [r3, #0]
    return (val);
 802057c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8020580:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8020582:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8020586:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802058a:	681a      	ldr	r2, [r3, #0]
 802058c:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 8020590:	441a      	add	r2, r3
 8020592:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8020596:	601a      	str	r2, [r3, #0]
 8020598:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 802059c:	681b      	ldr	r3, [r3, #0]
 802059e:	681b      	ldr	r3, [r3, #0]
 80205a0:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80205a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80205a6:	601a      	str	r2, [r3, #0]
    return (val);
 80205a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80205ac:	681b      	ldr	r3, [r3, #0]
 80205ae:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 80205b2:	f507 726f 	add.w	r2, r7, #956	; 0x3bc
 80205b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80205ba:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80205bc:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 80205c0:	681b      	ldr	r3, [r3, #0]
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	681b      	ldr	r3, [r3, #0]
 80205c6:	461a      	mov	r2, r3
 80205c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80205cc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80205ce:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 80205d2:	681b      	ldr	r3, [r3, #0]
 80205d4:	681b      	ldr	r3, [r3, #0]
 80205d6:	1d1a      	adds	r2, r3, #4
 80205d8:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 80205dc:	681b      	ldr	r3, [r3, #0]
 80205de:	601a      	str	r2, [r3, #0]
    return (val);
 80205e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80205e4:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80205e6:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 80205ea:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 80205ee:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80205f2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80205f4:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80205f8:	681b      	ldr	r3, [r3, #0]
 80205fa:	fa2f f283 	sxtb16	r2, r3
 80205fe:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8020602:	601a      	str	r2, [r3, #0]
  return(result);
 8020604:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8020608:	681b      	ldr	r3, [r3, #0]
 802060a:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 802060e:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020612:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8020616:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020618:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 802061c:	681b      	ldr	r3, [r3, #0]
 802061e:	fa2f f283 	sxtb16	r2, r3
 8020622:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8020626:	601a      	str	r2, [r3, #0]
  return(result);
 8020628:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 802062c:	681b      	ldr	r3, [r3, #0]
 802062e:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 8020632:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020636:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 802063a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802063c:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8020640:	681b      	ldr	r3, [r3, #0]
 8020642:	fa2f f283 	sxtb16	r2, r3
 8020646:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 802064a:	601a      	str	r2, [r3, #0]
  return(result);
 802064c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8020650:	681b      	ldr	r3, [r3, #0]
 8020652:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 8020656:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 802065a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 802065e:	601a      	str	r2, [r3, #0]
 8020660:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8020664:	2308      	movs	r3, #8
 8020666:	6013      	str	r3, [r2, #0]
 8020668:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 802066c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8020670:	681b      	ldr	r3, [r3, #0]
 8020672:	6013      	str	r3, [r2, #0]
 8020674:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8020678:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 802067c:	681b      	ldr	r3, [r3, #0]
 802067e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020680:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8020684:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8020688:	681b      	ldr	r3, [r3, #0]
 802068a:	f003 031f 	and.w	r3, r3, #31
 802068e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020690:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8020694:	681b      	ldr	r3, [r3, #0]
 8020696:	2b00      	cmp	r3, #0
 8020698:	d103      	bne.n	80206a2 <arm_nn_mat_mult_nt_t_s8+0x2c44>
    return op1;
 802069a:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 802069e:	681a      	ldr	r2, [r3, #0]
 80206a0:	e006      	b.n	80206b0 <arm_nn_mat_mult_nt_t_s8+0x2c52>
  return (op1 >> op2) | (op1 << (32U - op2));
 80206a2:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 80206a6:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80206aa:	6812      	ldr	r2, [r2, #0]
 80206ac:	681b      	ldr	r3, [r3, #0]
 80206ae:	41da      	rors	r2, r3
 80206b0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80206b4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80206b6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80206ba:	681b      	ldr	r3, [r3, #0]
 80206bc:	fa2f f283 	sxtb16	r2, r3
 80206c0:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80206c4:	601a      	str	r2, [r3, #0]
  return(result);
 80206c6:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80206ca:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80206cc:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80206d0:	601a      	str	r2, [r3, #0]
  return result;
 80206d2:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80206d6:	681b      	ldr	r3, [r3, #0]
 80206d8:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 80206dc:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80206e0:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80206e4:	601a      	str	r2, [r3, #0]
 80206e6:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 80206ea:	2308      	movs	r3, #8
 80206ec:	6013      	str	r3, [r2, #0]
 80206ee:	f207 4204 	addw	r2, r7, #1028	; 0x404
 80206f2:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80206f6:	681b      	ldr	r3, [r3, #0]
 80206f8:	6013      	str	r3, [r2, #0]
 80206fa:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80206fe:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8020702:	681b      	ldr	r3, [r3, #0]
 8020704:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020706:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 802070a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	f003 031f 	and.w	r3, r3, #31
 8020714:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020716:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 802071a:	681b      	ldr	r3, [r3, #0]
 802071c:	2b00      	cmp	r3, #0
 802071e:	d103      	bne.n	8020728 <arm_nn_mat_mult_nt_t_s8+0x2cca>
    return op1;
 8020720:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8020724:	681a      	ldr	r2, [r3, #0]
 8020726:	e006      	b.n	8020736 <arm_nn_mat_mult_nt_t_s8+0x2cd8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020728:	f207 4204 	addw	r2, r7, #1028	; 0x404
 802072c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8020730:	6812      	ldr	r2, [r2, #0]
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	41da      	rors	r2, r3
 8020736:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 802073a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802073c:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8020740:	681b      	ldr	r3, [r3, #0]
 8020742:	fa2f f283 	sxtb16	r2, r3
 8020746:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 802074a:	601a      	str	r2, [r3, #0]
  return(result);
 802074c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8020750:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020752:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8020756:	601a      	str	r2, [r3, #0]
  return result;
 8020758:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 802075c:	681b      	ldr	r3, [r3, #0]
 802075e:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 8020762:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020766:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802076a:	601a      	str	r2, [r3, #0]
 802076c:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8020770:	2308      	movs	r3, #8
 8020772:	6013      	str	r3, [r2, #0]
 8020774:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8020778:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802077c:	681b      	ldr	r3, [r3, #0]
 802077e:	6013      	str	r3, [r2, #0]
 8020780:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8020784:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8020788:	681b      	ldr	r3, [r3, #0]
 802078a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 802078c:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8020790:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8020794:	681b      	ldr	r3, [r3, #0]
 8020796:	f003 031f 	and.w	r3, r3, #31
 802079a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 802079c:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80207a0:	681b      	ldr	r3, [r3, #0]
 80207a2:	2b00      	cmp	r3, #0
 80207a4:	d103      	bne.n	80207ae <arm_nn_mat_mult_nt_t_s8+0x2d50>
    return op1;
 80207a6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80207aa:	681a      	ldr	r2, [r3, #0]
 80207ac:	e006      	b.n	80207bc <arm_nn_mat_mult_nt_t_s8+0x2d5e>
  return (op1 >> op2) | (op1 << (32U - op2));
 80207ae:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 80207b2:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80207b6:	6812      	ldr	r2, [r2, #0]
 80207b8:	681b      	ldr	r3, [r3, #0]
 80207ba:	41da      	rors	r2, r3
 80207bc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80207c0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80207c2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80207c6:	681b      	ldr	r3, [r3, #0]
 80207c8:	fa2f f283 	sxtb16	r2, r3
 80207cc:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80207d0:	601a      	str	r2, [r3, #0]
  return(result);
 80207d2:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80207d6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80207d8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80207dc:	601a      	str	r2, [r3, #0]
  return result;
 80207de:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80207e2:	681b      	ldr	r3, [r3, #0]
 80207e4:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 80207e8:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 80207ec:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 80207f0:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 80207f4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80207f8:	601a      	str	r2, [r3, #0]
 80207fa:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80207fe:	6019      	str	r1, [r3, #0]
 8020800:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8020804:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020806:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 802080a:	6819      	ldr	r1, [r3, #0]
 802080c:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8020810:	681a      	ldr	r2, [r3, #0]
 8020812:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8020816:	681b      	ldr	r3, [r3, #0]
 8020818:	fb21 3202 	smlad	r2, r1, r2, r3
 802081c:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8020820:	601a      	str	r2, [r3, #0]
  return(result);
 8020822:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8020826:	681b      	ldr	r3, [r3, #0]
 8020828:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 802082c:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020830:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 8020834:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8020838:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 802083c:	601a      	str	r2, [r3, #0]
 802083e:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8020842:	6019      	str	r1, [r3, #0]
 8020844:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8020848:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802084a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 802084e:	6819      	ldr	r1, [r3, #0]
 8020850:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8020854:	681a      	ldr	r2, [r3, #0]
 8020856:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 802085a:	681b      	ldr	r3, [r3, #0]
 802085c:	fb21 3202 	smlad	r2, r1, r2, r3
 8020860:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8020864:	601a      	str	r2, [r3, #0]
  return(result);
 8020866:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 802086a:	681b      	ldr	r3, [r3, #0]
 802086c:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 8020870:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020874:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 8020878:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 802087c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8020880:	601a      	str	r2, [r3, #0]
 8020882:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8020886:	6019      	str	r1, [r3, #0]
 8020888:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 802088c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802088e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8020892:	6819      	ldr	r1, [r3, #0]
 8020894:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8020898:	681a      	ldr	r2, [r3, #0]
 802089a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 802089e:	681b      	ldr	r3, [r3, #0]
 80208a0:	fb21 3202 	smlad	r2, r1, r2, r3
 80208a4:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80208a8:	601a      	str	r2, [r3, #0]
  return(result);
 80208aa:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80208ae:	681b      	ldr	r3, [r3, #0]
 80208b0:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 80208b4:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80208b8:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 80208bc:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 80208c0:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80208c4:	601a      	str	r2, [r3, #0]
 80208c6:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80208ca:	6019      	str	r1, [r3, #0]
 80208cc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80208d0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80208d2:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80208d6:	6819      	ldr	r1, [r3, #0]
 80208d8:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80208dc:	681a      	ldr	r2, [r3, #0]
 80208de:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80208e2:	681b      	ldr	r3, [r3, #0]
 80208e4:	fb21 3202 	smlad	r2, r1, r2, r3
 80208e8:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80208ec:	601a      	str	r2, [r3, #0]
  return(result);
 80208ee:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80208f2:	681b      	ldr	r3, [r3, #0]
 80208f4:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 80208f8:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 80208fc:	3310      	adds	r3, #16
 80208fe:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
 8020902:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8020906:	f1a3 020f 	sub.w	r2, r3, #15
 802090a:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 802090e:	4293      	cmp	r3, r2
 8020910:	f6ff a89e 	blt.w	801fa50 <arm_nn_mat_mult_nt_t_s8+0x1ff2>
            }

            // Left-over accumulations
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8020914:	e03d      	b.n	8020992 <arm_nn_mat_mult_nt_t_s8+0x2f34>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 8020916:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802091a:	681b      	ldr	r3, [r3, #0]
 802091c:	781b      	ldrb	r3, [r3, #0]
 802091e:	f887 39e3 	strb.w	r3, [r7, #2531]	; 0x9e3
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 8020922:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020926:	681a      	ldr	r2, [r3, #0]
 8020928:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 802092c:	4413      	add	r3, r2
 802092e:	781b      	ldrb	r3, [r3, #0]
 8020930:	f887 39e2 	strb.w	r3, [r7, #2530]	; 0x9e2
                q7_t lhs_value = lhs_ptr[0];
 8020934:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020938:	681b      	ldr	r3, [r3, #0]
 802093a:	781b      	ldrb	r3, [r3, #0]
 802093c:	f887 39e1 	strb.w	r3, [r7, #2529]	; 0x9e1

                res00 += lhs_value * rhs_value0;
 8020940:	f997 29e1 	ldrsb.w	r2, [r7, #2529]	; 0x9e1
 8020944:	f997 39e3 	ldrsb.w	r3, [r7, #2531]	; 0x9e3
 8020948:	fb03 f202 	mul.w	r2, r3, r2
 802094c:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 8020950:	4413      	add	r3, r2
 8020952:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 += lhs_value * rhs_value1;
 8020956:	f997 29e1 	ldrsb.w	r2, [r7, #2529]	; 0x9e1
 802095a:	f997 39e2 	ldrsb.w	r3, [r7, #2530]	; 0x9e2
 802095e:	fb03 f202 	mul.w	r2, r3, r2
 8020962:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8020966:	4413      	add	r3, r2
 8020968:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

                ++rhs_ptr;
 802096c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020970:	681b      	ldr	r3, [r3, #0]
 8020972:	1c5a      	adds	r2, r3, #1
 8020974:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020978:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 802097a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802097e:	681b      	ldr	r3, [r3, #0]
 8020980:	1c5a      	adds	r2, r3, #1
 8020982:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020986:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8020988:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 802098c:	3301      	adds	r3, #1
 802098e:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
 8020992:	f8d7 2a08 	ldr.w	r2, [r7, #2568]	; 0xa08
 8020996:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 802099a:	429a      	cmp	r2, r3
 802099c:	dbbb      	blt.n	8020916 <arm_nn_mat_mult_nt_t_s8+0x2eb8>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 802099e:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 80209a2:	009a      	lsls	r2, r3, #2
 80209a4:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 80209a8:	4413      	add	r3, r2
 80209aa:	6818      	ldr	r0, [r3, #0]
 80209ac:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 80209b0:	009a      	lsls	r2, r3, #2
 80209b2:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 80209b6:	4413      	add	r3, r2
 80209b8:	6819      	ldr	r1, [r3, #0]
 80209ba:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80209be:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 80209c2:	6013      	str	r3, [r2, #0]
 80209c4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80209c8:	6018      	str	r0, [r3, #0]
 80209ca:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80209ce:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80209d0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80209d4:	681b      	ldr	r3, [r3, #0]
 80209d6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80209da:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80209de:	681b      	ldr	r3, [r3, #0]
 80209e0:	fa03 f202 	lsl.w	r2, r3, r2
 80209e4:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80209e8:	601a      	str	r2, [r3, #0]
 80209ea:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80209ee:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80209f6:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 80209fa:	2300      	movs	r3, #0
 80209fc:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80209fe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8020a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020a06:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8020a08:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8020a0c:	2300      	movs	r3, #0
 8020a0e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8020a10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020a14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020a18:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8020a1c:	681b      	ldr	r3, [r3, #0]
 8020a1e:	4618      	mov	r0, r3
 8020a20:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8020a24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8020a28:	681b      	ldr	r3, [r3, #0]
 8020a2a:	461a      	mov	r2, r3
 8020a2c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8020a30:	fb02 f501 	mul.w	r5, r2, r1
 8020a34:	fb00 f403 	mul.w	r4, r0, r3
 8020a38:	442c      	add	r4, r5
 8020a3a:	fba0 2302 	umull	r2, r3, r0, r2
 8020a3e:	18e1      	adds	r1, r4, r3
 8020a40:	460b      	mov	r3, r1
 8020a42:	eb18 0102 	adds.w	r1, r8, r2
 8020a46:	6039      	str	r1, [r7, #0]
 8020a48:	eb49 0303 	adc.w	r3, r9, r3
 8020a4c:	607b      	str	r3, [r7, #4]
 8020a4e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020a52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8020a56:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8020a5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a62:	f04f 0000 	mov.w	r0, #0
 8020a66:	f04f 0100 	mov.w	r1, #0
 8020a6a:	0fd0      	lsrs	r0, r2, #31
 8020a6c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020a70:	17d9      	asrs	r1, r3, #31
 8020a72:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8020a76:	4603      	mov	r3, r0
 8020a78:	6013      	str	r3, [r2, #0]
    return result;
 8020a7a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8020a7e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020a80:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8020a84:	681b      	ldr	r3, [r3, #0]
 8020a86:	2b00      	cmp	r3, #0
 8020a88:	dc04      	bgt.n	8020a94 <arm_nn_mat_mult_nt_t_s8+0x3036>
 8020a8a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8020a8e:	681b      	ldr	r3, [r3, #0]
 8020a90:	425a      	negs	r2, r3
 8020a92:	e000      	b.n	8020a96 <arm_nn_mat_mult_nt_t_s8+0x3038>
 8020a94:	2200      	movs	r2, #0
 8020a96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8020a9a:	6019      	str	r1, [r3, #0]
 8020a9c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8020aa0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8020aa2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8020aa6:	2300      	movs	r3, #0
 8020aa8:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8020aaa:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8020aae:	2201      	movs	r2, #1
 8020ab0:	681b      	ldr	r3, [r3, #0]
 8020ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8020ab6:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8020aba:	3b01      	subs	r3, #1
 8020abc:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8020abe:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8020ac2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8020ac6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8020aca:	6812      	ldr	r2, [r2, #0]
 8020acc:	681b      	ldr	r3, [r3, #0]
 8020ace:	4013      	ands	r3, r2
 8020ad0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8020ad2:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8020ad6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8020ada:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8020ade:	6812      	ldr	r2, [r2, #0]
 8020ae0:	681b      	ldr	r3, [r3, #0]
 8020ae2:	fa42 f303 	asr.w	r3, r2, r3
 8020ae6:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8020ae8:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8020aec:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8020af0:	681b      	ldr	r3, [r3, #0]
 8020af2:	105b      	asrs	r3, r3, #1
 8020af4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8020af6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8020afa:	681b      	ldr	r3, [r3, #0]
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	da06      	bge.n	8020b0e <arm_nn_mat_mult_nt_t_s8+0x30b0>
        threshold++;
 8020b00:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8020b04:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8020b08:	681b      	ldr	r3, [r3, #0]
 8020b0a:	3301      	adds	r3, #1
 8020b0c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8020b0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020b12:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8020b16:	6812      	ldr	r2, [r2, #0]
 8020b18:	681b      	ldr	r3, [r3, #0]
 8020b1a:	429a      	cmp	r2, r3
 8020b1c:	dd06      	ble.n	8020b2c <arm_nn_mat_mult_nt_t_s8+0x30ce>
        result++;
 8020b1e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8020b22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8020b26:	681b      	ldr	r3, [r3, #0]
 8020b28:	3301      	adds	r3, #1
 8020b2a:	6013      	str	r3, [r2, #0]
    return result;
 8020b2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8020b30:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020b32:	bf00      	nop
 8020b34:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8020b38:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020b3c:	3301      	adds	r3, #1
 8020b3e:	009a      	lsls	r2, r3, #2
 8020b40:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 8020b44:	4413      	add	r3, r2
 8020b46:	6818      	ldr	r0, [r3, #0]
 8020b48:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020b4c:	3301      	adds	r3, #1
 8020b4e:	009a      	lsls	r2, r3, #2
 8020b50:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 8020b54:	4413      	add	r3, r2
 8020b56:	6819      	ldr	r1, [r3, #0]
 8020b58:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8020b5c:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8020b60:	6013      	str	r3, [r2, #0]
 8020b62:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8020b66:	6018      	str	r0, [r3, #0]
 8020b68:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8020b6c:	6019      	str	r1, [r3, #0]
 8020b6e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8020b72:	681b      	ldr	r3, [r3, #0]
 8020b74:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8020b78:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8020b7c:	681b      	ldr	r3, [r3, #0]
 8020b7e:	fa03 f202 	lsl.w	r2, r3, r2
 8020b82:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8020b86:	601a      	str	r2, [r3, #0]
 8020b88:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8020b8c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8020b90:	681b      	ldr	r3, [r3, #0]
 8020b92:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8020b94:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8020b98:	2300      	movs	r3, #0
 8020b9a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8020b9c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8020ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020ba4:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8020ba6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8020baa:	2300      	movs	r3, #0
 8020bac:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8020bae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020bb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020bb6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8020bba:	681b      	ldr	r3, [r3, #0]
 8020bbc:	4618      	mov	r0, r3
 8020bbe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8020bc2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8020bc6:	681b      	ldr	r3, [r3, #0]
 8020bc8:	461a      	mov	r2, r3
 8020bca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8020bce:	fb02 f501 	mul.w	r5, r2, r1
 8020bd2:	fb00 f403 	mul.w	r4, r0, r3
 8020bd6:	442c      	add	r4, r5
 8020bd8:	fba0 2302 	umull	r2, r3, r0, r2
 8020bdc:	18e1      	adds	r1, r4, r3
 8020bde:	460b      	mov	r3, r1
 8020be0:	eb18 0102 	adds.w	r1, r8, r2
 8020be4:	60b9      	str	r1, [r7, #8]
 8020be6:	eb49 0303 	adc.w	r3, r9, r3
 8020bea:	60fb      	str	r3, [r7, #12]
 8020bec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020bf0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020bf4:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8020bf8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c00:	f04f 0000 	mov.w	r0, #0
 8020c04:	f04f 0100 	mov.w	r1, #0
 8020c08:	0fd0      	lsrs	r0, r2, #31
 8020c0a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020c0e:	17d9      	asrs	r1, r3, #31
 8020c10:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8020c14:	4603      	mov	r3, r0
 8020c16:	6013      	str	r3, [r2, #0]
    return result;
 8020c18:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8020c1c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020c1e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8020c22:	681b      	ldr	r3, [r3, #0]
 8020c24:	2b00      	cmp	r3, #0
 8020c26:	dc04      	bgt.n	8020c32 <arm_nn_mat_mult_nt_t_s8+0x31d4>
 8020c28:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8020c2c:	681b      	ldr	r3, [r3, #0]
 8020c2e:	425a      	negs	r2, r3
 8020c30:	e000      	b.n	8020c34 <arm_nn_mat_mult_nt_t_s8+0x31d6>
 8020c32:	2200      	movs	r2, #0
 8020c34:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8020c38:	6019      	str	r1, [r3, #0]
 8020c3a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8020c3e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8020c40:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8020c44:	2300      	movs	r3, #0
 8020c46:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8020c48:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8020c4c:	2201      	movs	r2, #1
 8020c4e:	681b      	ldr	r3, [r3, #0]
 8020c50:	fa02 f303 	lsl.w	r3, r2, r3
 8020c54:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8020c58:	3b01      	subs	r3, #1
 8020c5a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8020c5c:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8020c60:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8020c64:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8020c68:	6812      	ldr	r2, [r2, #0]
 8020c6a:	681b      	ldr	r3, [r3, #0]
 8020c6c:	4013      	ands	r3, r2
 8020c6e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8020c70:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8020c74:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8020c78:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8020c7c:	6812      	ldr	r2, [r2, #0]
 8020c7e:	681b      	ldr	r3, [r3, #0]
 8020c80:	fa42 f303 	asr.w	r3, r2, r3
 8020c84:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8020c86:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8020c8a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8020c8e:	681b      	ldr	r3, [r3, #0]
 8020c90:	105b      	asrs	r3, r3, #1
 8020c92:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8020c94:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8020c98:	681b      	ldr	r3, [r3, #0]
 8020c9a:	2b00      	cmp	r3, #0
 8020c9c:	da06      	bge.n	8020cac <arm_nn_mat_mult_nt_t_s8+0x324e>
        threshold++;
 8020c9e:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8020ca2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8020ca6:	681b      	ldr	r3, [r3, #0]
 8020ca8:	3301      	adds	r3, #1
 8020caa:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8020cac:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8020cb0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8020cb4:	6812      	ldr	r2, [r2, #0]
 8020cb6:	681b      	ldr	r3, [r3, #0]
 8020cb8:	429a      	cmp	r2, r3
 8020cba:	dd06      	ble.n	8020cca <arm_nn_mat_mult_nt_t_s8+0x326c>
        result++;
 8020cbc:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8020cc0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8020cc4:	681b      	ldr	r3, [r3, #0]
 8020cc6:	3301      	adds	r3, #1
 8020cc8:	6013      	str	r3, [r2, #0]
    return result;
 8020cca:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8020cce:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020cd0:	bf00      	nop
 8020cd2:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            // Add offset
            res00 += dst_offset;
 8020cd6:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 8020cda:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8020cde:	4413      	add	r3, r2
 8020ce0:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 += dst_offset;
 8020ce4:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 8020ce8:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8020cec:	4413      	add	r3, r2
 8020cee:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8020cf2:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 8020cf6:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8020cfa:	4293      	cmp	r3, r2
 8020cfc:	bfb8      	it	lt
 8020cfe:	4613      	movlt	r3, r2
 8020d00:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res00 = MIN(res00, activation_max);
 8020d04:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 8020d08:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8020d0c:	4293      	cmp	r3, r2
 8020d0e:	bfa8      	it	ge
 8020d10:	4613      	movge	r3, r2
 8020d12:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 = MAX(res01, activation_min);
 8020d16:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 8020d1a:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8020d1e:	4293      	cmp	r3, r2
 8020d20:	bfb8      	it	lt
 8020d22:	4613      	movlt	r3, r2
 8020d24:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
            res01 = MIN(res01, activation_max);
 8020d28:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 8020d2c:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8020d30:	4293      	cmp	r3, r2
 8020d32:	bfa8      	it	ge
 8020d34:	4613      	movge	r3, r2
 8020d36:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            dst_ptr[0] = (q7_t)res00;
 8020d3a:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 8020d3e:	b25b      	sxtb	r3, r3
 8020d40:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 8020d44:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 8020d46:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 8020d4a:	1c5a      	adds	r2, r3, #1
 8020d4c:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8020d50:	b25b      	sxtb	r3, r3
 8020d52:	7013      	strb	r3, [r2, #0]
        }

        rhs += 2 * rhs_cols;
 8020d54:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8020d58:	005b      	lsls	r3, r3, #1
 8020d5a:	4619      	mov	r1, r3
 8020d5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8020d60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020d64:	681b      	ldr	r3, [r3, #0]
 8020d66:	440b      	add	r3, r1
 8020d68:	6013      	str	r3, [r2, #0]
        dst += 2;
 8020d6a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8020d6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020d72:	681b      	ldr	r3, [r3, #0]
 8020d74:	3302      	adds	r3, #2
 8020d76:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8020d78:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020d7c:	3302      	adds	r3, #2
 8020d7e:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 8020d82:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8020d86:	1e5a      	subs	r2, r3, #1
 8020d88:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020d8c:	4293      	cmp	r3, r2
 8020d8e:	f6fc ae81 	blt.w	801da94 <arm_nn_mat_mult_nt_t_s8+0x36>
    }

    if (rhs_rows % 2)
 8020d92:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8020d96:	f003 0301 	and.w	r3, r3, #1
 8020d9a:	2b00      	cmp	r3, #0
 8020d9c:	f000 815b 	beq.w	8021056 <arm_nn_mat_mult_nt_t_s8+0x35f8>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8020da0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8020da4:	681b      	ldr	r3, [r3, #0]
 8020da6:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
        q7_t *dst_ptr = &dst[0];
 8020daa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020dae:	681b      	ldr	r3, [r3, #0]
 8020db0:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 8020db4:	2300      	movs	r3, #0
 8020db6:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 8020dba:	e145      	b.n	8021048 <arm_nn_mat_mult_nt_t_s8+0x35ea>
        {
            const q7_t *rhs_ptr = &rhs[0];
 8020dbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020dc0:	681b      	ldr	r3, [r3, #0]
 8020dc2:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
            q31_t res00 = 0;
 8020dc6:	2300      	movs	r3, #0
 8020dc8:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            if (bias)
 8020dcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8020dd0:	681b      	ldr	r3, [r3, #0]
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	d00c      	beq.n	8020df0 <arm_nn_mat_mult_nt_t_s8+0x3392>
            {
                res00 = bias[rhs_rows - 1];
 8020dd6:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8020dda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8020dde:	3b01      	subs	r3, #1
 8020de0:	009b      	lsls	r3, r3, #2
 8020de2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8020de6:	6812      	ldr	r2, [r2, #0]
 8020de8:	4413      	add	r3, r2
 8020dea:	681b      	ldr	r3, [r3, #0]
 8020dec:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            }

            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8020df0:	2300      	movs	r3, #0
 8020df2:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
 8020df6:	e029      	b.n	8020e4c <arm_nn_mat_mult_nt_t_s8+0x33ee>
            {
                q31_t rhs_value = rhs_ptr[0];
 8020df8:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 8020dfc:	f993 3000 	ldrsb.w	r3, [r3]
 8020e00:	f8c7 39e8 	str.w	r3, [r7, #2536]	; 0x9e8
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8020e04:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 8020e08:	f993 3000 	ldrsb.w	r3, [r3]
 8020e0c:	461a      	mov	r2, r3
 8020e0e:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 8020e12:	4413      	add	r3, r2
 8020e14:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4

                res00 += lhs_value * rhs_value;
 8020e18:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 8020e1c:	f8d7 29e8 	ldr.w	r2, [r7, #2536]	; 0x9e8
 8020e20:	fb02 f303 	mul.w	r3, r2, r3
 8020e24:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8020e28:	4413      	add	r3, r2
 8020e2a:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

                ++rhs_ptr;
 8020e2e:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 8020e32:	3301      	adds	r3, #1
 8020e34:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
                ++lhs_ptr;
 8020e38:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 8020e3c:	3301      	adds	r3, #1
 8020e3e:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8020e42:	f8d7 39f0 	ldr.w	r3, [r7, #2544]	; 0x9f0
 8020e46:	3301      	adds	r3, #1
 8020e48:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
 8020e4c:	f8d7 29f0 	ldr.w	r2, [r7, #2544]	; 0x9f0
 8020e50:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8020e54:	429a      	cmp	r2, r3
 8020e56:	dbcf      	blt.n	8020df8 <arm_nn_mat_mult_nt_t_s8+0x339a>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 8020e58:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8020e5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8020e60:	3b01      	subs	r3, #1
 8020e62:	009b      	lsls	r3, r3, #2
 8020e64:	f8d7 2a60 	ldr.w	r2, [r7, #2656]	; 0xa60
 8020e68:	4413      	add	r3, r2
 8020e6a:	6819      	ldr	r1, [r3, #0]
 8020e6c:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8020e70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8020e74:	3b01      	subs	r3, #1
 8020e76:	009b      	lsls	r3, r3, #2
 8020e78:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 8020e7c:	4413      	add	r3, r2
 8020e7e:	681a      	ldr	r2, [r3, #0]
 8020e80:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8020e84:	f8d7 09f4 	ldr.w	r0, [r7, #2548]	; 0x9f4
 8020e88:	6018      	str	r0, [r3, #0]
 8020e8a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8020e8e:	6019      	str	r1, [r3, #0]
 8020e90:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020e94:	601a      	str	r2, [r3, #0]
 8020e96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020e9a:	681b      	ldr	r3, [r3, #0]
 8020e9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020ea0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8020ea4:	6812      	ldr	r2, [r2, #0]
 8020ea6:	409a      	lsls	r2, r3
 8020ea8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8020eac:	601a      	str	r2, [r3, #0]
 8020eae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8020eb2:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8020eb6:	6812      	ldr	r2, [r2, #0]
 8020eb8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8020eba:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8020ebe:	2200      	movs	r2, #0
 8020ec0:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8020ec2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020ec6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8020eca:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8020ecc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020ed0:	2200      	movs	r2, #0
 8020ed2:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8020ed4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020ed8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8020edc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8020ee0:	681b      	ldr	r3, [r3, #0]
 8020ee2:	4618      	mov	r0, r3
 8020ee4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8020ee8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8020eec:	681b      	ldr	r3, [r3, #0]
 8020eee:	461a      	mov	r2, r3
 8020ef0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8020ef4:	fb02 fc01 	mul.w	ip, r2, r1
 8020ef8:	fb00 f603 	mul.w	r6, r0, r3
 8020efc:	4466      	add	r6, ip
 8020efe:	fba0 2302 	umull	r2, r3, r0, r2
 8020f02:	18f1      	adds	r1, r6, r3
 8020f04:	460b      	mov	r3, r1
 8020f06:	eb14 0a02 	adds.w	sl, r4, r2
 8020f0a:	eb45 0b03 	adc.w	fp, r5, r3
 8020f0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020f12:	e9c3 ab00 	strd	sl, fp, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8020f16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020f1e:	f04f 0200 	mov.w	r2, #0
 8020f22:	f04f 0300 	mov.w	r3, #0
 8020f26:	0fc2      	lsrs	r2, r0, #31
 8020f28:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8020f2c:	17cb      	asrs	r3, r1, #31
 8020f2e:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8020f32:	4613      	mov	r3, r2
 8020f34:	600b      	str	r3, [r1, #0]
    return result;
 8020f36:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8020f3a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020f3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020f40:	681b      	ldr	r3, [r3, #0]
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	dc04      	bgt.n	8020f50 <arm_nn_mat_mult_nt_t_s8+0x34f2>
 8020f46:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020f4a:	681b      	ldr	r3, [r3, #0]
 8020f4c:	425b      	negs	r3, r3
 8020f4e:	e000      	b.n	8020f52 <arm_nn_mat_mult_nt_t_s8+0x34f4>
 8020f50:	2300      	movs	r3, #0
 8020f52:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8020f56:	6011      	str	r1, [r2, #0]
 8020f58:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8020f5c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8020f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020f62:	2200      	movs	r2, #0
 8020f64:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8020f66:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8020f6a:	2201      	movs	r2, #1
 8020f6c:	681b      	ldr	r3, [r3, #0]
 8020f6e:	409a      	lsls	r2, r3
 8020f70:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8020f74:	3a01      	subs	r2, #1
 8020f76:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8020f78:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020f7c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8020f80:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8020f84:	6809      	ldr	r1, [r1, #0]
 8020f86:	6812      	ldr	r2, [r2, #0]
 8020f88:	400a      	ands	r2, r1
 8020f8a:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8020f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020f90:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8020f94:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8020f98:	6809      	ldr	r1, [r1, #0]
 8020f9a:	6812      	ldr	r2, [r2, #0]
 8020f9c:	fa41 f202 	asr.w	r2, r1, r2
 8020fa0:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8020fa2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8020fa6:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8020faa:	6812      	ldr	r2, [r2, #0]
 8020fac:	1052      	asrs	r2, r2, #1
 8020fae:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8020fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020fb4:	681b      	ldr	r3, [r3, #0]
 8020fb6:	2b00      	cmp	r3, #0
 8020fb8:	da06      	bge.n	8020fc8 <arm_nn_mat_mult_nt_t_s8+0x356a>
        threshold++;
 8020fba:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8020fbe:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8020fc2:	6812      	ldr	r2, [r2, #0]
 8020fc4:	3201      	adds	r2, #1
 8020fc6:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8020fc8:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8020fcc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8020fd0:	6812      	ldr	r2, [r2, #0]
 8020fd2:	681b      	ldr	r3, [r3, #0]
 8020fd4:	429a      	cmp	r2, r3
 8020fd6:	dd06      	ble.n	8020fe6 <arm_nn_mat_mult_nt_t_s8+0x3588>
        result++;
 8020fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020fdc:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020fe0:	6812      	ldr	r2, [r2, #0]
 8020fe2:	3201      	adds	r2, #1
 8020fe4:	601a      	str	r2, [r3, #0]
    return result;
 8020fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020fea:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020fec:	bf00      	nop
 8020fee:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            // Add offset
            res00 += dst_offset;
 8020ff2:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8020ff6:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8020ffa:	4413      	add	r3, r2
 8020ffc:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8021000:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8021004:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8021008:	4293      	cmp	r3, r2
 802100a:	bfb8      	it	lt
 802100c:	4613      	movlt	r3, r2
 802100e:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            res00 = MIN(res00, activation_max);
 8021012:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8021016:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 802101a:	4293      	cmp	r3, r2
 802101c:	bfa8      	it	ge
 802101e:	4613      	movge	r3, r2
 8021020:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            dst_ptr[0] = (q7_t)res00;
 8021024:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8021028:	b25a      	sxtb	r2, r3
 802102a:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 802102e:	701a      	strb	r2, [r3, #0]
            dst_ptr += rhs_rows;
 8021030:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8021034:	f8d7 2a00 	ldr.w	r2, [r7, #2560]	; 0xa00
 8021038:	4413      	add	r3, r2
 802103a:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 802103e:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 8021042:	3301      	adds	r3, #1
 8021044:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 8021048:	f8d7 29fc 	ldr.w	r2, [r7, #2556]	; 0x9fc
 802104c:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 8021050:	429a      	cmp	r2, r3
 8021052:	f6ff aeb3 	blt.w	8020dbc <arm_nn_mat_mult_nt_t_s8+0x335e>
            dst_ptr[0] = (q7_t)res00;
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
 8021056:	2300      	movs	r3, #0
}
 8021058:	4618      	mov	r0, r3
 802105a:	f507 6724 	add.w	r7, r7, #2624	; 0xa40
 802105e:	46bd      	mov	sp, r7
 8021060:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8021064:	4770      	bx	lr

08021066 <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 8021066:	b480      	push	{r7}
 8021068:	b0a5      	sub	sp, #148	; 0x94
 802106a:	af00      	add	r7, sp, #0
 802106c:	60f8      	str	r0, [r7, #12]
 802106e:	60b9      	str	r1, [r7, #8]
 8021070:	607a      	str	r2, [r7, #4]
 8021072:	807b      	strh	r3, [r7, #2]
    q31_t in_q15x2_2;
    q31_t out_q15x2_1;
    q31_t out_q15x2_2;

    /*loop unrolling */
    block_cnt = block_size >> 2;
 8021074:	687b      	ldr	r3, [r7, #4]
 8021076:	089b      	lsrs	r3, r3, #2
 8021078:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 802107c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8021080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8021084:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8021088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802108c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021090:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8021094:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8021098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802109c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80210a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (block_cnt > 0)
 80210a2:	e070      	b.n	8021186 <arm_q7_to_q15_with_offset+0x120>
 80210a4:	f107 030c 	add.w	r3, r7, #12
 80210a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 80210aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210ac:	681b      	ldr	r3, [r3, #0]
 80210ae:	681b      	ldr	r3, [r3, #0]
 80210b0:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 80210b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210b4:	681b      	ldr	r3, [r3, #0]
 80210b6:	1d1a      	adds	r2, r3, #4
 80210b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210ba:	601a      	str	r2, [r3, #0]
    return (val);
 80210bc:	693b      	ldr	r3, [r7, #16]
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in_q7x4 = arm_nn_read_q7x4_ia(&src);
 80210be:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
 80210c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80210c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80210c4:	637b      	str	r3, [r7, #52]	; 0x34
 80210c6:	2308      	movs	r3, #8
 80210c8:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 80210ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210cc:	f003 031f 	and.w	r3, r3, #31
 80210d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 80210d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210d4:	2b00      	cmp	r3, #0
 80210d6:	d101      	bne.n	80210dc <arm_q7_to_q15_with_offset+0x76>
    return op1;
 80210d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80210da:	e003      	b.n	80210e4 <arm_q7_to_q15_with_offset+0x7e>
  return (op1 >> op2) | (op1 << (32U - op2));
 80210dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80210de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210e0:	fa61 f303 	ror.w	r3, r1, r3
 80210e4:	643a      	str	r2, [r7, #64]	; 0x40
 80210e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80210e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80210ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80210ec:	fa23 f382 	sxtab16	r3, r3, r2
 80210f0:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80210f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80210f4:	677b      	str	r3, [r7, #116]	; 0x74
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);
 80210f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80210f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80210fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80210fc:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80210fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021102:	fa23 f382 	sxtab16	r3, r3, r2
 8021106:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8021108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802110a:	673b      	str	r3, [r7, #112]	; 0x70

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 802110c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802110e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021110:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021112:	66bb      	str	r3, [r7, #104]	; 0x68
 8021114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021116:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8021118:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 802111c:	667b      	str	r3, [r7, #100]	; 0x64
 802111e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021120:	663b      	str	r3, [r7, #96]	; 0x60
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 8021122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021128:	65bb      	str	r3, [r7, #88]	; 0x58
 802112a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802112c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802112e:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8021132:	657b      	str	r3, [r7, #84]	; 0x54
 8021134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021136:	653b      	str	r3, [r7, #80]	; 0x50
 8021138:	f107 0308 	add.w	r3, r7, #8
 802113c:	623b      	str	r3, [r7, #32]
 802113e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021140:	61fb      	str	r3, [r7, #28]
  @param[in]     src_q31   Input value to be written.
  @return        none
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;
 8021142:	69fb      	ldr	r3, [r7, #28]
 8021144:	61bb      	str	r3, [r7, #24]

    memcpy(*dest_q15, &val, 4);
 8021146:	6a3b      	ldr	r3, [r7, #32]
 8021148:	681b      	ldr	r3, [r3, #0]
 802114a:	69ba      	ldr	r2, [r7, #24]
 802114c:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 802114e:	6a3b      	ldr	r3, [r7, #32]
 8021150:	681b      	ldr	r3, [r3, #0]
 8021152:	1d1a      	adds	r2, r3, #4
 8021154:	6a3b      	ldr	r3, [r7, #32]
 8021156:	601a      	str	r2, [r3, #0]
}
 8021158:	bf00      	nop
 802115a:	f107 0308 	add.w	r3, r7, #8
 802115e:	62bb      	str	r3, [r7, #40]	; 0x28
 8021160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021162:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t val = src_q31;
 8021164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021166:	617b      	str	r3, [r7, #20]
    memcpy(*dest_q15, &val, 4);
 8021168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802116a:	681b      	ldr	r3, [r3, #0]
 802116c:	697a      	ldr	r2, [r7, #20]
 802116e:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8021170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021172:	681b      	ldr	r3, [r3, #0]
 8021174:	1d1a      	adds	r2, r3, #4
 8021176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021178:	601a      	str	r2, [r3, #0]
}
 802117a:	bf00      	nop

        arm_nn_write_q15x2_ia(&dst, out_q15x2_1);
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
 802117c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021180:	3b01      	subs	r3, #1
 8021182:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 8021186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802118a:	2b00      	cmp	r3, #0
 802118c:	dc8a      	bgt.n	80210a4 <arm_q7_to_q15_with_offset+0x3e>
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	f003 0303 	and.w	r3, r3, #3
 8021194:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 8021198:	e012      	b.n	80211c0 <arm_q7_to_q15_with_offset+0x15a>
    {
        *dst++ = (q15_t)*src++ + offset;
 802119a:	68fb      	ldr	r3, [r7, #12]
 802119c:	1c5a      	adds	r2, r3, #1
 802119e:	60fa      	str	r2, [r7, #12]
 80211a0:	f993 3000 	ldrsb.w	r3, [r3]
 80211a4:	b29a      	uxth	r2, r3
 80211a6:	887b      	ldrh	r3, [r7, #2]
 80211a8:	4413      	add	r3, r2
 80211aa:	b299      	uxth	r1, r3
 80211ac:	68bb      	ldr	r3, [r7, #8]
 80211ae:	1c9a      	adds	r2, r3, #2
 80211b0:	60ba      	str	r2, [r7, #8]
 80211b2:	b20a      	sxth	r2, r1
 80211b4:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        block_cnt--;
 80211b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80211ba:	3b01      	subs	r3, #1
 80211bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 80211c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80211c4:	2b00      	cmp	r3, #0
 80211c6:	dce8      	bgt.n	802119a <arm_q7_to_q15_with_offset+0x134>
    }
}
 80211c8:	bf00      	nop
 80211ca:	bf00      	nop
 80211cc:	3794      	adds	r7, #148	; 0x94
 80211ce:	46bd      	mov	sp, r7
 80211d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211d4:	4770      	bx	lr

080211d6 <scale_q31_to_q7_and_clamp>:
                                      q7_t *target,
                                      int32_t length,
                                      const int32_t count,
                                      const int act_min,
                                      const int act_max)
{
 80211d6:	b480      	push	{r7}
 80211d8:	b089      	sub	sp, #36	; 0x24
 80211da:	af00      	add	r7, sp, #0
 80211dc:	60f8      	str	r0, [r7, #12]
 80211de:	60b9      	str	r1, [r7, #8]
 80211e0:	607a      	str	r2, [r7, #4]
 80211e2:	603b      	str	r3, [r7, #0]
    const int half_count = count / 2;
 80211e4:	683b      	ldr	r3, [r7, #0]
 80211e6:	0fda      	lsrs	r2, r3, #31
 80211e8:	4413      	add	r3, r2
 80211ea:	105b      	asrs	r3, r3, #1
 80211ec:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < length; i++)
 80211ee:	2300      	movs	r3, #0
 80211f0:	61fb      	str	r3, [r7, #28]
 80211f2:	e030      	b.n	8021256 <scale_q31_to_q7_and_clamp+0x80>
    {
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
 80211f4:	69fb      	ldr	r3, [r7, #28]
 80211f6:	009b      	lsls	r3, r3, #2
 80211f8:	68fa      	ldr	r2, [r7, #12]
 80211fa:	4413      	add	r3, r2
 80211fc:	681b      	ldr	r3, [r3, #0]
 80211fe:	2b00      	cmp	r3, #0
 8021200:	dd07      	ble.n	8021212 <scale_q31_to_q7_and_clamp+0x3c>
 8021202:	69fb      	ldr	r3, [r7, #28]
 8021204:	009b      	lsls	r3, r3, #2
 8021206:	68fa      	ldr	r2, [r7, #12]
 8021208:	4413      	add	r3, r2
 802120a:	681a      	ldr	r2, [r3, #0]
 802120c:	69bb      	ldr	r3, [r7, #24]
 802120e:	4413      	add	r3, r2
 8021210:	e006      	b.n	8021220 <scale_q31_to_q7_and_clamp+0x4a>
 8021212:	69fb      	ldr	r3, [r7, #28]
 8021214:	009b      	lsls	r3, r3, #2
 8021216:	68fa      	ldr	r2, [r7, #12]
 8021218:	4413      	add	r3, r2
 802121a:	681a      	ldr	r2, [r3, #0]
 802121c:	69bb      	ldr	r3, [r7, #24]
 802121e:	1ad3      	subs	r3, r2, r3
 8021220:	617b      	str	r3, [r7, #20]
        sum = sum / count;
 8021222:	697a      	ldr	r2, [r7, #20]
 8021224:	683b      	ldr	r3, [r7, #0]
 8021226:	fb92 f3f3 	sdiv	r3, r2, r3
 802122a:	617b      	str	r3, [r7, #20]
        sum = MAX(sum, act_min);
 802122c:	697a      	ldr	r2, [r7, #20]
 802122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021230:	4293      	cmp	r3, r2
 8021232:	bfb8      	it	lt
 8021234:	4613      	movlt	r3, r2
 8021236:	617b      	str	r3, [r7, #20]
        sum = MIN(sum, act_max);
 8021238:	697a      	ldr	r2, [r7, #20]
 802123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802123c:	4293      	cmp	r3, r2
 802123e:	bfa8      	it	ge
 8021240:	4613      	movge	r3, r2
 8021242:	617b      	str	r3, [r7, #20]

        target[i] = (q7_t)sum;
 8021244:	69fb      	ldr	r3, [r7, #28]
 8021246:	68ba      	ldr	r2, [r7, #8]
 8021248:	4413      	add	r3, r2
 802124a:	697a      	ldr	r2, [r7, #20]
 802124c:	b252      	sxtb	r2, r2
 802124e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 8021250:	69fb      	ldr	r3, [r7, #28]
 8021252:	3301      	adds	r3, #1
 8021254:	61fb      	str	r3, [r7, #28]
 8021256:	69fa      	ldr	r2, [r7, #28]
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	429a      	cmp	r2, r3
 802125c:	dbca      	blt.n	80211f4 <scale_q31_to_q7_and_clamp+0x1e>
    }
}
 802125e:	bf00      	nop
 8021260:	bf00      	nop
 8021262:	3724      	adds	r7, #36	; 0x24
 8021264:	46bd      	mov	sp, r7
 8021266:	f85d 7b04 	ldr.w	r7, [sp], #4
 802126a:	4770      	bx	lr

0802126c <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
 802126c:	b580      	push	{r7, lr}
 802126e:	b0a6      	sub	sp, #152	; 0x98
 8021270:	af02      	add	r7, sp, #8
 8021272:	60f8      	str	r0, [r7, #12]
 8021274:	60b9      	str	r1, [r7, #8]
 8021276:	607a      	str	r2, [r7, #4]
 8021278:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 802127a:	687b      	ldr	r3, [r7, #4]
 802127c:	685b      	ldr	r3, [r3, #4]
 802127e:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t input_x = input_dims->w;
 8021280:	687b      	ldr	r3, [r7, #4]
 8021282:	689b      	ldr	r3, [r3, #8]
 8021284:	667b      	str	r3, [r7, #100]	; 0x64
    const int32_t output_y = output_dims->h;
 8021286:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802128a:	685b      	ldr	r3, [r3, #4]
 802128c:	663b      	str	r3, [r7, #96]	; 0x60
    const int32_t output_x = output_dims->w;
 802128e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8021292:	689b      	ldr	r3, [r3, #8]
 8021294:	65fb      	str	r3, [r7, #92]	; 0x5c
    const int32_t stride_y = pool_params->stride.h;
 8021296:	68bb      	ldr	r3, [r7, #8]
 8021298:	685b      	ldr	r3, [r3, #4]
 802129a:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t stride_x = pool_params->stride.w;
 802129c:	68bb      	ldr	r3, [r7, #8]
 802129e:	681b      	ldr	r3, [r3, #0]
 80212a0:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t kernel_y = filter_dims->h;
 80212a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80212a6:	685b      	ldr	r3, [r3, #4]
 80212a8:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t kernel_x = filter_dims->w;
 80212aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80212ae:	689b      	ldr	r3, [r3, #8]
 80212b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t pad_y = pool_params->padding.h;
 80212b2:	68bb      	ldr	r3, [r7, #8]
 80212b4:	68db      	ldr	r3, [r3, #12]
 80212b6:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t pad_x = pool_params->padding.w;
 80212b8:	68bb      	ldr	r3, [r7, #8]
 80212ba:	689b      	ldr	r3, [r3, #8]
 80212bc:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t act_min = pool_params->activation.min;
 80212be:	68bb      	ldr	r3, [r7, #8]
 80212c0:	691b      	ldr	r3, [r3, #16]
 80212c2:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t act_max = pool_params->activation.max;
 80212c4:	68bb      	ldr	r3, [r7, #8]
 80212c6:	695b      	ldr	r3, [r3, #20]
 80212c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t ch_src = input_dims->c;
 80212ca:	687b      	ldr	r3, [r7, #4]
 80212cc:	68db      	ldr	r3, [r3, #12]
 80212ce:	63bb      	str	r3, [r7, #56]	; 0x38
    q31_t *buffer = (q31_t *)ctx->buf;
 80212d0:	68fb      	ldr	r3, [r7, #12]
 80212d2:	681b      	ldr	r3, [r3, #0]
 80212d4:	637b      	str	r3, [r7, #52]	; 0x34

#if defined(ARM_MATH_DSP)

    /* Run the following code for CPU's with DSP extension
     */
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 80212d6:	2300      	movs	r3, #0
 80212d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80212dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80212de:	425b      	negs	r3, r3
 80212e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80212e4:	e0c7      	b.n	8021476 <arm_avgpool_s8+0x20a>
    {
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 80212e6:	2300      	movs	r3, #0
 80212e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80212ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80212ee:	425b      	negs	r3, r3
 80212f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80212f4:	e0ae      	b.n	8021454 <arm_avgpool_s8+0x1e8>
        {
            /* Condition for kernel start dimension:
                      (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t kernel_y_start = MAX(0, -idx_y);
 80212f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	dc03      	bgt.n	8021306 <arm_avgpool_s8+0x9a>
 80212fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021302:	425b      	negs	r3, r3
 8021304:	e000      	b.n	8021308 <arm_avgpool_s8+0x9c>
 8021306:	2300      	movs	r3, #0
 8021308:	633b      	str	r3, [r7, #48]	; 0x30
            const int32_t kernel_x_start = MAX(0, -idx_x);
 802130a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802130e:	2b00      	cmp	r3, #0
 8021310:	dc03      	bgt.n	802131a <arm_avgpool_s8+0xae>
 8021312:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021316:	425b      	negs	r3, r3
 8021318:	e000      	b.n	802131c <arm_avgpool_s8+0xb0>
 802131a:	2300      	movs	r3, #0
 802131c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Condition for kernel end dimension:
                   (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
 802131e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8021320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021324:	1ad3      	subs	r3, r2, r3
 8021326:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8021328:	4293      	cmp	r3, r2
 802132a:	bfa8      	it	ge
 802132c:	4613      	movge	r3, r2
 802132e:	62bb      	str	r3, [r7, #40]	; 0x28
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
 8021330:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8021332:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021336:	1ad3      	subs	r3, r2, r3
 8021338:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802133a:	4293      	cmp	r3, r2
 802133c:	bfa8      	it	ge
 802133e:	4613      	movge	r3, r2
 8021340:	627b      	str	r3, [r7, #36]	; 0x24

            int count = 0;
 8021342:	2300      	movs	r3, #0
 8021344:	67fb      	str	r3, [r7, #124]	; 0x7c

            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 8021346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021348:	67bb      	str	r3, [r7, #120]	; 0x78
 802134a:	e05d      	b.n	8021408 <arm_avgpool_s8+0x19c>
            {
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 802134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802134e:	677b      	str	r3, [r7, #116]	; 0x74
 8021350:	e053      	b.n	80213fa <arm_avgpool_s8+0x18e>
                {
                    const q7_t *start = src + ch_src * (k_x + idx_x + (k_y + idx_y) * input_x);
 8021352:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8021354:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021358:	441a      	add	r2, r3
 802135a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 802135c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021360:	440b      	add	r3, r1
 8021362:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8021364:	fb01 f303 	mul.w	r3, r1, r3
 8021368:	4413      	add	r3, r2
 802136a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802136c:	fb02 f303 	mul.w	r3, r2, r3
 8021370:	461a      	mov	r2, r3
 8021372:	683b      	ldr	r3, [r7, #0]
 8021374:	4413      	add	r3, r2
 8021376:	623b      	str	r3, [r7, #32]

                    if (count == 0)
 8021378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802137a:	2b00      	cmp	r3, #0
 802137c:	d115      	bne.n	80213aa <arm_avgpool_s8+0x13e>
                    {
                        for (int i = 0; i < ch_src; i++)
 802137e:	2300      	movs	r3, #0
 8021380:	673b      	str	r3, [r7, #112]	; 0x70
 8021382:	e00d      	b.n	80213a0 <arm_avgpool_s8+0x134>
                        {
                            buffer[i] = start[i];
 8021384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021386:	6a3a      	ldr	r2, [r7, #32]
 8021388:	4413      	add	r3, r2
 802138a:	f993 1000 	ldrsb.w	r1, [r3]
 802138e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021390:	009b      	lsls	r3, r3, #2
 8021392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021394:	4413      	add	r3, r2
 8021396:	460a      	mov	r2, r1
 8021398:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 802139a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802139c:	3301      	adds	r3, #1
 802139e:	673b      	str	r3, [r7, #112]	; 0x70
 80213a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80213a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80213a4:	429a      	cmp	r2, r3
 80213a6:	dbed      	blt.n	8021384 <arm_avgpool_s8+0x118>
 80213a8:	e021      	b.n	80213ee <arm_avgpool_s8+0x182>
                        }
                    }
                    else
                    {
                        for (int i = 0; i < ch_src; i++)
 80213aa:	2300      	movs	r3, #0
 80213ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80213ae:	e01a      	b.n	80213e6 <arm_avgpool_s8+0x17a>
                        {
                            buffer[i] = __QADD(start[i], buffer[i]);
 80213b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80213b2:	6a3a      	ldr	r2, [r7, #32]
 80213b4:	4413      	add	r3, r2
 80213b6:	f993 3000 	ldrsb.w	r3, [r3]
 80213ba:	4618      	mov	r0, r3
 80213bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80213be:	009b      	lsls	r3, r3, #2
 80213c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80213c2:	4413      	add	r3, r2
 80213c4:	681a      	ldr	r2, [r3, #0]
 80213c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80213c8:	009b      	lsls	r3, r3, #2
 80213ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80213cc:	440b      	add	r3, r1
 80213ce:	61f8      	str	r0, [r7, #28]
 80213d0:	61ba      	str	r2, [r7, #24]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80213d2:	69fa      	ldr	r2, [r7, #28]
 80213d4:	69b9      	ldr	r1, [r7, #24]
 80213d6:	fa81 f282 	qadd	r2, r2, r1
 80213da:	617a      	str	r2, [r7, #20]
  return(result);
 80213dc:	697a      	ldr	r2, [r7, #20]
 80213de:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 80213e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80213e2:	3301      	adds	r3, #1
 80213e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80213e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80213e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80213ea:	429a      	cmp	r2, r3
 80213ec:	dbe0      	blt.n	80213b0 <arm_avgpool_s8+0x144>
                        }
                    }
                    count++;
 80213ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80213f0:	3301      	adds	r3, #1
 80213f2:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 80213f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80213f6:	3301      	adds	r3, #1
 80213f8:	677b      	str	r3, [r7, #116]	; 0x74
 80213fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80213fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213fe:	429a      	cmp	r2, r3
 8021400:	dba7      	blt.n	8021352 <arm_avgpool_s8+0xe6>
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 8021402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021404:	3301      	adds	r3, #1
 8021406:	67bb      	str	r3, [r7, #120]	; 0x78
 8021408:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802140c:	429a      	cmp	r2, r3
 802140e:	db9d      	blt.n	802134c <arm_avgpool_s8+0xe0>
                }
            }

            // Prevent static code issue DIVIDE_BY_ZERO.
            if (count == 0)
 8021410:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021412:	2b00      	cmp	r3, #0
 8021414:	d102      	bne.n	802141c <arm_avgpool_s8+0x1b0>
            {
                return ARM_MATH_ARGUMENT_ERROR;
 8021416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802141a:	e033      	b.n	8021484 <arm_avgpool_s8+0x218>
            }

            scale_q31_to_q7_and_clamp(buffer, dst, ch_src, count, act_min, act_max);
 802141c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802141e:	9301      	str	r3, [sp, #4]
 8021420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021422:	9300      	str	r3, [sp, #0]
 8021424:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021428:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 802142c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802142e:	f7ff fed2 	bl	80211d6 <scale_q31_to_q7_and_clamp>
            dst += ch_src;
 8021432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021434:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8021438:	4413      	add	r3, r2
 802143a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 802143e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8021442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021444:	4413      	add	r3, r2
 8021446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802144a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802144e:	3301      	adds	r3, #1
 8021450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8021454:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8021458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802145a:	429a      	cmp	r2, r3
 802145c:	f6ff af4b 	blt.w	80212f6 <arm_avgpool_s8+0x8a>
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 8021460:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8021464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021466:	4413      	add	r3, r2
 8021468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802146c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021470:	3301      	adds	r3, #1
 8021472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8021476:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802147a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802147c:	429a      	cmp	r2, r3
 802147e:	f6ff af32 	blt.w	80212e6 <arm_avgpool_s8+0x7a>
            }
        }
    }

#endif
    return ARM_MATH_SUCCESS;
 8021482:	2300      	movs	r3, #0
}
 8021484:	4618      	mov	r0, r3
 8021486:	3790      	adds	r7, #144	; 0x90
 8021488:	46bd      	mov	sp, r7
 802148a:	bd80      	pop	{r7, pc}

0802148c <arm_avgpool_s8_get_buffer_size>:

#endif /* ARM_MATH_MVEI */

int32_t arm_avgpool_s8_get_buffer_size(const int output_x, const int ch_src)
{
 802148c:	b480      	push	{r7}
 802148e:	b083      	sub	sp, #12
 8021490:	af00      	add	r7, sp, #0
 8021492:	6078      	str	r0, [r7, #4]
 8021494:	6039      	str	r1, [r7, #0]
    (void)output_x;

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (ch_src * sizeof(int32_t));
 8021496:	683b      	ldr	r3, [r7, #0]
 8021498:	009b      	lsls	r3, r3, #2
#else
    (void)ch_src;
    return 0;
#endif
}
 802149a:	4618      	mov	r0, r3
 802149c:	370c      	adds	r7, #12
 802149e:	46bd      	mov	sp, r7
 80214a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214a4:	4770      	bx	lr

080214a6 <compare_and_replace_if_larger_q7>:

#include "arm_nnfunctions.h"
#include "arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger_q7(q7_t *base, const q7_t *target, int32_t length)
{
 80214a6:	b480      	push	{r7}
 80214a8:	b091      	sub	sp, #68	; 0x44
 80214aa:	af00      	add	r7, sp, #0
 80214ac:	60f8      	str	r0, [r7, #12]
 80214ae:	60b9      	str	r1, [r7, #8]
 80214b0:	607a      	str	r2, [r7, #4]
        base += 16;
        target += 16;
        length -= 16;
    }
#else
    q7_t *dst = base;
 80214b2:	68fb      	ldr	r3, [r7, #12]
 80214b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const q7_t *src = target;
 80214b6:	68bb      	ldr	r3, [r7, #8]
 80214b8:	62bb      	str	r3, [r7, #40]	; 0x28
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 2;
 80214ba:	687b      	ldr	r3, [r7, #4]
 80214bc:	109b      	asrs	r3, r3, #2
 80214be:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 80214c0:	e04e      	b.n	8021560 <compare_and_replace_if_larger_q7+0xba>
    {
        ref_max.word = arm_nn_read_q7x4(dst);
 80214c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80214c4:	637b      	str	r3, [r7, #52]	; 0x34
 80214c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80214c8:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 80214ca:	61bb      	str	r3, [r7, #24]
    return (val);
 80214cc:	69bb      	ldr	r3, [r7, #24]
 80214ce:	627b      	str	r3, [r7, #36]	; 0x24
 80214d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80214d4:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_q7, 4);
 80214d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80214d8:	681b      	ldr	r3, [r3, #0]
 80214da:	681b      	ldr	r3, [r3, #0]
 80214dc:	617b      	str	r3, [r7, #20]
    *in_q7 += 4;
 80214de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80214e0:	681b      	ldr	r3, [r3, #0]
 80214e2:	1d1a      	adds	r2, r3, #4
 80214e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80214e6:	601a      	str	r2, [r3, #0]
    return (val);
 80214e8:	697b      	ldr	r3, [r7, #20]
        comp_max.word = arm_nn_read_q7x4_ia(&src);
 80214ea:	623b      	str	r3, [r7, #32]

        if (comp_max.bytes[0] > ref_max.bytes[0])
 80214ec:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80214f0:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80214f4:	429a      	cmp	r2, r3
 80214f6:	dd03      	ble.n	8021500 <compare_and_replace_if_larger_q7+0x5a>
        {
            ref_max.bytes[0] = comp_max.bytes[0];
 80214f8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80214fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        }
        if (comp_max.bytes[1] > ref_max.bytes[1])
 8021500:	f997 2021 	ldrsb.w	r2, [r7, #33]	; 0x21
 8021504:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8021508:	429a      	cmp	r2, r3
 802150a:	dd03      	ble.n	8021514 <compare_and_replace_if_larger_q7+0x6e>
        {
            ref_max.bytes[1] = comp_max.bytes[1];
 802150c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8021510:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        }
        if (comp_max.bytes[2] > ref_max.bytes[2])
 8021514:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 8021518:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 802151c:	429a      	cmp	r2, r3
 802151e:	dd03      	ble.n	8021528 <compare_and_replace_if_larger_q7+0x82>
        {
            ref_max.bytes[2] = comp_max.bytes[2];
 8021520:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8021524:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        }
        if (comp_max.bytes[3] > ref_max.bytes[3])
 8021528:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 802152c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8021530:	429a      	cmp	r2, r3
 8021532:	dd03      	ble.n	802153c <compare_and_replace_if_larger_q7+0x96>
        {
            ref_max.bytes[3] = comp_max.bytes[3];
 8021534:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8021538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        arm_nn_write_q7x4_ia(&dst, ref_max.word);
 802153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802153e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8021542:	633a      	str	r2, [r7, #48]	; 0x30
 8021544:	61fb      	str	r3, [r7, #28]
    memcpy(*in, &value, 4);
 8021546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021548:	681b      	ldr	r3, [r3, #0]
 802154a:	69fa      	ldr	r2, [r7, #28]
 802154c:	601a      	str	r2, [r3, #0]
    *in += 4;
 802154e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021550:	681b      	ldr	r3, [r3, #0]
 8021552:	1d1a      	adds	r2, r3, #4
 8021554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021556:	601a      	str	r2, [r3, #0]
}
 8021558:	bf00      	nop

        cnt--;
 802155a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802155c:	3b01      	subs	r3, #1
 802155e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8021560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021562:	2b00      	cmp	r3, #0
 8021564:	dcad      	bgt.n	80214c2 <compare_and_replace_if_larger_q7+0x1c>
    }

    cnt = length & 0x3;
 8021566:	687b      	ldr	r3, [r7, #4]
 8021568:	f003 0303 	and.w	r3, r3, #3
 802156c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 802156e:	e015      	b.n	802159c <compare_and_replace_if_larger_q7+0xf6>
    {
        if (*src > *dst)
 8021570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021572:	f993 2000 	ldrsb.w	r2, [r3]
 8021576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021578:	f993 3000 	ldrsb.w	r3, [r3]
 802157c:	429a      	cmp	r2, r3
 802157e:	dd04      	ble.n	802158a <compare_and_replace_if_larger_q7+0xe4>
        {
            *dst = *src;
 8021580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021584:	f992 2000 	ldrsb.w	r2, [r2]
 8021588:	701a      	strb	r2, [r3, #0]
        }
        dst++;
 802158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802158c:	3301      	adds	r3, #1
 802158e:	62fb      	str	r3, [r7, #44]	; 0x2c
        src++;
 8021590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021592:	3301      	adds	r3, #1
 8021594:	62bb      	str	r3, [r7, #40]	; 0x28
        cnt--;
 8021596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021598:	3b01      	subs	r3, #1
 802159a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 802159c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802159e:	2b00      	cmp	r3, #0
 80215a0:	dce6      	bgt.n	8021570 <compare_and_replace_if_larger_q7+0xca>
    }
#endif
}
 80215a2:	bf00      	nop
 80215a4:	bf00      	nop
 80215a6:	3744      	adds	r7, #68	; 0x44
 80215a8:	46bd      	mov	sp, r7
 80215aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215ae:	4770      	bx	lr

080215b0 <clamp_output>:

static void clamp_output(q7_t *source, int32_t length, const int32_t act_min, const int32_t act_max)
{
 80215b0:	b480      	push	{r7}
 80215b2:	b08d      	sub	sp, #52	; 0x34
 80215b4:	af00      	add	r7, sp, #0
 80215b6:	60f8      	str	r0, [r7, #12]
 80215b8:	60b9      	str	r1, [r7, #8]
 80215ba:	607a      	str	r2, [r7, #4]
 80215bc:	603b      	str	r3, [r7, #0]
        vstrbq_p_s8(source, res, p);
        source += 16;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 2;
 80215be:	68bb      	ldr	r3, [r7, #8]
 80215c0:	109b      	asrs	r3, r3, #2
 80215c2:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 80215c4:	e060      	b.n	8021688 <clamp_output+0xd8>
    {
        in.word = arm_nn_read_q7x4(source);
 80215c6:	68fb      	ldr	r3, [r7, #12]
 80215c8:	623b      	str	r3, [r7, #32]
 80215ca:	6a3b      	ldr	r3, [r7, #32]
 80215cc:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 80215ce:	61bb      	str	r3, [r7, #24]
    return (val);
 80215d0:	69bb      	ldr	r3, [r7, #24]
 80215d2:	61fb      	str	r3, [r7, #28]

        in.bytes[0] = MAX(in.bytes[0], act_min);
 80215d4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80215d8:	461a      	mov	r2, r3
 80215da:	687b      	ldr	r3, [r7, #4]
 80215dc:	4293      	cmp	r3, r2
 80215de:	bfb8      	it	lt
 80215e0:	4613      	movlt	r3, r2
 80215e2:	b25b      	sxtb	r3, r3
 80215e4:	773b      	strb	r3, [r7, #28]
        in.bytes[0] = MIN(in.bytes[0], act_max);
 80215e6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80215ea:	461a      	mov	r2, r3
 80215ec:	683b      	ldr	r3, [r7, #0]
 80215ee:	4293      	cmp	r3, r2
 80215f0:	bfa8      	it	ge
 80215f2:	4613      	movge	r3, r2
 80215f4:	b25b      	sxtb	r3, r3
 80215f6:	773b      	strb	r3, [r7, #28]
        in.bytes[1] = MAX(in.bytes[1], act_min);
 80215f8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80215fc:	461a      	mov	r2, r3
 80215fe:	687b      	ldr	r3, [r7, #4]
 8021600:	4293      	cmp	r3, r2
 8021602:	bfb8      	it	lt
 8021604:	4613      	movlt	r3, r2
 8021606:	b25b      	sxtb	r3, r3
 8021608:	777b      	strb	r3, [r7, #29]
        in.bytes[1] = MIN(in.bytes[1], act_max);
 802160a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 802160e:	461a      	mov	r2, r3
 8021610:	683b      	ldr	r3, [r7, #0]
 8021612:	4293      	cmp	r3, r2
 8021614:	bfa8      	it	ge
 8021616:	4613      	movge	r3, r2
 8021618:	b25b      	sxtb	r3, r3
 802161a:	777b      	strb	r3, [r7, #29]
        in.bytes[2] = MAX(in.bytes[2], act_min);
 802161c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021620:	461a      	mov	r2, r3
 8021622:	687b      	ldr	r3, [r7, #4]
 8021624:	4293      	cmp	r3, r2
 8021626:	bfb8      	it	lt
 8021628:	4613      	movlt	r3, r2
 802162a:	b25b      	sxtb	r3, r3
 802162c:	77bb      	strb	r3, [r7, #30]
        in.bytes[2] = MIN(in.bytes[2], act_max);
 802162e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021632:	461a      	mov	r2, r3
 8021634:	683b      	ldr	r3, [r7, #0]
 8021636:	4293      	cmp	r3, r2
 8021638:	bfa8      	it	ge
 802163a:	4613      	movge	r3, r2
 802163c:	b25b      	sxtb	r3, r3
 802163e:	77bb      	strb	r3, [r7, #30]
        in.bytes[3] = MAX(in.bytes[3], act_min);
 8021640:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8021644:	461a      	mov	r2, r3
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	4293      	cmp	r3, r2
 802164a:	bfb8      	it	lt
 802164c:	4613      	movlt	r3, r2
 802164e:	b25b      	sxtb	r3, r3
 8021650:	77fb      	strb	r3, [r7, #31]
        in.bytes[3] = MIN(in.bytes[3], act_max);
 8021652:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8021656:	461a      	mov	r2, r3
 8021658:	683b      	ldr	r3, [r7, #0]
 802165a:	4293      	cmp	r3, r2
 802165c:	bfa8      	it	ge
 802165e:	4613      	movge	r3, r2
 8021660:	b25b      	sxtb	r3, r3
 8021662:	77fb      	strb	r3, [r7, #31]

        arm_nn_write_q7x4_ia(&source, in.word);
 8021664:	69fb      	ldr	r3, [r7, #28]
 8021666:	f107 020c 	add.w	r2, r7, #12
 802166a:	627a      	str	r2, [r7, #36]	; 0x24
 802166c:	617b      	str	r3, [r7, #20]
    memcpy(*in, &value, 4);
 802166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021670:	681b      	ldr	r3, [r3, #0]
 8021672:	697a      	ldr	r2, [r7, #20]
 8021674:	601a      	str	r2, [r3, #0]
    *in += 4;
 8021676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021678:	681b      	ldr	r3, [r3, #0]
 802167a:	1d1a      	adds	r2, r3, #4
 802167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802167e:	601a      	str	r2, [r3, #0]
}
 8021680:	bf00      	nop
        cnt--;
 8021682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021684:	3b01      	subs	r3, #1
 8021686:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8021688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802168a:	2b00      	cmp	r3, #0
 802168c:	dc9b      	bgt.n	80215c6 <clamp_output+0x16>
    }

    cnt = length & 0x3;
 802168e:	68bb      	ldr	r3, [r7, #8]
 8021690:	f003 0303 	and.w	r3, r3, #3
 8021694:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8021696:	e018      	b.n	80216ca <clamp_output+0x11a>
    {
        int32_t comp = *source;
 8021698:	68fb      	ldr	r3, [r7, #12]
 802169a:	f993 3000 	ldrsb.w	r3, [r3]
 802169e:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MAX(comp, act_min);
 80216a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80216a2:	687b      	ldr	r3, [r7, #4]
 80216a4:	4293      	cmp	r3, r2
 80216a6:	bfb8      	it	lt
 80216a8:	4613      	movlt	r3, r2
 80216aa:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MIN(comp, act_max);
 80216ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80216ae:	683b      	ldr	r3, [r7, #0]
 80216b0:	4293      	cmp	r3, r2
 80216b2:	bfa8      	it	ge
 80216b4:	4613      	movge	r3, r2
 80216b6:	62bb      	str	r3, [r7, #40]	; 0x28
        *source++ = (int8_t)comp;
 80216b8:	68fb      	ldr	r3, [r7, #12]
 80216ba:	1c5a      	adds	r2, r3, #1
 80216bc:	60fa      	str	r2, [r7, #12]
 80216be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80216c0:	b252      	sxtb	r2, r2
 80216c2:	701a      	strb	r2, [r3, #0]
        cnt--;
 80216c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216c6:	3b01      	subs	r3, #1
 80216c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 80216ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216cc:	2b00      	cmp	r3, #0
 80216ce:	dce3      	bgt.n	8021698 <clamp_output+0xe8>
    }
#endif
}
 80216d0:	bf00      	nop
 80216d2:	bf00      	nop
 80216d4:	3734      	adds	r7, #52	; 0x34
 80216d6:	46bd      	mov	sp, r7
 80216d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216dc:	4770      	bx	lr

080216de <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
 80216de:	b580      	push	{r7, lr}
 80216e0:	b09e      	sub	sp, #120	; 0x78
 80216e2:	af00      	add	r7, sp, #0
 80216e4:	60f8      	str	r0, [r7, #12]
 80216e6:	60b9      	str	r1, [r7, #8]
 80216e8:	607a      	str	r2, [r7, #4]
 80216ea:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 80216ec:	687b      	ldr	r3, [r7, #4]
 80216ee:	685b      	ldr	r3, [r3, #4]
 80216f0:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t input_x = input_dims->w;
 80216f2:	687b      	ldr	r3, [r7, #4]
 80216f4:	689b      	ldr	r3, [r3, #8]
 80216f6:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t output_y = output_dims->h;
 80216f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80216fc:	685b      	ldr	r3, [r3, #4]
 80216fe:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t output_x = output_dims->w;
 8021700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021704:	689b      	ldr	r3, [r3, #8]
 8021706:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t stride_y = pool_params->stride.h;
 8021708:	68bb      	ldr	r3, [r7, #8]
 802170a:	685b      	ldr	r3, [r3, #4]
 802170c:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t stride_x = pool_params->stride.w;
 802170e:	68bb      	ldr	r3, [r7, #8]
 8021710:	681b      	ldr	r3, [r3, #0]
 8021712:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t kernel_y = filter_dims->h;
 8021714:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021718:	685b      	ldr	r3, [r3, #4]
 802171a:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t kernel_x = filter_dims->w;
 802171c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021720:	689b      	ldr	r3, [r3, #8]
 8021722:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t pad_y = pool_params->padding.h;
 8021724:	68bb      	ldr	r3, [r7, #8]
 8021726:	68db      	ldr	r3, [r3, #12]
 8021728:	63bb      	str	r3, [r7, #56]	; 0x38
    const int32_t pad_x = pool_params->padding.w;
 802172a:	68bb      	ldr	r3, [r7, #8]
 802172c:	689b      	ldr	r3, [r3, #8]
 802172e:	637b      	str	r3, [r7, #52]	; 0x34
    const int32_t act_min = pool_params->activation.min;
 8021730:	68bb      	ldr	r3, [r7, #8]
 8021732:	691b      	ldr	r3, [r3, #16]
 8021734:	633b      	str	r3, [r7, #48]	; 0x30
    const int32_t act_max = pool_params->activation.max;
 8021736:	68bb      	ldr	r3, [r7, #8]
 8021738:	695b      	ldr	r3, [r3, #20]
 802173a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32_t channel_in = input_dims->c;
 802173c:	687b      	ldr	r3, [r7, #4]
 802173e:	68db      	ldr	r3, [r3, #12]
 8021740:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)ctx;
    q7_t *dst_base = dst;
 8021742:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021746:	627b      	str	r3, [r7, #36]	; 0x24

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8021748:	2300      	movs	r3, #0
 802174a:	677b      	str	r3, [r7, #116]	; 0x74
 802174c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802174e:	425b      	negs	r3, r3
 8021750:	673b      	str	r3, [r7, #112]	; 0x70
 8021752:	e078      	b.n	8021846 <arm_max_pool_s8+0x168>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 8021754:	2300      	movs	r3, #0
 8021756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802175a:	425b      	negs	r3, r3
 802175c:	66bb      	str	r3, [r7, #104]	; 0x68
 802175e:	e067      	b.n	8021830 <arm_max_pool_s8+0x152>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 8021760:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021762:	2b00      	cmp	r3, #0
 8021764:	dc02      	bgt.n	802176c <arm_max_pool_s8+0x8e>
 8021766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021768:	425b      	negs	r3, r3
 802176a:	e000      	b.n	802176e <arm_max_pool_s8+0x90>
 802176c:	2300      	movs	r3, #0
 802176e:	623b      	str	r3, [r7, #32]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 8021770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021772:	2b00      	cmp	r3, #0
 8021774:	dc02      	bgt.n	802177c <arm_max_pool_s8+0x9e>
 8021776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021778:	425b      	negs	r3, r3
 802177a:	e000      	b.n	802177e <arm_max_pool_s8+0xa0>
 802177c:	2300      	movs	r3, #0
 802177e:	61fb      	str	r3, [r7, #28]

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 8021780:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021784:	1ad3      	subs	r3, r2, r3
 8021786:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021788:	4293      	cmp	r3, r2
 802178a:	bfa8      	it	ge
 802178c:	4613      	movge	r3, r2
 802178e:	61bb      	str	r3, [r7, #24]
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 8021790:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8021792:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021794:	1ad3      	subs	r3, r2, r3
 8021796:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021798:	4293      	cmp	r3, r2
 802179a:	bfa8      	it	ge
 802179c:	4613      	movge	r3, r2
 802179e:	617b      	str	r3, [r7, #20]

            int count = 0;
 80217a0:	2300      	movs	r3, #0
 80217a2:	667b      	str	r3, [r7, #100]	; 0x64

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 80217a4:	6a3b      	ldr	r3, [r7, #32]
 80217a6:	663b      	str	r3, [r7, #96]	; 0x60
 80217a8:	e031      	b.n	802180e <arm_max_pool_s8+0x130>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 80217aa:	69fb      	ldr	r3, [r7, #28]
 80217ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80217ae:	e027      	b.n	8021800 <arm_max_pool_s8+0x122>
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 80217b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80217b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80217b4:	441a      	add	r2, r3
 80217b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80217b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80217ba:	440b      	add	r3, r1
 80217bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80217be:	fb01 f303 	mul.w	r3, r1, r3
 80217c2:	4413      	add	r3, r2
 80217c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80217c6:	fb02 f303 	mul.w	r3, r2, r3
 80217ca:	461a      	mov	r2, r3
 80217cc:	683b      	ldr	r3, [r7, #0]
 80217ce:	4413      	add	r3, r2
 80217d0:	613b      	str	r3, [r7, #16]

                    if (count == 0)
 80217d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80217d4:	2b00      	cmp	r3, #0
 80217d6:	d10a      	bne.n	80217ee <arm_max_pool_s8+0x110>
                    {
                        memcpy(dst, start, channel_in);
 80217d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217da:	461a      	mov	r2, r3
 80217dc:	6939      	ldr	r1, [r7, #16]
 80217de:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80217e2:	f003 fbf7 	bl	8024fd4 <memcpy>
                        count++;
 80217e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80217e8:	3301      	adds	r3, #1
 80217ea:	667b      	str	r3, [r7, #100]	; 0x64
 80217ec:	e005      	b.n	80217fa <arm_max_pool_s8+0x11c>
                    }
                    else
                    {
                        compare_and_replace_if_larger_q7(dst, start, channel_in);
 80217ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80217f0:	6939      	ldr	r1, [r7, #16]
 80217f2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80217f6:	f7ff fe56 	bl	80214a6 <compare_and_replace_if_larger_q7>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 80217fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80217fc:	3301      	adds	r3, #1
 80217fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021800:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8021802:	697b      	ldr	r3, [r7, #20]
 8021804:	429a      	cmp	r2, r3
 8021806:	dbd3      	blt.n	80217b0 <arm_max_pool_s8+0xd2>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8021808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802180a:	3301      	adds	r3, #1
 802180c:	663b      	str	r3, [r7, #96]	; 0x60
 802180e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8021810:	69bb      	ldr	r3, [r7, #24]
 8021812:	429a      	cmp	r2, r3
 8021814:	dbc9      	blt.n	80217aa <arm_max_pool_s8+0xcc>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 8021816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021818:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 802181c:	4413      	add	r3, r2
 802181e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 8021822:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8021824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021826:	4413      	add	r3, r2
 8021828:	66bb      	str	r3, [r7, #104]	; 0x68
 802182a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802182c:	3301      	adds	r3, #1
 802182e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021830:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8021832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021834:	429a      	cmp	r2, r3
 8021836:	db93      	blt.n	8021760 <arm_max_pool_s8+0x82>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8021838:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802183a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802183c:	4413      	add	r3, r2
 802183e:	673b      	str	r3, [r7, #112]	; 0x70
 8021840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021842:	3301      	adds	r3, #1
 8021844:	677b      	str	r3, [r7, #116]	; 0x74
 8021846:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8021848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802184a:	429a      	cmp	r2, r3
 802184c:	db82      	blt.n	8021754 <arm_max_pool_s8+0x76>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 802184e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021850:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8021852:	fb02 f303 	mul.w	r3, r2, r3
 8021856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021858:	fb02 f103 	mul.w	r1, r2, r3
 802185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802185e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021862:	f7ff fea5 	bl	80215b0 <clamp_output>

    return ARM_MATH_SUCCESS;
 8021866:	2300      	movs	r3, #0
}
 8021868:	4618      	mov	r0, r3
 802186a:	3778      	adds	r7, #120	; 0x78
 802186c:	46bd      	mov	sp, r7
 802186e:	bd80      	pop	{r7, pc}

08021870 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8021870:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8021874:	f5ad 6dbf 	sub.w	sp, sp, #1528	; 0x5f8
 8021878:	af00      	add	r7, sp, #0
 802187a:	f507 740d 	add.w	r4, r7, #564	; 0x234
 802187e:	6020      	str	r0, [r4, #0]
 8021880:	f507 700c 	add.w	r0, r7, #560	; 0x230
 8021884:	6001      	str	r1, [r0, #0]
 8021886:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 802188a:	600a      	str	r2, [r1, #0]
 802188c:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8021890:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 8021892:	2201      	movs	r2, #1
 8021894:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8021898:	fa02 f303 	lsl.w	r3, r2, r3
 802189c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

    int32_t col = 0;
 80218a0:	2300      	movs	r3, #0
 80218a2:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 80218a6:	2300      	movs	r3, #0
 80218a8:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 80218ac:	f003 b84a 	b.w	8024944 <arm_softmax_s8+0x30d4>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 80218b0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80218b4:	681b      	ldr	r3, [r3, #0]
 80218b6:	781b      	ldrb	r3, [r3, #0]
 80218b8:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef

        for (col = 1; col < row_size; ++col)
 80218bc:	2301      	movs	r3, #1
 80218be:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80218c2:	e013      	b.n	80218ec <arm_softmax_s8+0x7c>
        {
            max = MAX(max, input[col]);
 80218c4:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 80218c8:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80218cc:	681b      	ldr	r3, [r3, #0]
 80218ce:	4413      	add	r3, r2
 80218d0:	f993 2000 	ldrsb.w	r2, [r3]
 80218d4:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 80218d8:	4293      	cmp	r3, r2
 80218da:	bfb8      	it	lt
 80218dc:	4613      	movlt	r3, r2
 80218de:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef
        for (col = 1; col < row_size; ++col)
 80218e2:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 80218e6:	3301      	adds	r3, #1
 80218e8:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80218ec:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80218f0:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 80218f4:	681b      	ldr	r3, [r3, #0]
 80218f6:	429a      	cmp	r2, r3
 80218f8:	dbe4      	blt.n	80218c4 <arm_softmax_s8+0x54>
        }

        int32_t diff = 0;
 80218fa:	2300      	movs	r3, #0
 80218fc:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
        int32_t sum = 0;
 8021900:	2300      	movs	r3, #0
 8021902:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

        for (col = 0; col < row_size; ++col)
 8021906:	2300      	movs	r3, #0
 8021908:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 802190c:	f001 b8a1 	b.w	8022a52 <arm_softmax_s8+0x11e2>
        {
            diff = input[col] - max;
 8021910:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8021914:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8021918:	681b      	ldr	r3, [r3, #0]
 802191a:	4413      	add	r3, r2
 802191c:	f993 3000 	ldrsb.w	r3, [r3]
 8021920:	461a      	mov	r2, r3
 8021922:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 8021926:	1ad3      	subs	r3, r2, r3
 8021928:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
            if (diff >= diff_min)
 802192c:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8021930:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8021934:	429a      	cmp	r2, r3
 8021936:	f2c1 8087 	blt.w	8022a48 <arm_softmax_s8+0x11d8>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 802193a:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 802193e:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 8021942:	fb03 f202 	mul.w	r2, r3, r2
 8021946:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 802194a:	601a      	str	r2, [r3, #0]
 802194c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8021950:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8021954:	681b      	ldr	r3, [r3, #0]
 8021956:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8021958:	f207 4294 	addw	r2, r7, #1172	; 0x494
 802195c:	2300      	movs	r3, #0
 802195e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8021960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021964:	f04f 0300 	mov.w	r3, #0
 8021968:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 802196c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021970:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8021974:	681b      	ldr	r3, [r3, #0]
 8021976:	0fdb      	lsrs	r3, r3, #31
 8021978:	b2da      	uxtb	r2, r3
 802197a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 802197e:	681b      	ldr	r3, [r3, #0]
 8021980:	0fdb      	lsrs	r3, r3, #31
 8021982:	b2db      	uxtb	r3, r3
 8021984:	4053      	eors	r3, r2
 8021986:	b2db      	uxtb	r3, r3
 8021988:	2b00      	cmp	r3, #0
 802198a:	d014      	beq.n	80219b6 <arm_softmax_s8+0x146>
        mult = 1 - mult;
 802198c:	f04f 0001 	mov.w	r0, #1
 8021990:	f04f 0100 	mov.w	r1, #0
 8021994:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8021998:	e9d3 2300 	ldrd	r2, r3, [r3]
 802199c:	1a84      	subs	r4, r0, r2
 802199e:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 80219a2:	eb61 0303 	sbc.w	r3, r1, r3
 80219a6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80219aa:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 80219ae:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 80219b2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80219b6:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 80219ba:	681b      	ldr	r3, [r3, #0]
 80219bc:	4618      	mov	r0, r3
 80219be:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80219c2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80219c6:	681b      	ldr	r3, [r3, #0]
 80219c8:	461a      	mov	r2, r3
 80219ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80219ce:	fb02 f501 	mul.w	r5, r2, r1
 80219d2:	fb00 f403 	mul.w	r4, r0, r3
 80219d6:	442c      	add	r4, r5
 80219d8:	fba0 0102 	umull	r0, r1, r0, r2
 80219dc:	1863      	adds	r3, r4, r1
 80219de:	4619      	mov	r1, r3
 80219e0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80219e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219e8:	1814      	adds	r4, r2, r0
 80219ea:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 80219ee:	414b      	adcs	r3, r1
 80219f0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80219f4:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 80219f8:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 80219fc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021a00:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8021a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a08:	4610      	mov	r0, r2
 8021a0a:	4619      	mov	r1, r3
 8021a0c:	2800      	cmp	r0, #0
 8021a0e:	f171 0300 	sbcs.w	r3, r1, #0
 8021a12:	da06      	bge.n	8021a22 <arm_softmax_s8+0x1b2>
 8021a14:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021a18:	f04f 0300 	mov.w	r3, #0
 8021a1c:	1880      	adds	r0, r0, r2
 8021a1e:	eb43 0101 	adc.w	r1, r3, r1
 8021a22:	f04f 0200 	mov.w	r2, #0
 8021a26:	f04f 0300 	mov.w	r3, #0
 8021a2a:	0fc2      	lsrs	r2, r0, #31
 8021a2c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021a30:	17cb      	asrs	r3, r1, #31
 8021a32:	4610      	mov	r0, r2
 8021a34:	4619      	mov	r1, r3
 8021a36:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8021a3a:	4603      	mov	r3, r0
 8021a3c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8021a3e:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 8021a42:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8021a46:	6812      	ldr	r2, [r2, #0]
 8021a48:	681b      	ldr	r3, [r3, #0]
 8021a4a:	429a      	cmp	r2, r3
 8021a4c:	d10a      	bne.n	8021a64 <arm_softmax_s8+0x1f4>
 8021a4e:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8021a52:	681b      	ldr	r3, [r3, #0]
 8021a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021a58:	d104      	bne.n	8021a64 <arm_softmax_s8+0x1f4>
        result = NN_Q31_MAX;
 8021a5a:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8021a5e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021a62:	6013      	str	r3, [r2, #0]
    return result;
 8021a64:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8021a68:	681b      	ldr	r3, [r3, #0]
 8021a6a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
    int32_t mask = 0;
 8021a6e:	2300      	movs	r3, #0
 8021a70:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
    int32_t shift = 24;
 8021a74:	2318      	movs	r3, #24
 8021a76:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8021a7a:	2201      	movs	r2, #1
 8021a7c:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 8021a80:	fa02 f303 	lsl.w	r3, r2, r3
 8021a84:	1e5a      	subs	r2, r3, #1
 8021a86:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8021a8a:	ea02 0103 	and.w	r1, r2, r3
 8021a8e:	2201      	movs	r2, #1
 8021a90:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 8021a94:	fa02 f303 	lsl.w	r3, r2, r3
 8021a98:	1acb      	subs	r3, r1, r3
 8021a9a:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
    const int32_t remainder = val_mod_minus_quarter - val;
 8021a9e:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 8021aa2:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8021aa6:	1ad3      	subs	r3, r2, r3
 8021aa8:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8021aac:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8021ab0:	015b      	lsls	r3, r3, #5
 8021ab2:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8021ab6:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8021aba:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8021abe:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8021ac2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8021ac6:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
    q31_t result = 0;
 8021aca:	2300      	movs	r3, #0
 8021acc:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    q63_t mult = 1 << 30;
 8021ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021ad4:	f04f 0300 	mov.w	r3, #0
 8021ad8:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8021adc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021ae0:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8021ae4:	0fdb      	lsrs	r3, r3, #31
 8021ae6:	b2da      	uxtb	r2, r3
 8021ae8:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8021aec:	0fdb      	lsrs	r3, r3, #31
 8021aee:	b2db      	uxtb	r3, r3
 8021af0:	4053      	eors	r3, r2
 8021af2:	b2db      	uxtb	r3, r3
 8021af4:	2b00      	cmp	r3, #0
 8021af6:	d014      	beq.n	8021b22 <arm_softmax_s8+0x2b2>
        mult = 1 - mult;
 8021af8:	f04f 0001 	mov.w	r0, #1
 8021afc:	f04f 0100 	mov.w	r1, #0
 8021b00:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8021b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b08:	1a84      	subs	r4, r0, r2
 8021b0a:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 8021b0e:	eb61 0303 	sbc.w	r3, r1, r3
 8021b12:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8021b16:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 8021b1a:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8021b1e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021b22:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8021b26:	4618      	mov	r0, r3
 8021b28:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021b2c:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8021b30:	461a      	mov	r2, r3
 8021b32:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021b36:	fb02 f501 	mul.w	r5, r2, r1
 8021b3a:	fb00 f403 	mul.w	r4, r0, r3
 8021b3e:	442c      	add	r4, r5
 8021b40:	fba0 0102 	umull	r0, r1, r0, r2
 8021b44:	1863      	adds	r3, r4, r1
 8021b46:	4619      	mov	r1, r3
 8021b48:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8021b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b50:	1814      	adds	r4, r2, r0
 8021b52:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 8021b56:	414b      	adcs	r3, r1
 8021b58:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8021b5c:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8021b60:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8021b64:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021b68:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8021b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b70:	4610      	mov	r0, r2
 8021b72:	4619      	mov	r1, r3
 8021b74:	2800      	cmp	r0, #0
 8021b76:	f171 0300 	sbcs.w	r3, r1, #0
 8021b7a:	da06      	bge.n	8021b8a <arm_softmax_s8+0x31a>
 8021b7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021b80:	f04f 0300 	mov.w	r3, #0
 8021b84:	1880      	adds	r0, r0, r2
 8021b86:	eb43 0101 	adc.w	r1, r3, r1
 8021b8a:	f04f 0200 	mov.w	r2, #0
 8021b8e:	f04f 0300 	mov.w	r3, #0
 8021b92:	0fc2      	lsrs	r2, r0, #31
 8021b94:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021b98:	17cb      	asrs	r3, r1, #31
 8021b9a:	4613      	mov	r3, r2
 8021b9c:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8021ba0:	f8d7 25a0 	ldr.w	r2, [r7, #1440]	; 0x5a0
 8021ba4:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8021ba8:	429a      	cmp	r2, r3
 8021baa:	d108      	bne.n	8021bbe <arm_softmax_s8+0x34e>
 8021bac:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8021bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021bb4:	d103      	bne.n	8021bbe <arm_softmax_s8+0x34e>
        result = NN_Q31_MAX;
 8021bb6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021bba:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    return result;
 8021bbe:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
    const int32_t x2 = MUL_SAT(x, x);
 8021bc2:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8021bc6:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8021bca:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 8021bce:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8021bd2:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
    q31_t result = 0;
 8021bd6:	2300      	movs	r3, #0
 8021bd8:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    q63_t mult = 1 << 30;
 8021bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021be0:	f04f 0300 	mov.w	r3, #0
 8021be4:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8021be8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021bec:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8021bf0:	0fdb      	lsrs	r3, r3, #31
 8021bf2:	b2da      	uxtb	r2, r3
 8021bf4:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8021bf8:	0fdb      	lsrs	r3, r3, #31
 8021bfa:	b2db      	uxtb	r3, r3
 8021bfc:	4053      	eors	r3, r2
 8021bfe:	b2db      	uxtb	r3, r3
 8021c00:	2b00      	cmp	r3, #0
 8021c02:	d014      	beq.n	8021c2e <arm_softmax_s8+0x3be>
        mult = 1 - mult;
 8021c04:	f04f 0001 	mov.w	r0, #1
 8021c08:	f04f 0100 	mov.w	r1, #0
 8021c0c:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8021c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c14:	1a84      	subs	r4, r0, r2
 8021c16:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8021c1a:	eb61 0303 	sbc.w	r3, r1, r3
 8021c1e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8021c22:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 8021c26:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 8021c2a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021c2e:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8021c32:	4618      	mov	r0, r3
 8021c34:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021c38:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8021c3c:	461a      	mov	r2, r3
 8021c3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021c42:	fb02 f501 	mul.w	r5, r2, r1
 8021c46:	fb00 f403 	mul.w	r4, r0, r3
 8021c4a:	442c      	add	r4, r5
 8021c4c:	fba0 0102 	umull	r0, r1, r0, r2
 8021c50:	1863      	adds	r3, r4, r1
 8021c52:	4619      	mov	r1, r3
 8021c54:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8021c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c5c:	1814      	adds	r4, r2, r0
 8021c5e:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 8021c62:	414b      	adcs	r3, r1
 8021c64:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8021c68:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8021c6c:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 8021c70:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021c74:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8021c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c7c:	4610      	mov	r0, r2
 8021c7e:	4619      	mov	r1, r3
 8021c80:	2800      	cmp	r0, #0
 8021c82:	f171 0300 	sbcs.w	r3, r1, #0
 8021c86:	da06      	bge.n	8021c96 <arm_softmax_s8+0x426>
 8021c88:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021c8c:	f04f 0300 	mov.w	r3, #0
 8021c90:	1880      	adds	r0, r0, r2
 8021c92:	eb43 0101 	adc.w	r1, r3, r1
 8021c96:	f04f 0200 	mov.w	r2, #0
 8021c9a:	f04f 0300 	mov.w	r3, #0
 8021c9e:	0fc2      	lsrs	r2, r0, #31
 8021ca0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021ca4:	17cb      	asrs	r3, r1, #31
 8021ca6:	4613      	mov	r3, r2
 8021ca8:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8021cac:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 8021cb0:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8021cb4:	429a      	cmp	r2, r3
 8021cb6:	d108      	bne.n	8021cca <arm_softmax_s8+0x45a>
 8021cb8:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8021cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021cc0:	d103      	bne.n	8021cca <arm_softmax_s8+0x45a>
        result = NN_Q31_MAX;
 8021cc2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021cc6:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    return result;
 8021cca:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8021cce:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
    q31_t result = 0;
 8021cd2:	2300      	movs	r3, #0
 8021cd4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    const q31_t remainder_mask = (1 << exponent) - 1;
 8021cd8:	2304      	movs	r3, #4
 8021cda:	3b01      	subs	r3, #1
 8021cdc:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
    int32_t remainder = remainder_mask & dividend;
 8021ce0:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8021ce4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8021ce8:	4013      	ands	r3, r2
 8021cea:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
    result = dividend >> exponent;
 8021cee:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8021cf2:	109b      	asrs	r3, r3, #2
 8021cf4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    q31_t threshold = remainder_mask >> 1;
 8021cf8:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8021cfc:	105b      	asrs	r3, r3, #1
 8021cfe:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    if (result < 0)
 8021d02:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	da04      	bge.n	8021d14 <arm_softmax_s8+0x4a4>
        threshold++;
 8021d0a:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8021d0e:	3301      	adds	r3, #1
 8021d10:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    if (remainder > threshold)
 8021d14:	f8d7 2568 	ldr.w	r2, [r7, #1384]	; 0x568
 8021d18:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8021d1c:	429a      	cmp	r2, r3
 8021d1e:	dd04      	ble.n	8021d2a <arm_softmax_s8+0x4ba>
        result++;
 8021d20:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8021d24:	3301      	adds	r3, #1
 8021d26:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    return result;
 8021d2a:	f8d7 6570 	ldr.w	r6, [r7, #1392]	; 0x570
 8021d2e:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8021d32:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 8021d36:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8021d3a:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
    q31_t result = 0;
 8021d3e:	2300      	movs	r3, #0
 8021d40:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    q63_t mult = 1 << 30;
 8021d44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021d48:	f04f 0300 	mov.w	r3, #0
 8021d4c:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8021d50:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021d54:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8021d58:	0fdb      	lsrs	r3, r3, #31
 8021d5a:	b2da      	uxtb	r2, r3
 8021d5c:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8021d60:	0fdb      	lsrs	r3, r3, #31
 8021d62:	b2db      	uxtb	r3, r3
 8021d64:	4053      	eors	r3, r2
 8021d66:	b2db      	uxtb	r3, r3
 8021d68:	2b00      	cmp	r3, #0
 8021d6a:	d014      	beq.n	8021d96 <arm_softmax_s8+0x526>
        mult = 1 - mult;
 8021d6c:	f04f 0001 	mov.w	r0, #1
 8021d70:	f04f 0100 	mov.w	r1, #0
 8021d74:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8021d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d7c:	1a84      	subs	r4, r0, r2
 8021d7e:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8021d82:	eb61 0303 	sbc.w	r3, r1, r3
 8021d86:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8021d8a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8021d8e:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8021d92:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021d96:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8021d9a:	4618      	mov	r0, r3
 8021d9c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021da0:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8021da4:	461a      	mov	r2, r3
 8021da6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021daa:	fb02 f501 	mul.w	r5, r2, r1
 8021dae:	fb00 f403 	mul.w	r4, r0, r3
 8021db2:	442c      	add	r4, r5
 8021db4:	fba0 0102 	umull	r0, r1, r0, r2
 8021db8:	1863      	adds	r3, r4, r1
 8021dba:	4619      	mov	r1, r3
 8021dbc:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8021dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021dc4:	1814      	adds	r4, r2, r0
 8021dc6:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 8021dca:	414b      	adcs	r3, r1
 8021dcc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8021dd0:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8021dd4:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8021dd8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021ddc:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8021de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021de4:	4610      	mov	r0, r2
 8021de6:	4619      	mov	r1, r3
 8021de8:	2800      	cmp	r0, #0
 8021dea:	f171 0300 	sbcs.w	r3, r1, #0
 8021dee:	da06      	bge.n	8021dfe <arm_softmax_s8+0x58e>
 8021df0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021df4:	f04f 0300 	mov.w	r3, #0
 8021df8:	1880      	adds	r0, r0, r2
 8021dfa:	eb43 0101 	adc.w	r1, r3, r1
 8021dfe:	f04f 0200 	mov.w	r2, #0
 8021e02:	f04f 0300 	mov.w	r3, #0
 8021e06:	0fc2      	lsrs	r2, r0, #31
 8021e08:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021e0c:	17cb      	asrs	r3, r1, #31
 8021e0e:	4613      	mov	r3, r2
 8021e10:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8021e14:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 8021e18:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8021e1c:	429a      	cmp	r2, r3
 8021e1e:	d108      	bne.n	8021e32 <arm_softmax_s8+0x5c2>
 8021e20:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8021e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021e28:	d103      	bne.n	8021e32 <arm_softmax_s8+0x5c2>
        result = NN_Q31_MAX;
 8021e2a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021e2e:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    return result;
 8021e32:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8021e36:	4433      	add	r3, r6
 8021e38:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
    q31_t result = 0;
 8021e3c:	2300      	movs	r3, #0
 8021e3e:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    q63_t mult = 1 << 30;
 8021e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021e46:	f04f 0300 	mov.w	r3, #0
 8021e4a:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 8021e4e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021e52:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8021e56:	0fdb      	lsrs	r3, r3, #31
 8021e58:	b2da      	uxtb	r2, r3
 8021e5a:	2300      	movs	r3, #0
 8021e5c:	4053      	eors	r3, r2
 8021e5e:	b2db      	uxtb	r3, r3
 8021e60:	2b00      	cmp	r3, #0
 8021e62:	d014      	beq.n	8021e8e <arm_softmax_s8+0x61e>
        mult = 1 - mult;
 8021e64:	f04f 0001 	mov.w	r0, #1
 8021e68:	f04f 0100 	mov.w	r1, #0
 8021e6c:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8021e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e74:	1a84      	subs	r4, r0, r2
 8021e76:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 8021e7a:	eb61 0303 	sbc.w	r3, r1, r3
 8021e7e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8021e82:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8021e86:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8021e8a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021e8e:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8021e92:	4618      	mov	r0, r3
 8021e94:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021e98:	a3d2      	add	r3, pc, #840	; (adr r3, 80221e4 <arm_softmax_s8+0x974>)
 8021e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e9e:	fb02 f501 	mul.w	r5, r2, r1
 8021ea2:	fb00 f403 	mul.w	r4, r0, r3
 8021ea6:	442c      	add	r4, r5
 8021ea8:	fba0 0102 	umull	r0, r1, r0, r2
 8021eac:	1863      	adds	r3, r4, r1
 8021eae:	4619      	mov	r1, r3
 8021eb0:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8021eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021eb8:	1814      	adds	r4, r2, r0
 8021eba:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 8021ebe:	414b      	adcs	r3, r1
 8021ec0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8021ec4:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8021ec8:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8021ecc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021ed0:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8021ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ed8:	4610      	mov	r0, r2
 8021eda:	4619      	mov	r1, r3
 8021edc:	2800      	cmp	r0, #0
 8021ede:	f171 0300 	sbcs.w	r3, r1, #0
 8021ee2:	da06      	bge.n	8021ef2 <arm_softmax_s8+0x682>
 8021ee4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021ee8:	f04f 0300 	mov.w	r3, #0
 8021eec:	1880      	adds	r0, r0, r2
 8021eee:	eb43 0101 	adc.w	r1, r3, r1
 8021ef2:	f04f 0200 	mov.w	r2, #0
 8021ef6:	f04f 0300 	mov.w	r3, #0
 8021efa:	0fc2      	lsrs	r2, r0, #31
 8021efc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021f00:	17cb      	asrs	r3, r1, #31
 8021f02:	4613      	mov	r3, r2
 8021f04:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8021f08:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8021f0c:	4bb2      	ldr	r3, [pc, #712]	; (80221d8 <arm_softmax_s8+0x968>)
 8021f0e:	429a      	cmp	r2, r3
 8021f10:	d108      	bne.n	8021f24 <arm_softmax_s8+0x6b4>
 8021f12:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8021f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021f1a:	d103      	bne.n	8021f24 <arm_softmax_s8+0x6b4>
        result = NN_Q31_MAX;
 8021f1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021f20:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    return result;
 8021f24:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8021f28:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8021f2c:	4413      	add	r3, r2
 8021f2e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    q31_t result = 0;
 8021f32:	2300      	movs	r3, #0
 8021f34:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    const q31_t remainder_mask = (1 << exponent) - 1;
 8021f38:	2302      	movs	r3, #2
 8021f3a:	3b01      	subs	r3, #1
 8021f3c:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    int32_t remainder = remainder_mask & dividend;
 8021f40:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8021f44:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8021f48:	4013      	ands	r3, r2
 8021f4a:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
    result = dividend >> exponent;
 8021f4e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8021f52:	105b      	asrs	r3, r3, #1
 8021f54:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    q31_t threshold = remainder_mask >> 1;
 8021f58:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8021f5c:	105b      	asrs	r3, r3, #1
 8021f5e:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    if (result < 0)
 8021f62:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8021f66:	2b00      	cmp	r3, #0
 8021f68:	da04      	bge.n	8021f74 <arm_softmax_s8+0x704>
        threshold++;
 8021f6a:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8021f6e:	3301      	adds	r3, #1
 8021f70:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    if (remainder > threshold)
 8021f74:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 8021f78:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8021f7c:	429a      	cmp	r2, r3
 8021f7e:	dd04      	ble.n	8021f8a <arm_softmax_s8+0x71a>
        result++;
 8021f80:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8021f84:	3301      	adds	r3, #1
 8021f86:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    return result;
 8021f8a:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8021f8e:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8021f92:	4413      	add	r3, r2
 8021f94:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
    q31_t result = 0;
 8021f98:	2300      	movs	r3, #0
 8021f9a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    q63_t mult = 1 << 30;
 8021f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021fa2:	f04f 0300 	mov.w	r3, #0
 8021fa6:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8021faa:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021fae:	2200      	movs	r2, #0
 8021fb0:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8021fb4:	0fdb      	lsrs	r3, r3, #31
 8021fb6:	b2db      	uxtb	r3, r3
 8021fb8:	4053      	eors	r3, r2
 8021fba:	b2db      	uxtb	r3, r3
 8021fbc:	2b00      	cmp	r3, #0
 8021fbe:	d014      	beq.n	8021fea <arm_softmax_s8+0x77a>
        mult = 1 - mult;
 8021fc0:	f04f 0001 	mov.w	r0, #1
 8021fc4:	f04f 0100 	mov.w	r1, #0
 8021fc8:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8021fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fd0:	1a84      	subs	r4, r0, r2
 8021fd2:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 8021fd6:	eb61 0303 	sbc.w	r3, r1, r3
 8021fda:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8021fde:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8021fe2:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8021fe6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021fea:	a177      	add	r1, pc, #476	; (adr r1, 80221c8 <arm_softmax_s8+0x958>)
 8021fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021ff0:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8021ff4:	461a      	mov	r2, r3
 8021ff6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021ffa:	fb02 f501 	mul.w	r5, r2, r1
 8021ffe:	fb00 f403 	mul.w	r4, r0, r3
 8022002:	442c      	add	r4, r5
 8022004:	fba0 0102 	umull	r0, r1, r0, r2
 8022008:	1863      	adds	r3, r4, r1
 802200a:	4619      	mov	r1, r3
 802200c:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8022010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022014:	1814      	adds	r4, r2, r0
 8022016:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 802201a:	414b      	adcs	r3, r1
 802201c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8022020:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 8022024:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8022028:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802202c:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8022030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022034:	4610      	mov	r0, r2
 8022036:	4619      	mov	r1, r3
 8022038:	2800      	cmp	r0, #0
 802203a:	f171 0300 	sbcs.w	r3, r1, #0
 802203e:	da06      	bge.n	802204e <arm_softmax_s8+0x7de>
 8022040:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022044:	f04f 0300 	mov.w	r3, #0
 8022048:	1880      	adds	r0, r0, r2
 802204a:	eb43 0101 	adc.w	r1, r3, r1
 802204e:	f04f 0200 	mov.w	r2, #0
 8022052:	f04f 0300 	mov.w	r3, #0
 8022056:	0fc2      	lsrs	r2, r0, #31
 8022058:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802205c:	17cb      	asrs	r3, r1, #31
 802205e:	4613      	mov	r3, r2
 8022060:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    return result;
 8022064:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
    int32_t result = 1895147668 +
 8022068:	4b5c      	ldr	r3, [pc, #368]	; (80221dc <arm_softmax_s8+0x96c>)
 802206a:	4413      	add	r3, r2
 802206c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(1672461947)
 8022070:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8022074:	1c53      	adds	r3, r2, #1
 8022076:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 802207a:	2301      	movs	r3, #1
 802207c:	fa03 f202 	lsl.w	r2, r3, r2
 8022080:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022084:	4013      	ands	r3, r2
 8022086:	2b00      	cmp	r3, #0
 8022088:	d002      	beq.n	8022090 <arm_softmax_s8+0x820>
 802208a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802208e:	e000      	b.n	8022092 <arm_softmax_s8+0x822>
 8022090:	2300      	movs	r3, #0
 8022092:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022096:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802209a:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
    q31_t result = 0;
 802209e:	2300      	movs	r3, #0
 80220a0:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    q63_t mult = 1 << 30;
 80220a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80220a8:	f04f 0300 	mov.w	r3, #0
 80220ac:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 80220b0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80220b4:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80220b8:	0fdb      	lsrs	r3, r3, #31
 80220ba:	b2da      	uxtb	r2, r3
 80220bc:	2300      	movs	r3, #0
 80220be:	4053      	eors	r3, r2
 80220c0:	b2db      	uxtb	r3, r3
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	d014      	beq.n	80220f0 <arm_softmax_s8+0x880>
        mult = 1 - mult;
 80220c6:	f04f 0001 	mov.w	r0, #1
 80220ca:	f04f 0100 	mov.w	r1, #0
 80220ce:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80220d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220d6:	1a84      	subs	r4, r0, r2
 80220d8:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 80220dc:	eb61 0303 	sbc.w	r3, r1, r3
 80220e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80220e4:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 80220e8:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 80220ec:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80220f0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80220f4:	4618      	mov	r0, r3
 80220f6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80220fa:	a335      	add	r3, pc, #212	; (adr r3, 80221d0 <arm_softmax_s8+0x960>)
 80220fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022100:	fb02 f501 	mul.w	r5, r2, r1
 8022104:	fb00 f403 	mul.w	r4, r0, r3
 8022108:	442c      	add	r4, r5
 802210a:	fba0 0102 	umull	r0, r1, r0, r2
 802210e:	1863      	adds	r3, r4, r1
 8022110:	4619      	mov	r1, r3
 8022112:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8022116:	e9d3 2300 	ldrd	r2, r3, [r3]
 802211a:	1814      	adds	r4, r2, r0
 802211c:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8022120:	414b      	adcs	r3, r1
 8022122:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8022126:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 802212a:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 802212e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022132:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8022136:	e9d3 2300 	ldrd	r2, r3, [r3]
 802213a:	4610      	mov	r0, r2
 802213c:	4619      	mov	r1, r3
 802213e:	2800      	cmp	r0, #0
 8022140:	f171 0300 	sbcs.w	r3, r1, #0
 8022144:	da06      	bge.n	8022154 <arm_softmax_s8+0x8e4>
 8022146:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802214a:	f04f 0300 	mov.w	r3, #0
 802214e:	1880      	adds	r0, r0, r2
 8022150:	eb43 0101 	adc.w	r1, r3, r1
 8022154:	f04f 0200 	mov.w	r2, #0
 8022158:	f04f 0300 	mov.w	r3, #0
 802215c:	0fc2      	lsrs	r2, r0, #31
 802215e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022162:	17cb      	asrs	r3, r1, #31
 8022164:	4613      	mov	r3, r2
 8022166:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802216a:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 802216e:	4b1c      	ldr	r3, [pc, #112]	; (80221e0 <arm_softmax_s8+0x970>)
 8022170:	429a      	cmp	r2, r3
 8022172:	d108      	bne.n	8022186 <arm_softmax_s8+0x916>
 8022174:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8022178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802217c:	d103      	bne.n	8022186 <arm_softmax_s8+0x916>
        result = NN_Q31_MAX;
 802217e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022182:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    return result;
 8022186:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
    SELECT_IF_NON_ZERO(1672461947)
 802218a:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 802218e:	ea02 0103 	and.w	r1, r2, r3
 8022192:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022196:	43da      	mvns	r2, r3
 8022198:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802219c:	4013      	ands	r3, r2
 802219e:	404b      	eors	r3, r1
 80221a0:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(1302514674)
 80221a4:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 80221a8:	1c53      	adds	r3, r2, #1
 80221aa:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80221ae:	2301      	movs	r3, #1
 80221b0:	fa03 f202 	lsl.w	r2, r3, r2
 80221b4:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80221b8:	4013      	ands	r3, r2
 80221ba:	2b00      	cmp	r3, #0
 80221bc:	d016      	beq.n	80221ec <arm_softmax_s8+0x97c>
 80221be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80221c2:	e014      	b.n	80221ee <arm_softmax_s8+0x97e>
 80221c4:	f3af 8000 	nop.w
 80221c8:	70f5a894 	.word	0x70f5a894
 80221cc:	00000000 	.word	0x00000000
 80221d0:	63afbe7b 	.word	0x63afbe7b
 80221d4:	00000000 	.word	0x00000000
 80221d8:	2aaaaaab 	.word	0x2aaaaaab
 80221dc:	70f5a894 	.word	0x70f5a894
 80221e0:	63afbe7b 	.word	0x63afbe7b
 80221e4:	2aaaaaab 	.word	0x2aaaaaab
 80221e8:	00000000 	.word	0x00000000
 80221ec:	2300      	movs	r3, #0
 80221ee:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80221f2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80221f6:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
    q31_t result = 0;
 80221fa:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 80221fe:	2300      	movs	r3, #0
 8022200:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022206:	f04f 0300 	mov.w	r3, #0
 802220a:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 802220e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022212:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8022216:	0fdb      	lsrs	r3, r3, #31
 8022218:	b2da      	uxtb	r2, r3
 802221a:	2300      	movs	r3, #0
 802221c:	4053      	eors	r3, r2
 802221e:	b2db      	uxtb	r3, r3
 8022220:	2b00      	cmp	r3, #0
 8022222:	d014      	beq.n	802224e <arm_softmax_s8+0x9de>
        mult = 1 - mult;
 8022224:	f04f 0001 	mov.w	r0, #1
 8022228:	f04f 0100 	mov.w	r1, #0
 802222c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8022230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022234:	1a84      	subs	r4, r0, r2
 8022236:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 802223a:	eb61 0303 	sbc.w	r3, r1, r3
 802223e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8022242:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 8022246:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 802224a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802224e:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8022252:	4618      	mov	r0, r3
 8022254:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022258:	a3e0      	add	r3, pc, #896	; (adr r3, 80225dc <arm_softmax_s8+0xd6c>)
 802225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802225e:	fb02 f501 	mul.w	r5, r2, r1
 8022262:	fb00 f403 	mul.w	r4, r0, r3
 8022266:	442c      	add	r4, r5
 8022268:	fba0 0102 	umull	r0, r1, r0, r2
 802226c:	1863      	adds	r3, r4, r1
 802226e:	4619      	mov	r1, r3
 8022270:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8022274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022278:	1814      	adds	r4, r2, r0
 802227a:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 802227e:	414b      	adcs	r3, r1
 8022280:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8022284:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8022288:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 802228c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022290:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8022294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022298:	4610      	mov	r0, r2
 802229a:	4619      	mov	r1, r3
 802229c:	2800      	cmp	r0, #0
 802229e:	f171 0300 	sbcs.w	r3, r1, #0
 80222a2:	da06      	bge.n	80222b2 <arm_softmax_s8+0xa42>
 80222a4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80222a8:	f04f 0300 	mov.w	r3, #0
 80222ac:	1880      	adds	r0, r0, r2
 80222ae:	eb43 0101 	adc.w	r1, r3, r1
 80222b2:	f04f 0200 	mov.w	r2, #0
 80222b6:	f04f 0300 	mov.w	r3, #0
 80222ba:	0fc2      	lsrs	r2, r0, #31
 80222bc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80222c0:	17cb      	asrs	r3, r1, #31
 80222c2:	4610      	mov	r0, r2
 80222c4:	4619      	mov	r1, r3
 80222c6:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 80222ca:	4603      	mov	r3, r0
 80222cc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80222ce:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 80222d2:	4bbf      	ldr	r3, [pc, #764]	; (80225d0 <arm_softmax_s8+0xd60>)
 80222d4:	429a      	cmp	r2, r3
 80222d6:	d109      	bne.n	80222ec <arm_softmax_s8+0xa7c>
 80222d8:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80222dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80222e0:	d104      	bne.n	80222ec <arm_softmax_s8+0xa7c>
        result = NN_Q31_MAX;
 80222e2:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 80222e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80222ea:	6013      	str	r3, [r2, #0]
    return result;
 80222ec:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80222f0:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 80222f2:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80222f6:	ea02 0103 	and.w	r1, r2, r3
 80222fa:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80222fe:	43da      	mvns	r2, r3
 8022300:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022304:	4013      	ands	r3, r2
 8022306:	404b      	eors	r3, r1
 8022308:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(790015084)
 802230c:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8022310:	1c53      	adds	r3, r2, #1
 8022312:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022316:	2301      	movs	r3, #1
 8022318:	fa03 f202 	lsl.w	r2, r3, r2
 802231c:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022320:	4013      	ands	r3, r2
 8022322:	2b00      	cmp	r3, #0
 8022324:	d002      	beq.n	802232c <arm_softmax_s8+0xabc>
 8022326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802232a:	e000      	b.n	802232e <arm_softmax_s8+0xabe>
 802232c:	2300      	movs	r3, #0
 802232e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022332:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8022336:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802233a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802233c:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8022340:	2300      	movs	r3, #0
 8022342:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022348:	f04f 0300 	mov.w	r3, #0
 802234c:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8022350:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022354:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8022358:	681b      	ldr	r3, [r3, #0]
 802235a:	0fdb      	lsrs	r3, r3, #31
 802235c:	b2da      	uxtb	r2, r3
 802235e:	2300      	movs	r3, #0
 8022360:	4053      	eors	r3, r2
 8022362:	b2db      	uxtb	r3, r3
 8022364:	2b00      	cmp	r3, #0
 8022366:	d014      	beq.n	8022392 <arm_softmax_s8+0xb22>
        mult = 1 - mult;
 8022368:	f04f 0001 	mov.w	r0, #1
 802236c:	f04f 0100 	mov.w	r1, #0
 8022370:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8022374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022378:	1a84      	subs	r4, r0, r2
 802237a:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 802237e:	eb61 0303 	sbc.w	r3, r1, r3
 8022382:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8022386:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 802238a:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 802238e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022392:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8022396:	681b      	ldr	r3, [r3, #0]
 8022398:	4618      	mov	r0, r3
 802239a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802239e:	a388      	add	r3, pc, #544	; (adr r3, 80225c0 <arm_softmax_s8+0xd50>)
 80223a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223a4:	fb02 f501 	mul.w	r5, r2, r1
 80223a8:	fb00 f403 	mul.w	r4, r0, r3
 80223ac:	442c      	add	r4, r5
 80223ae:	fba0 0102 	umull	r0, r1, r0, r2
 80223b2:	1863      	adds	r3, r4, r1
 80223b4:	4619      	mov	r1, r3
 80223b6:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80223ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223be:	1814      	adds	r4, r2, r0
 80223c0:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 80223c4:	414b      	adcs	r3, r1
 80223c6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80223ca:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 80223ce:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 80223d2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80223d6:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80223da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223de:	4610      	mov	r0, r2
 80223e0:	4619      	mov	r1, r3
 80223e2:	2800      	cmp	r0, #0
 80223e4:	f171 0300 	sbcs.w	r3, r1, #0
 80223e8:	da06      	bge.n	80223f8 <arm_softmax_s8+0xb88>
 80223ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80223ee:	f04f 0300 	mov.w	r3, #0
 80223f2:	1880      	adds	r0, r0, r2
 80223f4:	eb43 0101 	adc.w	r1, r3, r1
 80223f8:	f04f 0200 	mov.w	r2, #0
 80223fc:	f04f 0300 	mov.w	r3, #0
 8022400:	0fc2      	lsrs	r2, r0, #31
 8022402:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022406:	17cb      	asrs	r3, r1, #31
 8022408:	4610      	mov	r0, r2
 802240a:	4619      	mov	r1, r3
 802240c:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8022410:	4603      	mov	r3, r0
 8022412:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8022414:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8022418:	681a      	ldr	r2, [r3, #0]
 802241a:	4b6e      	ldr	r3, [pc, #440]	; (80225d4 <arm_softmax_s8+0xd64>)
 802241c:	429a      	cmp	r2, r3
 802241e:	d10a      	bne.n	8022436 <arm_softmax_s8+0xbc6>
 8022420:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8022424:	681b      	ldr	r3, [r3, #0]
 8022426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802242a:	d104      	bne.n	8022436 <arm_softmax_s8+0xbc6>
        result = NN_Q31_MAX;
 802242c:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8022430:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022434:	6013      	str	r3, [r2, #0]
    return result;
 8022436:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 802243a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 802243c:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022440:	ea02 0103 	and.w	r1, r2, r3
 8022444:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022448:	43da      	mvns	r2, r3
 802244a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802244e:	4013      	ands	r3, r2
 8022450:	404b      	eors	r3, r1
 8022452:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(290630308)
 8022456:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 802245a:	1c53      	adds	r3, r2, #1
 802245c:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022460:	2301      	movs	r3, #1
 8022462:	fa03 f202 	lsl.w	r2, r3, r2
 8022466:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 802246a:	4013      	ands	r3, r2
 802246c:	2b00      	cmp	r3, #0
 802246e:	d002      	beq.n	8022476 <arm_softmax_s8+0xc06>
 8022470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022474:	e000      	b.n	8022478 <arm_softmax_s8+0xc08>
 8022476:	2300      	movs	r3, #0
 8022478:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 802247c:	f207 42dc 	addw	r2, r7, #1244	; 0x4dc
 8022480:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022484:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022486:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 802248a:	2300      	movs	r3, #0
 802248c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802248e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022492:	f04f 0300 	mov.w	r3, #0
 8022496:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 802249a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802249e:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80224a2:	681b      	ldr	r3, [r3, #0]
 80224a4:	0fdb      	lsrs	r3, r3, #31
 80224a6:	b2da      	uxtb	r2, r3
 80224a8:	2300      	movs	r3, #0
 80224aa:	4053      	eors	r3, r2
 80224ac:	b2db      	uxtb	r3, r3
 80224ae:	2b00      	cmp	r3, #0
 80224b0:	d014      	beq.n	80224dc <arm_softmax_s8+0xc6c>
        mult = 1 - mult;
 80224b2:	f04f 0001 	mov.w	r0, #1
 80224b6:	f04f 0100 	mov.w	r1, #0
 80224ba:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80224be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224c2:	1a84      	subs	r4, r0, r2
 80224c4:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 80224c8:	eb61 0303 	sbc.w	r3, r1, r3
 80224cc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80224d0:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 80224d4:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 80224d8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80224dc:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80224e0:	681b      	ldr	r3, [r3, #0]
 80224e2:	4618      	mov	r0, r3
 80224e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80224e8:	a337      	add	r3, pc, #220	; (adr r3, 80225c8 <arm_softmax_s8+0xd58>)
 80224ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224ee:	fb02 f501 	mul.w	r5, r2, r1
 80224f2:	fb00 f403 	mul.w	r4, r0, r3
 80224f6:	442c      	add	r4, r5
 80224f8:	fba0 0102 	umull	r0, r1, r0, r2
 80224fc:	1863      	adds	r3, r4, r1
 80224fe:	4619      	mov	r1, r3
 8022500:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8022504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022508:	1814      	adds	r4, r2, r0
 802250a:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 802250e:	414b      	adcs	r3, r1
 8022510:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8022514:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8022518:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 802251c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022520:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8022524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022528:	4610      	mov	r0, r2
 802252a:	4619      	mov	r1, r3
 802252c:	2800      	cmp	r0, #0
 802252e:	f171 0300 	sbcs.w	r3, r1, #0
 8022532:	da06      	bge.n	8022542 <arm_softmax_s8+0xcd2>
 8022534:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022538:	f04f 0300 	mov.w	r3, #0
 802253c:	1880      	adds	r0, r0, r2
 802253e:	eb43 0101 	adc.w	r1, r3, r1
 8022542:	f04f 0200 	mov.w	r2, #0
 8022546:	f04f 0300 	mov.w	r3, #0
 802254a:	0fc2      	lsrs	r2, r0, #31
 802254c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022550:	17cb      	asrs	r3, r1, #31
 8022552:	4610      	mov	r0, r2
 8022554:	4619      	mov	r1, r3
 8022556:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 802255a:	4603      	mov	r3, r0
 802255c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802255e:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8022562:	681a      	ldr	r2, [r3, #0]
 8022564:	4b1c      	ldr	r3, [pc, #112]	; (80225d8 <arm_softmax_s8+0xd68>)
 8022566:	429a      	cmp	r2, r3
 8022568:	d10a      	bne.n	8022580 <arm_softmax_s8+0xd10>
 802256a:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 802256e:	681b      	ldr	r3, [r3, #0]
 8022570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022574:	d104      	bne.n	8022580 <arm_softmax_s8+0xd10>
        result = NN_Q31_MAX;
 8022576:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 802257a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802257e:	6013      	str	r3, [r2, #0]
    return result;
 8022580:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8022584:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8022586:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 802258a:	ea02 0103 	and.w	r1, r2, r3
 802258e:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022592:	43da      	mvns	r2, r3
 8022594:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022598:	4013      	ands	r3, r2
 802259a:	404b      	eors	r3, r1
 802259c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(39332535)
 80225a0:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 80225a4:	1c53      	adds	r3, r2, #1
 80225a6:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80225aa:	2301      	movs	r3, #1
 80225ac:	fa03 f202 	lsl.w	r2, r3, r2
 80225b0:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80225b4:	4013      	ands	r3, r2
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	d014      	beq.n	80225e4 <arm_softmax_s8+0xd74>
 80225ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80225be:	e012      	b.n	80225e6 <arm_softmax_s8+0xd76>
 80225c0:	2f16ac6c 	.word	0x2f16ac6c
 80225c4:	00000000 	.word	0x00000000
 80225c8:	1152aaa4 	.word	0x1152aaa4
 80225cc:	00000000 	.word	0x00000000
 80225d0:	4da2cbf2 	.word	0x4da2cbf2
 80225d4:	2f16ac6c 	.word	0x2f16ac6c
 80225d8:	1152aaa4 	.word	0x1152aaa4
 80225dc:	4da2cbf2 	.word	0x4da2cbf2
 80225e0:	00000000 	.word	0x00000000
 80225e4:	2300      	movs	r3, #0
 80225e6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80225ea:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 80225ee:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80225f2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80225f4:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 80225f8:	2300      	movs	r3, #0
 80225fa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80225fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022600:	f04f 0300 	mov.w	r3, #0
 8022604:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8022608:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802260c:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8022610:	681b      	ldr	r3, [r3, #0]
 8022612:	0fdb      	lsrs	r3, r3, #31
 8022614:	b2da      	uxtb	r2, r3
 8022616:	2300      	movs	r3, #0
 8022618:	4053      	eors	r3, r2
 802261a:	b2db      	uxtb	r3, r3
 802261c:	2b00      	cmp	r3, #0
 802261e:	d014      	beq.n	802264a <arm_softmax_s8+0xdda>
        mult = 1 - mult;
 8022620:	f04f 0001 	mov.w	r0, #1
 8022624:	f04f 0100 	mov.w	r1, #0
 8022628:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 802262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022630:	1a84      	subs	r4, r0, r2
 8022632:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 8022636:	eb61 0303 	sbc.w	r3, r1, r3
 802263a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 802263e:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8022642:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8022646:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802264a:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 802264e:	681b      	ldr	r3, [r3, #0]
 8022650:	4618      	mov	r0, r3
 8022652:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022656:	a3d8      	add	r3, pc, #864	; (adr r3, 80229b8 <arm_softmax_s8+0x1148>)
 8022658:	e9d3 2300 	ldrd	r2, r3, [r3]
 802265c:	fb02 f501 	mul.w	r5, r2, r1
 8022660:	fb00 f403 	mul.w	r4, r0, r3
 8022664:	442c      	add	r4, r5
 8022666:	fba0 0102 	umull	r0, r1, r0, r2
 802266a:	1863      	adds	r3, r4, r1
 802266c:	4619      	mov	r1, r3
 802266e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8022672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022676:	1814      	adds	r4, r2, r0
 8022678:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 802267c:	414b      	adcs	r3, r1
 802267e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8022682:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8022686:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 802268a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802268e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8022692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022696:	4610      	mov	r0, r2
 8022698:	4619      	mov	r1, r3
 802269a:	2800      	cmp	r0, #0
 802269c:	f171 0300 	sbcs.w	r3, r1, #0
 80226a0:	da06      	bge.n	80226b0 <arm_softmax_s8+0xe40>
 80226a2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80226a6:	f04f 0300 	mov.w	r3, #0
 80226aa:	1880      	adds	r0, r0, r2
 80226ac:	eb43 0101 	adc.w	r1, r3, r1
 80226b0:	f04f 0200 	mov.w	r2, #0
 80226b4:	f04f 0300 	mov.w	r3, #0
 80226b8:	0fc2      	lsrs	r2, r0, #31
 80226ba:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80226be:	17cb      	asrs	r3, r1, #31
 80226c0:	4610      	mov	r0, r2
 80226c2:	4619      	mov	r1, r3
 80226c4:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 80226c8:	4603      	mov	r3, r0
 80226ca:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80226cc:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 80226d0:	681a      	ldr	r2, [r3, #0]
 80226d2:	4bb7      	ldr	r3, [pc, #732]	; (80229b0 <arm_softmax_s8+0x1140>)
 80226d4:	429a      	cmp	r2, r3
 80226d6:	d10a      	bne.n	80226ee <arm_softmax_s8+0xe7e>
 80226d8:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 80226dc:	681b      	ldr	r3, [r3, #0]
 80226de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80226e2:	d104      	bne.n	80226ee <arm_softmax_s8+0xe7e>
        result = NN_Q31_MAX;
 80226e4:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 80226e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80226ec:	6013      	str	r3, [r2, #0]
    return result;
 80226ee:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80226f2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 80226f4:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80226f8:	ea02 0103 	and.w	r1, r2, r3
 80226fc:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022700:	43da      	mvns	r2, r3
 8022702:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022706:	4013      	ands	r3, r2
 8022708:	404b      	eors	r3, r1
 802270a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(720401)
 802270e:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8022712:	1c53      	adds	r3, r2, #1
 8022714:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022718:	2301      	movs	r3, #1
 802271a:	fa03 f202 	lsl.w	r2, r3, r2
 802271e:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022722:	4013      	ands	r3, r2
 8022724:	2b00      	cmp	r3, #0
 8022726:	d002      	beq.n	802272e <arm_softmax_s8+0xebe>
 8022728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802272c:	e000      	b.n	8022730 <arm_softmax_s8+0xec0>
 802272e:	2300      	movs	r3, #0
 8022730:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022734:	f207 42bc 	addw	r2, r7, #1212	; 0x4bc
 8022738:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802273c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802273e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8022742:	2300      	movs	r3, #0
 8022744:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022746:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802274a:	f04f 0300 	mov.w	r3, #0
 802274e:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8022752:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022756:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 802275a:	681b      	ldr	r3, [r3, #0]
 802275c:	0fdb      	lsrs	r3, r3, #31
 802275e:	b2da      	uxtb	r2, r3
 8022760:	2300      	movs	r3, #0
 8022762:	4053      	eors	r3, r2
 8022764:	b2db      	uxtb	r3, r3
 8022766:	2b00      	cmp	r3, #0
 8022768:	d014      	beq.n	8022794 <arm_softmax_s8+0xf24>
        mult = 1 - mult;
 802276a:	f04f 0001 	mov.w	r0, #1
 802276e:	f04f 0100 	mov.w	r1, #0
 8022772:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8022776:	e9d3 2300 	ldrd	r2, r3, [r3]
 802277a:	1a84      	subs	r4, r0, r2
 802277c:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 8022780:	eb61 0303 	sbc.w	r3, r1, r3
 8022784:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8022788:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 802278c:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 8022790:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022794:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8022798:	681b      	ldr	r3, [r3, #0]
 802279a:	4618      	mov	r0, r3
 802279c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80227a0:	4a84      	ldr	r2, [pc, #528]	; (80229b4 <arm_softmax_s8+0x1144>)
 80227a2:	f04f 0300 	mov.w	r3, #0
 80227a6:	fb02 f501 	mul.w	r5, r2, r1
 80227aa:	fb00 f403 	mul.w	r4, r0, r3
 80227ae:	442c      	add	r4, r5
 80227b0:	fba0 0102 	umull	r0, r1, r0, r2
 80227b4:	1863      	adds	r3, r4, r1
 80227b6:	4619      	mov	r1, r3
 80227b8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80227bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227c0:	1814      	adds	r4, r2, r0
 80227c2:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80227c6:	414b      	adcs	r3, r1
 80227c8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80227cc:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80227d0:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 80227d4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80227d8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80227dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227e0:	4610      	mov	r0, r2
 80227e2:	4619      	mov	r1, r3
 80227e4:	2800      	cmp	r0, #0
 80227e6:	f171 0300 	sbcs.w	r3, r1, #0
 80227ea:	da06      	bge.n	80227fa <arm_softmax_s8+0xf8a>
 80227ec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80227f0:	f04f 0300 	mov.w	r3, #0
 80227f4:	1880      	adds	r0, r0, r2
 80227f6:	eb43 0101 	adc.w	r1, r3, r1
 80227fa:	f04f 0200 	mov.w	r2, #0
 80227fe:	f04f 0300 	mov.w	r3, #0
 8022802:	0fc2      	lsrs	r2, r0, #31
 8022804:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022808:	17cb      	asrs	r3, r1, #31
 802280a:	4610      	mov	r0, r2
 802280c:	4619      	mov	r1, r3
 802280e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8022812:	4603      	mov	r3, r0
 8022814:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8022816:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 802281a:	681a      	ldr	r2, [r3, #0]
 802281c:	4b65      	ldr	r3, [pc, #404]	; (80229b4 <arm_softmax_s8+0x1144>)
 802281e:	429a      	cmp	r2, r3
 8022820:	d10a      	bne.n	8022838 <arm_softmax_s8+0xfc8>
 8022822:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8022826:	681b      	ldr	r3, [r3, #0]
 8022828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802282c:	d104      	bne.n	8022838 <arm_softmax_s8+0xfc8>
        result = NN_Q31_MAX;
 802282e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8022832:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022836:	6013      	str	r3, [r2, #0]
    return result;
 8022838:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 802283c:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 802283e:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022842:	ea02 0103 	and.w	r1, r2, r3
 8022846:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 802284a:	43da      	mvns	r2, r3
 802284c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022850:	4013      	ands	r3, r2
 8022852:	404b      	eors	r3, r1
 8022854:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(242)
 8022858:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 802285c:	1c53      	adds	r3, r2, #1
 802285e:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022862:	2301      	movs	r3, #1
 8022864:	fa03 f202 	lsl.w	r2, r3, r2
 8022868:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 802286c:	4013      	ands	r3, r2
 802286e:	2b00      	cmp	r3, #0
 8022870:	d002      	beq.n	8022878 <arm_softmax_s8+0x1008>
 8022872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022876:	e000      	b.n	802287a <arm_softmax_s8+0x100a>
 8022878:	2300      	movs	r3, #0
 802287a:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 802287e:	f207 42ac 	addw	r2, r7, #1196	; 0x4ac
 8022882:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022886:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022888:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 802288c:	2300      	movs	r3, #0
 802288e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022894:	f04f 0300 	mov.w	r3, #0
 8022898:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 802289c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80228a0:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80228a4:	681b      	ldr	r3, [r3, #0]
 80228a6:	0fdb      	lsrs	r3, r3, #31
 80228a8:	b2da      	uxtb	r2, r3
 80228aa:	2300      	movs	r3, #0
 80228ac:	4053      	eors	r3, r2
 80228ae:	b2db      	uxtb	r3, r3
 80228b0:	2b00      	cmp	r3, #0
 80228b2:	d014      	beq.n	80228de <arm_softmax_s8+0x106e>
        mult = 1 - mult;
 80228b4:	f04f 0001 	mov.w	r0, #1
 80228b8:	f04f 0100 	mov.w	r1, #0
 80228bc:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80228c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228c4:	1a84      	subs	r4, r0, r2
 80228c6:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 80228ca:	eb61 0303 	sbc.w	r3, r1, r3
 80228ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80228d2:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 80228d6:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 80228da:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80228de:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80228e2:	681b      	ldr	r3, [r3, #0]
 80228e4:	4618      	mov	r0, r3
 80228e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80228ea:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 80228ee:	f04f 0300 	mov.w	r3, #0
 80228f2:	fb02 f501 	mul.w	r5, r2, r1
 80228f6:	fb00 f403 	mul.w	r4, r0, r3
 80228fa:	442c      	add	r4, r5
 80228fc:	fba0 0102 	umull	r0, r1, r0, r2
 8022900:	1863      	adds	r3, r4, r1
 8022902:	4619      	mov	r1, r3
 8022904:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8022908:	e9d3 2300 	ldrd	r2, r3, [r3]
 802290c:	1814      	adds	r4, r2, r0
 802290e:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 8022912:	414b      	adcs	r3, r1
 8022914:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8022918:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 802291c:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8022920:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022924:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8022928:	e9d3 2300 	ldrd	r2, r3, [r3]
 802292c:	4610      	mov	r0, r2
 802292e:	4619      	mov	r1, r3
 8022930:	2800      	cmp	r0, #0
 8022932:	f171 0300 	sbcs.w	r3, r1, #0
 8022936:	da06      	bge.n	8022946 <arm_softmax_s8+0x10d6>
 8022938:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802293c:	f04f 0300 	mov.w	r3, #0
 8022940:	1880      	adds	r0, r0, r2
 8022942:	eb43 0101 	adc.w	r1, r3, r1
 8022946:	f04f 0200 	mov.w	r2, #0
 802294a:	f04f 0300 	mov.w	r3, #0
 802294e:	0fc2      	lsrs	r2, r0, #31
 8022950:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022954:	17cb      	asrs	r3, r1, #31
 8022956:	4610      	mov	r0, r2
 8022958:	4619      	mov	r1, r3
 802295a:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 802295e:	4603      	mov	r3, r0
 8022960:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8022962:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8022966:	681b      	ldr	r3, [r3, #0]
 8022968:	2bf2      	cmp	r3, #242	; 0xf2
 802296a:	d10a      	bne.n	8022982 <arm_softmax_s8+0x1112>
 802296c:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8022970:	681b      	ldr	r3, [r3, #0]
 8022972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022976:	d104      	bne.n	8022982 <arm_softmax_s8+0x1112>
        result = NN_Q31_MAX;
 8022978:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 802297c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022980:	6013      	str	r3, [r2, #0]
    return result;
 8022982:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8022986:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8022988:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 802298c:	ea02 0103 	and.w	r1, r2, r3
 8022990:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022994:	43da      	mvns	r2, r3
 8022996:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802299a:	4013      	ands	r3, r2
 802299c:	404b      	eors	r3, r1
 802299e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    mask = MASK_IF_ZERO(val);
 80229a2:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d10a      	bne.n	80229c0 <arm_softmax_s8+0x1150>
 80229aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80229ae:	e008      	b.n	80229c2 <arm_softmax_s8+0x1152>
 80229b0:	02582ab7 	.word	0x02582ab7
 80229b4:	000afe11 	.word	0x000afe11
 80229b8:	02582ab7 	.word	0x02582ab7
 80229bc:	00000000 	.word	0x00000000
 80229c0:	2300      	movs	r3, #0
 80229c2:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
 80229c6:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80229ca:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80229ce:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80229d2:	43da      	mvns	r2, r3
 80229d4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80229d8:	4013      	ands	r3, r2
 80229da:	404b      	eors	r3, r1
 80229dc:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
    q31_t result = 0;
 80229e0:	2300      	movs	r3, #0
 80229e2:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    const q31_t remainder_mask = (1 << exponent) - 1;
 80229e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80229ea:	3b01      	subs	r3, #1
 80229ec:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
    int32_t remainder = remainder_mask & dividend;
 80229f0:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 80229f4:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 80229f8:	4013      	ands	r3, r2
 80229fa:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    result = dividend >> exponent;
 80229fe:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 8022a02:	131b      	asrs	r3, r3, #12
 8022a04:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    q31_t threshold = remainder_mask >> 1;
 8022a08:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8022a0c:	105b      	asrs	r3, r3, #1
 8022a0e:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
    if (result < 0)
 8022a12:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 8022a16:	2b00      	cmp	r3, #0
 8022a18:	da04      	bge.n	8022a24 <arm_softmax_s8+0x11b4>
        threshold++;
 8022a1a:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8022a1e:	3301      	adds	r3, #1
 8022a20:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
    if (remainder > threshold)
 8022a24:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8022a28:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8022a2c:	429a      	cmp	r2, r3
 8022a2e:	dd04      	ble.n	8022a3a <arm_softmax_s8+0x11ca>
        result++;
 8022a30:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 8022a34:	3301      	adds	r3, #1
 8022a36:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    return result;
 8022a3a:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8022a3e:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8022a42:	4413      	add	r3, r2
 8022a44:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
        for (col = 0; col < row_size; ++col)
 8022a48:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8022a4c:	3301      	adds	r3, #1
 8022a4e:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8022a52:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8022a56:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8022a5a:	681b      	ldr	r3, [r3, #0]
 8022a5c:	429a      	cmp	r2, r3
 8022a5e:	f6fe af57 	blt.w	8021910 <arm_softmax_s8+0xa0>
            }
        }

        const int32_t headroom = __CLZ(sum);
 8022a62:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8022a66:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8022a6a:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 8022a6c:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8022a70:	681b      	ldr	r3, [r3, #0]
 8022a72:	2b00      	cmp	r3, #0
 8022a74:	d101      	bne.n	8022a7a <arm_softmax_s8+0x120a>
    return 32U;
 8022a76:	2320      	movs	r3, #32
 8022a78:	e005      	b.n	8022a86 <arm_softmax_s8+0x1216>
  return __builtin_clz(value);
 8022a7a:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8022a7e:	681b      	ldr	r3, [r3, #0]
 8022a80:	fab3 f383 	clz	r3, r3
 8022a84:	b2db      	uxtb	r3, r3
 8022a86:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8022a8a:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 8022a8e:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8022a92:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
        const int32_t shifted_scale = ONE_OVER1((sum > 0 ? sum << headroom : 0) - (1 << 31));
 8022a96:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8022a9a:	2b00      	cmp	r3, #0
 8022a9c:	dd08      	ble.n	8022ab0 <arm_softmax_s8+0x1240>
 8022a9e:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8022aa2:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 8022aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8022aaa:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8022aae:	e001      	b.n	8022ab4 <arm_softmax_s8+0x1244>
 8022ab0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8022ab4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8022ab8:	601a      	str	r2, [r3, #0]
    const int64_t sum = (int64_t)val + (int64_t)NN_Q31_MAX;
 8022aba:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8022abe:	681b      	ldr	r3, [r3, #0]
 8022ac0:	4618      	mov	r0, r3
 8022ac2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022ac6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022aca:	f04f 0300 	mov.w	r3, #0
 8022ace:	1884      	adds	r4, r0, r2
 8022ad0:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8022ad4:	eb41 0303 	adc.w	r3, r1, r3
 8022ad8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8022adc:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8022ae0:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8022ae4:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8022ae8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8022aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022af0:	2a00      	cmp	r2, #0
 8022af2:	f173 0300 	sbcs.w	r3, r3, #0
 8022af6:	db04      	blt.n	8022b02 <arm_softmax_s8+0x1292>
 8022af8:	f04f 0001 	mov.w	r0, #1
 8022afc:	f04f 0100 	mov.w	r1, #0
 8022b00:	e003      	b.n	8022b0a <arm_softmax_s8+0x129a>
 8022b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022b06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022b0a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8022b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b12:	eb10 0a02 	adds.w	sl, r0, r2
 8022b16:	eb41 0b03 	adc.w	fp, r1, r3
 8022b1a:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8022b1e:	461a      	mov	r2, r3
 8022b20:	f04f 0300 	mov.w	r3, #0
 8022b24:	eb12 080a 	adds.w	r8, r2, sl
 8022b28:	eb43 090b 	adc.w	r9, r3, fp
 8022b2c:	f04f 0200 	mov.w	r2, #0
 8022b30:	f04f 0300 	mov.w	r3, #0
 8022b34:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8022b38:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8022b3c:	ea4f 0369 	mov.w	r3, r9, asr #1
 8022b40:	4610      	mov	r0, r2
 8022b42:	4619      	mov	r1, r3
 8022b44:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8022b48:	4603      	mov	r3, r0
 8022b4a:	6013      	str	r3, [r2, #0]
 8022b4c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8022b50:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8022b54:	681b      	ldr	r3, [r3, #0]
 8022b56:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022b58:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8022b5c:	2300      	movs	r3, #0
 8022b5e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022b64:	f04f 0300 	mov.w	r3, #0
 8022b68:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8022b6c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022b70:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8022b74:	681b      	ldr	r3, [r3, #0]
 8022b76:	0fdb      	lsrs	r3, r3, #31
 8022b78:	b2da      	uxtb	r2, r3
 8022b7a:	2301      	movs	r3, #1
 8022b7c:	4053      	eors	r3, r2
 8022b7e:	b2db      	uxtb	r3, r3
 8022b80:	2b00      	cmp	r3, #0
 8022b82:	d014      	beq.n	8022bae <arm_softmax_s8+0x133e>
        mult = 1 - mult;
 8022b84:	f04f 0001 	mov.w	r0, #1
 8022b88:	f04f 0100 	mov.w	r1, #0
 8022b8c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8022b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b94:	1a84      	subs	r4, r0, r2
 8022b96:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8022b9a:	eb61 0303 	sbc.w	r3, r1, r3
 8022b9e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8022ba2:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8022ba6:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8022baa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022bae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8022bb2:	681b      	ldr	r3, [r3, #0]
 8022bb4:	4618      	mov	r0, r3
 8022bb6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022bba:	f60f 2354 	addw	r3, pc, #2644	; 0xa54
 8022bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bc2:	fb02 f501 	mul.w	r5, r2, r1
 8022bc6:	fb00 f403 	mul.w	r4, r0, r3
 8022bca:	442c      	add	r4, r5
 8022bcc:	fba0 0102 	umull	r0, r1, r0, r2
 8022bd0:	1863      	adds	r3, r4, r1
 8022bd2:	4619      	mov	r1, r3
 8022bd4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8022bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bdc:	1814      	adds	r4, r2, r0
 8022bde:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8022be2:	414b      	adcs	r3, r1
 8022be4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8022be8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8022bec:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8022bf0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022bf4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8022bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bfc:	4610      	mov	r0, r2
 8022bfe:	4619      	mov	r1, r3
 8022c00:	2800      	cmp	r0, #0
 8022c02:	f171 0300 	sbcs.w	r3, r1, #0
 8022c06:	da06      	bge.n	8022c16 <arm_softmax_s8+0x13a6>
 8022c08:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022c0c:	f04f 0300 	mov.w	r3, #0
 8022c10:	1880      	adds	r0, r0, r2
 8022c12:	eb43 0101 	adc.w	r1, r3, r1
 8022c16:	f04f 0200 	mov.w	r2, #0
 8022c1a:	f04f 0300 	mov.w	r3, #0
 8022c1e:	0fc2      	lsrs	r2, r0, #31
 8022c20:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022c24:	17cb      	asrs	r3, r1, #31
 8022c26:	4610      	mov	r0, r2
 8022c28:	4619      	mov	r1, r3
 8022c2a:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8022c2e:	4603      	mov	r3, r0
 8022c30:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8022c32:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8022c36:	681b      	ldr	r3, [r3, #0]
 8022c38:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8022c3c:	d10a      	bne.n	8022c54 <arm_softmax_s8+0x13e4>
 8022c3e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8022c42:	681b      	ldr	r3, [r3, #0]
 8022c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022c48:	d104      	bne.n	8022c54 <arm_softmax_s8+0x13e4>
        result = NN_Q31_MAX;
 8022c4a:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8022c4e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022c52:	6013      	str	r3, [r2, #0]
    return result;
 8022c54:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8022c58:	681b      	ldr	r3, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8022c5a:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8022c5e:	f103 335a 	add.w	r3, r3, #1515870810	; 0x5a5a5a5a
 8022c62:	6013      	str	r3, [r2, #0]
    const int32_t shift = (1 << 29);
 8022c64:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8022c68:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8022c6c:	6013      	str	r3, [r2, #0]
 8022c6e:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8022c72:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8022c76:	681b      	ldr	r3, [r3, #0]
 8022c78:	6013      	str	r3, [r2, #0]
 8022c7a:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8022c7e:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8022c82:	681b      	ldr	r3, [r3, #0]
 8022c84:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022c86:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8022c8a:	2300      	movs	r3, #0
 8022c8c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022c8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022c92:	f04f 0300 	mov.w	r3, #0
 8022c96:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8022c9a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022c9e:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8022ca2:	681b      	ldr	r3, [r3, #0]
 8022ca4:	0fdb      	lsrs	r3, r3, #31
 8022ca6:	b2da      	uxtb	r2, r3
 8022ca8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8022cac:	681b      	ldr	r3, [r3, #0]
 8022cae:	0fdb      	lsrs	r3, r3, #31
 8022cb0:	b2db      	uxtb	r3, r3
 8022cb2:	4053      	eors	r3, r2
 8022cb4:	b2db      	uxtb	r3, r3
 8022cb6:	2b00      	cmp	r3, #0
 8022cb8:	d014      	beq.n	8022ce4 <arm_softmax_s8+0x1474>
        mult = 1 - mult;
 8022cba:	f04f 0001 	mov.w	r0, #1
 8022cbe:	f04f 0100 	mov.w	r1, #0
 8022cc2:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8022cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cca:	1a84      	subs	r4, r0, r2
 8022ccc:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8022cd0:	eb61 0303 	sbc.w	r3, r1, r3
 8022cd4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8022cd8:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8022cdc:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8022ce0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022ce4:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8022ce8:	681b      	ldr	r3, [r3, #0]
 8022cea:	4618      	mov	r0, r3
 8022cec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022cf0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8022cf4:	681b      	ldr	r3, [r3, #0]
 8022cf6:	461a      	mov	r2, r3
 8022cf8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8022cfc:	fb02 f501 	mul.w	r5, r2, r1
 8022d00:	fb00 f403 	mul.w	r4, r0, r3
 8022d04:	442c      	add	r4, r5
 8022d06:	fba0 0102 	umull	r0, r1, r0, r2
 8022d0a:	1863      	adds	r3, r4, r1
 8022d0c:	4619      	mov	r1, r3
 8022d0e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8022d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d16:	1814      	adds	r4, r2, r0
 8022d18:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8022d1c:	414b      	adcs	r3, r1
 8022d1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8022d22:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8022d26:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8022d2a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022d2e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8022d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d36:	4610      	mov	r0, r2
 8022d38:	4619      	mov	r1, r3
 8022d3a:	2800      	cmp	r0, #0
 8022d3c:	f171 0300 	sbcs.w	r3, r1, #0
 8022d40:	da06      	bge.n	8022d50 <arm_softmax_s8+0x14e0>
 8022d42:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022d46:	f04f 0300 	mov.w	r3, #0
 8022d4a:	1880      	adds	r0, r0, r2
 8022d4c:	eb43 0101 	adc.w	r1, r3, r1
 8022d50:	f04f 0200 	mov.w	r2, #0
 8022d54:	f04f 0300 	mov.w	r3, #0
 8022d58:	0fc2      	lsrs	r2, r0, #31
 8022d5a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022d5e:	17cb      	asrs	r3, r1, #31
 8022d60:	4610      	mov	r0, r2
 8022d62:	4619      	mov	r1, r3
 8022d64:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8022d68:	4603      	mov	r3, r0
 8022d6a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8022d6c:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8022d70:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8022d74:	6812      	ldr	r2, [r2, #0]
 8022d76:	681b      	ldr	r3, [r3, #0]
 8022d78:	429a      	cmp	r2, r3
 8022d7a:	d10a      	bne.n	8022d92 <arm_softmax_s8+0x1522>
 8022d7c:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8022d80:	681b      	ldr	r3, [r3, #0]
 8022d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022d86:	d104      	bne.n	8022d92 <arm_softmax_s8+0x1522>
        result = NN_Q31_MAX;
 8022d88:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8022d8c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022d90:	6013      	str	r3, [r2, #0]
    return result;
 8022d92:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8022d96:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8022d98:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8022d9c:	681b      	ldr	r3, [r3, #0]
 8022d9e:	1a99      	subs	r1, r3, r2
 8022da0:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8022da4:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8022da8:	681b      	ldr	r3, [r3, #0]
 8022daa:	6013      	str	r3, [r2, #0]
 8022dac:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8022db0:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8022db2:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8022db6:	2300      	movs	r3, #0
 8022db8:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022dbe:	f04f 0300 	mov.w	r3, #0
 8022dc2:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8022dc6:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022dca:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8022dce:	681b      	ldr	r3, [r3, #0]
 8022dd0:	0fdb      	lsrs	r3, r3, #31
 8022dd2:	b2da      	uxtb	r2, r3
 8022dd4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8022dd8:	681b      	ldr	r3, [r3, #0]
 8022dda:	0fdb      	lsrs	r3, r3, #31
 8022ddc:	b2db      	uxtb	r3, r3
 8022dde:	4053      	eors	r3, r2
 8022de0:	b2db      	uxtb	r3, r3
 8022de2:	2b00      	cmp	r3, #0
 8022de4:	d014      	beq.n	8022e10 <arm_softmax_s8+0x15a0>
        mult = 1 - mult;
 8022de6:	f04f 0001 	mov.w	r0, #1
 8022dea:	f04f 0100 	mov.w	r1, #0
 8022dee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8022df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022df6:	1a84      	subs	r4, r0, r2
 8022df8:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8022dfc:	eb61 0303 	sbc.w	r3, r1, r3
 8022e00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8022e04:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8022e08:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8022e0c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022e10:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8022e14:	681b      	ldr	r3, [r3, #0]
 8022e16:	4618      	mov	r0, r3
 8022e18:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022e1c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8022e20:	681b      	ldr	r3, [r3, #0]
 8022e22:	461a      	mov	r2, r3
 8022e24:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8022e28:	fb02 f501 	mul.w	r5, r2, r1
 8022e2c:	fb00 f403 	mul.w	r4, r0, r3
 8022e30:	442c      	add	r4, r5
 8022e32:	fba0 0102 	umull	r0, r1, r0, r2
 8022e36:	1863      	adds	r3, r4, r1
 8022e38:	4619      	mov	r1, r3
 8022e3a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8022e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e42:	1814      	adds	r4, r2, r0
 8022e44:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8022e48:	414b      	adcs	r3, r1
 8022e4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8022e4e:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8022e52:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8022e56:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022e5a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8022e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e62:	4610      	mov	r0, r2
 8022e64:	4619      	mov	r1, r3
 8022e66:	2800      	cmp	r0, #0
 8022e68:	f171 0300 	sbcs.w	r3, r1, #0
 8022e6c:	da06      	bge.n	8022e7c <arm_softmax_s8+0x160c>
 8022e6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022e72:	f04f 0300 	mov.w	r3, #0
 8022e76:	1880      	adds	r0, r0, r2
 8022e78:	eb43 0101 	adc.w	r1, r3, r1
 8022e7c:	f04f 0200 	mov.w	r2, #0
 8022e80:	f04f 0300 	mov.w	r3, #0
 8022e84:	0fc2      	lsrs	r2, r0, #31
 8022e86:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022e8a:	17cb      	asrs	r3, r1, #31
 8022e8c:	4610      	mov	r0, r2
 8022e8e:	4619      	mov	r1, r3
 8022e90:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8022e94:	4603      	mov	r3, r0
 8022e96:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8022e98:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8022e9c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8022ea0:	6812      	ldr	r2, [r2, #0]
 8022ea2:	681b      	ldr	r3, [r3, #0]
 8022ea4:	429a      	cmp	r2, r3
 8022ea6:	d10a      	bne.n	8022ebe <arm_softmax_s8+0x164e>
 8022ea8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8022eac:	681b      	ldr	r3, [r3, #0]
 8022eae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022eb2:	d104      	bne.n	8022ebe <arm_softmax_s8+0x164e>
        result = NN_Q31_MAX;
 8022eb4:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8022eb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022ebc:	6013      	str	r3, [r2, #0]
    return result;
 8022ebe:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8022ec2:	681a      	ldr	r2, [r3, #0]
 8022ec4:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8022ec8:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8022eca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8022ece:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8022ed2:	3b01      	subs	r3, #1
 8022ed4:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8022ed6:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8022eda:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8022ede:	681b      	ldr	r3, [r3, #0]
 8022ee0:	009b      	lsls	r3, r3, #2
 8022ee2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 8022ee4:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8022ee8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8022eec:	6812      	ldr	r2, [r2, #0]
 8022eee:	681b      	ldr	r3, [r3, #0]
 8022ef0:	429a      	cmp	r2, r3
 8022ef2:	dd02      	ble.n	8022efa <arm_softmax_s8+0x168a>
 8022ef4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022ef8:	e000      	b.n	8022efc <arm_softmax_s8+0x168c>
 8022efa:	2100      	movs	r1, #0
 8022efc:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8022f00:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8022f04:	6812      	ldr	r2, [r2, #0]
 8022f06:	681b      	ldr	r3, [r3, #0]
 8022f08:	429a      	cmp	r2, r3
 8022f0a:	dd01      	ble.n	8022f10 <arm_softmax_s8+0x16a0>
 8022f0c:	2200      	movs	r2, #0
 8022f0e:	e001      	b.n	8022f14 <arm_softmax_s8+0x16a4>
 8022f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022f14:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8022f18:	681b      	ldr	r3, [r3, #0]
 8022f1a:	4013      	ands	r3, r2
 8022f1c:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8022f20:	404b      	eors	r3, r1
 8022f22:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 8022f24:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8022f28:	681b      	ldr	r3, [r3, #0]
 8022f2a:	425a      	negs	r2, r3
 8022f2c:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8022f30:	681b      	ldr	r3, [r3, #0]
 8022f32:	4293      	cmp	r3, r2
 8022f34:	da02      	bge.n	8022f3c <arm_softmax_s8+0x16cc>
 8022f36:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8022f3a:	e000      	b.n	8022f3e <arm_softmax_s8+0x16ce>
 8022f3c:	2100      	movs	r1, #0
 8022f3e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8022f42:	681b      	ldr	r3, [r3, #0]
 8022f44:	425a      	negs	r2, r3
 8022f46:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8022f4a:	681b      	ldr	r3, [r3, #0]
 8022f4c:	4293      	cmp	r3, r2
 8022f4e:	da01      	bge.n	8022f54 <arm_softmax_s8+0x16e4>
 8022f50:	2200      	movs	r2, #0
 8022f52:	e001      	b.n	8022f58 <arm_softmax_s8+0x16e8>
 8022f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022f58:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8022f5c:	681b      	ldr	r3, [r3, #0]
 8022f5e:	4013      	ands	r3, r2
 8022f60:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8022f64:	404b      	eors	r3, r1
 8022f66:	6013      	str	r3, [r2, #0]
    return result;
 8022f68:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8022f6c:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8022f6e:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8022f72:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8022f76:	681b      	ldr	r3, [r3, #0]
 8022f78:	440b      	add	r3, r1
 8022f7a:	6013      	str	r3, [r2, #0]
 8022f7c:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8022f80:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8022f84:	681b      	ldr	r3, [r3, #0]
 8022f86:	6013      	str	r3, [r2, #0]
 8022f88:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8022f8c:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8022f90:	681b      	ldr	r3, [r3, #0]
 8022f92:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022f94:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8022f98:	2300      	movs	r3, #0
 8022f9a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022f9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022fa0:	f04f 0300 	mov.w	r3, #0
 8022fa4:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8022fa8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022fac:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8022fb0:	681b      	ldr	r3, [r3, #0]
 8022fb2:	0fdb      	lsrs	r3, r3, #31
 8022fb4:	b2da      	uxtb	r2, r3
 8022fb6:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8022fba:	681b      	ldr	r3, [r3, #0]
 8022fbc:	0fdb      	lsrs	r3, r3, #31
 8022fbe:	b2db      	uxtb	r3, r3
 8022fc0:	4053      	eors	r3, r2
 8022fc2:	b2db      	uxtb	r3, r3
 8022fc4:	2b00      	cmp	r3, #0
 8022fc6:	d014      	beq.n	8022ff2 <arm_softmax_s8+0x1782>
        mult = 1 - mult;
 8022fc8:	f04f 0001 	mov.w	r0, #1
 8022fcc:	f04f 0100 	mov.w	r1, #0
 8022fd0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8022fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fd8:	1a84      	subs	r4, r0, r2
 8022fda:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 8022fde:	eb61 0303 	sbc.w	r3, r1, r3
 8022fe2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8022fe6:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8022fea:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8022fee:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022ff2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8022ff6:	681b      	ldr	r3, [r3, #0]
 8022ff8:	4618      	mov	r0, r3
 8022ffa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022ffe:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8023002:	681b      	ldr	r3, [r3, #0]
 8023004:	461a      	mov	r2, r3
 8023006:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802300a:	fb02 f501 	mul.w	r5, r2, r1
 802300e:	fb00 f403 	mul.w	r4, r0, r3
 8023012:	442c      	add	r4, r5
 8023014:	fba0 0102 	umull	r0, r1, r0, r2
 8023018:	1863      	adds	r3, r4, r1
 802301a:	4619      	mov	r1, r3
 802301c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8023020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023024:	1814      	adds	r4, r2, r0
 8023026:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 802302a:	414b      	adcs	r3, r1
 802302c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8023030:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8023034:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8023038:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802303c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8023040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023044:	4610      	mov	r0, r2
 8023046:	4619      	mov	r1, r3
 8023048:	2800      	cmp	r0, #0
 802304a:	f171 0300 	sbcs.w	r3, r1, #0
 802304e:	da06      	bge.n	802305e <arm_softmax_s8+0x17ee>
 8023050:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023054:	f04f 0300 	mov.w	r3, #0
 8023058:	1880      	adds	r0, r0, r2
 802305a:	eb43 0101 	adc.w	r1, r3, r1
 802305e:	f04f 0200 	mov.w	r2, #0
 8023062:	f04f 0300 	mov.w	r3, #0
 8023066:	0fc2      	lsrs	r2, r0, #31
 8023068:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802306c:	17cb      	asrs	r3, r1, #31
 802306e:	4610      	mov	r0, r2
 8023070:	4619      	mov	r1, r3
 8023072:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8023076:	4603      	mov	r3, r0
 8023078:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802307a:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 802307e:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8023082:	6812      	ldr	r2, [r2, #0]
 8023084:	681b      	ldr	r3, [r3, #0]
 8023086:	429a      	cmp	r2, r3
 8023088:	d10a      	bne.n	80230a0 <arm_softmax_s8+0x1830>
 802308a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 802308e:	681b      	ldr	r3, [r3, #0]
 8023090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023094:	d104      	bne.n	80230a0 <arm_softmax_s8+0x1830>
        result = NN_Q31_MAX;
 8023096:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 802309a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802309e:	6013      	str	r3, [r2, #0]
    return result;
 80230a0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80230a4:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80230a6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80230aa:	681b      	ldr	r3, [r3, #0]
 80230ac:	1a99      	subs	r1, r3, r2
 80230ae:	f207 4204 	addw	r2, r7, #1028	; 0x404
 80230b2:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80230b6:	681b      	ldr	r3, [r3, #0]
 80230b8:	6013      	str	r3, [r2, #0]
 80230ba:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80230be:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80230c0:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 80230c4:	2300      	movs	r3, #0
 80230c6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80230c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80230cc:	f04f 0300 	mov.w	r3, #0
 80230d0:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    if ((m1 < 0) ^ (m2 < 0))
 80230d4:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80230d8:	681b      	ldr	r3, [r3, #0]
 80230da:	0fdb      	lsrs	r3, r3, #31
 80230dc:	b2da      	uxtb	r2, r3
 80230de:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80230e2:	681b      	ldr	r3, [r3, #0]
 80230e4:	0fdb      	lsrs	r3, r3, #31
 80230e6:	b2db      	uxtb	r3, r3
 80230e8:	4053      	eors	r3, r2
 80230ea:	b2db      	uxtb	r3, r3
 80230ec:	2b00      	cmp	r3, #0
 80230ee:	d010      	beq.n	8023112 <arm_softmax_s8+0x18a2>
        mult = 1 - mult;
 80230f0:	f04f 0001 	mov.w	r0, #1
 80230f4:	f04f 0100 	mov.w	r1, #0
 80230f8:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 80230fc:	1a84      	subs	r4, r0, r2
 80230fe:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8023102:	eb61 0303 	sbc.w	r3, r1, r3
 8023106:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 802310a:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 802310e:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
    mult = mult + (q63_t)m1 * m2;
 8023112:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8023116:	681b      	ldr	r3, [r3, #0]
 8023118:	4618      	mov	r0, r3
 802311a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802311e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8023122:	681b      	ldr	r3, [r3, #0]
 8023124:	461a      	mov	r2, r3
 8023126:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802312a:	fb02 f501 	mul.w	r5, r2, r1
 802312e:	fb00 f403 	mul.w	r4, r0, r3
 8023132:	442c      	add	r4, r5
 8023134:	fba0 0102 	umull	r0, r1, r0, r2
 8023138:	1863      	adds	r3, r4, r1
 802313a:	4619      	mov	r1, r3
 802313c:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8023140:	1814      	adds	r4, r2, r0
 8023142:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 8023146:	414b      	adcs	r3, r1
 8023148:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 802314c:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8023150:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
    result = (int32_t)(mult / (1ll << 31));
 8023154:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8023158:	4610      	mov	r0, r2
 802315a:	4619      	mov	r1, r3
 802315c:	2800      	cmp	r0, #0
 802315e:	f171 0300 	sbcs.w	r3, r1, #0
 8023162:	da06      	bge.n	8023172 <arm_softmax_s8+0x1902>
 8023164:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023168:	f04f 0300 	mov.w	r3, #0
 802316c:	1880      	adds	r0, r0, r2
 802316e:	eb43 0101 	adc.w	r1, r3, r1
 8023172:	f04f 0200 	mov.w	r2, #0
 8023176:	f04f 0300 	mov.w	r3, #0
 802317a:	0fc2      	lsrs	r2, r0, #31
 802317c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023180:	17cb      	asrs	r3, r1, #31
 8023182:	4610      	mov	r0, r2
 8023184:	4619      	mov	r1, r3
 8023186:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 802318a:	4603      	mov	r3, r0
 802318c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802318e:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8023192:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8023196:	6812      	ldr	r2, [r2, #0]
 8023198:	681b      	ldr	r3, [r3, #0]
 802319a:	429a      	cmp	r2, r3
 802319c:	d10a      	bne.n	80231b4 <arm_softmax_s8+0x1944>
 802319e:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80231a2:	681b      	ldr	r3, [r3, #0]
 80231a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80231a8:	d104      	bne.n	80231b4 <arm_softmax_s8+0x1944>
        result = NN_Q31_MAX;
 80231aa:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 80231ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80231b2:	6013      	str	r3, [r2, #0]
    return result;
 80231b4:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80231b8:	681a      	ldr	r2, [r3, #0]
 80231ba:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80231be:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80231c0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80231c4:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 80231c8:	3b01      	subs	r3, #1
 80231ca:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80231cc:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 80231d0:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80231d4:	681b      	ldr	r3, [r3, #0]
 80231d6:	009b      	lsls	r3, r3, #2
 80231d8:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 80231da:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 80231de:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80231e2:	6812      	ldr	r2, [r2, #0]
 80231e4:	681b      	ldr	r3, [r3, #0]
 80231e6:	429a      	cmp	r2, r3
 80231e8:	dd02      	ble.n	80231f0 <arm_softmax_s8+0x1980>
 80231ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80231ee:	e000      	b.n	80231f2 <arm_softmax_s8+0x1982>
 80231f0:	2100      	movs	r1, #0
 80231f2:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 80231f6:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80231fa:	6812      	ldr	r2, [r2, #0]
 80231fc:	681b      	ldr	r3, [r3, #0]
 80231fe:	429a      	cmp	r2, r3
 8023200:	dd01      	ble.n	8023206 <arm_softmax_s8+0x1996>
 8023202:	2200      	movs	r2, #0
 8023204:	e001      	b.n	802320a <arm_softmax_s8+0x199a>
 8023206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802320a:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 802320e:	681b      	ldr	r3, [r3, #0]
 8023210:	4013      	ands	r3, r2
 8023212:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8023216:	404b      	eors	r3, r1
 8023218:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 802321a:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 802321e:	681b      	ldr	r3, [r3, #0]
 8023220:	425a      	negs	r2, r3
 8023222:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8023226:	681b      	ldr	r3, [r3, #0]
 8023228:	4293      	cmp	r3, r2
 802322a:	da02      	bge.n	8023232 <arm_softmax_s8+0x19c2>
 802322c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023230:	e000      	b.n	8023234 <arm_softmax_s8+0x19c4>
 8023232:	2100      	movs	r1, #0
 8023234:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8023238:	681b      	ldr	r3, [r3, #0]
 802323a:	425a      	negs	r2, r3
 802323c:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8023240:	681b      	ldr	r3, [r3, #0]
 8023242:	4293      	cmp	r3, r2
 8023244:	da01      	bge.n	802324a <arm_softmax_s8+0x19da>
 8023246:	2200      	movs	r2, #0
 8023248:	e001      	b.n	802324e <arm_softmax_s8+0x19de>
 802324a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802324e:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8023252:	681b      	ldr	r3, [r3, #0]
 8023254:	4013      	ands	r3, r2
 8023256:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 802325a:	404b      	eors	r3, r1
 802325c:	6013      	str	r3, [r2, #0]
    return result;
 802325e:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8023262:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023264:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8023268:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 802326c:	681b      	ldr	r3, [r3, #0]
 802326e:	440b      	add	r3, r1
 8023270:	6013      	str	r3, [r2, #0]
 8023272:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8023276:	f207 4374 	addw	r3, r7, #1140	; 0x474
 802327a:	681b      	ldr	r3, [r3, #0]
 802327c:	6013      	str	r3, [r2, #0]
 802327e:	f507 7277 	add.w	r2, r7, #988	; 0x3dc
 8023282:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8023286:	681b      	ldr	r3, [r3, #0]
 8023288:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802328a:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 802328e:	2300      	movs	r3, #0
 8023290:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023296:	f04f 0300 	mov.w	r3, #0
 802329a:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    if ((m1 < 0) ^ (m2 < 0))
 802329e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80232a2:	681b      	ldr	r3, [r3, #0]
 80232a4:	0fdb      	lsrs	r3, r3, #31
 80232a6:	b2da      	uxtb	r2, r3
 80232a8:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80232ac:	681b      	ldr	r3, [r3, #0]
 80232ae:	0fdb      	lsrs	r3, r3, #31
 80232b0:	b2db      	uxtb	r3, r3
 80232b2:	4053      	eors	r3, r2
 80232b4:	b2db      	uxtb	r3, r3
 80232b6:	2b00      	cmp	r3, #0
 80232b8:	d010      	beq.n	80232dc <arm_softmax_s8+0x1a6c>
        mult = 1 - mult;
 80232ba:	f04f 0001 	mov.w	r0, #1
 80232be:	f04f 0100 	mov.w	r1, #0
 80232c2:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 80232c6:	1a84      	subs	r4, r0, r2
 80232c8:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 80232cc:	eb61 0303 	sbc.w	r3, r1, r3
 80232d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80232d4:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80232d8:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
    mult = mult + (q63_t)m1 * m2;
 80232dc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80232e0:	681b      	ldr	r3, [r3, #0]
 80232e2:	4618      	mov	r0, r3
 80232e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80232e8:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80232ec:	681b      	ldr	r3, [r3, #0]
 80232ee:	461a      	mov	r2, r3
 80232f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80232f4:	fb02 f501 	mul.w	r5, r2, r1
 80232f8:	fb00 f403 	mul.w	r4, r0, r3
 80232fc:	442c      	add	r4, r5
 80232fe:	fba0 0102 	umull	r0, r1, r0, r2
 8023302:	1863      	adds	r3, r4, r1
 8023304:	4619      	mov	r1, r3
 8023306:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 802330a:	1814      	adds	r4, r2, r0
 802330c:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8023310:	414b      	adcs	r3, r1
 8023312:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8023316:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 802331a:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
    result = (int32_t)(mult / (1ll << 31));
 802331e:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8023322:	4610      	mov	r0, r2
 8023324:	4619      	mov	r1, r3
 8023326:	2800      	cmp	r0, #0
 8023328:	f171 0300 	sbcs.w	r3, r1, #0
 802332c:	da06      	bge.n	802333c <arm_softmax_s8+0x1acc>
 802332e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023332:	f04f 0300 	mov.w	r3, #0
 8023336:	1880      	adds	r0, r0, r2
 8023338:	eb43 0101 	adc.w	r1, r3, r1
 802333c:	f04f 0200 	mov.w	r2, #0
 8023340:	f04f 0300 	mov.w	r3, #0
 8023344:	0fc2      	lsrs	r2, r0, #31
 8023346:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802334a:	17cb      	asrs	r3, r1, #31
 802334c:	4610      	mov	r0, r2
 802334e:	4619      	mov	r1, r3
 8023350:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8023354:	4603      	mov	r3, r0
 8023356:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8023358:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 802335c:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8023360:	6812      	ldr	r2, [r2, #0]
 8023362:	681b      	ldr	r3, [r3, #0]
 8023364:	429a      	cmp	r2, r3
 8023366:	d10a      	bne.n	802337e <arm_softmax_s8+0x1b0e>
 8023368:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 802336c:	681b      	ldr	r3, [r3, #0]
 802336e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023372:	d104      	bne.n	802337e <arm_softmax_s8+0x1b0e>
        result = NN_Q31_MAX;
 8023374:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8023378:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802337c:	6013      	str	r3, [r2, #0]
    return result;
 802337e:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8023382:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023384:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8023388:	681b      	ldr	r3, [r3, #0]
 802338a:	1a99      	subs	r1, r3, r2
 802338c:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 8023390:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8023394:	681b      	ldr	r3, [r3, #0]
 8023396:	6013      	str	r3, [r2, #0]
 8023398:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 802339c:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 802339e:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80233a2:	2300      	movs	r3, #0
 80233a4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80233a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80233aa:	f04f 0300 	mov.w	r3, #0
 80233ae:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    if ((m1 < 0) ^ (m2 < 0))
 80233b2:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80233b6:	681b      	ldr	r3, [r3, #0]
 80233b8:	0fdb      	lsrs	r3, r3, #31
 80233ba:	b2da      	uxtb	r2, r3
 80233bc:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80233c0:	681b      	ldr	r3, [r3, #0]
 80233c2:	0fdb      	lsrs	r3, r3, #31
 80233c4:	b2db      	uxtb	r3, r3
 80233c6:	4053      	eors	r3, r2
 80233c8:	b2db      	uxtb	r3, r3
 80233ca:	2b00      	cmp	r3, #0
 80233cc:	d010      	beq.n	80233f0 <arm_softmax_s8+0x1b80>
        mult = 1 - mult;
 80233ce:	f04f 0001 	mov.w	r0, #1
 80233d2:	f04f 0100 	mov.w	r1, #0
 80233d6:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 80233da:	1a84      	subs	r4, r0, r2
 80233dc:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 80233e0:	eb61 0303 	sbc.w	r3, r1, r3
 80233e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80233e8:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80233ec:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    mult = mult + (q63_t)m1 * m2;
 80233f0:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80233f4:	681b      	ldr	r3, [r3, #0]
 80233f6:	4618      	mov	r0, r3
 80233f8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80233fc:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8023400:	681b      	ldr	r3, [r3, #0]
 8023402:	461a      	mov	r2, r3
 8023404:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023408:	fb02 f501 	mul.w	r5, r2, r1
 802340c:	fb00 f403 	mul.w	r4, r0, r3
 8023410:	442c      	add	r4, r5
 8023412:	fba0 0102 	umull	r0, r1, r0, r2
 8023416:	1863      	adds	r3, r4, r1
 8023418:	4619      	mov	r1, r3
 802341a:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 802341e:	1814      	adds	r4, r2, r0
 8023420:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8023424:	414b      	adcs	r3, r1
 8023426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802342a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 802342e:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    result = (int32_t)(mult / (1ll << 31));
 8023432:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8023436:	4610      	mov	r0, r2
 8023438:	4619      	mov	r1, r3
 802343a:	2800      	cmp	r0, #0
 802343c:	f171 0300 	sbcs.w	r3, r1, #0
 8023440:	da06      	bge.n	8023450 <arm_softmax_s8+0x1be0>
 8023442:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023446:	f04f 0300 	mov.w	r3, #0
 802344a:	1880      	adds	r0, r0, r2
 802344c:	eb43 0101 	adc.w	r1, r3, r1
 8023450:	f04f 0200 	mov.w	r2, #0
 8023454:	f04f 0300 	mov.w	r3, #0
 8023458:	0fc2      	lsrs	r2, r0, #31
 802345a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802345e:	17cb      	asrs	r3, r1, #31
 8023460:	4610      	mov	r0, r2
 8023462:	4619      	mov	r1, r3
 8023464:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8023468:	4603      	mov	r3, r0
 802346a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802346c:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 8023470:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8023474:	6812      	ldr	r2, [r2, #0]
 8023476:	681b      	ldr	r3, [r3, #0]
 8023478:	429a      	cmp	r2, r3
 802347a:	d10a      	bne.n	8023492 <arm_softmax_s8+0x1c22>
 802347c:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8023480:	681b      	ldr	r3, [r3, #0]
 8023482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023486:	d104      	bne.n	8023492 <arm_softmax_s8+0x1c22>
        result = NN_Q31_MAX;
 8023488:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 802348c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023490:	6013      	str	r3, [r2, #0]
    return result;
 8023492:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8023496:	681a      	ldr	r2, [r3, #0]
 8023498:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 802349c:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 802349e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80234a2:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80234a6:	3b01      	subs	r3, #1
 80234a8:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80234aa:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 80234ae:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80234b2:	681b      	ldr	r3, [r3, #0]
 80234b4:	009b      	lsls	r3, r3, #2
 80234b6:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 80234b8:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 80234bc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80234c0:	6812      	ldr	r2, [r2, #0]
 80234c2:	681b      	ldr	r3, [r3, #0]
 80234c4:	429a      	cmp	r2, r3
 80234c6:	dd02      	ble.n	80234ce <arm_softmax_s8+0x1c5e>
 80234c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80234cc:	e000      	b.n	80234d0 <arm_softmax_s8+0x1c60>
 80234ce:	2100      	movs	r1, #0
 80234d0:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 80234d4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80234d8:	6812      	ldr	r2, [r2, #0]
 80234da:	681b      	ldr	r3, [r3, #0]
 80234dc:	429a      	cmp	r2, r3
 80234de:	dd01      	ble.n	80234e4 <arm_softmax_s8+0x1c74>
 80234e0:	2200      	movs	r2, #0
 80234e2:	e001      	b.n	80234e8 <arm_softmax_s8+0x1c78>
 80234e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80234e8:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 80234ec:	681b      	ldr	r3, [r3, #0]
 80234ee:	4013      	ands	r3, r2
 80234f0:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 80234f4:	404b      	eors	r3, r1
 80234f6:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 80234f8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80234fc:	681b      	ldr	r3, [r3, #0]
 80234fe:	425a      	negs	r2, r3
 8023500:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8023504:	681b      	ldr	r3, [r3, #0]
 8023506:	4293      	cmp	r3, r2
 8023508:	da02      	bge.n	8023510 <arm_softmax_s8+0x1ca0>
 802350a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802350e:	e000      	b.n	8023512 <arm_softmax_s8+0x1ca2>
 8023510:	2100      	movs	r1, #0
 8023512:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8023516:	681b      	ldr	r3, [r3, #0]
 8023518:	425a      	negs	r2, r3
 802351a:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 802351e:	681b      	ldr	r3, [r3, #0]
 8023520:	4293      	cmp	r3, r2
 8023522:	da01      	bge.n	8023528 <arm_softmax_s8+0x1cb8>
 8023524:	2200      	movs	r2, #0
 8023526:	e001      	b.n	802352c <arm_softmax_s8+0x1cbc>
 8023528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802352c:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8023530:	681b      	ldr	r3, [r3, #0]
 8023532:	4013      	ands	r3, r2
 8023534:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8023538:	404b      	eors	r3, r1
 802353a:	6013      	str	r3, [r2, #0]
    return result;
 802353c:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8023540:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023542:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8023546:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 802354a:	681b      	ldr	r3, [r3, #0]
 802354c:	440b      	add	r3, r1
 802354e:	6013      	str	r3, [r2, #0]
 8023550:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 8023554:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8023558:	681b      	ldr	r3, [r3, #0]
 802355a:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 802355c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023560:	f507 7269 	add.w	r2, r7, #932	; 0x3a4
 8023564:	3b01      	subs	r3, #1
 8023566:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8023568:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 802356c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8023570:	681b      	ldr	r3, [r3, #0]
 8023572:	005b      	lsls	r3, r3, #1
 8023574:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 8023576:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 802357a:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 802357e:	6812      	ldr	r2, [r2, #0]
 8023580:	681b      	ldr	r3, [r3, #0]
 8023582:	429a      	cmp	r2, r3
 8023584:	dd02      	ble.n	802358c <arm_softmax_s8+0x1d1c>
 8023586:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802358a:	e000      	b.n	802358e <arm_softmax_s8+0x1d1e>
 802358c:	2100      	movs	r1, #0
 802358e:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 8023592:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8023596:	6812      	ldr	r2, [r2, #0]
 8023598:	681b      	ldr	r3, [r3, #0]
 802359a:	429a      	cmp	r2, r3
 802359c:	dd01      	ble.n	80235a2 <arm_softmax_s8+0x1d32>
 802359e:	2200      	movs	r2, #0
 80235a0:	e001      	b.n	80235a6 <arm_softmax_s8+0x1d36>
 80235a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80235a6:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80235aa:	681b      	ldr	r3, [r3, #0]
 80235ac:	4013      	ands	r3, r2
 80235ae:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 80235b2:	404b      	eors	r3, r1
 80235b4:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 80235b6:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80235ba:	681b      	ldr	r3, [r3, #0]
 80235bc:	425a      	negs	r2, r3
 80235be:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80235c2:	681b      	ldr	r3, [r3, #0]
 80235c4:	4293      	cmp	r3, r2
 80235c6:	da02      	bge.n	80235ce <arm_softmax_s8+0x1d5e>
 80235c8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80235cc:	e000      	b.n	80235d0 <arm_softmax_s8+0x1d60>
 80235ce:	2100      	movs	r1, #0
 80235d0:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80235d4:	681b      	ldr	r3, [r3, #0]
 80235d6:	425a      	negs	r2, r3
 80235d8:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80235dc:	681b      	ldr	r3, [r3, #0]
 80235de:	4293      	cmp	r3, r2
 80235e0:	da01      	bge.n	80235e6 <arm_softmax_s8+0x1d76>
 80235e2:	2200      	movs	r2, #0
 80235e4:	e001      	b.n	80235ea <arm_softmax_s8+0x1d7a>
 80235e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80235ea:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80235ee:	681b      	ldr	r3, [r3, #0]
 80235f0:	4013      	ands	r3, r2
 80235f2:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 80235f6:	404b      	eors	r3, r1
 80235f8:	6013      	str	r3, [r2, #0]
    return result;
 80235fa:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80235fe:	681b      	ldr	r3, [r3, #0]
    return MUL_POW2(x, 1);
 8023600:	bf00      	nop
 8023602:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4

        for (col = 0; col < row_size; ++col)
 8023606:	2300      	movs	r3, #0
 8023608:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 802360c:	f001 b97b 	b.w	8024906 <arm_softmax_s8+0x3096>
 8023610:	c3c3c3c4 	.word	0xc3c3c3c4
 8023614:	ffffffff 	.word	0xffffffff
        {
            diff = input[col] - max;
 8023618:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 802361c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8023620:	681b      	ldr	r3, [r3, #0]
 8023622:	4413      	add	r3, r2
 8023624:	f993 3000 	ldrsb.w	r3, [r3]
 8023628:	461a      	mov	r2, r3
 802362a:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 802362e:	1ad3      	subs	r3, r2, r3
 8023630:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
            if (diff >= diff_min)
 8023634:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8023638:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 802363c:	429a      	cmp	r2, r3
 802363e:	f2c1 8156 	blt.w	80248ee <arm_softmax_s8+0x307e>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 8023642:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8023646:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 802364a:	fb03 f202 	mul.w	r2, r3, r2
 802364e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8023652:	601a      	str	r2, [r3, #0]
 8023654:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8023658:	f507 730a 	add.w	r3, r7, #552	; 0x228
 802365c:	681b      	ldr	r3, [r3, #0]
 802365e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023660:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8023664:	2300      	movs	r3, #0
 8023666:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023668:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802366c:	f04f 0300 	mov.w	r3, #0
 8023670:	e9c7 238e 	strd	r2, r3, [r7, #568]	; 0x238
    if ((m1 < 0) ^ (m2 < 0))
 8023674:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8023678:	681b      	ldr	r3, [r3, #0]
 802367a:	0fdb      	lsrs	r3, r3, #31
 802367c:	b2da      	uxtb	r2, r3
 802367e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8023682:	681b      	ldr	r3, [r3, #0]
 8023684:	0fdb      	lsrs	r3, r3, #31
 8023686:	b2db      	uxtb	r3, r3
 8023688:	4053      	eors	r3, r2
 802368a:	b2db      	uxtb	r3, r3
 802368c:	2b00      	cmp	r3, #0
 802368e:	d010      	beq.n	80236b2 <arm_softmax_s8+0x1e42>
        mult = 1 - mult;
 8023690:	f04f 0001 	mov.w	r0, #1
 8023694:	f04f 0100 	mov.w	r1, #0
 8023698:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 802369c:	1a84      	subs	r4, r0, r2
 802369e:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 80236a2:	eb61 0303 	sbc.w	r3, r1, r3
 80236a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80236aa:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80236ae:	e9c7 348e 	strd	r3, r4, [r7, #568]	; 0x238
    mult = mult + (q63_t)m1 * m2;
 80236b2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80236b6:	681b      	ldr	r3, [r3, #0]
 80236b8:	4618      	mov	r0, r3
 80236ba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80236be:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80236c2:	681b      	ldr	r3, [r3, #0]
 80236c4:	461a      	mov	r2, r3
 80236c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80236ca:	fb02 f501 	mul.w	r5, r2, r1
 80236ce:	fb00 f403 	mul.w	r4, r0, r3
 80236d2:	442c      	add	r4, r5
 80236d4:	fba0 0102 	umull	r0, r1, r0, r2
 80236d8:	1863      	adds	r3, r4, r1
 80236da:	4619      	mov	r1, r3
 80236dc:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80236e0:	1814      	adds	r4, r2, r0
 80236e2:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 80236e6:	414b      	adcs	r3, r1
 80236e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80236ec:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80236f0:	e9c7 348e 	strd	r3, r4, [r7, #568]	; 0x238
    result = (int32_t)(mult / (1ll << 31));
 80236f4:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80236f8:	4610      	mov	r0, r2
 80236fa:	4619      	mov	r1, r3
 80236fc:	2800      	cmp	r0, #0
 80236fe:	f171 0300 	sbcs.w	r3, r1, #0
 8023702:	da06      	bge.n	8023712 <arm_softmax_s8+0x1ea2>
 8023704:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023708:	f04f 0300 	mov.w	r3, #0
 802370c:	1880      	adds	r0, r0, r2
 802370e:	eb43 0101 	adc.w	r1, r3, r1
 8023712:	f04f 0200 	mov.w	r2, #0
 8023716:	f04f 0300 	mov.w	r3, #0
 802371a:	0fc2      	lsrs	r2, r0, #31
 802371c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023720:	17cb      	asrs	r3, r1, #31
 8023722:	4610      	mov	r0, r2
 8023724:	4619      	mov	r1, r3
 8023726:	f507 7211 	add.w	r2, r7, #580	; 0x244
 802372a:	4603      	mov	r3, r0
 802372c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802372e:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8023732:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8023736:	6812      	ldr	r2, [r2, #0]
 8023738:	681b      	ldr	r3, [r3, #0]
 802373a:	429a      	cmp	r2, r3
 802373c:	d10a      	bne.n	8023754 <arm_softmax_s8+0x1ee4>
 802373e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8023742:	681b      	ldr	r3, [r3, #0]
 8023744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023748:	d104      	bne.n	8023754 <arm_softmax_s8+0x1ee4>
        result = NN_Q31_MAX;
 802374a:	f507 7211 	add.w	r2, r7, #580	; 0x244
 802374e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023752:	6013      	str	r3, [r2, #0]
    return result;
 8023754:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8023758:	681a      	ldr	r2, [r3, #0]
 802375a:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 802375e:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 8023760:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8023764:	2300      	movs	r3, #0
 8023766:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 8023768:	f507 7259 	add.w	r2, r7, #868	; 0x364
 802376c:	2318      	movs	r3, #24
 802376e:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8023770:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8023774:	2201      	movs	r2, #1
 8023776:	681b      	ldr	r3, [r3, #0]
 8023778:	fa02 f303 	lsl.w	r3, r2, r3
 802377c:	1e5a      	subs	r2, r3, #1
 802377e:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8023782:	681b      	ldr	r3, [r3, #0]
 8023784:	ea02 0103 	and.w	r1, r2, r3
 8023788:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802378c:	2201      	movs	r2, #1
 802378e:	681b      	ldr	r3, [r3, #0]
 8023790:	fa02 f303 	lsl.w	r3, r2, r3
 8023794:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8023798:	1acb      	subs	r3, r1, r3
 802379a:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 802379c:	f507 7157 	add.w	r1, r7, #860	; 0x35c
 80237a0:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80237a4:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80237a8:	6812      	ldr	r2, [r2, #0]
 80237aa:	681b      	ldr	r3, [r3, #0]
 80237ac:	1ad3      	subs	r3, r2, r3
 80237ae:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 80237b0:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80237b4:	681b      	ldr	r3, [r3, #0]
 80237b6:	015b      	lsls	r3, r3, #5
 80237b8:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80237bc:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80237c0:	6013      	str	r3, [r2, #0]
 80237c2:	f507 7255 	add.w	r2, r7, #852	; 0x354
 80237c6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80237ca:	681b      	ldr	r3, [r3, #0]
 80237cc:	6013      	str	r3, [r2, #0]
 80237ce:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80237d2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80237d6:	681b      	ldr	r3, [r3, #0]
 80237d8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80237da:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80237de:	2300      	movs	r3, #0
 80237e0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80237e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80237e6:	f04f 0300 	mov.w	r3, #0
 80237ea:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
    if ((m1 < 0) ^ (m2 < 0))
 80237ee:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80237f2:	681b      	ldr	r3, [r3, #0]
 80237f4:	0fdb      	lsrs	r3, r3, #31
 80237f6:	b2da      	uxtb	r2, r3
 80237f8:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80237fc:	681b      	ldr	r3, [r3, #0]
 80237fe:	0fdb      	lsrs	r3, r3, #31
 8023800:	b2db      	uxtb	r3, r3
 8023802:	4053      	eors	r3, r2
 8023804:	b2db      	uxtb	r3, r3
 8023806:	2b00      	cmp	r3, #0
 8023808:	d010      	beq.n	802382c <arm_softmax_s8+0x1fbc>
        mult = 1 - mult;
 802380a:	f04f 0001 	mov.w	r0, #1
 802380e:	f04f 0100 	mov.w	r1, #0
 8023812:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8023816:	1a84      	subs	r4, r0, r2
 8023818:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 802381c:	eb61 0303 	sbc.w	r3, r1, r3
 8023820:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8023824:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8023828:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    mult = mult + (q63_t)m1 * m2;
 802382c:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8023830:	681b      	ldr	r3, [r3, #0]
 8023832:	4618      	mov	r0, r3
 8023834:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023838:	f507 7354 	add.w	r3, r7, #848	; 0x350
 802383c:	681b      	ldr	r3, [r3, #0]
 802383e:	461a      	mov	r2, r3
 8023840:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023844:	fb02 f501 	mul.w	r5, r2, r1
 8023848:	fb00 f403 	mul.w	r4, r0, r3
 802384c:	442c      	add	r4, r5
 802384e:	fba0 0102 	umull	r0, r1, r0, r2
 8023852:	1863      	adds	r3, r4, r1
 8023854:	4619      	mov	r1, r3
 8023856:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 802385a:	1814      	adds	r4, r2, r0
 802385c:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8023860:	414b      	adcs	r3, r1
 8023862:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8023866:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 802386a:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    result = (int32_t)(mult / (1ll << 31));
 802386e:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8023872:	4610      	mov	r0, r2
 8023874:	4619      	mov	r1, r3
 8023876:	2800      	cmp	r0, #0
 8023878:	f171 0300 	sbcs.w	r3, r1, #0
 802387c:	da06      	bge.n	802388c <arm_softmax_s8+0x201c>
 802387e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023882:	f04f 0300 	mov.w	r3, #0
 8023886:	1880      	adds	r0, r0, r2
 8023888:	eb43 0101 	adc.w	r1, r3, r1
 802388c:	f04f 0200 	mov.w	r2, #0
 8023890:	f04f 0300 	mov.w	r3, #0
 8023894:	0fc2      	lsrs	r2, r0, #31
 8023896:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802389a:	17cb      	asrs	r3, r1, #31
 802389c:	4610      	mov	r0, r2
 802389e:	4619      	mov	r1, r3
 80238a0:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80238a4:	4603      	mov	r3, r0
 80238a6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80238a8:	f507 7255 	add.w	r2, r7, #852	; 0x354
 80238ac:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80238b0:	6812      	ldr	r2, [r2, #0]
 80238b2:	681b      	ldr	r3, [r3, #0]
 80238b4:	429a      	cmp	r2, r3
 80238b6:	d10a      	bne.n	80238ce <arm_softmax_s8+0x205e>
 80238b8:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80238bc:	681b      	ldr	r3, [r3, #0]
 80238be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80238c2:	d104      	bne.n	80238ce <arm_softmax_s8+0x205e>
        result = NN_Q31_MAX;
 80238c4:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80238c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80238cc:	6013      	str	r3, [r2, #0]
    return result;
 80238ce:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80238d2:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 80238d4:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80238d8:	601a      	str	r2, [r3, #0]
 80238da:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80238de:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80238e2:	681b      	ldr	r3, [r3, #0]
 80238e4:	6013      	str	r3, [r2, #0]
 80238e6:	f507 724d 	add.w	r2, r7, #820	; 0x334
 80238ea:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80238ee:	681b      	ldr	r3, [r3, #0]
 80238f0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80238f2:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80238f6:	2300      	movs	r3, #0
 80238f8:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80238fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80238fe:	f04f 0300 	mov.w	r3, #0
 8023902:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    if ((m1 < 0) ^ (m2 < 0))
 8023906:	f507 734e 	add.w	r3, r7, #824	; 0x338
 802390a:	681b      	ldr	r3, [r3, #0]
 802390c:	0fdb      	lsrs	r3, r3, #31
 802390e:	b2da      	uxtb	r2, r3
 8023910:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8023914:	681b      	ldr	r3, [r3, #0]
 8023916:	0fdb      	lsrs	r3, r3, #31
 8023918:	b2db      	uxtb	r3, r3
 802391a:	4053      	eors	r3, r2
 802391c:	b2db      	uxtb	r3, r3
 802391e:	2b00      	cmp	r3, #0
 8023920:	d010      	beq.n	8023944 <arm_softmax_s8+0x20d4>
        mult = 1 - mult;
 8023922:	f04f 0001 	mov.w	r0, #1
 8023926:	f04f 0100 	mov.w	r1, #0
 802392a:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 802392e:	1a84      	subs	r4, r0, r2
 8023930:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8023934:	eb61 0303 	sbc.w	r3, r1, r3
 8023938:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802393c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8023940:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    mult = mult + (q63_t)m1 * m2;
 8023944:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8023948:	681b      	ldr	r3, [r3, #0]
 802394a:	4618      	mov	r0, r3
 802394c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023950:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8023954:	681b      	ldr	r3, [r3, #0]
 8023956:	461a      	mov	r2, r3
 8023958:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802395c:	fb02 f501 	mul.w	r5, r2, r1
 8023960:	fb00 f403 	mul.w	r4, r0, r3
 8023964:	442c      	add	r4, r5
 8023966:	fba0 0102 	umull	r0, r1, r0, r2
 802396a:	1863      	adds	r3, r4, r1
 802396c:	4619      	mov	r1, r3
 802396e:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8023972:	1814      	adds	r4, r2, r0
 8023974:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8023978:	414b      	adcs	r3, r1
 802397a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802397e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8023982:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    result = (int32_t)(mult / (1ll << 31));
 8023986:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 802398a:	4610      	mov	r0, r2
 802398c:	4619      	mov	r1, r3
 802398e:	2800      	cmp	r0, #0
 8023990:	f171 0300 	sbcs.w	r3, r1, #0
 8023994:	da06      	bge.n	80239a4 <arm_softmax_s8+0x2134>
 8023996:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802399a:	f04f 0300 	mov.w	r3, #0
 802399e:	1880      	adds	r0, r0, r2
 80239a0:	eb43 0101 	adc.w	r1, r3, r1
 80239a4:	f04f 0200 	mov.w	r2, #0
 80239a8:	f04f 0300 	mov.w	r3, #0
 80239ac:	0fc2      	lsrs	r2, r0, #31
 80239ae:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80239b2:	17cb      	asrs	r3, r1, #31
 80239b4:	4610      	mov	r0, r2
 80239b6:	4619      	mov	r1, r3
 80239b8:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80239bc:	4603      	mov	r3, r0
 80239be:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80239c0:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80239c4:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80239c8:	6812      	ldr	r2, [r2, #0]
 80239ca:	681b      	ldr	r3, [r3, #0]
 80239cc:	429a      	cmp	r2, r3
 80239ce:	d10a      	bne.n	80239e6 <arm_softmax_s8+0x2176>
 80239d0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80239d4:	681b      	ldr	r3, [r3, #0]
 80239d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80239da:	d104      	bne.n	80239e6 <arm_softmax_s8+0x2176>
        result = NN_Q31_MAX;
 80239dc:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80239e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80239e4:	6013      	str	r3, [r2, #0]
    return result;
 80239e6:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80239ea:	681a      	ldr	r2, [r3, #0]
 80239ec:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80239f0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80239f2:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80239f6:	2300      	movs	r3, #0
 80239f8:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80239fa:	2304      	movs	r3, #4
 80239fc:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8023a00:	3b01      	subs	r3, #1
 8023a02:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8023a04:	f507 7146 	add.w	r1, r7, #792	; 0x318
 8023a08:	f507 7249 	add.w	r2, r7, #804	; 0x324
 8023a0c:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8023a10:	6812      	ldr	r2, [r2, #0]
 8023a12:	681b      	ldr	r3, [r3, #0]
 8023a14:	4013      	ands	r3, r2
 8023a16:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8023a18:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8023a1c:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8023a20:	681b      	ldr	r3, [r3, #0]
 8023a22:	109b      	asrs	r3, r3, #2
 8023a24:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8023a26:	f507 7245 	add.w	r2, r7, #788	; 0x314
 8023a2a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8023a2e:	681b      	ldr	r3, [r3, #0]
 8023a30:	105b      	asrs	r3, r3, #1
 8023a32:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8023a34:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8023a38:	681b      	ldr	r3, [r3, #0]
 8023a3a:	2b00      	cmp	r3, #0
 8023a3c:	da06      	bge.n	8023a4c <arm_softmax_s8+0x21dc>
        threshold++;
 8023a3e:	f507 7245 	add.w	r2, r7, #788	; 0x314
 8023a42:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8023a46:	681b      	ldr	r3, [r3, #0]
 8023a48:	3301      	adds	r3, #1
 8023a4a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8023a4c:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8023a50:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8023a54:	6812      	ldr	r2, [r2, #0]
 8023a56:	681b      	ldr	r3, [r3, #0]
 8023a58:	429a      	cmp	r2, r3
 8023a5a:	dd06      	ble.n	8023a6a <arm_softmax_s8+0x21fa>
        result++;
 8023a5c:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8023a60:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8023a64:	681b      	ldr	r3, [r3, #0]
 8023a66:	3301      	adds	r3, #1
 8023a68:	6013      	str	r3, [r2, #0]
    return result;
 8023a6a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8023a6e:	681e      	ldr	r6, [r3, #0]
 8023a70:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8023a74:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8023a78:	681b      	ldr	r3, [r3, #0]
 8023a7a:	6013      	str	r3, [r2, #0]
 8023a7c:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 8023a80:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8023a84:	681b      	ldr	r3, [r3, #0]
 8023a86:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023a88:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8023a8c:	2300      	movs	r3, #0
 8023a8e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023a90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023a94:	f04f 0300 	mov.w	r3, #0
 8023a98:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
    if ((m1 < 0) ^ (m2 < 0))
 8023a9c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8023aa0:	681b      	ldr	r3, [r3, #0]
 8023aa2:	0fdb      	lsrs	r3, r3, #31
 8023aa4:	b2da      	uxtb	r2, r3
 8023aa6:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8023aaa:	681b      	ldr	r3, [r3, #0]
 8023aac:	0fdb      	lsrs	r3, r3, #31
 8023aae:	b2db      	uxtb	r3, r3
 8023ab0:	4053      	eors	r3, r2
 8023ab2:	b2db      	uxtb	r3, r3
 8023ab4:	2b00      	cmp	r3, #0
 8023ab6:	d010      	beq.n	8023ada <arm_softmax_s8+0x226a>
        mult = 1 - mult;
 8023ab8:	f04f 0001 	mov.w	r0, #1
 8023abc:	f04f 0100 	mov.w	r1, #0
 8023ac0:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8023ac4:	1a84      	subs	r4, r0, r2
 8023ac6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8023aca:	eb61 0303 	sbc.w	r3, r1, r3
 8023ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023ad2:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8023ad6:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    mult = mult + (q63_t)m1 * m2;
 8023ada:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8023ade:	681b      	ldr	r3, [r3, #0]
 8023ae0:	4618      	mov	r0, r3
 8023ae2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023ae6:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8023aea:	681b      	ldr	r3, [r3, #0]
 8023aec:	461a      	mov	r2, r3
 8023aee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023af2:	fb02 f501 	mul.w	r5, r2, r1
 8023af6:	fb00 f403 	mul.w	r4, r0, r3
 8023afa:	442c      	add	r4, r5
 8023afc:	fba0 0102 	umull	r0, r1, r0, r2
 8023b00:	1863      	adds	r3, r4, r1
 8023b02:	4619      	mov	r1, r3
 8023b04:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8023b08:	1814      	adds	r4, r2, r0
 8023b0a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8023b0e:	414b      	adcs	r3, r1
 8023b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8023b14:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8023b18:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    result = (int32_t)(mult / (1ll << 31));
 8023b1c:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8023b20:	4610      	mov	r0, r2
 8023b22:	4619      	mov	r1, r3
 8023b24:	2800      	cmp	r0, #0
 8023b26:	f171 0300 	sbcs.w	r3, r1, #0
 8023b2a:	da06      	bge.n	8023b3a <arm_softmax_s8+0x22ca>
 8023b2c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023b30:	f04f 0300 	mov.w	r3, #0
 8023b34:	1880      	adds	r0, r0, r2
 8023b36:	eb43 0101 	adc.w	r1, r3, r1
 8023b3a:	f04f 0200 	mov.w	r2, #0
 8023b3e:	f04f 0300 	mov.w	r3, #0
 8023b42:	0fc2      	lsrs	r2, r0, #31
 8023b44:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023b48:	17cb      	asrs	r3, r1, #31
 8023b4a:	4610      	mov	r0, r2
 8023b4c:	4619      	mov	r1, r3
 8023b4e:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8023b52:	4603      	mov	r3, r0
 8023b54:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8023b56:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8023b5a:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8023b5e:	6812      	ldr	r2, [r2, #0]
 8023b60:	681b      	ldr	r3, [r3, #0]
 8023b62:	429a      	cmp	r2, r3
 8023b64:	d10a      	bne.n	8023b7c <arm_softmax_s8+0x230c>
 8023b66:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8023b6a:	681b      	ldr	r3, [r3, #0]
 8023b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023b70:	d104      	bne.n	8023b7c <arm_softmax_s8+0x230c>
        result = NN_Q31_MAX;
 8023b72:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8023b76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023b7a:	6013      	str	r3, [r2, #0]
    return result;
 8023b7c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8023b80:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023b82:	18f2      	adds	r2, r6, r3
 8023b84:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023b88:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023b8a:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8023b8e:	2300      	movs	r3, #0
 8023b90:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023b92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023b96:	f04f 0300 	mov.w	r3, #0
 8023b9a:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
    if ((m1 < 0) ^ (m2 < 0))
 8023b9e:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023ba2:	681b      	ldr	r3, [r3, #0]
 8023ba4:	0fdb      	lsrs	r3, r3, #31
 8023ba6:	b2da      	uxtb	r2, r3
 8023ba8:	2300      	movs	r3, #0
 8023baa:	4053      	eors	r3, r2
 8023bac:	b2db      	uxtb	r3, r3
 8023bae:	2b00      	cmp	r3, #0
 8023bb0:	d010      	beq.n	8023bd4 <arm_softmax_s8+0x2364>
        mult = 1 - mult;
 8023bb2:	f04f 0001 	mov.w	r0, #1
 8023bb6:	f04f 0100 	mov.w	r1, #0
 8023bba:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8023bbe:	1a84      	subs	r4, r0, r2
 8023bc0:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8023bc4:	eb61 0303 	sbc.w	r3, r1, r3
 8023bc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8023bcc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8023bd0:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    mult = mult + (q63_t)m1 * m2;
 8023bd4:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023bd8:	681b      	ldr	r3, [r3, #0]
 8023bda:	4618      	mov	r0, r3
 8023bdc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023be0:	a3de      	add	r3, pc, #888	; (adr r3, 8023f5c <arm_softmax_s8+0x26ec>)
 8023be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023be6:	fb02 f501 	mul.w	r5, r2, r1
 8023bea:	fb00 f403 	mul.w	r4, r0, r3
 8023bee:	442c      	add	r4, r5
 8023bf0:	fba0 0102 	umull	r0, r1, r0, r2
 8023bf4:	1863      	adds	r3, r4, r1
 8023bf6:	4619      	mov	r1, r3
 8023bf8:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8023bfc:	1814      	adds	r4, r2, r0
 8023bfe:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8023c02:	414b      	adcs	r3, r1
 8023c04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8023c08:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8023c0c:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    result = (int32_t)(mult / (1ll << 31));
 8023c10:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8023c14:	4610      	mov	r0, r2
 8023c16:	4619      	mov	r1, r3
 8023c18:	2800      	cmp	r0, #0
 8023c1a:	f171 0300 	sbcs.w	r3, r1, #0
 8023c1e:	da06      	bge.n	8023c2e <arm_softmax_s8+0x23be>
 8023c20:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023c24:	f04f 0300 	mov.w	r3, #0
 8023c28:	1880      	adds	r0, r0, r2
 8023c2a:	eb43 0101 	adc.w	r1, r3, r1
 8023c2e:	f04f 0200 	mov.w	r2, #0
 8023c32:	f04f 0300 	mov.w	r3, #0
 8023c36:	0fc2      	lsrs	r2, r0, #31
 8023c38:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023c3c:	17cb      	asrs	r3, r1, #31
 8023c3e:	4610      	mov	r0, r2
 8023c40:	4619      	mov	r1, r3
 8023c42:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8023c46:	4603      	mov	r3, r0
 8023c48:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8023c4a:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023c4e:	681a      	ldr	r2, [r3, #0]
 8023c50:	4bbf      	ldr	r3, [pc, #764]	; (8023f50 <arm_softmax_s8+0x26e0>)
 8023c52:	429a      	cmp	r2, r3
 8023c54:	d10a      	bne.n	8023c6c <arm_softmax_s8+0x23fc>
 8023c56:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8023c5a:	681b      	ldr	r3, [r3, #0]
 8023c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023c60:	d104      	bne.n	8023c6c <arm_softmax_s8+0x23fc>
        result = NN_Q31_MAX;
 8023c62:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8023c66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023c6a:	6013      	str	r3, [r2, #0]
    return result;
 8023c6c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8023c70:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023c72:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8023c76:	681b      	ldr	r3, [r3, #0]
 8023c78:	441a      	add	r2, r3
 8023c7a:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8023c7e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023c80:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8023c84:	2300      	movs	r3, #0
 8023c86:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8023c88:	2302      	movs	r3, #2
 8023c8a:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 8023c8e:	3b01      	subs	r3, #1
 8023c90:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8023c92:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8023c96:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8023c9a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8023c9e:	6812      	ldr	r2, [r2, #0]
 8023ca0:	681b      	ldr	r3, [r3, #0]
 8023ca2:	4013      	ands	r3, r2
 8023ca4:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8023ca6:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8023caa:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8023cae:	681b      	ldr	r3, [r3, #0]
 8023cb0:	105b      	asrs	r3, r3, #1
 8023cb2:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8023cb4:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8023cb8:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8023cbc:	681b      	ldr	r3, [r3, #0]
 8023cbe:	105b      	asrs	r3, r3, #1
 8023cc0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8023cc2:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8023cc6:	681b      	ldr	r3, [r3, #0]
 8023cc8:	2b00      	cmp	r3, #0
 8023cca:	da06      	bge.n	8023cda <arm_softmax_s8+0x246a>
        threshold++;
 8023ccc:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8023cd0:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8023cd4:	681b      	ldr	r3, [r3, #0]
 8023cd6:	3301      	adds	r3, #1
 8023cd8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8023cda:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8023cde:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8023ce2:	6812      	ldr	r2, [r2, #0]
 8023ce4:	681b      	ldr	r3, [r3, #0]
 8023ce6:	429a      	cmp	r2, r3
 8023ce8:	dd06      	ble.n	8023cf8 <arm_softmax_s8+0x2488>
        result++;
 8023cea:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8023cee:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8023cf2:	681b      	ldr	r3, [r3, #0]
 8023cf4:	3301      	adds	r3, #1
 8023cf6:	6013      	str	r3, [r2, #0]
    return result;
 8023cf8:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8023cfc:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023cfe:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8023d02:	681b      	ldr	r3, [r3, #0]
 8023d04:	441a      	add	r2, r3
 8023d06:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8023d0a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023d0c:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8023d10:	2300      	movs	r3, #0
 8023d12:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023d14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023d18:	f04f 0300 	mov.w	r3, #0
 8023d1c:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
    if ((m1 < 0) ^ (m2 < 0))
 8023d20:	2200      	movs	r2, #0
 8023d22:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8023d26:	681b      	ldr	r3, [r3, #0]
 8023d28:	0fdb      	lsrs	r3, r3, #31
 8023d2a:	b2db      	uxtb	r3, r3
 8023d2c:	4053      	eors	r3, r2
 8023d2e:	b2db      	uxtb	r3, r3
 8023d30:	2b00      	cmp	r3, #0
 8023d32:	d010      	beq.n	8023d56 <arm_softmax_s8+0x24e6>
        mult = 1 - mult;
 8023d34:	f04f 0001 	mov.w	r0, #1
 8023d38:	f04f 0100 	mov.w	r1, #0
 8023d3c:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8023d40:	1a84      	subs	r4, r0, r2
 8023d42:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8023d46:	eb61 0303 	sbc.w	r3, r1, r3
 8023d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8023d4e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8023d52:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
    mult = mult + (q63_t)m1 * m2;
 8023d56:	a57a      	add	r5, pc, #488	; (adr r5, 8023f40 <arm_softmax_s8+0x26d0>)
 8023d58:	e9d5 4500 	ldrd	r4, r5, [r5]
 8023d5c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8023d60:	681b      	ldr	r3, [r3, #0]
 8023d62:	461a      	mov	r2, r3
 8023d64:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023d68:	fb02 f005 	mul.w	r0, r2, r5
 8023d6c:	fb04 f103 	mul.w	r1, r4, r3
 8023d70:	1846      	adds	r6, r0, r1
 8023d72:	fba4 0102 	umull	r0, r1, r4, r2
 8023d76:	1873      	adds	r3, r6, r1
 8023d78:	4619      	mov	r1, r3
 8023d7a:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8023d7e:	1814      	adds	r4, r2, r0
 8023d80:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8023d84:	414b      	adcs	r3, r1
 8023d86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8023d8a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8023d8e:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
    result = (int32_t)(mult / (1ll << 31));
 8023d92:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8023d96:	4610      	mov	r0, r2
 8023d98:	4619      	mov	r1, r3
 8023d9a:	2800      	cmp	r0, #0
 8023d9c:	f171 0300 	sbcs.w	r3, r1, #0
 8023da0:	da06      	bge.n	8023db0 <arm_softmax_s8+0x2540>
 8023da2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023da6:	f04f 0300 	mov.w	r3, #0
 8023daa:	1880      	adds	r0, r0, r2
 8023dac:	eb43 0101 	adc.w	r1, r3, r1
 8023db0:	f04f 0200 	mov.w	r2, #0
 8023db4:	f04f 0300 	mov.w	r3, #0
 8023db8:	0fc2      	lsrs	r2, r0, #31
 8023dba:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023dbe:	17cb      	asrs	r3, r1, #31
 8023dc0:	4610      	mov	r0, r2
 8023dc2:	4619      	mov	r1, r3
 8023dc4:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8023dc8:	4603      	mov	r3, r0
 8023dca:	6013      	str	r3, [r2, #0]
    return result;
 8023dcc:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8023dd0:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 8023dd2:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8023dd6:	4b5f      	ldr	r3, [pc, #380]	; (8023f54 <arm_softmax_s8+0x26e4>)
 8023dd8:	440b      	add	r3, r1
 8023dda:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8023ddc:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8023de0:	6819      	ldr	r1, [r3, #0]
 8023de2:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8023de6:	1c4b      	adds	r3, r1, #1
 8023de8:	6013      	str	r3, [r2, #0]
 8023dea:	2301      	movs	r3, #1
 8023dec:	fa03 f201 	lsl.w	r2, r3, r1
 8023df0:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8023df4:	681b      	ldr	r3, [r3, #0]
 8023df6:	4013      	ands	r3, r2
 8023df8:	2b00      	cmp	r3, #0
 8023dfa:	d002      	beq.n	8023e02 <arm_softmax_s8+0x2592>
 8023dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023e00:	e000      	b.n	8023e04 <arm_softmax_s8+0x2594>
 8023e02:	2200      	movs	r2, #0
 8023e04:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8023e08:	601a      	str	r2, [r3, #0]
 8023e0a:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8023e0e:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8023e12:	681b      	ldr	r3, [r3, #0]
 8023e14:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023e16:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8023e1a:	2300      	movs	r3, #0
 8023e1c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023e1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023e22:	f04f 0300 	mov.w	r3, #0
 8023e26:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    if ((m1 < 0) ^ (m2 < 0))
 8023e2a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8023e2e:	681b      	ldr	r3, [r3, #0]
 8023e30:	0fdb      	lsrs	r3, r3, #31
 8023e32:	b2da      	uxtb	r2, r3
 8023e34:	2300      	movs	r3, #0
 8023e36:	4053      	eors	r3, r2
 8023e38:	b2db      	uxtb	r3, r3
 8023e3a:	2b00      	cmp	r3, #0
 8023e3c:	d00e      	beq.n	8023e5c <arm_softmax_s8+0x25ec>
        mult = 1 - mult;
 8023e3e:	f04f 0001 	mov.w	r0, #1
 8023e42:	f04f 0100 	mov.w	r1, #0
 8023e46:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8023e4a:	1a84      	subs	r4, r0, r2
 8023e4c:	67bc      	str	r4, [r7, #120]	; 0x78
 8023e4e:	eb61 0303 	sbc.w	r3, r1, r3
 8023e52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8023e54:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8023e58:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0
    mult = mult + (q63_t)m1 * m2;
 8023e5c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8023e60:	681b      	ldr	r3, [r3, #0]
 8023e62:	4618      	mov	r0, r3
 8023e64:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023e68:	a337      	add	r3, pc, #220	; (adr r3, 8023f48 <arm_softmax_s8+0x26d8>)
 8023e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e6e:	fb02 f501 	mul.w	r5, r2, r1
 8023e72:	fb00 f403 	mul.w	r4, r0, r3
 8023e76:	442c      	add	r4, r5
 8023e78:	fba0 0102 	umull	r0, r1, r0, r2
 8023e7c:	1863      	adds	r3, r4, r1
 8023e7e:	4619      	mov	r1, r3
 8023e80:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8023e84:	1814      	adds	r4, r2, r0
 8023e86:	673c      	str	r4, [r7, #112]	; 0x70
 8023e88:	414b      	adcs	r3, r1
 8023e8a:	677b      	str	r3, [r7, #116]	; 0x74
 8023e8c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8023e90:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0
    result = (int32_t)(mult / (1ll << 31));
 8023e94:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8023e98:	4610      	mov	r0, r2
 8023e9a:	4619      	mov	r1, r3
 8023e9c:	2800      	cmp	r0, #0
 8023e9e:	f171 0300 	sbcs.w	r3, r1, #0
 8023ea2:	da06      	bge.n	8023eb2 <arm_softmax_s8+0x2642>
 8023ea4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023ea8:	f04f 0300 	mov.w	r3, #0
 8023eac:	1880      	adds	r0, r0, r2
 8023eae:	eb43 0101 	adc.w	r1, r3, r1
 8023eb2:	f04f 0200 	mov.w	r2, #0
 8023eb6:	f04f 0300 	mov.w	r3, #0
 8023eba:	0fc2      	lsrs	r2, r0, #31
 8023ebc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023ec0:	17cb      	asrs	r3, r1, #31
 8023ec2:	4610      	mov	r0, r2
 8023ec4:	4619      	mov	r1, r3
 8023ec6:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8023eca:	4603      	mov	r3, r0
 8023ecc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8023ece:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8023ed2:	681a      	ldr	r2, [r3, #0]
 8023ed4:	4b20      	ldr	r3, [pc, #128]	; (8023f58 <arm_softmax_s8+0x26e8>)
 8023ed6:	429a      	cmp	r2, r3
 8023ed8:	d10a      	bne.n	8023ef0 <arm_softmax_s8+0x2680>
 8023eda:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8023ede:	681b      	ldr	r3, [r3, #0]
 8023ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023ee4:	d104      	bne.n	8023ef0 <arm_softmax_s8+0x2680>
        result = NN_Q31_MAX;
 8023ee6:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8023eea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023eee:	6013      	str	r3, [r2, #0]
    return result;
 8023ef0:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8023ef4:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8023ef6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8023efa:	681b      	ldr	r3, [r3, #0]
 8023efc:	ea02 0103 	and.w	r1, r2, r3
 8023f00:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8023f04:	681b      	ldr	r3, [r3, #0]
 8023f06:	43da      	mvns	r2, r3
 8023f08:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8023f0c:	681b      	ldr	r3, [r3, #0]
 8023f0e:	4013      	ands	r3, r2
 8023f10:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8023f14:	404b      	eors	r3, r1
 8023f16:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8023f18:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8023f1c:	6819      	ldr	r1, [r3, #0]
 8023f1e:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8023f22:	1c4b      	adds	r3, r1, #1
 8023f24:	6013      	str	r3, [r2, #0]
 8023f26:	2301      	movs	r3, #1
 8023f28:	fa03 f201 	lsl.w	r2, r3, r1
 8023f2c:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8023f30:	681b      	ldr	r3, [r3, #0]
 8023f32:	4013      	ands	r3, r2
 8023f34:	2b00      	cmp	r3, #0
 8023f36:	d015      	beq.n	8023f64 <arm_softmax_s8+0x26f4>
 8023f38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023f3c:	e013      	b.n	8023f66 <arm_softmax_s8+0x26f6>
 8023f3e:	bf00      	nop
 8023f40:	70f5a894 	.word	0x70f5a894
 8023f44:	00000000 	.word	0x00000000
 8023f48:	63afbe7b 	.word	0x63afbe7b
 8023f4c:	00000000 	.word	0x00000000
 8023f50:	2aaaaaab 	.word	0x2aaaaaab
 8023f54:	70f5a894 	.word	0x70f5a894
 8023f58:	63afbe7b 	.word	0x63afbe7b
 8023f5c:	2aaaaaab 	.word	0x2aaaaaab
 8023f60:	00000000 	.word	0x00000000
 8023f64:	2200      	movs	r2, #0
 8023f66:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8023f6a:	601a      	str	r2, [r3, #0]
 8023f6c:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8023f70:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8023f74:	681b      	ldr	r3, [r3, #0]
 8023f76:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023f78:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8023f7c:	2300      	movs	r3, #0
 8023f7e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023f80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023f84:	f04f 0300 	mov.w	r3, #0
 8023f88:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
    if ((m1 < 0) ^ (m2 < 0))
 8023f8c:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8023f90:	681b      	ldr	r3, [r3, #0]
 8023f92:	0fdb      	lsrs	r3, r3, #31
 8023f94:	b2da      	uxtb	r2, r3
 8023f96:	2300      	movs	r3, #0
 8023f98:	4053      	eors	r3, r2
 8023f9a:	b2db      	uxtb	r3, r3
 8023f9c:	2b00      	cmp	r3, #0
 8023f9e:	d00e      	beq.n	8023fbe <arm_softmax_s8+0x274e>
        mult = 1 - mult;
 8023fa0:	f04f 0001 	mov.w	r0, #1
 8023fa4:	f04f 0100 	mov.w	r1, #0
 8023fa8:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8023fac:	1a84      	subs	r4, r0, r2
 8023fae:	66bc      	str	r4, [r7, #104]	; 0x68
 8023fb0:	eb61 0303 	sbc.w	r3, r1, r3
 8023fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8023fb6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8023fba:	e9c7 34a8 	strd	r3, r4, [r7, #672]	; 0x2a0
    mult = mult + (q63_t)m1 * m2;
 8023fbe:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8023fc2:	681b      	ldr	r3, [r3, #0]
 8023fc4:	4618      	mov	r0, r3
 8023fc6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023fca:	a3da      	add	r3, pc, #872	; (adr r3, 8024334 <arm_softmax_s8+0x2ac4>)
 8023fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fd0:	fb02 f501 	mul.w	r5, r2, r1
 8023fd4:	fb00 f403 	mul.w	r4, r0, r3
 8023fd8:	442c      	add	r4, r5
 8023fda:	fba0 0102 	umull	r0, r1, r0, r2
 8023fde:	1863      	adds	r3, r4, r1
 8023fe0:	4619      	mov	r1, r3
 8023fe2:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8023fe6:	1814      	adds	r4, r2, r0
 8023fe8:	663c      	str	r4, [r7, #96]	; 0x60
 8023fea:	414b      	adcs	r3, r1
 8023fec:	667b      	str	r3, [r7, #100]	; 0x64
 8023fee:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8023ff2:	e9c7 34a8 	strd	r3, r4, [r7, #672]	; 0x2a0
    result = (int32_t)(mult / (1ll << 31));
 8023ff6:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8023ffa:	4610      	mov	r0, r2
 8023ffc:	4619      	mov	r1, r3
 8023ffe:	2800      	cmp	r0, #0
 8024000:	f171 0300 	sbcs.w	r3, r1, #0
 8024004:	da06      	bge.n	8024014 <arm_softmax_s8+0x27a4>
 8024006:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802400a:	f04f 0300 	mov.w	r3, #0
 802400e:	1880      	adds	r0, r0, r2
 8024010:	eb43 0101 	adc.w	r1, r3, r1
 8024014:	f04f 0200 	mov.w	r2, #0
 8024018:	f04f 0300 	mov.w	r3, #0
 802401c:	0fc2      	lsrs	r2, r0, #31
 802401e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024022:	17cb      	asrs	r3, r1, #31
 8024024:	4610      	mov	r0, r2
 8024026:	4619      	mov	r1, r3
 8024028:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802402c:	4603      	mov	r3, r0
 802402e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8024030:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8024034:	681a      	ldr	r2, [r3, #0]
 8024036:	4bbc      	ldr	r3, [pc, #752]	; (8024328 <arm_softmax_s8+0x2ab8>)
 8024038:	429a      	cmp	r2, r3
 802403a:	d10a      	bne.n	8024052 <arm_softmax_s8+0x27e2>
 802403c:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8024040:	681b      	ldr	r3, [r3, #0]
 8024042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024046:	d104      	bne.n	8024052 <arm_softmax_s8+0x27e2>
        result = NN_Q31_MAX;
 8024048:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802404c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024050:	6013      	str	r3, [r2, #0]
    return result;
 8024052:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024056:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8024058:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802405c:	681b      	ldr	r3, [r3, #0]
 802405e:	ea02 0103 	and.w	r1, r2, r3
 8024062:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024066:	681b      	ldr	r3, [r3, #0]
 8024068:	43da      	mvns	r2, r3
 802406a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802406e:	681b      	ldr	r3, [r3, #0]
 8024070:	4013      	ands	r3, r2
 8024072:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8024076:	404b      	eors	r3, r1
 8024078:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 802407a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802407e:	6819      	ldr	r1, [r3, #0]
 8024080:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024084:	1c4b      	adds	r3, r1, #1
 8024086:	6013      	str	r3, [r2, #0]
 8024088:	2301      	movs	r3, #1
 802408a:	fa03 f201 	lsl.w	r2, r3, r1
 802408e:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8024092:	681b      	ldr	r3, [r3, #0]
 8024094:	4013      	ands	r3, r2
 8024096:	2b00      	cmp	r3, #0
 8024098:	d002      	beq.n	80240a0 <arm_softmax_s8+0x2830>
 802409a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802409e:	e000      	b.n	80240a2 <arm_softmax_s8+0x2832>
 80240a0:	2200      	movs	r2, #0
 80240a2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80240a6:	601a      	str	r2, [r3, #0]
 80240a8:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 80240ac:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80240b0:	681b      	ldr	r3, [r3, #0]
 80240b2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80240b4:	f507 7226 	add.w	r2, r7, #664	; 0x298
 80240b8:	2300      	movs	r3, #0
 80240ba:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80240bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80240c0:	f04f 0300 	mov.w	r3, #0
 80240c4:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
    if ((m1 < 0) ^ (m2 < 0))
 80240c8:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80240cc:	681b      	ldr	r3, [r3, #0]
 80240ce:	0fdb      	lsrs	r3, r3, #31
 80240d0:	b2da      	uxtb	r2, r3
 80240d2:	2300      	movs	r3, #0
 80240d4:	4053      	eors	r3, r2
 80240d6:	b2db      	uxtb	r3, r3
 80240d8:	2b00      	cmp	r3, #0
 80240da:	d00e      	beq.n	80240fa <arm_softmax_s8+0x288a>
        mult = 1 - mult;
 80240dc:	f04f 0001 	mov.w	r0, #1
 80240e0:	f04f 0100 	mov.w	r1, #0
 80240e4:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 80240e8:	1a84      	subs	r4, r0, r2
 80240ea:	65bc      	str	r4, [r7, #88]	; 0x58
 80240ec:	eb61 0303 	sbc.w	r3, r1, r3
 80240f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80240f2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80240f6:	e9c7 34a4 	strd	r3, r4, [r7, #656]	; 0x290
    mult = mult + (q63_t)m1 * m2;
 80240fa:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80240fe:	681b      	ldr	r3, [r3, #0]
 8024100:	4618      	mov	r0, r3
 8024102:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024106:	a384      	add	r3, pc, #528	; (adr r3, 8024318 <arm_softmax_s8+0x2aa8>)
 8024108:	e9d3 2300 	ldrd	r2, r3, [r3]
 802410c:	fb02 f501 	mul.w	r5, r2, r1
 8024110:	fb00 f403 	mul.w	r4, r0, r3
 8024114:	442c      	add	r4, r5
 8024116:	fba0 0102 	umull	r0, r1, r0, r2
 802411a:	1863      	adds	r3, r4, r1
 802411c:	4619      	mov	r1, r3
 802411e:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8024122:	1814      	adds	r4, r2, r0
 8024124:	653c      	str	r4, [r7, #80]	; 0x50
 8024126:	414b      	adcs	r3, r1
 8024128:	657b      	str	r3, [r7, #84]	; 0x54
 802412a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 802412e:	e9c7 34a4 	strd	r3, r4, [r7, #656]	; 0x290
    result = (int32_t)(mult / (1ll << 31));
 8024132:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8024136:	4610      	mov	r0, r2
 8024138:	4619      	mov	r1, r3
 802413a:	2800      	cmp	r0, #0
 802413c:	f171 0300 	sbcs.w	r3, r1, #0
 8024140:	da06      	bge.n	8024150 <arm_softmax_s8+0x28e0>
 8024142:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024146:	f04f 0300 	mov.w	r3, #0
 802414a:	1880      	adds	r0, r0, r2
 802414c:	eb43 0101 	adc.w	r1, r3, r1
 8024150:	f04f 0200 	mov.w	r2, #0
 8024154:	f04f 0300 	mov.w	r3, #0
 8024158:	0fc2      	lsrs	r2, r0, #31
 802415a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802415e:	17cb      	asrs	r3, r1, #31
 8024160:	4610      	mov	r0, r2
 8024162:	4619      	mov	r1, r3
 8024164:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8024168:	4603      	mov	r3, r0
 802416a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802416c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8024170:	681a      	ldr	r2, [r3, #0]
 8024172:	4b6e      	ldr	r3, [pc, #440]	; (802432c <arm_softmax_s8+0x2abc>)
 8024174:	429a      	cmp	r2, r3
 8024176:	d10a      	bne.n	802418e <arm_softmax_s8+0x291e>
 8024178:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 802417c:	681b      	ldr	r3, [r3, #0]
 802417e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024182:	d104      	bne.n	802418e <arm_softmax_s8+0x291e>
        result = NN_Q31_MAX;
 8024184:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8024188:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802418c:	6013      	str	r3, [r2, #0]
    return result;
 802418e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8024192:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8024194:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024198:	681b      	ldr	r3, [r3, #0]
 802419a:	ea02 0103 	and.w	r1, r2, r3
 802419e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80241a2:	681b      	ldr	r3, [r3, #0]
 80241a4:	43da      	mvns	r2, r3
 80241a6:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80241aa:	681b      	ldr	r3, [r3, #0]
 80241ac:	4013      	ands	r3, r2
 80241ae:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80241b2:	404b      	eors	r3, r1
 80241b4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 80241b6:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80241ba:	6819      	ldr	r1, [r3, #0]
 80241bc:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80241c0:	1c4b      	adds	r3, r1, #1
 80241c2:	6013      	str	r3, [r2, #0]
 80241c4:	2301      	movs	r3, #1
 80241c6:	fa03 f201 	lsl.w	r2, r3, r1
 80241ca:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80241ce:	681b      	ldr	r3, [r3, #0]
 80241d0:	4013      	ands	r3, r2
 80241d2:	2b00      	cmp	r3, #0
 80241d4:	d002      	beq.n	80241dc <arm_softmax_s8+0x296c>
 80241d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80241da:	e000      	b.n	80241de <arm_softmax_s8+0x296e>
 80241dc:	2200      	movs	r2, #0
 80241de:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80241e2:	601a      	str	r2, [r3, #0]
 80241e4:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 80241e8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80241ec:	681b      	ldr	r3, [r3, #0]
 80241ee:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80241f0:	f507 7222 	add.w	r2, r7, #648	; 0x288
 80241f4:	2300      	movs	r3, #0
 80241f6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80241f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80241fc:	f04f 0300 	mov.w	r3, #0
 8024200:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
    if ((m1 < 0) ^ (m2 < 0))
 8024204:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8024208:	681b      	ldr	r3, [r3, #0]
 802420a:	0fdb      	lsrs	r3, r3, #31
 802420c:	b2da      	uxtb	r2, r3
 802420e:	2300      	movs	r3, #0
 8024210:	4053      	eors	r3, r2
 8024212:	b2db      	uxtb	r3, r3
 8024214:	2b00      	cmp	r3, #0
 8024216:	d00e      	beq.n	8024236 <arm_softmax_s8+0x29c6>
        mult = 1 - mult;
 8024218:	f04f 0001 	mov.w	r0, #1
 802421c:	f04f 0100 	mov.w	r1, #0
 8024220:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8024224:	1a84      	subs	r4, r0, r2
 8024226:	64bc      	str	r4, [r7, #72]	; 0x48
 8024228:	eb61 0303 	sbc.w	r3, r1, r3
 802422c:	64fb      	str	r3, [r7, #76]	; 0x4c
 802422e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8024232:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    mult = mult + (q63_t)m1 * m2;
 8024236:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 802423a:	681b      	ldr	r3, [r3, #0]
 802423c:	4618      	mov	r0, r3
 802423e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024242:	a337      	add	r3, pc, #220	; (adr r3, 8024320 <arm_softmax_s8+0x2ab0>)
 8024244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024248:	fb02 f501 	mul.w	r5, r2, r1
 802424c:	fb00 f403 	mul.w	r4, r0, r3
 8024250:	442c      	add	r4, r5
 8024252:	fba0 0102 	umull	r0, r1, r0, r2
 8024256:	1863      	adds	r3, r4, r1
 8024258:	4619      	mov	r1, r3
 802425a:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 802425e:	1814      	adds	r4, r2, r0
 8024260:	643c      	str	r4, [r7, #64]	; 0x40
 8024262:	414b      	adcs	r3, r1
 8024264:	647b      	str	r3, [r7, #68]	; 0x44
 8024266:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 802426a:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    result = (int32_t)(mult / (1ll << 31));
 802426e:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8024272:	4610      	mov	r0, r2
 8024274:	4619      	mov	r1, r3
 8024276:	2800      	cmp	r0, #0
 8024278:	f171 0300 	sbcs.w	r3, r1, #0
 802427c:	da06      	bge.n	802428c <arm_softmax_s8+0x2a1c>
 802427e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024282:	f04f 0300 	mov.w	r3, #0
 8024286:	1880      	adds	r0, r0, r2
 8024288:	eb43 0101 	adc.w	r1, r3, r1
 802428c:	f04f 0200 	mov.w	r2, #0
 8024290:	f04f 0300 	mov.w	r3, #0
 8024294:	0fc2      	lsrs	r2, r0, #31
 8024296:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802429a:	17cb      	asrs	r3, r1, #31
 802429c:	4610      	mov	r0, r2
 802429e:	4619      	mov	r1, r3
 80242a0:	f507 7222 	add.w	r2, r7, #648	; 0x288
 80242a4:	4603      	mov	r3, r0
 80242a6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80242a8:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80242ac:	681a      	ldr	r2, [r3, #0]
 80242ae:	4b20      	ldr	r3, [pc, #128]	; (8024330 <arm_softmax_s8+0x2ac0>)
 80242b0:	429a      	cmp	r2, r3
 80242b2:	d10a      	bne.n	80242ca <arm_softmax_s8+0x2a5a>
 80242b4:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80242b8:	681b      	ldr	r3, [r3, #0]
 80242ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80242be:	d104      	bne.n	80242ca <arm_softmax_s8+0x2a5a>
        result = NN_Q31_MAX;
 80242c0:	f507 7222 	add.w	r2, r7, #648	; 0x288
 80242c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80242c8:	6013      	str	r3, [r2, #0]
    return result;
 80242ca:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80242ce:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 80242d0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80242d4:	681b      	ldr	r3, [r3, #0]
 80242d6:	ea02 0103 	and.w	r1, r2, r3
 80242da:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80242de:	681b      	ldr	r3, [r3, #0]
 80242e0:	43da      	mvns	r2, r3
 80242e2:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80242e6:	681b      	ldr	r3, [r3, #0]
 80242e8:	4013      	ands	r3, r2
 80242ea:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80242ee:	404b      	eors	r3, r1
 80242f0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 80242f2:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80242f6:	6819      	ldr	r1, [r3, #0]
 80242f8:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80242fc:	1c4b      	adds	r3, r1, #1
 80242fe:	6013      	str	r3, [r2, #0]
 8024300:	2301      	movs	r3, #1
 8024302:	fa03 f201 	lsl.w	r2, r3, r1
 8024306:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 802430a:	681b      	ldr	r3, [r3, #0]
 802430c:	4013      	ands	r3, r2
 802430e:	2b00      	cmp	r3, #0
 8024310:	d014      	beq.n	802433c <arm_softmax_s8+0x2acc>
 8024312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024316:	e012      	b.n	802433e <arm_softmax_s8+0x2ace>
 8024318:	2f16ac6c 	.word	0x2f16ac6c
 802431c:	00000000 	.word	0x00000000
 8024320:	1152aaa4 	.word	0x1152aaa4
 8024324:	00000000 	.word	0x00000000
 8024328:	4da2cbf2 	.word	0x4da2cbf2
 802432c:	2f16ac6c 	.word	0x2f16ac6c
 8024330:	1152aaa4 	.word	0x1152aaa4
 8024334:	4da2cbf2 	.word	0x4da2cbf2
 8024338:	00000000 	.word	0x00000000
 802433c:	2200      	movs	r2, #0
 802433e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024342:	601a      	str	r2, [r3, #0]
 8024344:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8024348:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802434c:	681b      	ldr	r3, [r3, #0]
 802434e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024350:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8024354:	2300      	movs	r3, #0
 8024356:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802435c:	f04f 0300 	mov.w	r3, #0
 8024360:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
    if ((m1 < 0) ^ (m2 < 0))
 8024364:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8024368:	681b      	ldr	r3, [r3, #0]
 802436a:	0fdb      	lsrs	r3, r3, #31
 802436c:	b2da      	uxtb	r2, r3
 802436e:	2300      	movs	r3, #0
 8024370:	4053      	eors	r3, r2
 8024372:	b2db      	uxtb	r3, r3
 8024374:	2b00      	cmp	r3, #0
 8024376:	d00e      	beq.n	8024396 <arm_softmax_s8+0x2b26>
        mult = 1 - mult;
 8024378:	f04f 0001 	mov.w	r0, #1
 802437c:	f04f 0100 	mov.w	r1, #0
 8024380:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8024384:	1a84      	subs	r4, r0, r2
 8024386:	63bc      	str	r4, [r7, #56]	; 0x38
 8024388:	eb61 0303 	sbc.w	r3, r1, r3
 802438c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802438e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8024392:	e9c7 349c 	strd	r3, r4, [r7, #624]	; 0x270
    mult = mult + (q63_t)m1 * m2;
 8024396:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 802439a:	681b      	ldr	r3, [r3, #0]
 802439c:	4618      	mov	r0, r3
 802439e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80243a2:	a3d1      	add	r3, pc, #836	; (adr r3, 80246e8 <arm_softmax_s8+0x2e78>)
 80243a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243a8:	fb02 f501 	mul.w	r5, r2, r1
 80243ac:	fb00 f403 	mul.w	r4, r0, r3
 80243b0:	442c      	add	r4, r5
 80243b2:	fba0 0102 	umull	r0, r1, r0, r2
 80243b6:	1863      	adds	r3, r4, r1
 80243b8:	4619      	mov	r1, r3
 80243ba:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80243be:	1814      	adds	r4, r2, r0
 80243c0:	633c      	str	r4, [r7, #48]	; 0x30
 80243c2:	414b      	adcs	r3, r1
 80243c4:	637b      	str	r3, [r7, #52]	; 0x34
 80243c6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80243ca:	e9c7 349c 	strd	r3, r4, [r7, #624]	; 0x270
    result = (int32_t)(mult / (1ll << 31));
 80243ce:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80243d2:	4610      	mov	r0, r2
 80243d4:	4619      	mov	r1, r3
 80243d6:	2800      	cmp	r0, #0
 80243d8:	f171 0300 	sbcs.w	r3, r1, #0
 80243dc:	da06      	bge.n	80243ec <arm_softmax_s8+0x2b7c>
 80243de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80243e2:	f04f 0300 	mov.w	r3, #0
 80243e6:	1880      	adds	r0, r0, r2
 80243e8:	eb43 0101 	adc.w	r1, r3, r1
 80243ec:	f04f 0200 	mov.w	r2, #0
 80243f0:	f04f 0300 	mov.w	r3, #0
 80243f4:	0fc2      	lsrs	r2, r0, #31
 80243f6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80243fa:	17cb      	asrs	r3, r1, #31
 80243fc:	4610      	mov	r0, r2
 80243fe:	4619      	mov	r1, r3
 8024400:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8024404:	4603      	mov	r3, r0
 8024406:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8024408:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 802440c:	681a      	ldr	r2, [r3, #0]
 802440e:	4bb4      	ldr	r3, [pc, #720]	; (80246e0 <arm_softmax_s8+0x2e70>)
 8024410:	429a      	cmp	r2, r3
 8024412:	d10a      	bne.n	802442a <arm_softmax_s8+0x2bba>
 8024414:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8024418:	681b      	ldr	r3, [r3, #0]
 802441a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802441e:	d104      	bne.n	802442a <arm_softmax_s8+0x2bba>
        result = NN_Q31_MAX;
 8024420:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8024424:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024428:	6013      	str	r3, [r2, #0]
    return result;
 802442a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 802442e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8024430:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024434:	681b      	ldr	r3, [r3, #0]
 8024436:	ea02 0103 	and.w	r1, r2, r3
 802443a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802443e:	681b      	ldr	r3, [r3, #0]
 8024440:	43da      	mvns	r2, r3
 8024442:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024446:	681b      	ldr	r3, [r3, #0]
 8024448:	4013      	ands	r3, r2
 802444a:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 802444e:	404b      	eors	r3, r1
 8024450:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 8024452:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8024456:	6819      	ldr	r1, [r3, #0]
 8024458:	f507 7259 	add.w	r2, r7, #868	; 0x364
 802445c:	1c4b      	adds	r3, r1, #1
 802445e:	6013      	str	r3, [r2, #0]
 8024460:	2301      	movs	r3, #1
 8024462:	fa03 f201 	lsl.w	r2, r3, r1
 8024466:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 802446a:	681b      	ldr	r3, [r3, #0]
 802446c:	4013      	ands	r3, r2
 802446e:	2b00      	cmp	r3, #0
 8024470:	d002      	beq.n	8024478 <arm_softmax_s8+0x2c08>
 8024472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024476:	e000      	b.n	802447a <arm_softmax_s8+0x2c0a>
 8024478:	2200      	movs	r2, #0
 802447a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802447e:	601a      	str	r2, [r3, #0]
 8024480:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 8024484:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024488:	681b      	ldr	r3, [r3, #0]
 802448a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802448c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8024490:	2300      	movs	r3, #0
 8024492:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024498:	f04f 0300 	mov.w	r3, #0
 802449c:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
    if ((m1 < 0) ^ (m2 < 0))
 80244a0:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80244a4:	681b      	ldr	r3, [r3, #0]
 80244a6:	0fdb      	lsrs	r3, r3, #31
 80244a8:	b2da      	uxtb	r2, r3
 80244aa:	2300      	movs	r3, #0
 80244ac:	4053      	eors	r3, r2
 80244ae:	b2db      	uxtb	r3, r3
 80244b0:	2b00      	cmp	r3, #0
 80244b2:	d00e      	beq.n	80244d2 <arm_softmax_s8+0x2c62>
        mult = 1 - mult;
 80244b4:	f04f 0001 	mov.w	r0, #1
 80244b8:	f04f 0100 	mov.w	r1, #0
 80244bc:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 80244c0:	1a84      	subs	r4, r0, r2
 80244c2:	62bc      	str	r4, [r7, #40]	; 0x28
 80244c4:	eb61 0303 	sbc.w	r3, r1, r3
 80244c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80244ca:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80244ce:	e9c7 3498 	strd	r3, r4, [r7, #608]	; 0x260
    mult = mult + (q63_t)m1 * m2;
 80244d2:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80244d6:	681b      	ldr	r3, [r3, #0]
 80244d8:	4618      	mov	r0, r3
 80244da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80244de:	4a81      	ldr	r2, [pc, #516]	; (80246e4 <arm_softmax_s8+0x2e74>)
 80244e0:	f04f 0300 	mov.w	r3, #0
 80244e4:	fb02 f501 	mul.w	r5, r2, r1
 80244e8:	fb00 f403 	mul.w	r4, r0, r3
 80244ec:	442c      	add	r4, r5
 80244ee:	fba0 0102 	umull	r0, r1, r0, r2
 80244f2:	1863      	adds	r3, r4, r1
 80244f4:	4619      	mov	r1, r3
 80244f6:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 80244fa:	1814      	adds	r4, r2, r0
 80244fc:	623c      	str	r4, [r7, #32]
 80244fe:	414b      	adcs	r3, r1
 8024500:	627b      	str	r3, [r7, #36]	; 0x24
 8024502:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8024506:	e9c7 3498 	strd	r3, r4, [r7, #608]	; 0x260
    result = (int32_t)(mult / (1ll << 31));
 802450a:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 802450e:	4610      	mov	r0, r2
 8024510:	4619      	mov	r1, r3
 8024512:	2800      	cmp	r0, #0
 8024514:	f171 0300 	sbcs.w	r3, r1, #0
 8024518:	da06      	bge.n	8024528 <arm_softmax_s8+0x2cb8>
 802451a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802451e:	f04f 0300 	mov.w	r3, #0
 8024522:	1880      	adds	r0, r0, r2
 8024524:	eb43 0101 	adc.w	r1, r3, r1
 8024528:	f04f 0200 	mov.w	r2, #0
 802452c:	f04f 0300 	mov.w	r3, #0
 8024530:	0fc2      	lsrs	r2, r0, #31
 8024532:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024536:	17cb      	asrs	r3, r1, #31
 8024538:	4610      	mov	r0, r2
 802453a:	4619      	mov	r1, r3
 802453c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8024540:	4603      	mov	r3, r0
 8024542:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8024544:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8024548:	681a      	ldr	r2, [r3, #0]
 802454a:	4b66      	ldr	r3, [pc, #408]	; (80246e4 <arm_softmax_s8+0x2e74>)
 802454c:	429a      	cmp	r2, r3
 802454e:	d10a      	bne.n	8024566 <arm_softmax_s8+0x2cf6>
 8024550:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8024554:	681b      	ldr	r3, [r3, #0]
 8024556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802455a:	d104      	bne.n	8024566 <arm_softmax_s8+0x2cf6>
        result = NN_Q31_MAX;
 802455c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8024560:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024564:	6013      	str	r3, [r2, #0]
    return result;
 8024566:	f507 731a 	add.w	r3, r7, #616	; 0x268
 802456a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 802456c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024570:	681b      	ldr	r3, [r3, #0]
 8024572:	ea02 0103 	and.w	r1, r2, r3
 8024576:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802457a:	681b      	ldr	r3, [r3, #0]
 802457c:	43da      	mvns	r2, r3
 802457e:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024582:	681b      	ldr	r3, [r3, #0]
 8024584:	4013      	ands	r3, r2
 8024586:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 802458a:	404b      	eors	r3, r1
 802458c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 802458e:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8024592:	6819      	ldr	r1, [r3, #0]
 8024594:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024598:	1c4b      	adds	r3, r1, #1
 802459a:	6013      	str	r3, [r2, #0]
 802459c:	2301      	movs	r3, #1
 802459e:	fa03 f201 	lsl.w	r2, r3, r1
 80245a2:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80245a6:	681b      	ldr	r3, [r3, #0]
 80245a8:	4013      	ands	r3, r2
 80245aa:	2b00      	cmp	r3, #0
 80245ac:	d002      	beq.n	80245b4 <arm_softmax_s8+0x2d44>
 80245ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80245b2:	e000      	b.n	80245b6 <arm_softmax_s8+0x2d46>
 80245b4:	2200      	movs	r2, #0
 80245b6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80245ba:	601a      	str	r2, [r3, #0]
 80245bc:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80245c0:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80245c4:	681b      	ldr	r3, [r3, #0]
 80245c6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80245c8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80245cc:	2300      	movs	r3, #0
 80245ce:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80245d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80245d4:	f04f 0300 	mov.w	r3, #0
 80245d8:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
    if ((m1 < 0) ^ (m2 < 0))
 80245dc:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80245e0:	681b      	ldr	r3, [r3, #0]
 80245e2:	0fdb      	lsrs	r3, r3, #31
 80245e4:	b2da      	uxtb	r2, r3
 80245e6:	2300      	movs	r3, #0
 80245e8:	4053      	eors	r3, r2
 80245ea:	b2db      	uxtb	r3, r3
 80245ec:	2b00      	cmp	r3, #0
 80245ee:	d00e      	beq.n	802460e <arm_softmax_s8+0x2d9e>
        mult = 1 - mult;
 80245f0:	f04f 0001 	mov.w	r0, #1
 80245f4:	f04f 0100 	mov.w	r1, #0
 80245f8:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80245fc:	1a84      	subs	r4, r0, r2
 80245fe:	61bc      	str	r4, [r7, #24]
 8024600:	eb61 0303 	sbc.w	r3, r1, r3
 8024604:	61fb      	str	r3, [r7, #28]
 8024606:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 802460a:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
    mult = mult + (q63_t)m1 * m2;
 802460e:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8024612:	681b      	ldr	r3, [r3, #0]
 8024614:	4618      	mov	r0, r3
 8024616:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802461a:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 802461e:	f04f 0300 	mov.w	r3, #0
 8024622:	fb02 f501 	mul.w	r5, r2, r1
 8024626:	fb00 f403 	mul.w	r4, r0, r3
 802462a:	442c      	add	r4, r5
 802462c:	fba0 0102 	umull	r0, r1, r0, r2
 8024630:	1863      	adds	r3, r4, r1
 8024632:	4619      	mov	r1, r3
 8024634:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8024638:	1814      	adds	r4, r2, r0
 802463a:	613c      	str	r4, [r7, #16]
 802463c:	414b      	adcs	r3, r1
 802463e:	617b      	str	r3, [r7, #20]
 8024640:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8024644:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
    result = (int32_t)(mult / (1ll << 31));
 8024648:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 802464c:	4610      	mov	r0, r2
 802464e:	4619      	mov	r1, r3
 8024650:	2800      	cmp	r0, #0
 8024652:	f171 0300 	sbcs.w	r3, r1, #0
 8024656:	da06      	bge.n	8024666 <arm_softmax_s8+0x2df6>
 8024658:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802465c:	f04f 0300 	mov.w	r3, #0
 8024660:	1880      	adds	r0, r0, r2
 8024662:	eb43 0101 	adc.w	r1, r3, r1
 8024666:	f04f 0200 	mov.w	r2, #0
 802466a:	f04f 0300 	mov.w	r3, #0
 802466e:	0fc2      	lsrs	r2, r0, #31
 8024670:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024674:	17cb      	asrs	r3, r1, #31
 8024676:	4610      	mov	r0, r2
 8024678:	4619      	mov	r1, r3
 802467a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 802467e:	4603      	mov	r3, r0
 8024680:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8024682:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8024686:	681b      	ldr	r3, [r3, #0]
 8024688:	2bf2      	cmp	r3, #242	; 0xf2
 802468a:	d10a      	bne.n	80246a2 <arm_softmax_s8+0x2e32>
 802468c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8024690:	681b      	ldr	r3, [r3, #0]
 8024692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024696:	d104      	bne.n	80246a2 <arm_softmax_s8+0x2e32>
        result = NN_Q31_MAX;
 8024698:	f507 7216 	add.w	r2, r7, #600	; 0x258
 802469c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80246a0:	6013      	str	r3, [r2, #0]
    return result;
 80246a2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80246a6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 80246a8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80246ac:	681b      	ldr	r3, [r3, #0]
 80246ae:	ea02 0103 	and.w	r1, r2, r3
 80246b2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80246b6:	681b      	ldr	r3, [r3, #0]
 80246b8:	43da      	mvns	r2, r3
 80246ba:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80246be:	681b      	ldr	r3, [r3, #0]
 80246c0:	4013      	ands	r3, r2
 80246c2:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80246c6:	404b      	eors	r3, r1
 80246c8:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 80246ca:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80246ce:	681b      	ldr	r3, [r3, #0]
 80246d0:	2b00      	cmp	r3, #0
 80246d2:	d10d      	bne.n	80246f0 <arm_softmax_s8+0x2e80>
 80246d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80246d8:	e00b      	b.n	80246f2 <arm_softmax_s8+0x2e82>
 80246da:	bf00      	nop
 80246dc:	f3af 8000 	nop.w
 80246e0:	02582ab7 	.word	0x02582ab7
 80246e4:	000afe11 	.word	0x000afe11
 80246e8:	02582ab7 	.word	0x02582ab7
 80246ec:	00000000 	.word	0x00000000
 80246f0:	2200      	movs	r2, #0
 80246f2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80246f6:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
 80246f8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80246fc:	681b      	ldr	r3, [r3, #0]
 80246fe:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8024702:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024706:	681b      	ldr	r3, [r3, #0]
 8024708:	43da      	mvns	r2, r3
 802470a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802470e:	681b      	ldr	r3, [r3, #0]
 8024710:	4013      	ands	r3, r2
 8024712:	4059      	eors	r1, r3
 8024714:	f507 7261 	add.w	r2, r7, #900	; 0x384
 8024718:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 802471c:	6013      	str	r3, [r2, #0]
 802471e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8024722:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8024724:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8024728:	2300      	movs	r3, #0
 802472a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802472c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024730:	f04f 0300 	mov.w	r3, #0
 8024734:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
    if ((m1 < 0) ^ (m2 < 0))
 8024738:	f507 7361 	add.w	r3, r7, #900	; 0x384
 802473c:	681b      	ldr	r3, [r3, #0]
 802473e:	0fdb      	lsrs	r3, r3, #31
 8024740:	b2da      	uxtb	r2, r3
 8024742:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8024746:	681b      	ldr	r3, [r3, #0]
 8024748:	0fdb      	lsrs	r3, r3, #31
 802474a:	b2db      	uxtb	r3, r3
 802474c:	4053      	eors	r3, r2
 802474e:	b2db      	uxtb	r3, r3
 8024750:	2b00      	cmp	r3, #0
 8024752:	d00e      	beq.n	8024772 <arm_softmax_s8+0x2f02>
        mult = 1 - mult;
 8024754:	f04f 0001 	mov.w	r0, #1
 8024758:	f04f 0100 	mov.w	r1, #0
 802475c:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8024760:	1a84      	subs	r4, r0, r2
 8024762:	60bc      	str	r4, [r7, #8]
 8024764:	eb61 0303 	sbc.w	r3, r1, r3
 8024768:	60fb      	str	r3, [r7, #12]
 802476a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 802476e:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    mult = mult + (q63_t)m1 * m2;
 8024772:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8024776:	681b      	ldr	r3, [r3, #0]
 8024778:	4618      	mov	r0, r3
 802477a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802477e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8024782:	681b      	ldr	r3, [r3, #0]
 8024784:	461a      	mov	r2, r3
 8024786:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802478a:	fb02 f501 	mul.w	r5, r2, r1
 802478e:	fb00 f403 	mul.w	r4, r0, r3
 8024792:	442c      	add	r4, r5
 8024794:	fba0 0102 	umull	r0, r1, r0, r2
 8024798:	1863      	adds	r3, r4, r1
 802479a:	4619      	mov	r1, r3
 802479c:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 80247a0:	1814      	adds	r4, r2, r0
 80247a2:	603c      	str	r4, [r7, #0]
 80247a4:	414b      	adcs	r3, r1
 80247a6:	607b      	str	r3, [r7, #4]
 80247a8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80247ac:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    result = (int32_t)(mult / (1ll << 31));
 80247b0:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 80247b4:	4610      	mov	r0, r2
 80247b6:	4619      	mov	r1, r3
 80247b8:	2800      	cmp	r0, #0
 80247ba:	f171 0300 	sbcs.w	r3, r1, #0
 80247be:	da06      	bge.n	80247ce <arm_softmax_s8+0x2f5e>
 80247c0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80247c4:	f04f 0300 	mov.w	r3, #0
 80247c8:	1880      	adds	r0, r0, r2
 80247ca:	eb43 0101 	adc.w	r1, r3, r1
 80247ce:	f04f 0200 	mov.w	r2, #0
 80247d2:	f04f 0300 	mov.w	r3, #0
 80247d6:	0fc2      	lsrs	r2, r0, #31
 80247d8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80247dc:	17cb      	asrs	r3, r1, #31
 80247de:	4610      	mov	r0, r2
 80247e0:	4619      	mov	r1, r3
 80247e2:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 80247e6:	4603      	mov	r3, r0
 80247e8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80247ea:	f507 7261 	add.w	r2, r7, #900	; 0x384
 80247ee:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80247f2:	6812      	ldr	r2, [r2, #0]
 80247f4:	681b      	ldr	r3, [r3, #0]
 80247f6:	429a      	cmp	r2, r3
 80247f8:	d10a      	bne.n	8024810 <arm_softmax_s8+0x2fa0>
 80247fa:	f507 7361 	add.w	r3, r7, #900	; 0x384
 80247fe:	681b      	ldr	r3, [r3, #0]
 8024800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024804:	d104      	bne.n	8024810 <arm_softmax_s8+0x2fa0>
        result = NN_Q31_MAX;
 8024806:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 802480a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802480e:	6013      	str	r3, [r2, #0]
    return result;
 8024810:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8024814:	681a      	ldr	r2, [r3, #0]
 8024816:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 802481a:	601a      	str	r2, [r3, #0]
 802481c:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8024820:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 8024824:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024826:	f507 7265 	add.w	r2, r7, #916	; 0x394
 802482a:	2300      	movs	r3, #0
 802482c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 802482e:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8024832:	2201      	movs	r2, #1
 8024834:	681b      	ldr	r3, [r3, #0]
 8024836:	fa02 f303 	lsl.w	r3, r2, r3
 802483a:	f507 7264 	add.w	r2, r7, #912	; 0x390
 802483e:	3b01      	subs	r3, #1
 8024840:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8024842:	f507 7163 	add.w	r1, r7, #908	; 0x38c
 8024846:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 802484a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 802484e:	6812      	ldr	r2, [r2, #0]
 8024850:	681b      	ldr	r3, [r3, #0]
 8024852:	4013      	ands	r3, r2
 8024854:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8024856:	f507 7165 	add.w	r1, r7, #916	; 0x394
 802485a:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 802485e:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8024862:	6812      	ldr	r2, [r2, #0]
 8024864:	681b      	ldr	r3, [r3, #0]
 8024866:	fa42 f303 	asr.w	r3, r2, r3
 802486a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 802486c:	f507 7262 	add.w	r2, r7, #904	; 0x388
 8024870:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8024874:	681b      	ldr	r3, [r3, #0]
 8024876:	105b      	asrs	r3, r3, #1
 8024878:	6013      	str	r3, [r2, #0]
    if (result < 0)
 802487a:	f507 7365 	add.w	r3, r7, #916	; 0x394
 802487e:	681b      	ldr	r3, [r3, #0]
 8024880:	2b00      	cmp	r3, #0
 8024882:	da06      	bge.n	8024892 <arm_softmax_s8+0x3022>
        threshold++;
 8024884:	f507 7262 	add.w	r2, r7, #904	; 0x388
 8024888:	f507 7362 	add.w	r3, r7, #904	; 0x388
 802488c:	681b      	ldr	r3, [r3, #0]
 802488e:	3301      	adds	r3, #1
 8024890:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8024892:	f507 7263 	add.w	r2, r7, #908	; 0x38c
 8024896:	f507 7362 	add.w	r3, r7, #904	; 0x388
 802489a:	6812      	ldr	r2, [r2, #0]
 802489c:	681b      	ldr	r3, [r3, #0]
 802489e:	429a      	cmp	r2, r3
 80248a0:	dd06      	ble.n	80248b0 <arm_softmax_s8+0x3040>
        result++;
 80248a2:	f507 7265 	add.w	r2, r7, #916	; 0x394
 80248a6:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80248aa:	681b      	ldr	r3, [r3, #0]
 80248ac:	3301      	adds	r3, #1
 80248ae:	6013      	str	r3, [r2, #0]
    return result;
 80248b0:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80248b4:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 80248b6:	3b80      	subs	r3, #128	; 0x80
 80248b8:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 80248bc:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80248c0:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80248c4:	db09      	blt.n	80248da <arm_softmax_s8+0x306a>
 80248c6:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80248ca:	2b7e      	cmp	r3, #126	; 0x7e
 80248cc:	dc03      	bgt.n	80248d6 <arm_softmax_s8+0x3066>
 80248ce:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80248d2:	b259      	sxtb	r1, r3
 80248d4:	e003      	b.n	80248de <arm_softmax_s8+0x306e>
 80248d6:	217f      	movs	r1, #127	; 0x7f
 80248d8:	e001      	b.n	80248de <arm_softmax_s8+0x306e>
 80248da:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80248de:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 80248e2:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 80248e6:	441a      	add	r2, r3
 80248e8:	460b      	mov	r3, r1
 80248ea:	7013      	strb	r3, [r2, #0]
 80248ec:	e006      	b.n	80248fc <arm_softmax_s8+0x308c>
            }
            else
            {
                output[col] = -128;
 80248ee:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 80248f2:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 80248f6:	441a      	add	r2, r3
 80248f8:	2380      	movs	r3, #128	; 0x80
 80248fa:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 80248fc:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8024900:	3301      	adds	r3, #1
 8024902:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8024906:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 802490a:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 802490e:	681b      	ldr	r3, [r3, #0]
 8024910:	429a      	cmp	r2, r3
 8024912:	f6fe ae81 	blt.w	8023618 <arm_softmax_s8+0x1da8>
            }
        }
        input += row_size;
 8024916:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 802491a:	6819      	ldr	r1, [r3, #0]
 802491c:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8024920:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8024924:	681b      	ldr	r3, [r3, #0]
 8024926:	440b      	add	r3, r1
 8024928:	6013      	str	r3, [r2, #0]
        output += row_size;
 802492a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 802492e:	681a      	ldr	r2, [r3, #0]
 8024930:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8024934:	4413      	add	r3, r2
 8024936:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 802493a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 802493e:	3301      	adds	r3, #1
 8024940:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 8024944:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8024948:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 802494c:	681b      	ldr	r3, [r3, #0]
 802494e:	429a      	cmp	r2, r3
 8024950:	f6fc afae 	blt.w	80218b0 <arm_softmax_s8+0x40>
    }

#endif
}
 8024954:	bf00      	nop
 8024956:	bf00      	nop
 8024958:	f507 67bf 	add.w	r7, r7, #1528	; 0x5f8
 802495c:	46bd      	mov	sp, r7
 802495e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8024962:	4770      	bx	lr

08024964 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 8024964:	b580      	push	{r7, lr}
 8024966:	b082      	sub	sp, #8
 8024968:	af00      	add	r7, sp, #0
 802496a:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 802496c:	687b      	ldr	r3, [r7, #4]
 802496e:	2200      	movs	r2, #0
 8024970:	2104      	movs	r1, #4
 8024972:	4618      	mov	r0, r3
 8024974:	f7e4 fee0 	bl	8009738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8024978:	4603      	mov	r3, r0
  }
 802497a:	4618      	mov	r0, r3
 802497c:	3708      	adds	r7, #8
 802497e:	46bd      	mov	sp, r7
 8024980:	bd80      	pop	{r7, pc}

08024982 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 8024982:	b580      	push	{r7, lr}
 8024984:	b082      	sub	sp, #8
 8024986:	af00      	add	r7, sp, #0
 8024988:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 802498a:	687b      	ldr	r3, [r7, #4]
 802498c:	2200      	movs	r2, #0
 802498e:	210a      	movs	r1, #10
 8024990:	4618      	mov	r0, r3
 8024992:	f7e4 fea3 	bl	80096dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8024996:	4603      	mov	r3, r0
 8024998:	b2db      	uxtb	r3, r3
  }
 802499a:	4618      	mov	r0, r3
 802499c:	3708      	adds	r7, #8
 802499e:	46bd      	mov	sp, r7
 80249a0:	bd80      	pop	{r7, pc}

080249a2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 80249a2:	b580      	push	{r7, lr}
 80249a4:	b084      	sub	sp, #16
 80249a6:	af00      	add	r7, sp, #0
 80249a8:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 80249aa:	687b      	ldr	r3, [r7, #4]
 80249ac:	2b00      	cmp	r3, #0
 80249ae:	d101      	bne.n	80249b4 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 80249b0:	f000 fa99 	bl	8024ee6 <abort>

  return std::max(
      op_code->builtin_code(),
 80249b4:	6878      	ldr	r0, [r7, #4]
 80249b6:	f7ff ffe4 	bl	8024982 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 80249ba:	4603      	mov	r3, r0
 80249bc:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 80249be:	6878      	ldr	r0, [r7, #4]
 80249c0:	f7ff ffd0 	bl	8024964 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 80249c4:	4603      	mov	r3, r0
 80249c6:	b2db      	uxtb	r3, r3
 80249c8:	73fb      	strb	r3, [r7, #15]
 80249ca:	f107 020f 	add.w	r2, r7, #15
 80249ce:	f107 030e 	add.w	r3, r7, #14
 80249d2:	4611      	mov	r1, r2
 80249d4:	4618      	mov	r0, r3
 80249d6:	f000 f806 	bl	80249e6 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 80249da:	4603      	mov	r3, r0
 80249dc:	781b      	ldrb	r3, [r3, #0]
}
 80249de:	4618      	mov	r0, r3
 80249e0:	3710      	adds	r7, #16
 80249e2:	46bd      	mov	sp, r7
 80249e4:	bd80      	pop	{r7, pc}

080249e6 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 80249e6:	b480      	push	{r7}
 80249e8:	b083      	sub	sp, #12
 80249ea:	af00      	add	r7, sp, #0
 80249ec:	6078      	str	r0, [r7, #4]
 80249ee:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80249f0:	687b      	ldr	r3, [r7, #4]
 80249f2:	781a      	ldrb	r2, [r3, #0]
 80249f4:	683b      	ldr	r3, [r7, #0]
 80249f6:	781b      	ldrb	r3, [r3, #0]
 80249f8:	429a      	cmp	r2, r3
 80249fa:	d201      	bcs.n	8024a00 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 80249fc:	683b      	ldr	r3, [r7, #0]
 80249fe:	e000      	b.n	8024a02 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 8024a00:	687b      	ldr	r3, [r7, #4]
    }
 8024a02:	4618      	mov	r0, r3
 8024a04:	370c      	adds	r7, #12
 8024a06:	46bd      	mov	sp, r7
 8024a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a0c:	4770      	bx	lr

08024a0e <_ZdlPv>:
 8024a0e:	f000 bad9 	b.w	8024fc4 <free>

08024a12 <_ZdlPvj>:
 8024a12:	f7ff bffc 	b.w	8024a0e <_ZdlPv>

08024a16 <__cxa_guard_acquire>:
 8024a16:	6803      	ldr	r3, [r0, #0]
 8024a18:	07db      	lsls	r3, r3, #31
 8024a1a:	d406      	bmi.n	8024a2a <__cxa_guard_acquire+0x14>
 8024a1c:	7843      	ldrb	r3, [r0, #1]
 8024a1e:	b103      	cbz	r3, 8024a22 <__cxa_guard_acquire+0xc>
 8024a20:	deff      	udf	#255	; 0xff
 8024a22:	2301      	movs	r3, #1
 8024a24:	7043      	strb	r3, [r0, #1]
 8024a26:	4618      	mov	r0, r3
 8024a28:	4770      	bx	lr
 8024a2a:	2000      	movs	r0, #0
 8024a2c:	4770      	bx	lr

08024a2e <__cxa_guard_release>:
 8024a2e:	2301      	movs	r3, #1
 8024a30:	6003      	str	r3, [r0, #0]
 8024a32:	4770      	bx	lr

08024a34 <__cxa_pure_virtual>:
 8024a34:	b508      	push	{r3, lr}
 8024a36:	f000 f80d 	bl	8024a54 <_ZSt9terminatev>

08024a3a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024a3a:	b508      	push	{r3, lr}
 8024a3c:	4780      	blx	r0
 8024a3e:	f000 fa52 	bl	8024ee6 <abort>
	...

08024a44 <_ZSt13get_terminatev>:
 8024a44:	4b02      	ldr	r3, [pc, #8]	; (8024a50 <_ZSt13get_terminatev+0xc>)
 8024a46:	6818      	ldr	r0, [r3, #0]
 8024a48:	f3bf 8f5b 	dmb	ish
 8024a4c:	4770      	bx	lr
 8024a4e:	bf00      	nop
 8024a50:	20000014 	.word	0x20000014

08024a54 <_ZSt9terminatev>:
 8024a54:	b508      	push	{r3, lr}
 8024a56:	f7ff fff5 	bl	8024a44 <_ZSt13get_terminatev>
 8024a5a:	f7ff ffee 	bl	8024a3a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08024a60 <floor>:
 8024a60:	ec51 0b10 	vmov	r0, r1, d0
 8024a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8024a6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8024a70:	2e13      	cmp	r6, #19
 8024a72:	ee10 5a10 	vmov	r5, s0
 8024a76:	ee10 8a10 	vmov	r8, s0
 8024a7a:	460c      	mov	r4, r1
 8024a7c:	dc32      	bgt.n	8024ae4 <floor+0x84>
 8024a7e:	2e00      	cmp	r6, #0
 8024a80:	da14      	bge.n	8024aac <floor+0x4c>
 8024a82:	a333      	add	r3, pc, #204	; (adr r3, 8024b50 <floor+0xf0>)
 8024a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a88:	f7db fc32 	bl	80002f0 <__adddf3>
 8024a8c:	2200      	movs	r2, #0
 8024a8e:	2300      	movs	r3, #0
 8024a90:	f7dc f874 	bl	8000b7c <__aeabi_dcmpgt>
 8024a94:	b138      	cbz	r0, 8024aa6 <floor+0x46>
 8024a96:	2c00      	cmp	r4, #0
 8024a98:	da57      	bge.n	8024b4a <floor+0xea>
 8024a9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8024a9e:	431d      	orrs	r5, r3
 8024aa0:	d001      	beq.n	8024aa6 <floor+0x46>
 8024aa2:	4c2d      	ldr	r4, [pc, #180]	; (8024b58 <floor+0xf8>)
 8024aa4:	2500      	movs	r5, #0
 8024aa6:	4621      	mov	r1, r4
 8024aa8:	4628      	mov	r0, r5
 8024aaa:	e025      	b.n	8024af8 <floor+0x98>
 8024aac:	4f2b      	ldr	r7, [pc, #172]	; (8024b5c <floor+0xfc>)
 8024aae:	4137      	asrs	r7, r6
 8024ab0:	ea01 0307 	and.w	r3, r1, r7
 8024ab4:	4303      	orrs	r3, r0
 8024ab6:	d01f      	beq.n	8024af8 <floor+0x98>
 8024ab8:	a325      	add	r3, pc, #148	; (adr r3, 8024b50 <floor+0xf0>)
 8024aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024abe:	f7db fc17 	bl	80002f0 <__adddf3>
 8024ac2:	2200      	movs	r2, #0
 8024ac4:	2300      	movs	r3, #0
 8024ac6:	f7dc f859 	bl	8000b7c <__aeabi_dcmpgt>
 8024aca:	2800      	cmp	r0, #0
 8024acc:	d0eb      	beq.n	8024aa6 <floor+0x46>
 8024ace:	2c00      	cmp	r4, #0
 8024ad0:	bfbe      	ittt	lt
 8024ad2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8024ad6:	fa43 f606 	asrlt.w	r6, r3, r6
 8024ada:	19a4      	addlt	r4, r4, r6
 8024adc:	ea24 0407 	bic.w	r4, r4, r7
 8024ae0:	2500      	movs	r5, #0
 8024ae2:	e7e0      	b.n	8024aa6 <floor+0x46>
 8024ae4:	2e33      	cmp	r6, #51	; 0x33
 8024ae6:	dd0b      	ble.n	8024b00 <floor+0xa0>
 8024ae8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024aec:	d104      	bne.n	8024af8 <floor+0x98>
 8024aee:	ee10 2a10 	vmov	r2, s0
 8024af2:	460b      	mov	r3, r1
 8024af4:	f7db fbfc 	bl	80002f0 <__adddf3>
 8024af8:	ec41 0b10 	vmov	d0, r0, r1
 8024afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b00:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8024b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8024b08:	fa23 f707 	lsr.w	r7, r3, r7
 8024b0c:	4207      	tst	r7, r0
 8024b0e:	d0f3      	beq.n	8024af8 <floor+0x98>
 8024b10:	a30f      	add	r3, pc, #60	; (adr r3, 8024b50 <floor+0xf0>)
 8024b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b16:	f7db fbeb 	bl	80002f0 <__adddf3>
 8024b1a:	2200      	movs	r2, #0
 8024b1c:	2300      	movs	r3, #0
 8024b1e:	f7dc f82d 	bl	8000b7c <__aeabi_dcmpgt>
 8024b22:	2800      	cmp	r0, #0
 8024b24:	d0bf      	beq.n	8024aa6 <floor+0x46>
 8024b26:	2c00      	cmp	r4, #0
 8024b28:	da02      	bge.n	8024b30 <floor+0xd0>
 8024b2a:	2e14      	cmp	r6, #20
 8024b2c:	d103      	bne.n	8024b36 <floor+0xd6>
 8024b2e:	3401      	adds	r4, #1
 8024b30:	ea25 0507 	bic.w	r5, r5, r7
 8024b34:	e7b7      	b.n	8024aa6 <floor+0x46>
 8024b36:	2301      	movs	r3, #1
 8024b38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8024b3c:	fa03 f606 	lsl.w	r6, r3, r6
 8024b40:	4435      	add	r5, r6
 8024b42:	4545      	cmp	r5, r8
 8024b44:	bf38      	it	cc
 8024b46:	18e4      	addcc	r4, r4, r3
 8024b48:	e7f2      	b.n	8024b30 <floor+0xd0>
 8024b4a:	2500      	movs	r5, #0
 8024b4c:	462c      	mov	r4, r5
 8024b4e:	e7aa      	b.n	8024aa6 <floor+0x46>
 8024b50:	8800759c 	.word	0x8800759c
 8024b54:	7e37e43c 	.word	0x7e37e43c
 8024b58:	bff00000 	.word	0xbff00000
 8024b5c:	000fffff 	.word	0x000fffff

08024b60 <frexp>:
 8024b60:	b570      	push	{r4, r5, r6, lr}
 8024b62:	2100      	movs	r1, #0
 8024b64:	ec55 4b10 	vmov	r4, r5, d0
 8024b68:	6001      	str	r1, [r0, #0]
 8024b6a:	4916      	ldr	r1, [pc, #88]	; (8024bc4 <frexp+0x64>)
 8024b6c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8024b70:	428a      	cmp	r2, r1
 8024b72:	4606      	mov	r6, r0
 8024b74:	462b      	mov	r3, r5
 8024b76:	dc22      	bgt.n	8024bbe <frexp+0x5e>
 8024b78:	ee10 1a10 	vmov	r1, s0
 8024b7c:	4311      	orrs	r1, r2
 8024b7e:	d01e      	beq.n	8024bbe <frexp+0x5e>
 8024b80:	4911      	ldr	r1, [pc, #68]	; (8024bc8 <frexp+0x68>)
 8024b82:	4029      	ands	r1, r5
 8024b84:	b969      	cbnz	r1, 8024ba2 <frexp+0x42>
 8024b86:	4b11      	ldr	r3, [pc, #68]	; (8024bcc <frexp+0x6c>)
 8024b88:	2200      	movs	r2, #0
 8024b8a:	ee10 0a10 	vmov	r0, s0
 8024b8e:	4629      	mov	r1, r5
 8024b90:	f7db fd64 	bl	800065c <__aeabi_dmul>
 8024b94:	460b      	mov	r3, r1
 8024b96:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8024b9a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8024b9e:	4604      	mov	r4, r0
 8024ba0:	6031      	str	r1, [r6, #0]
 8024ba2:	6831      	ldr	r1, [r6, #0]
 8024ba4:	1512      	asrs	r2, r2, #20
 8024ba6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024baa:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8024bae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024bb2:	440a      	add	r2, r1
 8024bb4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8024bb8:	6032      	str	r2, [r6, #0]
 8024bba:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8024bbe:	ec45 4b10 	vmov	d0, r4, r5
 8024bc2:	bd70      	pop	{r4, r5, r6, pc}
 8024bc4:	7fefffff 	.word	0x7fefffff
 8024bc8:	7ff00000 	.word	0x7ff00000
 8024bcc:	43500000 	.word	0x43500000

08024bd0 <round>:
 8024bd0:	ec51 0b10 	vmov	r0, r1, d0
 8024bd4:	b570      	push	{r4, r5, r6, lr}
 8024bd6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8024bda:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8024bde:	2c13      	cmp	r4, #19
 8024be0:	ee10 2a10 	vmov	r2, s0
 8024be4:	460b      	mov	r3, r1
 8024be6:	dc19      	bgt.n	8024c1c <round+0x4c>
 8024be8:	2c00      	cmp	r4, #0
 8024bea:	da09      	bge.n	8024c00 <round+0x30>
 8024bec:	3401      	adds	r4, #1
 8024bee:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8024bf2:	d103      	bne.n	8024bfc <round+0x2c>
 8024bf4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8024bf8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8024bfc:	2100      	movs	r1, #0
 8024bfe:	e028      	b.n	8024c52 <round+0x82>
 8024c00:	4d15      	ldr	r5, [pc, #84]	; (8024c58 <round+0x88>)
 8024c02:	4125      	asrs	r5, r4
 8024c04:	ea01 0605 	and.w	r6, r1, r5
 8024c08:	4332      	orrs	r2, r6
 8024c0a:	d00e      	beq.n	8024c2a <round+0x5a>
 8024c0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8024c10:	fa42 f404 	asr.w	r4, r2, r4
 8024c14:	4423      	add	r3, r4
 8024c16:	ea23 0305 	bic.w	r3, r3, r5
 8024c1a:	e7ef      	b.n	8024bfc <round+0x2c>
 8024c1c:	2c33      	cmp	r4, #51	; 0x33
 8024c1e:	dd07      	ble.n	8024c30 <round+0x60>
 8024c20:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8024c24:	d101      	bne.n	8024c2a <round+0x5a>
 8024c26:	f7db fb63 	bl	80002f0 <__adddf3>
 8024c2a:	ec41 0b10 	vmov	d0, r0, r1
 8024c2e:	bd70      	pop	{r4, r5, r6, pc}
 8024c30:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8024c34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8024c38:	40f5      	lsrs	r5, r6
 8024c3a:	4228      	tst	r0, r5
 8024c3c:	d0f5      	beq.n	8024c2a <round+0x5a>
 8024c3e:	2101      	movs	r1, #1
 8024c40:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8024c44:	fa01 f404 	lsl.w	r4, r1, r4
 8024c48:	1912      	adds	r2, r2, r4
 8024c4a:	bf28      	it	cs
 8024c4c:	185b      	addcs	r3, r3, r1
 8024c4e:	ea22 0105 	bic.w	r1, r2, r5
 8024c52:	4608      	mov	r0, r1
 8024c54:	4619      	mov	r1, r3
 8024c56:	e7e8      	b.n	8024c2a <round+0x5a>
 8024c58:	000fffff 	.word	0x000fffff

08024c5c <roundf>:
 8024c5c:	ee10 0a10 	vmov	r0, s0
 8024c60:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8024c64:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8024c68:	2a16      	cmp	r2, #22
 8024c6a:	dc15      	bgt.n	8024c98 <roundf+0x3c>
 8024c6c:	2a00      	cmp	r2, #0
 8024c6e:	da08      	bge.n	8024c82 <roundf+0x26>
 8024c70:	3201      	adds	r2, #1
 8024c72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8024c76:	d101      	bne.n	8024c7c <roundf+0x20>
 8024c78:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8024c7c:	ee00 3a10 	vmov	s0, r3
 8024c80:	4770      	bx	lr
 8024c82:	4908      	ldr	r1, [pc, #32]	; (8024ca4 <roundf+0x48>)
 8024c84:	4111      	asrs	r1, r2
 8024c86:	4208      	tst	r0, r1
 8024c88:	d0fa      	beq.n	8024c80 <roundf+0x24>
 8024c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8024c8e:	4113      	asrs	r3, r2
 8024c90:	4403      	add	r3, r0
 8024c92:	ea23 0301 	bic.w	r3, r3, r1
 8024c96:	e7f1      	b.n	8024c7c <roundf+0x20>
 8024c98:	2a80      	cmp	r2, #128	; 0x80
 8024c9a:	d1f1      	bne.n	8024c80 <roundf+0x24>
 8024c9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024ca0:	4770      	bx	lr
 8024ca2:	bf00      	nop
 8024ca4:	007fffff 	.word	0x007fffff

08024ca8 <expf>:
 8024ca8:	b508      	push	{r3, lr}
 8024caa:	ed2d 8b02 	vpush	{d8}
 8024cae:	eef0 8a40 	vmov.f32	s17, s0
 8024cb2:	f000 f837 	bl	8024d24 <__ieee754_expf>
 8024cb6:	4b16      	ldr	r3, [pc, #88]	; (8024d10 <expf+0x68>)
 8024cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8024cbc:	3301      	adds	r3, #1
 8024cbe:	eeb0 8a40 	vmov.f32	s16, s0
 8024cc2:	d011      	beq.n	8024ce8 <expf+0x40>
 8024cc4:	eeb0 0a68 	vmov.f32	s0, s17
 8024cc8:	f000 f900 	bl	8024ecc <finitef>
 8024ccc:	b160      	cbz	r0, 8024ce8 <expf+0x40>
 8024cce:	eddf 7a11 	vldr	s15, [pc, #68]	; 8024d14 <expf+0x6c>
 8024cd2:	eef4 8ae7 	vcmpe.f32	s17, s15
 8024cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024cda:	dd0a      	ble.n	8024cf2 <expf+0x4a>
 8024cdc:	f000 f92e 	bl	8024f3c <__errno>
 8024ce0:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8024d18 <expf+0x70>
 8024ce4:	2322      	movs	r3, #34	; 0x22
 8024ce6:	6003      	str	r3, [r0, #0]
 8024ce8:	eeb0 0a48 	vmov.f32	s0, s16
 8024cec:	ecbd 8b02 	vpop	{d8}
 8024cf0:	bd08      	pop	{r3, pc}
 8024cf2:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8024d1c <expf+0x74>
 8024cf6:	eef4 8ae7 	vcmpe.f32	s17, s15
 8024cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024cfe:	d5f3      	bpl.n	8024ce8 <expf+0x40>
 8024d00:	f000 f91c 	bl	8024f3c <__errno>
 8024d04:	2322      	movs	r3, #34	; 0x22
 8024d06:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8024d20 <expf+0x78>
 8024d0a:	6003      	str	r3, [r0, #0]
 8024d0c:	e7ec      	b.n	8024ce8 <expf+0x40>
 8024d0e:	bf00      	nop
 8024d10:	20000018 	.word	0x20000018
 8024d14:	42b17180 	.word	0x42b17180
 8024d18:	7f800000 	.word	0x7f800000
 8024d1c:	c2cff1b5 	.word	0xc2cff1b5
 8024d20:	00000000 	.word	0x00000000

08024d24 <__ieee754_expf>:
 8024d24:	ee10 2a10 	vmov	r2, s0
 8024d28:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8024d2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024d30:	d902      	bls.n	8024d38 <__ieee754_expf+0x14>
 8024d32:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024d36:	4770      	bx	lr
 8024d38:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8024d3c:	d106      	bne.n	8024d4c <__ieee754_expf+0x28>
 8024d3e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8024e84 <__ieee754_expf+0x160>
 8024d42:	2b00      	cmp	r3, #0
 8024d44:	bf18      	it	ne
 8024d46:	eeb0 0a67 	vmovne.f32	s0, s15
 8024d4a:	4770      	bx	lr
 8024d4c:	484e      	ldr	r0, [pc, #312]	; (8024e88 <__ieee754_expf+0x164>)
 8024d4e:	4282      	cmp	r2, r0
 8024d50:	dd04      	ble.n	8024d5c <__ieee754_expf+0x38>
 8024d52:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8024e8c <__ieee754_expf+0x168>
 8024d56:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024d5a:	4770      	bx	lr
 8024d5c:	2a00      	cmp	r2, #0
 8024d5e:	da03      	bge.n	8024d68 <__ieee754_expf+0x44>
 8024d60:	4a4b      	ldr	r2, [pc, #300]	; (8024e90 <__ieee754_expf+0x16c>)
 8024d62:	4291      	cmp	r1, r2
 8024d64:	f200 808a 	bhi.w	8024e7c <__ieee754_expf+0x158>
 8024d68:	4a4a      	ldr	r2, [pc, #296]	; (8024e94 <__ieee754_expf+0x170>)
 8024d6a:	4291      	cmp	r1, r2
 8024d6c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8024d70:	d954      	bls.n	8024e1c <__ieee754_expf+0xf8>
 8024d72:	4a49      	ldr	r2, [pc, #292]	; (8024e98 <__ieee754_expf+0x174>)
 8024d74:	4291      	cmp	r1, r2
 8024d76:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8024d7a:	d836      	bhi.n	8024dea <__ieee754_expf+0xc6>
 8024d7c:	4947      	ldr	r1, [pc, #284]	; (8024e9c <__ieee754_expf+0x178>)
 8024d7e:	4411      	add	r1, r2
 8024d80:	ed91 7a00 	vldr	s14, [r1]
 8024d84:	4946      	ldr	r1, [pc, #280]	; (8024ea0 <__ieee754_expf+0x17c>)
 8024d86:	440a      	add	r2, r1
 8024d88:	edd2 7a00 	vldr	s15, [r2]
 8024d8c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8024d90:	f1c3 0201 	rsb	r2, r3, #1
 8024d94:	1ad2      	subs	r2, r2, r3
 8024d96:	ee37 0a67 	vsub.f32	s0, s14, s15
 8024d9a:	ee60 6a00 	vmul.f32	s13, s0, s0
 8024d9e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8024ea4 <__ieee754_expf+0x180>
 8024da2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8024ea8 <__ieee754_expf+0x184>
 8024da6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8024daa:	eddf 5a40 	vldr	s11, [pc, #256]	; 8024eac <__ieee754_expf+0x188>
 8024dae:	eee5 5a26 	vfma.f32	s11, s10, s13
 8024db2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8024eb0 <__ieee754_expf+0x18c>
 8024db6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8024dba:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8024eb4 <__ieee754_expf+0x190>
 8024dbe:	eee5 5a26 	vfma.f32	s11, s10, s13
 8024dc2:	eeb0 5a40 	vmov.f32	s10, s0
 8024dc6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8024dca:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8024dce:	eef0 6a45 	vmov.f32	s13, s10
 8024dd2:	ee20 5a05 	vmul.f32	s10, s0, s10
 8024dd6:	bb92      	cbnz	r2, 8024e3e <__ieee754_expf+0x11a>
 8024dd8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8024ddc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8024de0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8024de4:	ee36 0a40 	vsub.f32	s0, s12, s0
 8024de8:	4770      	bx	lr
 8024dea:	4b33      	ldr	r3, [pc, #204]	; (8024eb8 <__ieee754_expf+0x194>)
 8024dec:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8024ebc <__ieee754_expf+0x198>
 8024df0:	4413      	add	r3, r2
 8024df2:	edd3 7a00 	vldr	s15, [r3]
 8024df6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8024dfa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8024ec0 <__ieee754_expf+0x19c>
 8024dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024e02:	ee17 2a90 	vmov	r2, s15
 8024e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024e0a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8024e0e:	eeb0 7a40 	vmov.f32	s14, s0
 8024e12:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8024ec4 <__ieee754_expf+0x1a0>
 8024e16:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024e1a:	e7bc      	b.n	8024d96 <__ieee754_expf+0x72>
 8024e1c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8024e20:	d20b      	bcs.n	8024e3a <__ieee754_expf+0x116>
 8024e22:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8024e8c <__ieee754_expf+0x168>
 8024e26:	ee70 6a26 	vadd.f32	s13, s0, s13
 8024e2a:	eef4 6ac6 	vcmpe.f32	s13, s12
 8024e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e32:	dd02      	ble.n	8024e3a <__ieee754_expf+0x116>
 8024e34:	ee30 0a06 	vadd.f32	s0, s0, s12
 8024e38:	4770      	bx	lr
 8024e3a:	2200      	movs	r2, #0
 8024e3c:	e7ad      	b.n	8024d9a <__ieee754_expf+0x76>
 8024e3e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8024e42:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8024e46:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8024e4a:	bfb8      	it	lt
 8024e4c:	3264      	addlt	r2, #100	; 0x64
 8024e4e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8024e52:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8024e56:	ee76 7a40 	vsub.f32	s15, s12, s0
 8024e5a:	ee17 3a90 	vmov	r3, s15
 8024e5e:	bfab      	itete	ge
 8024e60:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8024e64:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8024e68:	ee00 3a10 	vmovge	s0, r3
 8024e6c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8024ec8 <__ieee754_expf+0x1a4>
 8024e70:	bfbc      	itt	lt
 8024e72:	ee00 3a10 	vmovlt	s0, r3
 8024e76:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8024e7a:	4770      	bx	lr
 8024e7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8024e84 <__ieee754_expf+0x160>
 8024e80:	4770      	bx	lr
 8024e82:	bf00      	nop
 8024e84:	00000000 	.word	0x00000000
 8024e88:	42b17217 	.word	0x42b17217
 8024e8c:	7149f2ca 	.word	0x7149f2ca
 8024e90:	42cff1b5 	.word	0x42cff1b5
 8024e94:	3eb17218 	.word	0x3eb17218
 8024e98:	3f851591 	.word	0x3f851591
 8024e9c:	0807a6c0 	.word	0x0807a6c0
 8024ea0:	0807a6c8 	.word	0x0807a6c8
 8024ea4:	3331bb4c 	.word	0x3331bb4c
 8024ea8:	b5ddea0e 	.word	0xb5ddea0e
 8024eac:	388ab355 	.word	0x388ab355
 8024eb0:	bb360b61 	.word	0xbb360b61
 8024eb4:	3e2aaaab 	.word	0x3e2aaaab
 8024eb8:	0807a6b8 	.word	0x0807a6b8
 8024ebc:	3fb8aa3b 	.word	0x3fb8aa3b
 8024ec0:	3f317180 	.word	0x3f317180
 8024ec4:	3717f7d1 	.word	0x3717f7d1
 8024ec8:	0d800000 	.word	0x0d800000

08024ecc <finitef>:
 8024ecc:	b082      	sub	sp, #8
 8024ece:	ed8d 0a01 	vstr	s0, [sp, #4]
 8024ed2:	9801      	ldr	r0, [sp, #4]
 8024ed4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8024ed8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8024edc:	bfac      	ite	ge
 8024ede:	2000      	movge	r0, #0
 8024ee0:	2001      	movlt	r0, #1
 8024ee2:	b002      	add	sp, #8
 8024ee4:	4770      	bx	lr

08024ee6 <abort>:
 8024ee6:	b508      	push	{r3, lr}
 8024ee8:	2006      	movs	r0, #6
 8024eea:	f000 fc73 	bl	80257d4 <raise>
 8024eee:	2001      	movs	r0, #1
 8024ef0:	f7dd fd20 	bl	8002934 <_exit>

08024ef4 <__assert_func>:
 8024ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024ef6:	4614      	mov	r4, r2
 8024ef8:	461a      	mov	r2, r3
 8024efa:	4b09      	ldr	r3, [pc, #36]	; (8024f20 <__assert_func+0x2c>)
 8024efc:	681b      	ldr	r3, [r3, #0]
 8024efe:	4605      	mov	r5, r0
 8024f00:	68d8      	ldr	r0, [r3, #12]
 8024f02:	b14c      	cbz	r4, 8024f18 <__assert_func+0x24>
 8024f04:	4b07      	ldr	r3, [pc, #28]	; (8024f24 <__assert_func+0x30>)
 8024f06:	9100      	str	r1, [sp, #0]
 8024f08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024f0c:	4906      	ldr	r1, [pc, #24]	; (8024f28 <__assert_func+0x34>)
 8024f0e:	462b      	mov	r3, r5
 8024f10:	f000 f81a 	bl	8024f48 <fiprintf>
 8024f14:	f7ff ffe7 	bl	8024ee6 <abort>
 8024f18:	4b04      	ldr	r3, [pc, #16]	; (8024f2c <__assert_func+0x38>)
 8024f1a:	461c      	mov	r4, r3
 8024f1c:	e7f3      	b.n	8024f06 <__assert_func+0x12>
 8024f1e:	bf00      	nop
 8024f20:	2000001c 	.word	0x2000001c
 8024f24:	0807a6d0 	.word	0x0807a6d0
 8024f28:	0807a6dd 	.word	0x0807a6dd
 8024f2c:	0807a70b 	.word	0x0807a70b

08024f30 <atexit>:
 8024f30:	2300      	movs	r3, #0
 8024f32:	4601      	mov	r1, r0
 8024f34:	461a      	mov	r2, r3
 8024f36:	4618      	mov	r0, r3
 8024f38:	f000 bd76 	b.w	8025a28 <__register_exitproc>

08024f3c <__errno>:
 8024f3c:	4b01      	ldr	r3, [pc, #4]	; (8024f44 <__errno+0x8>)
 8024f3e:	6818      	ldr	r0, [r3, #0]
 8024f40:	4770      	bx	lr
 8024f42:	bf00      	nop
 8024f44:	2000001c 	.word	0x2000001c

08024f48 <fiprintf>:
 8024f48:	b40e      	push	{r1, r2, r3}
 8024f4a:	b503      	push	{r0, r1, lr}
 8024f4c:	4601      	mov	r1, r0
 8024f4e:	ab03      	add	r3, sp, #12
 8024f50:	4805      	ldr	r0, [pc, #20]	; (8024f68 <fiprintf+0x20>)
 8024f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8024f56:	6800      	ldr	r0, [r0, #0]
 8024f58:	9301      	str	r3, [sp, #4]
 8024f5a:	f000 f93f 	bl	80251dc <_vfiprintf_r>
 8024f5e:	b002      	add	sp, #8
 8024f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8024f64:	b003      	add	sp, #12
 8024f66:	4770      	bx	lr
 8024f68:	2000001c 	.word	0x2000001c

08024f6c <__libc_init_array>:
 8024f6c:	b570      	push	{r4, r5, r6, lr}
 8024f6e:	4d0d      	ldr	r5, [pc, #52]	; (8024fa4 <__libc_init_array+0x38>)
 8024f70:	4c0d      	ldr	r4, [pc, #52]	; (8024fa8 <__libc_init_array+0x3c>)
 8024f72:	1b64      	subs	r4, r4, r5
 8024f74:	10a4      	asrs	r4, r4, #2
 8024f76:	2600      	movs	r6, #0
 8024f78:	42a6      	cmp	r6, r4
 8024f7a:	d109      	bne.n	8024f90 <__libc_init_array+0x24>
 8024f7c:	4d0b      	ldr	r5, [pc, #44]	; (8024fac <__libc_init_array+0x40>)
 8024f7e:	4c0c      	ldr	r4, [pc, #48]	; (8024fb0 <__libc_init_array+0x44>)
 8024f80:	f001 fa16 	bl	80263b0 <_init>
 8024f84:	1b64      	subs	r4, r4, r5
 8024f86:	10a4      	asrs	r4, r4, #2
 8024f88:	2600      	movs	r6, #0
 8024f8a:	42a6      	cmp	r6, r4
 8024f8c:	d105      	bne.n	8024f9a <__libc_init_array+0x2e>
 8024f8e:	bd70      	pop	{r4, r5, r6, pc}
 8024f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8024f94:	4798      	blx	r3
 8024f96:	3601      	adds	r6, #1
 8024f98:	e7ee      	b.n	8024f78 <__libc_init_array+0xc>
 8024f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8024f9e:	4798      	blx	r3
 8024fa0:	3601      	adds	r6, #1
 8024fa2:	e7f2      	b.n	8024f8a <__libc_init_array+0x1e>
 8024fa4:	0807a7ac 	.word	0x0807a7ac
 8024fa8:	0807a7ac 	.word	0x0807a7ac
 8024fac:	0807a7ac 	.word	0x0807a7ac
 8024fb0:	0807a7b0 	.word	0x0807a7b0

08024fb4 <malloc>:
 8024fb4:	4b02      	ldr	r3, [pc, #8]	; (8024fc0 <malloc+0xc>)
 8024fb6:	4601      	mov	r1, r0
 8024fb8:	6818      	ldr	r0, [r3, #0]
 8024fba:	f000 b88b 	b.w	80250d4 <_malloc_r>
 8024fbe:	bf00      	nop
 8024fc0:	2000001c 	.word	0x2000001c

08024fc4 <free>:
 8024fc4:	4b02      	ldr	r3, [pc, #8]	; (8024fd0 <free+0xc>)
 8024fc6:	4601      	mov	r1, r0
 8024fc8:	6818      	ldr	r0, [r3, #0]
 8024fca:	f000 b833 	b.w	8025034 <_free_r>
 8024fce:	bf00      	nop
 8024fd0:	2000001c 	.word	0x2000001c

08024fd4 <memcpy>:
 8024fd4:	440a      	add	r2, r1
 8024fd6:	4291      	cmp	r1, r2
 8024fd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8024fdc:	d100      	bne.n	8024fe0 <memcpy+0xc>
 8024fde:	4770      	bx	lr
 8024fe0:	b510      	push	{r4, lr}
 8024fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024fea:	4291      	cmp	r1, r2
 8024fec:	d1f9      	bne.n	8024fe2 <memcpy+0xe>
 8024fee:	bd10      	pop	{r4, pc}

08024ff0 <memmove>:
 8024ff0:	4288      	cmp	r0, r1
 8024ff2:	b510      	push	{r4, lr}
 8024ff4:	eb01 0402 	add.w	r4, r1, r2
 8024ff8:	d902      	bls.n	8025000 <memmove+0x10>
 8024ffa:	4284      	cmp	r4, r0
 8024ffc:	4623      	mov	r3, r4
 8024ffe:	d807      	bhi.n	8025010 <memmove+0x20>
 8025000:	1e43      	subs	r3, r0, #1
 8025002:	42a1      	cmp	r1, r4
 8025004:	d008      	beq.n	8025018 <memmove+0x28>
 8025006:	f811 2b01 	ldrb.w	r2, [r1], #1
 802500a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802500e:	e7f8      	b.n	8025002 <memmove+0x12>
 8025010:	4402      	add	r2, r0
 8025012:	4601      	mov	r1, r0
 8025014:	428a      	cmp	r2, r1
 8025016:	d100      	bne.n	802501a <memmove+0x2a>
 8025018:	bd10      	pop	{r4, pc}
 802501a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802501e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025022:	e7f7      	b.n	8025014 <memmove+0x24>

08025024 <memset>:
 8025024:	4402      	add	r2, r0
 8025026:	4603      	mov	r3, r0
 8025028:	4293      	cmp	r3, r2
 802502a:	d100      	bne.n	802502e <memset+0xa>
 802502c:	4770      	bx	lr
 802502e:	f803 1b01 	strb.w	r1, [r3], #1
 8025032:	e7f9      	b.n	8025028 <memset+0x4>

08025034 <_free_r>:
 8025034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025036:	2900      	cmp	r1, #0
 8025038:	d048      	beq.n	80250cc <_free_r+0x98>
 802503a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802503e:	9001      	str	r0, [sp, #4]
 8025040:	2b00      	cmp	r3, #0
 8025042:	f1a1 0404 	sub.w	r4, r1, #4
 8025046:	bfb8      	it	lt
 8025048:	18e4      	addlt	r4, r4, r3
 802504a:	f000 ff6f 	bl	8025f2c <__malloc_lock>
 802504e:	4a20      	ldr	r2, [pc, #128]	; (80250d0 <_free_r+0x9c>)
 8025050:	9801      	ldr	r0, [sp, #4]
 8025052:	6813      	ldr	r3, [r2, #0]
 8025054:	4615      	mov	r5, r2
 8025056:	b933      	cbnz	r3, 8025066 <_free_r+0x32>
 8025058:	6063      	str	r3, [r4, #4]
 802505a:	6014      	str	r4, [r2, #0]
 802505c:	b003      	add	sp, #12
 802505e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025062:	f000 bf69 	b.w	8025f38 <__malloc_unlock>
 8025066:	42a3      	cmp	r3, r4
 8025068:	d90b      	bls.n	8025082 <_free_r+0x4e>
 802506a:	6821      	ldr	r1, [r4, #0]
 802506c:	1862      	adds	r2, r4, r1
 802506e:	4293      	cmp	r3, r2
 8025070:	bf04      	itt	eq
 8025072:	681a      	ldreq	r2, [r3, #0]
 8025074:	685b      	ldreq	r3, [r3, #4]
 8025076:	6063      	str	r3, [r4, #4]
 8025078:	bf04      	itt	eq
 802507a:	1852      	addeq	r2, r2, r1
 802507c:	6022      	streq	r2, [r4, #0]
 802507e:	602c      	str	r4, [r5, #0]
 8025080:	e7ec      	b.n	802505c <_free_r+0x28>
 8025082:	461a      	mov	r2, r3
 8025084:	685b      	ldr	r3, [r3, #4]
 8025086:	b10b      	cbz	r3, 802508c <_free_r+0x58>
 8025088:	42a3      	cmp	r3, r4
 802508a:	d9fa      	bls.n	8025082 <_free_r+0x4e>
 802508c:	6811      	ldr	r1, [r2, #0]
 802508e:	1855      	adds	r5, r2, r1
 8025090:	42a5      	cmp	r5, r4
 8025092:	d10b      	bne.n	80250ac <_free_r+0x78>
 8025094:	6824      	ldr	r4, [r4, #0]
 8025096:	4421      	add	r1, r4
 8025098:	1854      	adds	r4, r2, r1
 802509a:	42a3      	cmp	r3, r4
 802509c:	6011      	str	r1, [r2, #0]
 802509e:	d1dd      	bne.n	802505c <_free_r+0x28>
 80250a0:	681c      	ldr	r4, [r3, #0]
 80250a2:	685b      	ldr	r3, [r3, #4]
 80250a4:	6053      	str	r3, [r2, #4]
 80250a6:	4421      	add	r1, r4
 80250a8:	6011      	str	r1, [r2, #0]
 80250aa:	e7d7      	b.n	802505c <_free_r+0x28>
 80250ac:	d902      	bls.n	80250b4 <_free_r+0x80>
 80250ae:	230c      	movs	r3, #12
 80250b0:	6003      	str	r3, [r0, #0]
 80250b2:	e7d3      	b.n	802505c <_free_r+0x28>
 80250b4:	6825      	ldr	r5, [r4, #0]
 80250b6:	1961      	adds	r1, r4, r5
 80250b8:	428b      	cmp	r3, r1
 80250ba:	bf04      	itt	eq
 80250bc:	6819      	ldreq	r1, [r3, #0]
 80250be:	685b      	ldreq	r3, [r3, #4]
 80250c0:	6063      	str	r3, [r4, #4]
 80250c2:	bf04      	itt	eq
 80250c4:	1949      	addeq	r1, r1, r5
 80250c6:	6021      	streq	r1, [r4, #0]
 80250c8:	6054      	str	r4, [r2, #4]
 80250ca:	e7c7      	b.n	802505c <_free_r+0x28>
 80250cc:	b003      	add	sp, #12
 80250ce:	bd30      	pop	{r4, r5, pc}
 80250d0:	200479d8 	.word	0x200479d8

080250d4 <_malloc_r>:
 80250d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80250d6:	1ccd      	adds	r5, r1, #3
 80250d8:	f025 0503 	bic.w	r5, r5, #3
 80250dc:	3508      	adds	r5, #8
 80250de:	2d0c      	cmp	r5, #12
 80250e0:	bf38      	it	cc
 80250e2:	250c      	movcc	r5, #12
 80250e4:	2d00      	cmp	r5, #0
 80250e6:	4606      	mov	r6, r0
 80250e8:	db01      	blt.n	80250ee <_malloc_r+0x1a>
 80250ea:	42a9      	cmp	r1, r5
 80250ec:	d903      	bls.n	80250f6 <_malloc_r+0x22>
 80250ee:	230c      	movs	r3, #12
 80250f0:	6033      	str	r3, [r6, #0]
 80250f2:	2000      	movs	r0, #0
 80250f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80250f6:	f000 ff19 	bl	8025f2c <__malloc_lock>
 80250fa:	4921      	ldr	r1, [pc, #132]	; (8025180 <_malloc_r+0xac>)
 80250fc:	680a      	ldr	r2, [r1, #0]
 80250fe:	4614      	mov	r4, r2
 8025100:	b99c      	cbnz	r4, 802512a <_malloc_r+0x56>
 8025102:	4f20      	ldr	r7, [pc, #128]	; (8025184 <_malloc_r+0xb0>)
 8025104:	683b      	ldr	r3, [r7, #0]
 8025106:	b923      	cbnz	r3, 8025112 <_malloc_r+0x3e>
 8025108:	4621      	mov	r1, r4
 802510a:	4630      	mov	r0, r6
 802510c:	f000 fb2a 	bl	8025764 <_sbrk_r>
 8025110:	6038      	str	r0, [r7, #0]
 8025112:	4629      	mov	r1, r5
 8025114:	4630      	mov	r0, r6
 8025116:	f000 fb25 	bl	8025764 <_sbrk_r>
 802511a:	1c43      	adds	r3, r0, #1
 802511c:	d123      	bne.n	8025166 <_malloc_r+0x92>
 802511e:	230c      	movs	r3, #12
 8025120:	6033      	str	r3, [r6, #0]
 8025122:	4630      	mov	r0, r6
 8025124:	f000 ff08 	bl	8025f38 <__malloc_unlock>
 8025128:	e7e3      	b.n	80250f2 <_malloc_r+0x1e>
 802512a:	6823      	ldr	r3, [r4, #0]
 802512c:	1b5b      	subs	r3, r3, r5
 802512e:	d417      	bmi.n	8025160 <_malloc_r+0x8c>
 8025130:	2b0b      	cmp	r3, #11
 8025132:	d903      	bls.n	802513c <_malloc_r+0x68>
 8025134:	6023      	str	r3, [r4, #0]
 8025136:	441c      	add	r4, r3
 8025138:	6025      	str	r5, [r4, #0]
 802513a:	e004      	b.n	8025146 <_malloc_r+0x72>
 802513c:	6863      	ldr	r3, [r4, #4]
 802513e:	42a2      	cmp	r2, r4
 8025140:	bf0c      	ite	eq
 8025142:	600b      	streq	r3, [r1, #0]
 8025144:	6053      	strne	r3, [r2, #4]
 8025146:	4630      	mov	r0, r6
 8025148:	f000 fef6 	bl	8025f38 <__malloc_unlock>
 802514c:	f104 000b 	add.w	r0, r4, #11
 8025150:	1d23      	adds	r3, r4, #4
 8025152:	f020 0007 	bic.w	r0, r0, #7
 8025156:	1ac2      	subs	r2, r0, r3
 8025158:	d0cc      	beq.n	80250f4 <_malloc_r+0x20>
 802515a:	1a1b      	subs	r3, r3, r0
 802515c:	50a3      	str	r3, [r4, r2]
 802515e:	e7c9      	b.n	80250f4 <_malloc_r+0x20>
 8025160:	4622      	mov	r2, r4
 8025162:	6864      	ldr	r4, [r4, #4]
 8025164:	e7cc      	b.n	8025100 <_malloc_r+0x2c>
 8025166:	1cc4      	adds	r4, r0, #3
 8025168:	f024 0403 	bic.w	r4, r4, #3
 802516c:	42a0      	cmp	r0, r4
 802516e:	d0e3      	beq.n	8025138 <_malloc_r+0x64>
 8025170:	1a21      	subs	r1, r4, r0
 8025172:	4630      	mov	r0, r6
 8025174:	f000 faf6 	bl	8025764 <_sbrk_r>
 8025178:	3001      	adds	r0, #1
 802517a:	d1dd      	bne.n	8025138 <_malloc_r+0x64>
 802517c:	e7cf      	b.n	802511e <_malloc_r+0x4a>
 802517e:	bf00      	nop
 8025180:	200479d8 	.word	0x200479d8
 8025184:	200479dc 	.word	0x200479dc

08025188 <__sfputc_r>:
 8025188:	6893      	ldr	r3, [r2, #8]
 802518a:	3b01      	subs	r3, #1
 802518c:	2b00      	cmp	r3, #0
 802518e:	b410      	push	{r4}
 8025190:	6093      	str	r3, [r2, #8]
 8025192:	da08      	bge.n	80251a6 <__sfputc_r+0x1e>
 8025194:	6994      	ldr	r4, [r2, #24]
 8025196:	42a3      	cmp	r3, r4
 8025198:	db01      	blt.n	802519e <__sfputc_r+0x16>
 802519a:	290a      	cmp	r1, #10
 802519c:	d103      	bne.n	80251a6 <__sfputc_r+0x1e>
 802519e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80251a2:	f000 bb81 	b.w	80258a8 <__swbuf_r>
 80251a6:	6813      	ldr	r3, [r2, #0]
 80251a8:	1c58      	adds	r0, r3, #1
 80251aa:	6010      	str	r0, [r2, #0]
 80251ac:	7019      	strb	r1, [r3, #0]
 80251ae:	4608      	mov	r0, r1
 80251b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80251b4:	4770      	bx	lr

080251b6 <__sfputs_r>:
 80251b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80251b8:	4606      	mov	r6, r0
 80251ba:	460f      	mov	r7, r1
 80251bc:	4614      	mov	r4, r2
 80251be:	18d5      	adds	r5, r2, r3
 80251c0:	42ac      	cmp	r4, r5
 80251c2:	d101      	bne.n	80251c8 <__sfputs_r+0x12>
 80251c4:	2000      	movs	r0, #0
 80251c6:	e007      	b.n	80251d8 <__sfputs_r+0x22>
 80251c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80251cc:	463a      	mov	r2, r7
 80251ce:	4630      	mov	r0, r6
 80251d0:	f7ff ffda 	bl	8025188 <__sfputc_r>
 80251d4:	1c43      	adds	r3, r0, #1
 80251d6:	d1f3      	bne.n	80251c0 <__sfputs_r+0xa>
 80251d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080251dc <_vfiprintf_r>:
 80251dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251e0:	460d      	mov	r5, r1
 80251e2:	b09d      	sub	sp, #116	; 0x74
 80251e4:	4614      	mov	r4, r2
 80251e6:	4698      	mov	r8, r3
 80251e8:	4606      	mov	r6, r0
 80251ea:	b118      	cbz	r0, 80251f4 <_vfiprintf_r+0x18>
 80251ec:	6983      	ldr	r3, [r0, #24]
 80251ee:	b90b      	cbnz	r3, 80251f4 <_vfiprintf_r+0x18>
 80251f0:	f000 fd96 	bl	8025d20 <__sinit>
 80251f4:	4b89      	ldr	r3, [pc, #548]	; (802541c <_vfiprintf_r+0x240>)
 80251f6:	429d      	cmp	r5, r3
 80251f8:	d11b      	bne.n	8025232 <_vfiprintf_r+0x56>
 80251fa:	6875      	ldr	r5, [r6, #4]
 80251fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80251fe:	07d9      	lsls	r1, r3, #31
 8025200:	d405      	bmi.n	802520e <_vfiprintf_r+0x32>
 8025202:	89ab      	ldrh	r3, [r5, #12]
 8025204:	059a      	lsls	r2, r3, #22
 8025206:	d402      	bmi.n	802520e <_vfiprintf_r+0x32>
 8025208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802520a:	f000 fe27 	bl	8025e5c <__retarget_lock_acquire_recursive>
 802520e:	89ab      	ldrh	r3, [r5, #12]
 8025210:	071b      	lsls	r3, r3, #28
 8025212:	d501      	bpl.n	8025218 <_vfiprintf_r+0x3c>
 8025214:	692b      	ldr	r3, [r5, #16]
 8025216:	b9eb      	cbnz	r3, 8025254 <_vfiprintf_r+0x78>
 8025218:	4629      	mov	r1, r5
 802521a:	4630      	mov	r0, r6
 802521c:	f000 fb96 	bl	802594c <__swsetup_r>
 8025220:	b1c0      	cbz	r0, 8025254 <_vfiprintf_r+0x78>
 8025222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025224:	07dc      	lsls	r4, r3, #31
 8025226:	d50e      	bpl.n	8025246 <_vfiprintf_r+0x6a>
 8025228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802522c:	b01d      	add	sp, #116	; 0x74
 802522e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025232:	4b7b      	ldr	r3, [pc, #492]	; (8025420 <_vfiprintf_r+0x244>)
 8025234:	429d      	cmp	r5, r3
 8025236:	d101      	bne.n	802523c <_vfiprintf_r+0x60>
 8025238:	68b5      	ldr	r5, [r6, #8]
 802523a:	e7df      	b.n	80251fc <_vfiprintf_r+0x20>
 802523c:	4b79      	ldr	r3, [pc, #484]	; (8025424 <_vfiprintf_r+0x248>)
 802523e:	429d      	cmp	r5, r3
 8025240:	bf08      	it	eq
 8025242:	68f5      	ldreq	r5, [r6, #12]
 8025244:	e7da      	b.n	80251fc <_vfiprintf_r+0x20>
 8025246:	89ab      	ldrh	r3, [r5, #12]
 8025248:	0598      	lsls	r0, r3, #22
 802524a:	d4ed      	bmi.n	8025228 <_vfiprintf_r+0x4c>
 802524c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802524e:	f000 fe07 	bl	8025e60 <__retarget_lock_release_recursive>
 8025252:	e7e9      	b.n	8025228 <_vfiprintf_r+0x4c>
 8025254:	2300      	movs	r3, #0
 8025256:	9309      	str	r3, [sp, #36]	; 0x24
 8025258:	2320      	movs	r3, #32
 802525a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802525e:	f8cd 800c 	str.w	r8, [sp, #12]
 8025262:	2330      	movs	r3, #48	; 0x30
 8025264:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8025428 <_vfiprintf_r+0x24c>
 8025268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802526c:	f04f 0901 	mov.w	r9, #1
 8025270:	4623      	mov	r3, r4
 8025272:	469a      	mov	sl, r3
 8025274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025278:	b10a      	cbz	r2, 802527e <_vfiprintf_r+0xa2>
 802527a:	2a25      	cmp	r2, #37	; 0x25
 802527c:	d1f9      	bne.n	8025272 <_vfiprintf_r+0x96>
 802527e:	ebba 0b04 	subs.w	fp, sl, r4
 8025282:	d00b      	beq.n	802529c <_vfiprintf_r+0xc0>
 8025284:	465b      	mov	r3, fp
 8025286:	4622      	mov	r2, r4
 8025288:	4629      	mov	r1, r5
 802528a:	4630      	mov	r0, r6
 802528c:	f7ff ff93 	bl	80251b6 <__sfputs_r>
 8025290:	3001      	adds	r0, #1
 8025292:	f000 80aa 	beq.w	80253ea <_vfiprintf_r+0x20e>
 8025296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025298:	445a      	add	r2, fp
 802529a:	9209      	str	r2, [sp, #36]	; 0x24
 802529c:	f89a 3000 	ldrb.w	r3, [sl]
 80252a0:	2b00      	cmp	r3, #0
 80252a2:	f000 80a2 	beq.w	80253ea <_vfiprintf_r+0x20e>
 80252a6:	2300      	movs	r3, #0
 80252a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80252ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80252b0:	f10a 0a01 	add.w	sl, sl, #1
 80252b4:	9304      	str	r3, [sp, #16]
 80252b6:	9307      	str	r3, [sp, #28]
 80252b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80252bc:	931a      	str	r3, [sp, #104]	; 0x68
 80252be:	4654      	mov	r4, sl
 80252c0:	2205      	movs	r2, #5
 80252c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80252c6:	4858      	ldr	r0, [pc, #352]	; (8025428 <_vfiprintf_r+0x24c>)
 80252c8:	f7da ffaa 	bl	8000220 <memchr>
 80252cc:	9a04      	ldr	r2, [sp, #16]
 80252ce:	b9d8      	cbnz	r0, 8025308 <_vfiprintf_r+0x12c>
 80252d0:	06d1      	lsls	r1, r2, #27
 80252d2:	bf44      	itt	mi
 80252d4:	2320      	movmi	r3, #32
 80252d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80252da:	0713      	lsls	r3, r2, #28
 80252dc:	bf44      	itt	mi
 80252de:	232b      	movmi	r3, #43	; 0x2b
 80252e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80252e4:	f89a 3000 	ldrb.w	r3, [sl]
 80252e8:	2b2a      	cmp	r3, #42	; 0x2a
 80252ea:	d015      	beq.n	8025318 <_vfiprintf_r+0x13c>
 80252ec:	9a07      	ldr	r2, [sp, #28]
 80252ee:	4654      	mov	r4, sl
 80252f0:	2000      	movs	r0, #0
 80252f2:	f04f 0c0a 	mov.w	ip, #10
 80252f6:	4621      	mov	r1, r4
 80252f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80252fc:	3b30      	subs	r3, #48	; 0x30
 80252fe:	2b09      	cmp	r3, #9
 8025300:	d94e      	bls.n	80253a0 <_vfiprintf_r+0x1c4>
 8025302:	b1b0      	cbz	r0, 8025332 <_vfiprintf_r+0x156>
 8025304:	9207      	str	r2, [sp, #28]
 8025306:	e014      	b.n	8025332 <_vfiprintf_r+0x156>
 8025308:	eba0 0308 	sub.w	r3, r0, r8
 802530c:	fa09 f303 	lsl.w	r3, r9, r3
 8025310:	4313      	orrs	r3, r2
 8025312:	9304      	str	r3, [sp, #16]
 8025314:	46a2      	mov	sl, r4
 8025316:	e7d2      	b.n	80252be <_vfiprintf_r+0xe2>
 8025318:	9b03      	ldr	r3, [sp, #12]
 802531a:	1d19      	adds	r1, r3, #4
 802531c:	681b      	ldr	r3, [r3, #0]
 802531e:	9103      	str	r1, [sp, #12]
 8025320:	2b00      	cmp	r3, #0
 8025322:	bfbb      	ittet	lt
 8025324:	425b      	neglt	r3, r3
 8025326:	f042 0202 	orrlt.w	r2, r2, #2
 802532a:	9307      	strge	r3, [sp, #28]
 802532c:	9307      	strlt	r3, [sp, #28]
 802532e:	bfb8      	it	lt
 8025330:	9204      	strlt	r2, [sp, #16]
 8025332:	7823      	ldrb	r3, [r4, #0]
 8025334:	2b2e      	cmp	r3, #46	; 0x2e
 8025336:	d10c      	bne.n	8025352 <_vfiprintf_r+0x176>
 8025338:	7863      	ldrb	r3, [r4, #1]
 802533a:	2b2a      	cmp	r3, #42	; 0x2a
 802533c:	d135      	bne.n	80253aa <_vfiprintf_r+0x1ce>
 802533e:	9b03      	ldr	r3, [sp, #12]
 8025340:	1d1a      	adds	r2, r3, #4
 8025342:	681b      	ldr	r3, [r3, #0]
 8025344:	9203      	str	r2, [sp, #12]
 8025346:	2b00      	cmp	r3, #0
 8025348:	bfb8      	it	lt
 802534a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802534e:	3402      	adds	r4, #2
 8025350:	9305      	str	r3, [sp, #20]
 8025352:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8025438 <_vfiprintf_r+0x25c>
 8025356:	7821      	ldrb	r1, [r4, #0]
 8025358:	2203      	movs	r2, #3
 802535a:	4650      	mov	r0, sl
 802535c:	f7da ff60 	bl	8000220 <memchr>
 8025360:	b140      	cbz	r0, 8025374 <_vfiprintf_r+0x198>
 8025362:	2340      	movs	r3, #64	; 0x40
 8025364:	eba0 000a 	sub.w	r0, r0, sl
 8025368:	fa03 f000 	lsl.w	r0, r3, r0
 802536c:	9b04      	ldr	r3, [sp, #16]
 802536e:	4303      	orrs	r3, r0
 8025370:	3401      	adds	r4, #1
 8025372:	9304      	str	r3, [sp, #16]
 8025374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025378:	482c      	ldr	r0, [pc, #176]	; (802542c <_vfiprintf_r+0x250>)
 802537a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802537e:	2206      	movs	r2, #6
 8025380:	f7da ff4e 	bl	8000220 <memchr>
 8025384:	2800      	cmp	r0, #0
 8025386:	d03f      	beq.n	8025408 <_vfiprintf_r+0x22c>
 8025388:	4b29      	ldr	r3, [pc, #164]	; (8025430 <_vfiprintf_r+0x254>)
 802538a:	bb1b      	cbnz	r3, 80253d4 <_vfiprintf_r+0x1f8>
 802538c:	9b03      	ldr	r3, [sp, #12]
 802538e:	3307      	adds	r3, #7
 8025390:	f023 0307 	bic.w	r3, r3, #7
 8025394:	3308      	adds	r3, #8
 8025396:	9303      	str	r3, [sp, #12]
 8025398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802539a:	443b      	add	r3, r7
 802539c:	9309      	str	r3, [sp, #36]	; 0x24
 802539e:	e767      	b.n	8025270 <_vfiprintf_r+0x94>
 80253a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80253a4:	460c      	mov	r4, r1
 80253a6:	2001      	movs	r0, #1
 80253a8:	e7a5      	b.n	80252f6 <_vfiprintf_r+0x11a>
 80253aa:	2300      	movs	r3, #0
 80253ac:	3401      	adds	r4, #1
 80253ae:	9305      	str	r3, [sp, #20]
 80253b0:	4619      	mov	r1, r3
 80253b2:	f04f 0c0a 	mov.w	ip, #10
 80253b6:	4620      	mov	r0, r4
 80253b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80253bc:	3a30      	subs	r2, #48	; 0x30
 80253be:	2a09      	cmp	r2, #9
 80253c0:	d903      	bls.n	80253ca <_vfiprintf_r+0x1ee>
 80253c2:	2b00      	cmp	r3, #0
 80253c4:	d0c5      	beq.n	8025352 <_vfiprintf_r+0x176>
 80253c6:	9105      	str	r1, [sp, #20]
 80253c8:	e7c3      	b.n	8025352 <_vfiprintf_r+0x176>
 80253ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80253ce:	4604      	mov	r4, r0
 80253d0:	2301      	movs	r3, #1
 80253d2:	e7f0      	b.n	80253b6 <_vfiprintf_r+0x1da>
 80253d4:	ab03      	add	r3, sp, #12
 80253d6:	9300      	str	r3, [sp, #0]
 80253d8:	462a      	mov	r2, r5
 80253da:	4b16      	ldr	r3, [pc, #88]	; (8025434 <_vfiprintf_r+0x258>)
 80253dc:	a904      	add	r1, sp, #16
 80253de:	4630      	mov	r0, r6
 80253e0:	f3af 8000 	nop.w
 80253e4:	4607      	mov	r7, r0
 80253e6:	1c78      	adds	r0, r7, #1
 80253e8:	d1d6      	bne.n	8025398 <_vfiprintf_r+0x1bc>
 80253ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80253ec:	07d9      	lsls	r1, r3, #31
 80253ee:	d405      	bmi.n	80253fc <_vfiprintf_r+0x220>
 80253f0:	89ab      	ldrh	r3, [r5, #12]
 80253f2:	059a      	lsls	r2, r3, #22
 80253f4:	d402      	bmi.n	80253fc <_vfiprintf_r+0x220>
 80253f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80253f8:	f000 fd32 	bl	8025e60 <__retarget_lock_release_recursive>
 80253fc:	89ab      	ldrh	r3, [r5, #12]
 80253fe:	065b      	lsls	r3, r3, #25
 8025400:	f53f af12 	bmi.w	8025228 <_vfiprintf_r+0x4c>
 8025404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025406:	e711      	b.n	802522c <_vfiprintf_r+0x50>
 8025408:	ab03      	add	r3, sp, #12
 802540a:	9300      	str	r3, [sp, #0]
 802540c:	462a      	mov	r2, r5
 802540e:	4b09      	ldr	r3, [pc, #36]	; (8025434 <_vfiprintf_r+0x258>)
 8025410:	a904      	add	r1, sp, #16
 8025412:	4630      	mov	r0, r6
 8025414:	f000 f880 	bl	8025518 <_printf_i>
 8025418:	e7e4      	b.n	80253e4 <_vfiprintf_r+0x208>
 802541a:	bf00      	nop
 802541c:	0807a764 	.word	0x0807a764
 8025420:	0807a784 	.word	0x0807a784
 8025424:	0807a744 	.word	0x0807a744
 8025428:	0807a710 	.word	0x0807a710
 802542c:	0807a71a 	.word	0x0807a71a
 8025430:	00000000 	.word	0x00000000
 8025434:	080251b7 	.word	0x080251b7
 8025438:	0807a716 	.word	0x0807a716

0802543c <_printf_common>:
 802543c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025440:	4616      	mov	r6, r2
 8025442:	4699      	mov	r9, r3
 8025444:	688a      	ldr	r2, [r1, #8]
 8025446:	690b      	ldr	r3, [r1, #16]
 8025448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802544c:	4293      	cmp	r3, r2
 802544e:	bfb8      	it	lt
 8025450:	4613      	movlt	r3, r2
 8025452:	6033      	str	r3, [r6, #0]
 8025454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025458:	4607      	mov	r7, r0
 802545a:	460c      	mov	r4, r1
 802545c:	b10a      	cbz	r2, 8025462 <_printf_common+0x26>
 802545e:	3301      	adds	r3, #1
 8025460:	6033      	str	r3, [r6, #0]
 8025462:	6823      	ldr	r3, [r4, #0]
 8025464:	0699      	lsls	r1, r3, #26
 8025466:	bf42      	ittt	mi
 8025468:	6833      	ldrmi	r3, [r6, #0]
 802546a:	3302      	addmi	r3, #2
 802546c:	6033      	strmi	r3, [r6, #0]
 802546e:	6825      	ldr	r5, [r4, #0]
 8025470:	f015 0506 	ands.w	r5, r5, #6
 8025474:	d106      	bne.n	8025484 <_printf_common+0x48>
 8025476:	f104 0a19 	add.w	sl, r4, #25
 802547a:	68e3      	ldr	r3, [r4, #12]
 802547c:	6832      	ldr	r2, [r6, #0]
 802547e:	1a9b      	subs	r3, r3, r2
 8025480:	42ab      	cmp	r3, r5
 8025482:	dc26      	bgt.n	80254d2 <_printf_common+0x96>
 8025484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025488:	1e13      	subs	r3, r2, #0
 802548a:	6822      	ldr	r2, [r4, #0]
 802548c:	bf18      	it	ne
 802548e:	2301      	movne	r3, #1
 8025490:	0692      	lsls	r2, r2, #26
 8025492:	d42b      	bmi.n	80254ec <_printf_common+0xb0>
 8025494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025498:	4649      	mov	r1, r9
 802549a:	4638      	mov	r0, r7
 802549c:	47c0      	blx	r8
 802549e:	3001      	adds	r0, #1
 80254a0:	d01e      	beq.n	80254e0 <_printf_common+0xa4>
 80254a2:	6823      	ldr	r3, [r4, #0]
 80254a4:	68e5      	ldr	r5, [r4, #12]
 80254a6:	6832      	ldr	r2, [r6, #0]
 80254a8:	f003 0306 	and.w	r3, r3, #6
 80254ac:	2b04      	cmp	r3, #4
 80254ae:	bf08      	it	eq
 80254b0:	1aad      	subeq	r5, r5, r2
 80254b2:	68a3      	ldr	r3, [r4, #8]
 80254b4:	6922      	ldr	r2, [r4, #16]
 80254b6:	bf0c      	ite	eq
 80254b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80254bc:	2500      	movne	r5, #0
 80254be:	4293      	cmp	r3, r2
 80254c0:	bfc4      	itt	gt
 80254c2:	1a9b      	subgt	r3, r3, r2
 80254c4:	18ed      	addgt	r5, r5, r3
 80254c6:	2600      	movs	r6, #0
 80254c8:	341a      	adds	r4, #26
 80254ca:	42b5      	cmp	r5, r6
 80254cc:	d11a      	bne.n	8025504 <_printf_common+0xc8>
 80254ce:	2000      	movs	r0, #0
 80254d0:	e008      	b.n	80254e4 <_printf_common+0xa8>
 80254d2:	2301      	movs	r3, #1
 80254d4:	4652      	mov	r2, sl
 80254d6:	4649      	mov	r1, r9
 80254d8:	4638      	mov	r0, r7
 80254da:	47c0      	blx	r8
 80254dc:	3001      	adds	r0, #1
 80254de:	d103      	bne.n	80254e8 <_printf_common+0xac>
 80254e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80254e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80254e8:	3501      	adds	r5, #1
 80254ea:	e7c6      	b.n	802547a <_printf_common+0x3e>
 80254ec:	18e1      	adds	r1, r4, r3
 80254ee:	1c5a      	adds	r2, r3, #1
 80254f0:	2030      	movs	r0, #48	; 0x30
 80254f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80254f6:	4422      	add	r2, r4
 80254f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80254fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025500:	3302      	adds	r3, #2
 8025502:	e7c7      	b.n	8025494 <_printf_common+0x58>
 8025504:	2301      	movs	r3, #1
 8025506:	4622      	mov	r2, r4
 8025508:	4649      	mov	r1, r9
 802550a:	4638      	mov	r0, r7
 802550c:	47c0      	blx	r8
 802550e:	3001      	adds	r0, #1
 8025510:	d0e6      	beq.n	80254e0 <_printf_common+0xa4>
 8025512:	3601      	adds	r6, #1
 8025514:	e7d9      	b.n	80254ca <_printf_common+0x8e>
	...

08025518 <_printf_i>:
 8025518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802551c:	460c      	mov	r4, r1
 802551e:	4691      	mov	r9, r2
 8025520:	7e27      	ldrb	r7, [r4, #24]
 8025522:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025524:	2f78      	cmp	r7, #120	; 0x78
 8025526:	4680      	mov	r8, r0
 8025528:	469a      	mov	sl, r3
 802552a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802552e:	d807      	bhi.n	8025540 <_printf_i+0x28>
 8025530:	2f62      	cmp	r7, #98	; 0x62
 8025532:	d80a      	bhi.n	802554a <_printf_i+0x32>
 8025534:	2f00      	cmp	r7, #0
 8025536:	f000 80d8 	beq.w	80256ea <_printf_i+0x1d2>
 802553a:	2f58      	cmp	r7, #88	; 0x58
 802553c:	f000 80a3 	beq.w	8025686 <_printf_i+0x16e>
 8025540:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025548:	e03a      	b.n	80255c0 <_printf_i+0xa8>
 802554a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802554e:	2b15      	cmp	r3, #21
 8025550:	d8f6      	bhi.n	8025540 <_printf_i+0x28>
 8025552:	a001      	add	r0, pc, #4	; (adr r0, 8025558 <_printf_i+0x40>)
 8025554:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8025558:	080255b1 	.word	0x080255b1
 802555c:	080255c5 	.word	0x080255c5
 8025560:	08025541 	.word	0x08025541
 8025564:	08025541 	.word	0x08025541
 8025568:	08025541 	.word	0x08025541
 802556c:	08025541 	.word	0x08025541
 8025570:	080255c5 	.word	0x080255c5
 8025574:	08025541 	.word	0x08025541
 8025578:	08025541 	.word	0x08025541
 802557c:	08025541 	.word	0x08025541
 8025580:	08025541 	.word	0x08025541
 8025584:	080256d1 	.word	0x080256d1
 8025588:	080255f5 	.word	0x080255f5
 802558c:	080256b3 	.word	0x080256b3
 8025590:	08025541 	.word	0x08025541
 8025594:	08025541 	.word	0x08025541
 8025598:	080256f3 	.word	0x080256f3
 802559c:	08025541 	.word	0x08025541
 80255a0:	080255f5 	.word	0x080255f5
 80255a4:	08025541 	.word	0x08025541
 80255a8:	08025541 	.word	0x08025541
 80255ac:	080256bb 	.word	0x080256bb
 80255b0:	680b      	ldr	r3, [r1, #0]
 80255b2:	1d1a      	adds	r2, r3, #4
 80255b4:	681b      	ldr	r3, [r3, #0]
 80255b6:	600a      	str	r2, [r1, #0]
 80255b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80255bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80255c0:	2301      	movs	r3, #1
 80255c2:	e0a3      	b.n	802570c <_printf_i+0x1f4>
 80255c4:	6825      	ldr	r5, [r4, #0]
 80255c6:	6808      	ldr	r0, [r1, #0]
 80255c8:	062e      	lsls	r6, r5, #24
 80255ca:	f100 0304 	add.w	r3, r0, #4
 80255ce:	d50a      	bpl.n	80255e6 <_printf_i+0xce>
 80255d0:	6805      	ldr	r5, [r0, #0]
 80255d2:	600b      	str	r3, [r1, #0]
 80255d4:	2d00      	cmp	r5, #0
 80255d6:	da03      	bge.n	80255e0 <_printf_i+0xc8>
 80255d8:	232d      	movs	r3, #45	; 0x2d
 80255da:	426d      	negs	r5, r5
 80255dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80255e0:	485e      	ldr	r0, [pc, #376]	; (802575c <_printf_i+0x244>)
 80255e2:	230a      	movs	r3, #10
 80255e4:	e019      	b.n	802561a <_printf_i+0x102>
 80255e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80255ea:	6805      	ldr	r5, [r0, #0]
 80255ec:	600b      	str	r3, [r1, #0]
 80255ee:	bf18      	it	ne
 80255f0:	b22d      	sxthne	r5, r5
 80255f2:	e7ef      	b.n	80255d4 <_printf_i+0xbc>
 80255f4:	680b      	ldr	r3, [r1, #0]
 80255f6:	6825      	ldr	r5, [r4, #0]
 80255f8:	1d18      	adds	r0, r3, #4
 80255fa:	6008      	str	r0, [r1, #0]
 80255fc:	0628      	lsls	r0, r5, #24
 80255fe:	d501      	bpl.n	8025604 <_printf_i+0xec>
 8025600:	681d      	ldr	r5, [r3, #0]
 8025602:	e002      	b.n	802560a <_printf_i+0xf2>
 8025604:	0669      	lsls	r1, r5, #25
 8025606:	d5fb      	bpl.n	8025600 <_printf_i+0xe8>
 8025608:	881d      	ldrh	r5, [r3, #0]
 802560a:	4854      	ldr	r0, [pc, #336]	; (802575c <_printf_i+0x244>)
 802560c:	2f6f      	cmp	r7, #111	; 0x6f
 802560e:	bf0c      	ite	eq
 8025610:	2308      	moveq	r3, #8
 8025612:	230a      	movne	r3, #10
 8025614:	2100      	movs	r1, #0
 8025616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802561a:	6866      	ldr	r6, [r4, #4]
 802561c:	60a6      	str	r6, [r4, #8]
 802561e:	2e00      	cmp	r6, #0
 8025620:	bfa2      	ittt	ge
 8025622:	6821      	ldrge	r1, [r4, #0]
 8025624:	f021 0104 	bicge.w	r1, r1, #4
 8025628:	6021      	strge	r1, [r4, #0]
 802562a:	b90d      	cbnz	r5, 8025630 <_printf_i+0x118>
 802562c:	2e00      	cmp	r6, #0
 802562e:	d04d      	beq.n	80256cc <_printf_i+0x1b4>
 8025630:	4616      	mov	r6, r2
 8025632:	fbb5 f1f3 	udiv	r1, r5, r3
 8025636:	fb03 5711 	mls	r7, r3, r1, r5
 802563a:	5dc7      	ldrb	r7, [r0, r7]
 802563c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025640:	462f      	mov	r7, r5
 8025642:	42bb      	cmp	r3, r7
 8025644:	460d      	mov	r5, r1
 8025646:	d9f4      	bls.n	8025632 <_printf_i+0x11a>
 8025648:	2b08      	cmp	r3, #8
 802564a:	d10b      	bne.n	8025664 <_printf_i+0x14c>
 802564c:	6823      	ldr	r3, [r4, #0]
 802564e:	07df      	lsls	r7, r3, #31
 8025650:	d508      	bpl.n	8025664 <_printf_i+0x14c>
 8025652:	6923      	ldr	r3, [r4, #16]
 8025654:	6861      	ldr	r1, [r4, #4]
 8025656:	4299      	cmp	r1, r3
 8025658:	bfde      	ittt	le
 802565a:	2330      	movle	r3, #48	; 0x30
 802565c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025660:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8025664:	1b92      	subs	r2, r2, r6
 8025666:	6122      	str	r2, [r4, #16]
 8025668:	f8cd a000 	str.w	sl, [sp]
 802566c:	464b      	mov	r3, r9
 802566e:	aa03      	add	r2, sp, #12
 8025670:	4621      	mov	r1, r4
 8025672:	4640      	mov	r0, r8
 8025674:	f7ff fee2 	bl	802543c <_printf_common>
 8025678:	3001      	adds	r0, #1
 802567a:	d14c      	bne.n	8025716 <_printf_i+0x1fe>
 802567c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025680:	b004      	add	sp, #16
 8025682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025686:	4835      	ldr	r0, [pc, #212]	; (802575c <_printf_i+0x244>)
 8025688:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802568c:	6823      	ldr	r3, [r4, #0]
 802568e:	680e      	ldr	r6, [r1, #0]
 8025690:	061f      	lsls	r7, r3, #24
 8025692:	f856 5b04 	ldr.w	r5, [r6], #4
 8025696:	600e      	str	r6, [r1, #0]
 8025698:	d514      	bpl.n	80256c4 <_printf_i+0x1ac>
 802569a:	07d9      	lsls	r1, r3, #31
 802569c:	bf44      	itt	mi
 802569e:	f043 0320 	orrmi.w	r3, r3, #32
 80256a2:	6023      	strmi	r3, [r4, #0]
 80256a4:	b91d      	cbnz	r5, 80256ae <_printf_i+0x196>
 80256a6:	6823      	ldr	r3, [r4, #0]
 80256a8:	f023 0320 	bic.w	r3, r3, #32
 80256ac:	6023      	str	r3, [r4, #0]
 80256ae:	2310      	movs	r3, #16
 80256b0:	e7b0      	b.n	8025614 <_printf_i+0xfc>
 80256b2:	6823      	ldr	r3, [r4, #0]
 80256b4:	f043 0320 	orr.w	r3, r3, #32
 80256b8:	6023      	str	r3, [r4, #0]
 80256ba:	2378      	movs	r3, #120	; 0x78
 80256bc:	4828      	ldr	r0, [pc, #160]	; (8025760 <_printf_i+0x248>)
 80256be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80256c2:	e7e3      	b.n	802568c <_printf_i+0x174>
 80256c4:	065e      	lsls	r6, r3, #25
 80256c6:	bf48      	it	mi
 80256c8:	b2ad      	uxthmi	r5, r5
 80256ca:	e7e6      	b.n	802569a <_printf_i+0x182>
 80256cc:	4616      	mov	r6, r2
 80256ce:	e7bb      	b.n	8025648 <_printf_i+0x130>
 80256d0:	680b      	ldr	r3, [r1, #0]
 80256d2:	6826      	ldr	r6, [r4, #0]
 80256d4:	6960      	ldr	r0, [r4, #20]
 80256d6:	1d1d      	adds	r5, r3, #4
 80256d8:	600d      	str	r5, [r1, #0]
 80256da:	0635      	lsls	r5, r6, #24
 80256dc:	681b      	ldr	r3, [r3, #0]
 80256de:	d501      	bpl.n	80256e4 <_printf_i+0x1cc>
 80256e0:	6018      	str	r0, [r3, #0]
 80256e2:	e002      	b.n	80256ea <_printf_i+0x1d2>
 80256e4:	0671      	lsls	r1, r6, #25
 80256e6:	d5fb      	bpl.n	80256e0 <_printf_i+0x1c8>
 80256e8:	8018      	strh	r0, [r3, #0]
 80256ea:	2300      	movs	r3, #0
 80256ec:	6123      	str	r3, [r4, #16]
 80256ee:	4616      	mov	r6, r2
 80256f0:	e7ba      	b.n	8025668 <_printf_i+0x150>
 80256f2:	680b      	ldr	r3, [r1, #0]
 80256f4:	1d1a      	adds	r2, r3, #4
 80256f6:	600a      	str	r2, [r1, #0]
 80256f8:	681e      	ldr	r6, [r3, #0]
 80256fa:	6862      	ldr	r2, [r4, #4]
 80256fc:	2100      	movs	r1, #0
 80256fe:	4630      	mov	r0, r6
 8025700:	f7da fd8e 	bl	8000220 <memchr>
 8025704:	b108      	cbz	r0, 802570a <_printf_i+0x1f2>
 8025706:	1b80      	subs	r0, r0, r6
 8025708:	6060      	str	r0, [r4, #4]
 802570a:	6863      	ldr	r3, [r4, #4]
 802570c:	6123      	str	r3, [r4, #16]
 802570e:	2300      	movs	r3, #0
 8025710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025714:	e7a8      	b.n	8025668 <_printf_i+0x150>
 8025716:	6923      	ldr	r3, [r4, #16]
 8025718:	4632      	mov	r2, r6
 802571a:	4649      	mov	r1, r9
 802571c:	4640      	mov	r0, r8
 802571e:	47d0      	blx	sl
 8025720:	3001      	adds	r0, #1
 8025722:	d0ab      	beq.n	802567c <_printf_i+0x164>
 8025724:	6823      	ldr	r3, [r4, #0]
 8025726:	079b      	lsls	r3, r3, #30
 8025728:	d413      	bmi.n	8025752 <_printf_i+0x23a>
 802572a:	68e0      	ldr	r0, [r4, #12]
 802572c:	9b03      	ldr	r3, [sp, #12]
 802572e:	4298      	cmp	r0, r3
 8025730:	bfb8      	it	lt
 8025732:	4618      	movlt	r0, r3
 8025734:	e7a4      	b.n	8025680 <_printf_i+0x168>
 8025736:	2301      	movs	r3, #1
 8025738:	4632      	mov	r2, r6
 802573a:	4649      	mov	r1, r9
 802573c:	4640      	mov	r0, r8
 802573e:	47d0      	blx	sl
 8025740:	3001      	adds	r0, #1
 8025742:	d09b      	beq.n	802567c <_printf_i+0x164>
 8025744:	3501      	adds	r5, #1
 8025746:	68e3      	ldr	r3, [r4, #12]
 8025748:	9903      	ldr	r1, [sp, #12]
 802574a:	1a5b      	subs	r3, r3, r1
 802574c:	42ab      	cmp	r3, r5
 802574e:	dcf2      	bgt.n	8025736 <_printf_i+0x21e>
 8025750:	e7eb      	b.n	802572a <_printf_i+0x212>
 8025752:	2500      	movs	r5, #0
 8025754:	f104 0619 	add.w	r6, r4, #25
 8025758:	e7f5      	b.n	8025746 <_printf_i+0x22e>
 802575a:	bf00      	nop
 802575c:	0807a721 	.word	0x0807a721
 8025760:	0807a732 	.word	0x0807a732

08025764 <_sbrk_r>:
 8025764:	b538      	push	{r3, r4, r5, lr}
 8025766:	4d06      	ldr	r5, [pc, #24]	; (8025780 <_sbrk_r+0x1c>)
 8025768:	2300      	movs	r3, #0
 802576a:	4604      	mov	r4, r0
 802576c:	4608      	mov	r0, r1
 802576e:	602b      	str	r3, [r5, #0]
 8025770:	f7dd f958 	bl	8002a24 <_sbrk>
 8025774:	1c43      	adds	r3, r0, #1
 8025776:	d102      	bne.n	802577e <_sbrk_r+0x1a>
 8025778:	682b      	ldr	r3, [r5, #0]
 802577a:	b103      	cbz	r3, 802577e <_sbrk_r+0x1a>
 802577c:	6023      	str	r3, [r4, #0]
 802577e:	bd38      	pop	{r3, r4, r5, pc}
 8025780:	20047d44 	.word	0x20047d44

08025784 <_raise_r>:
 8025784:	291f      	cmp	r1, #31
 8025786:	b538      	push	{r3, r4, r5, lr}
 8025788:	4604      	mov	r4, r0
 802578a:	460d      	mov	r5, r1
 802578c:	d904      	bls.n	8025798 <_raise_r+0x14>
 802578e:	2316      	movs	r3, #22
 8025790:	6003      	str	r3, [r0, #0]
 8025792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025796:	bd38      	pop	{r3, r4, r5, pc}
 8025798:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802579a:	b112      	cbz	r2, 80257a2 <_raise_r+0x1e>
 802579c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80257a0:	b94b      	cbnz	r3, 80257b6 <_raise_r+0x32>
 80257a2:	4620      	mov	r0, r4
 80257a4:	f000 f830 	bl	8025808 <_getpid_r>
 80257a8:	462a      	mov	r2, r5
 80257aa:	4601      	mov	r1, r0
 80257ac:	4620      	mov	r0, r4
 80257ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80257b2:	f000 b817 	b.w	80257e4 <_kill_r>
 80257b6:	2b01      	cmp	r3, #1
 80257b8:	d00a      	beq.n	80257d0 <_raise_r+0x4c>
 80257ba:	1c59      	adds	r1, r3, #1
 80257bc:	d103      	bne.n	80257c6 <_raise_r+0x42>
 80257be:	2316      	movs	r3, #22
 80257c0:	6003      	str	r3, [r0, #0]
 80257c2:	2001      	movs	r0, #1
 80257c4:	e7e7      	b.n	8025796 <_raise_r+0x12>
 80257c6:	2400      	movs	r4, #0
 80257c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80257cc:	4628      	mov	r0, r5
 80257ce:	4798      	blx	r3
 80257d0:	2000      	movs	r0, #0
 80257d2:	e7e0      	b.n	8025796 <_raise_r+0x12>

080257d4 <raise>:
 80257d4:	4b02      	ldr	r3, [pc, #8]	; (80257e0 <raise+0xc>)
 80257d6:	4601      	mov	r1, r0
 80257d8:	6818      	ldr	r0, [r3, #0]
 80257da:	f7ff bfd3 	b.w	8025784 <_raise_r>
 80257de:	bf00      	nop
 80257e0:	2000001c 	.word	0x2000001c

080257e4 <_kill_r>:
 80257e4:	b538      	push	{r3, r4, r5, lr}
 80257e6:	4d07      	ldr	r5, [pc, #28]	; (8025804 <_kill_r+0x20>)
 80257e8:	2300      	movs	r3, #0
 80257ea:	4604      	mov	r4, r0
 80257ec:	4608      	mov	r0, r1
 80257ee:	4611      	mov	r1, r2
 80257f0:	602b      	str	r3, [r5, #0]
 80257f2:	f7dd f88f 	bl	8002914 <_kill>
 80257f6:	1c43      	adds	r3, r0, #1
 80257f8:	d102      	bne.n	8025800 <_kill_r+0x1c>
 80257fa:	682b      	ldr	r3, [r5, #0]
 80257fc:	b103      	cbz	r3, 8025800 <_kill_r+0x1c>
 80257fe:	6023      	str	r3, [r4, #0]
 8025800:	bd38      	pop	{r3, r4, r5, pc}
 8025802:	bf00      	nop
 8025804:	20047d44 	.word	0x20047d44

08025808 <_getpid_r>:
 8025808:	f7dd b87c 	b.w	8002904 <_getpid>

0802580c <siprintf>:
 802580c:	b40e      	push	{r1, r2, r3}
 802580e:	b500      	push	{lr}
 8025810:	b09c      	sub	sp, #112	; 0x70
 8025812:	ab1d      	add	r3, sp, #116	; 0x74
 8025814:	9002      	str	r0, [sp, #8]
 8025816:	9006      	str	r0, [sp, #24]
 8025818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802581c:	4809      	ldr	r0, [pc, #36]	; (8025844 <siprintf+0x38>)
 802581e:	9107      	str	r1, [sp, #28]
 8025820:	9104      	str	r1, [sp, #16]
 8025822:	4909      	ldr	r1, [pc, #36]	; (8025848 <siprintf+0x3c>)
 8025824:	f853 2b04 	ldr.w	r2, [r3], #4
 8025828:	9105      	str	r1, [sp, #20]
 802582a:	6800      	ldr	r0, [r0, #0]
 802582c:	9301      	str	r3, [sp, #4]
 802582e:	a902      	add	r1, sp, #8
 8025830:	f000 fc0a 	bl	8026048 <_svfiprintf_r>
 8025834:	9b02      	ldr	r3, [sp, #8]
 8025836:	2200      	movs	r2, #0
 8025838:	701a      	strb	r2, [r3, #0]
 802583a:	b01c      	add	sp, #112	; 0x70
 802583c:	f85d eb04 	ldr.w	lr, [sp], #4
 8025840:	b003      	add	sp, #12
 8025842:	4770      	bx	lr
 8025844:	2000001c 	.word	0x2000001c
 8025848:	ffff0208 	.word	0xffff0208

0802584c <strcpy>:
 802584c:	4603      	mov	r3, r0
 802584e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025852:	f803 2b01 	strb.w	r2, [r3], #1
 8025856:	2a00      	cmp	r2, #0
 8025858:	d1f9      	bne.n	802584e <strcpy+0x2>
 802585a:	4770      	bx	lr

0802585c <strncmp>:
 802585c:	b510      	push	{r4, lr}
 802585e:	b16a      	cbz	r2, 802587c <strncmp+0x20>
 8025860:	3901      	subs	r1, #1
 8025862:	1884      	adds	r4, r0, r2
 8025864:	f810 3b01 	ldrb.w	r3, [r0], #1
 8025868:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802586c:	4293      	cmp	r3, r2
 802586e:	d103      	bne.n	8025878 <strncmp+0x1c>
 8025870:	42a0      	cmp	r0, r4
 8025872:	d001      	beq.n	8025878 <strncmp+0x1c>
 8025874:	2b00      	cmp	r3, #0
 8025876:	d1f5      	bne.n	8025864 <strncmp+0x8>
 8025878:	1a98      	subs	r0, r3, r2
 802587a:	bd10      	pop	{r4, pc}
 802587c:	4610      	mov	r0, r2
 802587e:	e7fc      	b.n	802587a <strncmp+0x1e>

08025880 <strncpy>:
 8025880:	b510      	push	{r4, lr}
 8025882:	3901      	subs	r1, #1
 8025884:	4603      	mov	r3, r0
 8025886:	b132      	cbz	r2, 8025896 <strncpy+0x16>
 8025888:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802588c:	f803 4b01 	strb.w	r4, [r3], #1
 8025890:	3a01      	subs	r2, #1
 8025892:	2c00      	cmp	r4, #0
 8025894:	d1f7      	bne.n	8025886 <strncpy+0x6>
 8025896:	441a      	add	r2, r3
 8025898:	2100      	movs	r1, #0
 802589a:	4293      	cmp	r3, r2
 802589c:	d100      	bne.n	80258a0 <strncpy+0x20>
 802589e:	bd10      	pop	{r4, pc}
 80258a0:	f803 1b01 	strb.w	r1, [r3], #1
 80258a4:	e7f9      	b.n	802589a <strncpy+0x1a>
	...

080258a8 <__swbuf_r>:
 80258a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80258aa:	460e      	mov	r6, r1
 80258ac:	4614      	mov	r4, r2
 80258ae:	4605      	mov	r5, r0
 80258b0:	b118      	cbz	r0, 80258ba <__swbuf_r+0x12>
 80258b2:	6983      	ldr	r3, [r0, #24]
 80258b4:	b90b      	cbnz	r3, 80258ba <__swbuf_r+0x12>
 80258b6:	f000 fa33 	bl	8025d20 <__sinit>
 80258ba:	4b21      	ldr	r3, [pc, #132]	; (8025940 <__swbuf_r+0x98>)
 80258bc:	429c      	cmp	r4, r3
 80258be:	d12b      	bne.n	8025918 <__swbuf_r+0x70>
 80258c0:	686c      	ldr	r4, [r5, #4]
 80258c2:	69a3      	ldr	r3, [r4, #24]
 80258c4:	60a3      	str	r3, [r4, #8]
 80258c6:	89a3      	ldrh	r3, [r4, #12]
 80258c8:	071a      	lsls	r2, r3, #28
 80258ca:	d52f      	bpl.n	802592c <__swbuf_r+0x84>
 80258cc:	6923      	ldr	r3, [r4, #16]
 80258ce:	b36b      	cbz	r3, 802592c <__swbuf_r+0x84>
 80258d0:	6923      	ldr	r3, [r4, #16]
 80258d2:	6820      	ldr	r0, [r4, #0]
 80258d4:	1ac0      	subs	r0, r0, r3
 80258d6:	6963      	ldr	r3, [r4, #20]
 80258d8:	b2f6      	uxtb	r6, r6
 80258da:	4283      	cmp	r3, r0
 80258dc:	4637      	mov	r7, r6
 80258de:	dc04      	bgt.n	80258ea <__swbuf_r+0x42>
 80258e0:	4621      	mov	r1, r4
 80258e2:	4628      	mov	r0, r5
 80258e4:	f000 f988 	bl	8025bf8 <_fflush_r>
 80258e8:	bb30      	cbnz	r0, 8025938 <__swbuf_r+0x90>
 80258ea:	68a3      	ldr	r3, [r4, #8]
 80258ec:	3b01      	subs	r3, #1
 80258ee:	60a3      	str	r3, [r4, #8]
 80258f0:	6823      	ldr	r3, [r4, #0]
 80258f2:	1c5a      	adds	r2, r3, #1
 80258f4:	6022      	str	r2, [r4, #0]
 80258f6:	701e      	strb	r6, [r3, #0]
 80258f8:	6963      	ldr	r3, [r4, #20]
 80258fa:	3001      	adds	r0, #1
 80258fc:	4283      	cmp	r3, r0
 80258fe:	d004      	beq.n	802590a <__swbuf_r+0x62>
 8025900:	89a3      	ldrh	r3, [r4, #12]
 8025902:	07db      	lsls	r3, r3, #31
 8025904:	d506      	bpl.n	8025914 <__swbuf_r+0x6c>
 8025906:	2e0a      	cmp	r6, #10
 8025908:	d104      	bne.n	8025914 <__swbuf_r+0x6c>
 802590a:	4621      	mov	r1, r4
 802590c:	4628      	mov	r0, r5
 802590e:	f000 f973 	bl	8025bf8 <_fflush_r>
 8025912:	b988      	cbnz	r0, 8025938 <__swbuf_r+0x90>
 8025914:	4638      	mov	r0, r7
 8025916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025918:	4b0a      	ldr	r3, [pc, #40]	; (8025944 <__swbuf_r+0x9c>)
 802591a:	429c      	cmp	r4, r3
 802591c:	d101      	bne.n	8025922 <__swbuf_r+0x7a>
 802591e:	68ac      	ldr	r4, [r5, #8]
 8025920:	e7cf      	b.n	80258c2 <__swbuf_r+0x1a>
 8025922:	4b09      	ldr	r3, [pc, #36]	; (8025948 <__swbuf_r+0xa0>)
 8025924:	429c      	cmp	r4, r3
 8025926:	bf08      	it	eq
 8025928:	68ec      	ldreq	r4, [r5, #12]
 802592a:	e7ca      	b.n	80258c2 <__swbuf_r+0x1a>
 802592c:	4621      	mov	r1, r4
 802592e:	4628      	mov	r0, r5
 8025930:	f000 f80c 	bl	802594c <__swsetup_r>
 8025934:	2800      	cmp	r0, #0
 8025936:	d0cb      	beq.n	80258d0 <__swbuf_r+0x28>
 8025938:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802593c:	e7ea      	b.n	8025914 <__swbuf_r+0x6c>
 802593e:	bf00      	nop
 8025940:	0807a764 	.word	0x0807a764
 8025944:	0807a784 	.word	0x0807a784
 8025948:	0807a744 	.word	0x0807a744

0802594c <__swsetup_r>:
 802594c:	4b32      	ldr	r3, [pc, #200]	; (8025a18 <__swsetup_r+0xcc>)
 802594e:	b570      	push	{r4, r5, r6, lr}
 8025950:	681d      	ldr	r5, [r3, #0]
 8025952:	4606      	mov	r6, r0
 8025954:	460c      	mov	r4, r1
 8025956:	b125      	cbz	r5, 8025962 <__swsetup_r+0x16>
 8025958:	69ab      	ldr	r3, [r5, #24]
 802595a:	b913      	cbnz	r3, 8025962 <__swsetup_r+0x16>
 802595c:	4628      	mov	r0, r5
 802595e:	f000 f9df 	bl	8025d20 <__sinit>
 8025962:	4b2e      	ldr	r3, [pc, #184]	; (8025a1c <__swsetup_r+0xd0>)
 8025964:	429c      	cmp	r4, r3
 8025966:	d10f      	bne.n	8025988 <__swsetup_r+0x3c>
 8025968:	686c      	ldr	r4, [r5, #4]
 802596a:	89a3      	ldrh	r3, [r4, #12]
 802596c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025970:	0719      	lsls	r1, r3, #28
 8025972:	d42c      	bmi.n	80259ce <__swsetup_r+0x82>
 8025974:	06dd      	lsls	r5, r3, #27
 8025976:	d411      	bmi.n	802599c <__swsetup_r+0x50>
 8025978:	2309      	movs	r3, #9
 802597a:	6033      	str	r3, [r6, #0]
 802597c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025980:	81a3      	strh	r3, [r4, #12]
 8025982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025986:	e03e      	b.n	8025a06 <__swsetup_r+0xba>
 8025988:	4b25      	ldr	r3, [pc, #148]	; (8025a20 <__swsetup_r+0xd4>)
 802598a:	429c      	cmp	r4, r3
 802598c:	d101      	bne.n	8025992 <__swsetup_r+0x46>
 802598e:	68ac      	ldr	r4, [r5, #8]
 8025990:	e7eb      	b.n	802596a <__swsetup_r+0x1e>
 8025992:	4b24      	ldr	r3, [pc, #144]	; (8025a24 <__swsetup_r+0xd8>)
 8025994:	429c      	cmp	r4, r3
 8025996:	bf08      	it	eq
 8025998:	68ec      	ldreq	r4, [r5, #12]
 802599a:	e7e6      	b.n	802596a <__swsetup_r+0x1e>
 802599c:	0758      	lsls	r0, r3, #29
 802599e:	d512      	bpl.n	80259c6 <__swsetup_r+0x7a>
 80259a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80259a2:	b141      	cbz	r1, 80259b6 <__swsetup_r+0x6a>
 80259a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80259a8:	4299      	cmp	r1, r3
 80259aa:	d002      	beq.n	80259b2 <__swsetup_r+0x66>
 80259ac:	4630      	mov	r0, r6
 80259ae:	f7ff fb41 	bl	8025034 <_free_r>
 80259b2:	2300      	movs	r3, #0
 80259b4:	6363      	str	r3, [r4, #52]	; 0x34
 80259b6:	89a3      	ldrh	r3, [r4, #12]
 80259b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80259bc:	81a3      	strh	r3, [r4, #12]
 80259be:	2300      	movs	r3, #0
 80259c0:	6063      	str	r3, [r4, #4]
 80259c2:	6923      	ldr	r3, [r4, #16]
 80259c4:	6023      	str	r3, [r4, #0]
 80259c6:	89a3      	ldrh	r3, [r4, #12]
 80259c8:	f043 0308 	orr.w	r3, r3, #8
 80259cc:	81a3      	strh	r3, [r4, #12]
 80259ce:	6923      	ldr	r3, [r4, #16]
 80259d0:	b94b      	cbnz	r3, 80259e6 <__swsetup_r+0x9a>
 80259d2:	89a3      	ldrh	r3, [r4, #12]
 80259d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80259d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80259dc:	d003      	beq.n	80259e6 <__swsetup_r+0x9a>
 80259de:	4621      	mov	r1, r4
 80259e0:	4630      	mov	r0, r6
 80259e2:	f000 fa63 	bl	8025eac <__smakebuf_r>
 80259e6:	89a0      	ldrh	r0, [r4, #12]
 80259e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80259ec:	f010 0301 	ands.w	r3, r0, #1
 80259f0:	d00a      	beq.n	8025a08 <__swsetup_r+0xbc>
 80259f2:	2300      	movs	r3, #0
 80259f4:	60a3      	str	r3, [r4, #8]
 80259f6:	6963      	ldr	r3, [r4, #20]
 80259f8:	425b      	negs	r3, r3
 80259fa:	61a3      	str	r3, [r4, #24]
 80259fc:	6923      	ldr	r3, [r4, #16]
 80259fe:	b943      	cbnz	r3, 8025a12 <__swsetup_r+0xc6>
 8025a00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025a04:	d1ba      	bne.n	802597c <__swsetup_r+0x30>
 8025a06:	bd70      	pop	{r4, r5, r6, pc}
 8025a08:	0781      	lsls	r1, r0, #30
 8025a0a:	bf58      	it	pl
 8025a0c:	6963      	ldrpl	r3, [r4, #20]
 8025a0e:	60a3      	str	r3, [r4, #8]
 8025a10:	e7f4      	b.n	80259fc <__swsetup_r+0xb0>
 8025a12:	2000      	movs	r0, #0
 8025a14:	e7f7      	b.n	8025a06 <__swsetup_r+0xba>
 8025a16:	bf00      	nop
 8025a18:	2000001c 	.word	0x2000001c
 8025a1c:	0807a764 	.word	0x0807a764
 8025a20:	0807a784 	.word	0x0807a784
 8025a24:	0807a744 	.word	0x0807a744

08025a28 <__register_exitproc>:
 8025a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025a2c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8025ae8 <__register_exitproc+0xc0>
 8025a30:	4606      	mov	r6, r0
 8025a32:	f8d8 0000 	ldr.w	r0, [r8]
 8025a36:	461f      	mov	r7, r3
 8025a38:	460d      	mov	r5, r1
 8025a3a:	4691      	mov	r9, r2
 8025a3c:	f000 fa0e 	bl	8025e5c <__retarget_lock_acquire_recursive>
 8025a40:	4b25      	ldr	r3, [pc, #148]	; (8025ad8 <__register_exitproc+0xb0>)
 8025a42:	681c      	ldr	r4, [r3, #0]
 8025a44:	b934      	cbnz	r4, 8025a54 <__register_exitproc+0x2c>
 8025a46:	4c25      	ldr	r4, [pc, #148]	; (8025adc <__register_exitproc+0xb4>)
 8025a48:	601c      	str	r4, [r3, #0]
 8025a4a:	4b25      	ldr	r3, [pc, #148]	; (8025ae0 <__register_exitproc+0xb8>)
 8025a4c:	b113      	cbz	r3, 8025a54 <__register_exitproc+0x2c>
 8025a4e:	681b      	ldr	r3, [r3, #0]
 8025a50:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025a54:	6863      	ldr	r3, [r4, #4]
 8025a56:	2b1f      	cmp	r3, #31
 8025a58:	dd07      	ble.n	8025a6a <__register_exitproc+0x42>
 8025a5a:	f8d8 0000 	ldr.w	r0, [r8]
 8025a5e:	f000 f9ff 	bl	8025e60 <__retarget_lock_release_recursive>
 8025a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025a6a:	b34e      	cbz	r6, 8025ac0 <__register_exitproc+0x98>
 8025a6c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025a70:	b988      	cbnz	r0, 8025a96 <__register_exitproc+0x6e>
 8025a72:	4b1c      	ldr	r3, [pc, #112]	; (8025ae4 <__register_exitproc+0xbc>)
 8025a74:	b923      	cbnz	r3, 8025a80 <__register_exitproc+0x58>
 8025a76:	f8d8 0000 	ldr.w	r0, [r8]
 8025a7a:	f000 f9f0 	bl	8025e5e <__retarget_lock_release>
 8025a7e:	e7f0      	b.n	8025a62 <__register_exitproc+0x3a>
 8025a80:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025a84:	f7ff fa96 	bl	8024fb4 <malloc>
 8025a88:	2800      	cmp	r0, #0
 8025a8a:	d0f4      	beq.n	8025a76 <__register_exitproc+0x4e>
 8025a8c:	2300      	movs	r3, #0
 8025a8e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8025a92:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025a96:	6863      	ldr	r3, [r4, #4]
 8025a98:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025a9c:	2201      	movs	r2, #1
 8025a9e:	409a      	lsls	r2, r3
 8025aa0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025aa4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8025aa8:	4313      	orrs	r3, r2
 8025aaa:	2e02      	cmp	r6, #2
 8025aac:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025ab0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8025ab4:	bf02      	ittt	eq
 8025ab6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8025aba:	431a      	orreq	r2, r3
 8025abc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8025ac0:	6863      	ldr	r3, [r4, #4]
 8025ac2:	f8d8 0000 	ldr.w	r0, [r8]
 8025ac6:	1c5a      	adds	r2, r3, #1
 8025ac8:	3302      	adds	r3, #2
 8025aca:	6062      	str	r2, [r4, #4]
 8025acc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8025ad0:	f000 f9c6 	bl	8025e60 <__retarget_lock_release_recursive>
 8025ad4:	2000      	movs	r0, #0
 8025ad6:	e7c6      	b.n	8025a66 <__register_exitproc+0x3e>
 8025ad8:	20047a6c 	.word	0x20047a6c
 8025adc:	200479e0 	.word	0x200479e0
 8025ae0:	00000000 	.word	0x00000000
 8025ae4:	08024fb5 	.word	0x08024fb5
 8025ae8:	20000080 	.word	0x20000080

08025aec <__sflush_r>:
 8025aec:	898a      	ldrh	r2, [r1, #12]
 8025aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025af2:	4605      	mov	r5, r0
 8025af4:	0710      	lsls	r0, r2, #28
 8025af6:	460c      	mov	r4, r1
 8025af8:	d458      	bmi.n	8025bac <__sflush_r+0xc0>
 8025afa:	684b      	ldr	r3, [r1, #4]
 8025afc:	2b00      	cmp	r3, #0
 8025afe:	dc05      	bgt.n	8025b0c <__sflush_r+0x20>
 8025b00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025b02:	2b00      	cmp	r3, #0
 8025b04:	dc02      	bgt.n	8025b0c <__sflush_r+0x20>
 8025b06:	2000      	movs	r0, #0
 8025b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025b0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025b0e:	2e00      	cmp	r6, #0
 8025b10:	d0f9      	beq.n	8025b06 <__sflush_r+0x1a>
 8025b12:	2300      	movs	r3, #0
 8025b14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025b18:	682f      	ldr	r7, [r5, #0]
 8025b1a:	602b      	str	r3, [r5, #0]
 8025b1c:	d032      	beq.n	8025b84 <__sflush_r+0x98>
 8025b1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025b20:	89a3      	ldrh	r3, [r4, #12]
 8025b22:	075a      	lsls	r2, r3, #29
 8025b24:	d505      	bpl.n	8025b32 <__sflush_r+0x46>
 8025b26:	6863      	ldr	r3, [r4, #4]
 8025b28:	1ac0      	subs	r0, r0, r3
 8025b2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025b2c:	b10b      	cbz	r3, 8025b32 <__sflush_r+0x46>
 8025b2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025b30:	1ac0      	subs	r0, r0, r3
 8025b32:	2300      	movs	r3, #0
 8025b34:	4602      	mov	r2, r0
 8025b36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025b38:	6a21      	ldr	r1, [r4, #32]
 8025b3a:	4628      	mov	r0, r5
 8025b3c:	47b0      	blx	r6
 8025b3e:	1c43      	adds	r3, r0, #1
 8025b40:	89a3      	ldrh	r3, [r4, #12]
 8025b42:	d106      	bne.n	8025b52 <__sflush_r+0x66>
 8025b44:	6829      	ldr	r1, [r5, #0]
 8025b46:	291d      	cmp	r1, #29
 8025b48:	d82c      	bhi.n	8025ba4 <__sflush_r+0xb8>
 8025b4a:	4a2a      	ldr	r2, [pc, #168]	; (8025bf4 <__sflush_r+0x108>)
 8025b4c:	40ca      	lsrs	r2, r1
 8025b4e:	07d6      	lsls	r6, r2, #31
 8025b50:	d528      	bpl.n	8025ba4 <__sflush_r+0xb8>
 8025b52:	2200      	movs	r2, #0
 8025b54:	6062      	str	r2, [r4, #4]
 8025b56:	04d9      	lsls	r1, r3, #19
 8025b58:	6922      	ldr	r2, [r4, #16]
 8025b5a:	6022      	str	r2, [r4, #0]
 8025b5c:	d504      	bpl.n	8025b68 <__sflush_r+0x7c>
 8025b5e:	1c42      	adds	r2, r0, #1
 8025b60:	d101      	bne.n	8025b66 <__sflush_r+0x7a>
 8025b62:	682b      	ldr	r3, [r5, #0]
 8025b64:	b903      	cbnz	r3, 8025b68 <__sflush_r+0x7c>
 8025b66:	6560      	str	r0, [r4, #84]	; 0x54
 8025b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025b6a:	602f      	str	r7, [r5, #0]
 8025b6c:	2900      	cmp	r1, #0
 8025b6e:	d0ca      	beq.n	8025b06 <__sflush_r+0x1a>
 8025b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025b74:	4299      	cmp	r1, r3
 8025b76:	d002      	beq.n	8025b7e <__sflush_r+0x92>
 8025b78:	4628      	mov	r0, r5
 8025b7a:	f7ff fa5b 	bl	8025034 <_free_r>
 8025b7e:	2000      	movs	r0, #0
 8025b80:	6360      	str	r0, [r4, #52]	; 0x34
 8025b82:	e7c1      	b.n	8025b08 <__sflush_r+0x1c>
 8025b84:	6a21      	ldr	r1, [r4, #32]
 8025b86:	2301      	movs	r3, #1
 8025b88:	4628      	mov	r0, r5
 8025b8a:	47b0      	blx	r6
 8025b8c:	1c41      	adds	r1, r0, #1
 8025b8e:	d1c7      	bne.n	8025b20 <__sflush_r+0x34>
 8025b90:	682b      	ldr	r3, [r5, #0]
 8025b92:	2b00      	cmp	r3, #0
 8025b94:	d0c4      	beq.n	8025b20 <__sflush_r+0x34>
 8025b96:	2b1d      	cmp	r3, #29
 8025b98:	d001      	beq.n	8025b9e <__sflush_r+0xb2>
 8025b9a:	2b16      	cmp	r3, #22
 8025b9c:	d101      	bne.n	8025ba2 <__sflush_r+0xb6>
 8025b9e:	602f      	str	r7, [r5, #0]
 8025ba0:	e7b1      	b.n	8025b06 <__sflush_r+0x1a>
 8025ba2:	89a3      	ldrh	r3, [r4, #12]
 8025ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025ba8:	81a3      	strh	r3, [r4, #12]
 8025baa:	e7ad      	b.n	8025b08 <__sflush_r+0x1c>
 8025bac:	690f      	ldr	r7, [r1, #16]
 8025bae:	2f00      	cmp	r7, #0
 8025bb0:	d0a9      	beq.n	8025b06 <__sflush_r+0x1a>
 8025bb2:	0793      	lsls	r3, r2, #30
 8025bb4:	680e      	ldr	r6, [r1, #0]
 8025bb6:	bf08      	it	eq
 8025bb8:	694b      	ldreq	r3, [r1, #20]
 8025bba:	600f      	str	r7, [r1, #0]
 8025bbc:	bf18      	it	ne
 8025bbe:	2300      	movne	r3, #0
 8025bc0:	eba6 0807 	sub.w	r8, r6, r7
 8025bc4:	608b      	str	r3, [r1, #8]
 8025bc6:	f1b8 0f00 	cmp.w	r8, #0
 8025bca:	dd9c      	ble.n	8025b06 <__sflush_r+0x1a>
 8025bcc:	6a21      	ldr	r1, [r4, #32]
 8025bce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025bd0:	4643      	mov	r3, r8
 8025bd2:	463a      	mov	r2, r7
 8025bd4:	4628      	mov	r0, r5
 8025bd6:	47b0      	blx	r6
 8025bd8:	2800      	cmp	r0, #0
 8025bda:	dc06      	bgt.n	8025bea <__sflush_r+0xfe>
 8025bdc:	89a3      	ldrh	r3, [r4, #12]
 8025bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025be2:	81a3      	strh	r3, [r4, #12]
 8025be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025be8:	e78e      	b.n	8025b08 <__sflush_r+0x1c>
 8025bea:	4407      	add	r7, r0
 8025bec:	eba8 0800 	sub.w	r8, r8, r0
 8025bf0:	e7e9      	b.n	8025bc6 <__sflush_r+0xda>
 8025bf2:	bf00      	nop
 8025bf4:	20400001 	.word	0x20400001

08025bf8 <_fflush_r>:
 8025bf8:	b538      	push	{r3, r4, r5, lr}
 8025bfa:	690b      	ldr	r3, [r1, #16]
 8025bfc:	4605      	mov	r5, r0
 8025bfe:	460c      	mov	r4, r1
 8025c00:	b913      	cbnz	r3, 8025c08 <_fflush_r+0x10>
 8025c02:	2500      	movs	r5, #0
 8025c04:	4628      	mov	r0, r5
 8025c06:	bd38      	pop	{r3, r4, r5, pc}
 8025c08:	b118      	cbz	r0, 8025c12 <_fflush_r+0x1a>
 8025c0a:	6983      	ldr	r3, [r0, #24]
 8025c0c:	b90b      	cbnz	r3, 8025c12 <_fflush_r+0x1a>
 8025c0e:	f000 f887 	bl	8025d20 <__sinit>
 8025c12:	4b14      	ldr	r3, [pc, #80]	; (8025c64 <_fflush_r+0x6c>)
 8025c14:	429c      	cmp	r4, r3
 8025c16:	d11b      	bne.n	8025c50 <_fflush_r+0x58>
 8025c18:	686c      	ldr	r4, [r5, #4]
 8025c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025c1e:	2b00      	cmp	r3, #0
 8025c20:	d0ef      	beq.n	8025c02 <_fflush_r+0xa>
 8025c22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025c24:	07d0      	lsls	r0, r2, #31
 8025c26:	d404      	bmi.n	8025c32 <_fflush_r+0x3a>
 8025c28:	0599      	lsls	r1, r3, #22
 8025c2a:	d402      	bmi.n	8025c32 <_fflush_r+0x3a>
 8025c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025c2e:	f000 f915 	bl	8025e5c <__retarget_lock_acquire_recursive>
 8025c32:	4628      	mov	r0, r5
 8025c34:	4621      	mov	r1, r4
 8025c36:	f7ff ff59 	bl	8025aec <__sflush_r>
 8025c3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025c3c:	07da      	lsls	r2, r3, #31
 8025c3e:	4605      	mov	r5, r0
 8025c40:	d4e0      	bmi.n	8025c04 <_fflush_r+0xc>
 8025c42:	89a3      	ldrh	r3, [r4, #12]
 8025c44:	059b      	lsls	r3, r3, #22
 8025c46:	d4dd      	bmi.n	8025c04 <_fflush_r+0xc>
 8025c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025c4a:	f000 f909 	bl	8025e60 <__retarget_lock_release_recursive>
 8025c4e:	e7d9      	b.n	8025c04 <_fflush_r+0xc>
 8025c50:	4b05      	ldr	r3, [pc, #20]	; (8025c68 <_fflush_r+0x70>)
 8025c52:	429c      	cmp	r4, r3
 8025c54:	d101      	bne.n	8025c5a <_fflush_r+0x62>
 8025c56:	68ac      	ldr	r4, [r5, #8]
 8025c58:	e7df      	b.n	8025c1a <_fflush_r+0x22>
 8025c5a:	4b04      	ldr	r3, [pc, #16]	; (8025c6c <_fflush_r+0x74>)
 8025c5c:	429c      	cmp	r4, r3
 8025c5e:	bf08      	it	eq
 8025c60:	68ec      	ldreq	r4, [r5, #12]
 8025c62:	e7da      	b.n	8025c1a <_fflush_r+0x22>
 8025c64:	0807a764 	.word	0x0807a764
 8025c68:	0807a784 	.word	0x0807a784
 8025c6c:	0807a744 	.word	0x0807a744

08025c70 <std>:
 8025c70:	2300      	movs	r3, #0
 8025c72:	b510      	push	{r4, lr}
 8025c74:	4604      	mov	r4, r0
 8025c76:	e9c0 3300 	strd	r3, r3, [r0]
 8025c7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025c7e:	6083      	str	r3, [r0, #8]
 8025c80:	8181      	strh	r1, [r0, #12]
 8025c82:	6643      	str	r3, [r0, #100]	; 0x64
 8025c84:	81c2      	strh	r2, [r0, #14]
 8025c86:	6183      	str	r3, [r0, #24]
 8025c88:	4619      	mov	r1, r3
 8025c8a:	2208      	movs	r2, #8
 8025c8c:	305c      	adds	r0, #92	; 0x5c
 8025c8e:	f7ff f9c9 	bl	8025024 <memset>
 8025c92:	4b05      	ldr	r3, [pc, #20]	; (8025ca8 <std+0x38>)
 8025c94:	6263      	str	r3, [r4, #36]	; 0x24
 8025c96:	4b05      	ldr	r3, [pc, #20]	; (8025cac <std+0x3c>)
 8025c98:	62a3      	str	r3, [r4, #40]	; 0x28
 8025c9a:	4b05      	ldr	r3, [pc, #20]	; (8025cb0 <std+0x40>)
 8025c9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025c9e:	4b05      	ldr	r3, [pc, #20]	; (8025cb4 <std+0x44>)
 8025ca0:	6224      	str	r4, [r4, #32]
 8025ca2:	6323      	str	r3, [r4, #48]	; 0x30
 8025ca4:	bd10      	pop	{r4, pc}
 8025ca6:	bf00      	nop
 8025ca8:	08026249 	.word	0x08026249
 8025cac:	0802626b 	.word	0x0802626b
 8025cb0:	080262a3 	.word	0x080262a3
 8025cb4:	080262c7 	.word	0x080262c7

08025cb8 <_cleanup_r>:
 8025cb8:	4901      	ldr	r1, [pc, #4]	; (8025cc0 <_cleanup_r+0x8>)
 8025cba:	f000 b8af 	b.w	8025e1c <_fwalk_reent>
 8025cbe:	bf00      	nop
 8025cc0:	08025bf9 	.word	0x08025bf9

08025cc4 <__sfmoreglue>:
 8025cc4:	b570      	push	{r4, r5, r6, lr}
 8025cc6:	1e4a      	subs	r2, r1, #1
 8025cc8:	2568      	movs	r5, #104	; 0x68
 8025cca:	4355      	muls	r5, r2
 8025ccc:	460e      	mov	r6, r1
 8025cce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025cd2:	f7ff f9ff 	bl	80250d4 <_malloc_r>
 8025cd6:	4604      	mov	r4, r0
 8025cd8:	b140      	cbz	r0, 8025cec <__sfmoreglue+0x28>
 8025cda:	2100      	movs	r1, #0
 8025cdc:	e9c0 1600 	strd	r1, r6, [r0]
 8025ce0:	300c      	adds	r0, #12
 8025ce2:	60a0      	str	r0, [r4, #8]
 8025ce4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025ce8:	f7ff f99c 	bl	8025024 <memset>
 8025cec:	4620      	mov	r0, r4
 8025cee:	bd70      	pop	{r4, r5, r6, pc}

08025cf0 <__sfp_lock_acquire>:
 8025cf0:	4801      	ldr	r0, [pc, #4]	; (8025cf8 <__sfp_lock_acquire+0x8>)
 8025cf2:	f000 b8b3 	b.w	8025e5c <__retarget_lock_acquire_recursive>
 8025cf6:	bf00      	nop
 8025cf8:	20047d3c 	.word	0x20047d3c

08025cfc <__sfp_lock_release>:
 8025cfc:	4801      	ldr	r0, [pc, #4]	; (8025d04 <__sfp_lock_release+0x8>)
 8025cfe:	f000 b8af 	b.w	8025e60 <__retarget_lock_release_recursive>
 8025d02:	bf00      	nop
 8025d04:	20047d3c 	.word	0x20047d3c

08025d08 <__sinit_lock_acquire>:
 8025d08:	4801      	ldr	r0, [pc, #4]	; (8025d10 <__sinit_lock_acquire+0x8>)
 8025d0a:	f000 b8a7 	b.w	8025e5c <__retarget_lock_acquire_recursive>
 8025d0e:	bf00      	nop
 8025d10:	20047d3b 	.word	0x20047d3b

08025d14 <__sinit_lock_release>:
 8025d14:	4801      	ldr	r0, [pc, #4]	; (8025d1c <__sinit_lock_release+0x8>)
 8025d16:	f000 b8a3 	b.w	8025e60 <__retarget_lock_release_recursive>
 8025d1a:	bf00      	nop
 8025d1c:	20047d3b 	.word	0x20047d3b

08025d20 <__sinit>:
 8025d20:	b510      	push	{r4, lr}
 8025d22:	4604      	mov	r4, r0
 8025d24:	f7ff fff0 	bl	8025d08 <__sinit_lock_acquire>
 8025d28:	69a3      	ldr	r3, [r4, #24]
 8025d2a:	b11b      	cbz	r3, 8025d34 <__sinit+0x14>
 8025d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025d30:	f7ff bff0 	b.w	8025d14 <__sinit_lock_release>
 8025d34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025d38:	6523      	str	r3, [r4, #80]	; 0x50
 8025d3a:	4b13      	ldr	r3, [pc, #76]	; (8025d88 <__sinit+0x68>)
 8025d3c:	4a13      	ldr	r2, [pc, #76]	; (8025d8c <__sinit+0x6c>)
 8025d3e:	681b      	ldr	r3, [r3, #0]
 8025d40:	62a2      	str	r2, [r4, #40]	; 0x28
 8025d42:	42a3      	cmp	r3, r4
 8025d44:	bf04      	itt	eq
 8025d46:	2301      	moveq	r3, #1
 8025d48:	61a3      	streq	r3, [r4, #24]
 8025d4a:	4620      	mov	r0, r4
 8025d4c:	f000 f820 	bl	8025d90 <__sfp>
 8025d50:	6060      	str	r0, [r4, #4]
 8025d52:	4620      	mov	r0, r4
 8025d54:	f000 f81c 	bl	8025d90 <__sfp>
 8025d58:	60a0      	str	r0, [r4, #8]
 8025d5a:	4620      	mov	r0, r4
 8025d5c:	f000 f818 	bl	8025d90 <__sfp>
 8025d60:	2200      	movs	r2, #0
 8025d62:	60e0      	str	r0, [r4, #12]
 8025d64:	2104      	movs	r1, #4
 8025d66:	6860      	ldr	r0, [r4, #4]
 8025d68:	f7ff ff82 	bl	8025c70 <std>
 8025d6c:	68a0      	ldr	r0, [r4, #8]
 8025d6e:	2201      	movs	r2, #1
 8025d70:	2109      	movs	r1, #9
 8025d72:	f7ff ff7d 	bl	8025c70 <std>
 8025d76:	68e0      	ldr	r0, [r4, #12]
 8025d78:	2202      	movs	r2, #2
 8025d7a:	2112      	movs	r1, #18
 8025d7c:	f7ff ff78 	bl	8025c70 <std>
 8025d80:	2301      	movs	r3, #1
 8025d82:	61a3      	str	r3, [r4, #24]
 8025d84:	e7d2      	b.n	8025d2c <__sinit+0xc>
 8025d86:	bf00      	nop
 8025d88:	0807a70c 	.word	0x0807a70c
 8025d8c:	08025cb9 	.word	0x08025cb9

08025d90 <__sfp>:
 8025d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d92:	4607      	mov	r7, r0
 8025d94:	f7ff ffac 	bl	8025cf0 <__sfp_lock_acquire>
 8025d98:	4b1e      	ldr	r3, [pc, #120]	; (8025e14 <__sfp+0x84>)
 8025d9a:	681e      	ldr	r6, [r3, #0]
 8025d9c:	69b3      	ldr	r3, [r6, #24]
 8025d9e:	b913      	cbnz	r3, 8025da6 <__sfp+0x16>
 8025da0:	4630      	mov	r0, r6
 8025da2:	f7ff ffbd 	bl	8025d20 <__sinit>
 8025da6:	3648      	adds	r6, #72	; 0x48
 8025da8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025dac:	3b01      	subs	r3, #1
 8025dae:	d503      	bpl.n	8025db8 <__sfp+0x28>
 8025db0:	6833      	ldr	r3, [r6, #0]
 8025db2:	b30b      	cbz	r3, 8025df8 <__sfp+0x68>
 8025db4:	6836      	ldr	r6, [r6, #0]
 8025db6:	e7f7      	b.n	8025da8 <__sfp+0x18>
 8025db8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025dbc:	b9d5      	cbnz	r5, 8025df4 <__sfp+0x64>
 8025dbe:	4b16      	ldr	r3, [pc, #88]	; (8025e18 <__sfp+0x88>)
 8025dc0:	60e3      	str	r3, [r4, #12]
 8025dc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025dc6:	6665      	str	r5, [r4, #100]	; 0x64
 8025dc8:	f000 f847 	bl	8025e5a <__retarget_lock_init_recursive>
 8025dcc:	f7ff ff96 	bl	8025cfc <__sfp_lock_release>
 8025dd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025dd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025dd8:	6025      	str	r5, [r4, #0]
 8025dda:	61a5      	str	r5, [r4, #24]
 8025ddc:	2208      	movs	r2, #8
 8025dde:	4629      	mov	r1, r5
 8025de0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025de4:	f7ff f91e 	bl	8025024 <memset>
 8025de8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025dec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025df0:	4620      	mov	r0, r4
 8025df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025df4:	3468      	adds	r4, #104	; 0x68
 8025df6:	e7d9      	b.n	8025dac <__sfp+0x1c>
 8025df8:	2104      	movs	r1, #4
 8025dfa:	4638      	mov	r0, r7
 8025dfc:	f7ff ff62 	bl	8025cc4 <__sfmoreglue>
 8025e00:	4604      	mov	r4, r0
 8025e02:	6030      	str	r0, [r6, #0]
 8025e04:	2800      	cmp	r0, #0
 8025e06:	d1d5      	bne.n	8025db4 <__sfp+0x24>
 8025e08:	f7ff ff78 	bl	8025cfc <__sfp_lock_release>
 8025e0c:	230c      	movs	r3, #12
 8025e0e:	603b      	str	r3, [r7, #0]
 8025e10:	e7ee      	b.n	8025df0 <__sfp+0x60>
 8025e12:	bf00      	nop
 8025e14:	0807a70c 	.word	0x0807a70c
 8025e18:	ffff0001 	.word	0xffff0001

08025e1c <_fwalk_reent>:
 8025e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025e20:	4606      	mov	r6, r0
 8025e22:	4688      	mov	r8, r1
 8025e24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025e28:	2700      	movs	r7, #0
 8025e2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025e2e:	f1b9 0901 	subs.w	r9, r9, #1
 8025e32:	d505      	bpl.n	8025e40 <_fwalk_reent+0x24>
 8025e34:	6824      	ldr	r4, [r4, #0]
 8025e36:	2c00      	cmp	r4, #0
 8025e38:	d1f7      	bne.n	8025e2a <_fwalk_reent+0xe>
 8025e3a:	4638      	mov	r0, r7
 8025e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025e40:	89ab      	ldrh	r3, [r5, #12]
 8025e42:	2b01      	cmp	r3, #1
 8025e44:	d907      	bls.n	8025e56 <_fwalk_reent+0x3a>
 8025e46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025e4a:	3301      	adds	r3, #1
 8025e4c:	d003      	beq.n	8025e56 <_fwalk_reent+0x3a>
 8025e4e:	4629      	mov	r1, r5
 8025e50:	4630      	mov	r0, r6
 8025e52:	47c0      	blx	r8
 8025e54:	4307      	orrs	r7, r0
 8025e56:	3568      	adds	r5, #104	; 0x68
 8025e58:	e7e9      	b.n	8025e2e <_fwalk_reent+0x12>

08025e5a <__retarget_lock_init_recursive>:
 8025e5a:	4770      	bx	lr

08025e5c <__retarget_lock_acquire_recursive>:
 8025e5c:	4770      	bx	lr

08025e5e <__retarget_lock_release>:
 8025e5e:	4770      	bx	lr

08025e60 <__retarget_lock_release_recursive>:
 8025e60:	4770      	bx	lr

08025e62 <__swhatbuf_r>:
 8025e62:	b570      	push	{r4, r5, r6, lr}
 8025e64:	460e      	mov	r6, r1
 8025e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e6a:	2900      	cmp	r1, #0
 8025e6c:	b096      	sub	sp, #88	; 0x58
 8025e6e:	4614      	mov	r4, r2
 8025e70:	461d      	mov	r5, r3
 8025e72:	da07      	bge.n	8025e84 <__swhatbuf_r+0x22>
 8025e74:	2300      	movs	r3, #0
 8025e76:	602b      	str	r3, [r5, #0]
 8025e78:	89b3      	ldrh	r3, [r6, #12]
 8025e7a:	061a      	lsls	r2, r3, #24
 8025e7c:	d410      	bmi.n	8025ea0 <__swhatbuf_r+0x3e>
 8025e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025e82:	e00e      	b.n	8025ea2 <__swhatbuf_r+0x40>
 8025e84:	466a      	mov	r2, sp
 8025e86:	f000 fa45 	bl	8026314 <_fstat_r>
 8025e8a:	2800      	cmp	r0, #0
 8025e8c:	dbf2      	blt.n	8025e74 <__swhatbuf_r+0x12>
 8025e8e:	9a01      	ldr	r2, [sp, #4]
 8025e90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025e94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025e98:	425a      	negs	r2, r3
 8025e9a:	415a      	adcs	r2, r3
 8025e9c:	602a      	str	r2, [r5, #0]
 8025e9e:	e7ee      	b.n	8025e7e <__swhatbuf_r+0x1c>
 8025ea0:	2340      	movs	r3, #64	; 0x40
 8025ea2:	2000      	movs	r0, #0
 8025ea4:	6023      	str	r3, [r4, #0]
 8025ea6:	b016      	add	sp, #88	; 0x58
 8025ea8:	bd70      	pop	{r4, r5, r6, pc}
	...

08025eac <__smakebuf_r>:
 8025eac:	898b      	ldrh	r3, [r1, #12]
 8025eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025eb0:	079d      	lsls	r5, r3, #30
 8025eb2:	4606      	mov	r6, r0
 8025eb4:	460c      	mov	r4, r1
 8025eb6:	d507      	bpl.n	8025ec8 <__smakebuf_r+0x1c>
 8025eb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025ebc:	6023      	str	r3, [r4, #0]
 8025ebe:	6123      	str	r3, [r4, #16]
 8025ec0:	2301      	movs	r3, #1
 8025ec2:	6163      	str	r3, [r4, #20]
 8025ec4:	b002      	add	sp, #8
 8025ec6:	bd70      	pop	{r4, r5, r6, pc}
 8025ec8:	ab01      	add	r3, sp, #4
 8025eca:	466a      	mov	r2, sp
 8025ecc:	f7ff ffc9 	bl	8025e62 <__swhatbuf_r>
 8025ed0:	9900      	ldr	r1, [sp, #0]
 8025ed2:	4605      	mov	r5, r0
 8025ed4:	4630      	mov	r0, r6
 8025ed6:	f7ff f8fd 	bl	80250d4 <_malloc_r>
 8025eda:	b948      	cbnz	r0, 8025ef0 <__smakebuf_r+0x44>
 8025edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025ee0:	059a      	lsls	r2, r3, #22
 8025ee2:	d4ef      	bmi.n	8025ec4 <__smakebuf_r+0x18>
 8025ee4:	f023 0303 	bic.w	r3, r3, #3
 8025ee8:	f043 0302 	orr.w	r3, r3, #2
 8025eec:	81a3      	strh	r3, [r4, #12]
 8025eee:	e7e3      	b.n	8025eb8 <__smakebuf_r+0xc>
 8025ef0:	4b0d      	ldr	r3, [pc, #52]	; (8025f28 <__smakebuf_r+0x7c>)
 8025ef2:	62b3      	str	r3, [r6, #40]	; 0x28
 8025ef4:	89a3      	ldrh	r3, [r4, #12]
 8025ef6:	6020      	str	r0, [r4, #0]
 8025ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025efc:	81a3      	strh	r3, [r4, #12]
 8025efe:	9b00      	ldr	r3, [sp, #0]
 8025f00:	6163      	str	r3, [r4, #20]
 8025f02:	9b01      	ldr	r3, [sp, #4]
 8025f04:	6120      	str	r0, [r4, #16]
 8025f06:	b15b      	cbz	r3, 8025f20 <__smakebuf_r+0x74>
 8025f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025f0c:	4630      	mov	r0, r6
 8025f0e:	f000 fa13 	bl	8026338 <_isatty_r>
 8025f12:	b128      	cbz	r0, 8025f20 <__smakebuf_r+0x74>
 8025f14:	89a3      	ldrh	r3, [r4, #12]
 8025f16:	f023 0303 	bic.w	r3, r3, #3
 8025f1a:	f043 0301 	orr.w	r3, r3, #1
 8025f1e:	81a3      	strh	r3, [r4, #12]
 8025f20:	89a0      	ldrh	r0, [r4, #12]
 8025f22:	4305      	orrs	r5, r0
 8025f24:	81a5      	strh	r5, [r4, #12]
 8025f26:	e7cd      	b.n	8025ec4 <__smakebuf_r+0x18>
 8025f28:	08025cb9 	.word	0x08025cb9

08025f2c <__malloc_lock>:
 8025f2c:	4801      	ldr	r0, [pc, #4]	; (8025f34 <__malloc_lock+0x8>)
 8025f2e:	f7ff bf95 	b.w	8025e5c <__retarget_lock_acquire_recursive>
 8025f32:	bf00      	nop
 8025f34:	20047d38 	.word	0x20047d38

08025f38 <__malloc_unlock>:
 8025f38:	4801      	ldr	r0, [pc, #4]	; (8025f40 <__malloc_unlock+0x8>)
 8025f3a:	f7ff bf91 	b.w	8025e60 <__retarget_lock_release_recursive>
 8025f3e:	bf00      	nop
 8025f40:	20047d38 	.word	0x20047d38

08025f44 <_realloc_r>:
 8025f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f46:	4607      	mov	r7, r0
 8025f48:	4614      	mov	r4, r2
 8025f4a:	460e      	mov	r6, r1
 8025f4c:	b921      	cbnz	r1, 8025f58 <_realloc_r+0x14>
 8025f4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8025f52:	4611      	mov	r1, r2
 8025f54:	f7ff b8be 	b.w	80250d4 <_malloc_r>
 8025f58:	b922      	cbnz	r2, 8025f64 <_realloc_r+0x20>
 8025f5a:	f7ff f86b 	bl	8025034 <_free_r>
 8025f5e:	4625      	mov	r5, r4
 8025f60:	4628      	mov	r0, r5
 8025f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025f64:	f000 fa0a 	bl	802637c <_malloc_usable_size_r>
 8025f68:	42a0      	cmp	r0, r4
 8025f6a:	d20f      	bcs.n	8025f8c <_realloc_r+0x48>
 8025f6c:	4621      	mov	r1, r4
 8025f6e:	4638      	mov	r0, r7
 8025f70:	f7ff f8b0 	bl	80250d4 <_malloc_r>
 8025f74:	4605      	mov	r5, r0
 8025f76:	2800      	cmp	r0, #0
 8025f78:	d0f2      	beq.n	8025f60 <_realloc_r+0x1c>
 8025f7a:	4631      	mov	r1, r6
 8025f7c:	4622      	mov	r2, r4
 8025f7e:	f7ff f829 	bl	8024fd4 <memcpy>
 8025f82:	4631      	mov	r1, r6
 8025f84:	4638      	mov	r0, r7
 8025f86:	f7ff f855 	bl	8025034 <_free_r>
 8025f8a:	e7e9      	b.n	8025f60 <_realloc_r+0x1c>
 8025f8c:	4635      	mov	r5, r6
 8025f8e:	e7e7      	b.n	8025f60 <_realloc_r+0x1c>

08025f90 <__ssputs_r>:
 8025f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025f94:	688e      	ldr	r6, [r1, #8]
 8025f96:	429e      	cmp	r6, r3
 8025f98:	4682      	mov	sl, r0
 8025f9a:	460c      	mov	r4, r1
 8025f9c:	4690      	mov	r8, r2
 8025f9e:	461f      	mov	r7, r3
 8025fa0:	d838      	bhi.n	8026014 <__ssputs_r+0x84>
 8025fa2:	898a      	ldrh	r2, [r1, #12]
 8025fa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8025fa8:	d032      	beq.n	8026010 <__ssputs_r+0x80>
 8025faa:	6825      	ldr	r5, [r4, #0]
 8025fac:	6909      	ldr	r1, [r1, #16]
 8025fae:	eba5 0901 	sub.w	r9, r5, r1
 8025fb2:	6965      	ldr	r5, [r4, #20]
 8025fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025fb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025fbc:	3301      	adds	r3, #1
 8025fbe:	444b      	add	r3, r9
 8025fc0:	106d      	asrs	r5, r5, #1
 8025fc2:	429d      	cmp	r5, r3
 8025fc4:	bf38      	it	cc
 8025fc6:	461d      	movcc	r5, r3
 8025fc8:	0553      	lsls	r3, r2, #21
 8025fca:	d531      	bpl.n	8026030 <__ssputs_r+0xa0>
 8025fcc:	4629      	mov	r1, r5
 8025fce:	f7ff f881 	bl	80250d4 <_malloc_r>
 8025fd2:	4606      	mov	r6, r0
 8025fd4:	b950      	cbnz	r0, 8025fec <__ssputs_r+0x5c>
 8025fd6:	230c      	movs	r3, #12
 8025fd8:	f8ca 3000 	str.w	r3, [sl]
 8025fdc:	89a3      	ldrh	r3, [r4, #12]
 8025fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025fe2:	81a3      	strh	r3, [r4, #12]
 8025fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025fec:	6921      	ldr	r1, [r4, #16]
 8025fee:	464a      	mov	r2, r9
 8025ff0:	f7fe fff0 	bl	8024fd4 <memcpy>
 8025ff4:	89a3      	ldrh	r3, [r4, #12]
 8025ff6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8025ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025ffe:	81a3      	strh	r3, [r4, #12]
 8026000:	6126      	str	r6, [r4, #16]
 8026002:	6165      	str	r5, [r4, #20]
 8026004:	444e      	add	r6, r9
 8026006:	eba5 0509 	sub.w	r5, r5, r9
 802600a:	6026      	str	r6, [r4, #0]
 802600c:	60a5      	str	r5, [r4, #8]
 802600e:	463e      	mov	r6, r7
 8026010:	42be      	cmp	r6, r7
 8026012:	d900      	bls.n	8026016 <__ssputs_r+0x86>
 8026014:	463e      	mov	r6, r7
 8026016:	4632      	mov	r2, r6
 8026018:	6820      	ldr	r0, [r4, #0]
 802601a:	4641      	mov	r1, r8
 802601c:	f7fe ffe8 	bl	8024ff0 <memmove>
 8026020:	68a3      	ldr	r3, [r4, #8]
 8026022:	6822      	ldr	r2, [r4, #0]
 8026024:	1b9b      	subs	r3, r3, r6
 8026026:	4432      	add	r2, r6
 8026028:	60a3      	str	r3, [r4, #8]
 802602a:	6022      	str	r2, [r4, #0]
 802602c:	2000      	movs	r0, #0
 802602e:	e7db      	b.n	8025fe8 <__ssputs_r+0x58>
 8026030:	462a      	mov	r2, r5
 8026032:	f7ff ff87 	bl	8025f44 <_realloc_r>
 8026036:	4606      	mov	r6, r0
 8026038:	2800      	cmp	r0, #0
 802603a:	d1e1      	bne.n	8026000 <__ssputs_r+0x70>
 802603c:	6921      	ldr	r1, [r4, #16]
 802603e:	4650      	mov	r0, sl
 8026040:	f7fe fff8 	bl	8025034 <_free_r>
 8026044:	e7c7      	b.n	8025fd6 <__ssputs_r+0x46>
	...

08026048 <_svfiprintf_r>:
 8026048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802604c:	4698      	mov	r8, r3
 802604e:	898b      	ldrh	r3, [r1, #12]
 8026050:	061b      	lsls	r3, r3, #24
 8026052:	b09d      	sub	sp, #116	; 0x74
 8026054:	4607      	mov	r7, r0
 8026056:	460d      	mov	r5, r1
 8026058:	4614      	mov	r4, r2
 802605a:	d50e      	bpl.n	802607a <_svfiprintf_r+0x32>
 802605c:	690b      	ldr	r3, [r1, #16]
 802605e:	b963      	cbnz	r3, 802607a <_svfiprintf_r+0x32>
 8026060:	2140      	movs	r1, #64	; 0x40
 8026062:	f7ff f837 	bl	80250d4 <_malloc_r>
 8026066:	6028      	str	r0, [r5, #0]
 8026068:	6128      	str	r0, [r5, #16]
 802606a:	b920      	cbnz	r0, 8026076 <_svfiprintf_r+0x2e>
 802606c:	230c      	movs	r3, #12
 802606e:	603b      	str	r3, [r7, #0]
 8026070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026074:	e0d1      	b.n	802621a <_svfiprintf_r+0x1d2>
 8026076:	2340      	movs	r3, #64	; 0x40
 8026078:	616b      	str	r3, [r5, #20]
 802607a:	2300      	movs	r3, #0
 802607c:	9309      	str	r3, [sp, #36]	; 0x24
 802607e:	2320      	movs	r3, #32
 8026080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026084:	f8cd 800c 	str.w	r8, [sp, #12]
 8026088:	2330      	movs	r3, #48	; 0x30
 802608a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8026234 <_svfiprintf_r+0x1ec>
 802608e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026092:	f04f 0901 	mov.w	r9, #1
 8026096:	4623      	mov	r3, r4
 8026098:	469a      	mov	sl, r3
 802609a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802609e:	b10a      	cbz	r2, 80260a4 <_svfiprintf_r+0x5c>
 80260a0:	2a25      	cmp	r2, #37	; 0x25
 80260a2:	d1f9      	bne.n	8026098 <_svfiprintf_r+0x50>
 80260a4:	ebba 0b04 	subs.w	fp, sl, r4
 80260a8:	d00b      	beq.n	80260c2 <_svfiprintf_r+0x7a>
 80260aa:	465b      	mov	r3, fp
 80260ac:	4622      	mov	r2, r4
 80260ae:	4629      	mov	r1, r5
 80260b0:	4638      	mov	r0, r7
 80260b2:	f7ff ff6d 	bl	8025f90 <__ssputs_r>
 80260b6:	3001      	adds	r0, #1
 80260b8:	f000 80aa 	beq.w	8026210 <_svfiprintf_r+0x1c8>
 80260bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80260be:	445a      	add	r2, fp
 80260c0:	9209      	str	r2, [sp, #36]	; 0x24
 80260c2:	f89a 3000 	ldrb.w	r3, [sl]
 80260c6:	2b00      	cmp	r3, #0
 80260c8:	f000 80a2 	beq.w	8026210 <_svfiprintf_r+0x1c8>
 80260cc:	2300      	movs	r3, #0
 80260ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80260d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80260d6:	f10a 0a01 	add.w	sl, sl, #1
 80260da:	9304      	str	r3, [sp, #16]
 80260dc:	9307      	str	r3, [sp, #28]
 80260de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80260e2:	931a      	str	r3, [sp, #104]	; 0x68
 80260e4:	4654      	mov	r4, sl
 80260e6:	2205      	movs	r2, #5
 80260e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80260ec:	4851      	ldr	r0, [pc, #324]	; (8026234 <_svfiprintf_r+0x1ec>)
 80260ee:	f7da f897 	bl	8000220 <memchr>
 80260f2:	9a04      	ldr	r2, [sp, #16]
 80260f4:	b9d8      	cbnz	r0, 802612e <_svfiprintf_r+0xe6>
 80260f6:	06d0      	lsls	r0, r2, #27
 80260f8:	bf44      	itt	mi
 80260fa:	2320      	movmi	r3, #32
 80260fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026100:	0711      	lsls	r1, r2, #28
 8026102:	bf44      	itt	mi
 8026104:	232b      	movmi	r3, #43	; 0x2b
 8026106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802610a:	f89a 3000 	ldrb.w	r3, [sl]
 802610e:	2b2a      	cmp	r3, #42	; 0x2a
 8026110:	d015      	beq.n	802613e <_svfiprintf_r+0xf6>
 8026112:	9a07      	ldr	r2, [sp, #28]
 8026114:	4654      	mov	r4, sl
 8026116:	2000      	movs	r0, #0
 8026118:	f04f 0c0a 	mov.w	ip, #10
 802611c:	4621      	mov	r1, r4
 802611e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026122:	3b30      	subs	r3, #48	; 0x30
 8026124:	2b09      	cmp	r3, #9
 8026126:	d94e      	bls.n	80261c6 <_svfiprintf_r+0x17e>
 8026128:	b1b0      	cbz	r0, 8026158 <_svfiprintf_r+0x110>
 802612a:	9207      	str	r2, [sp, #28]
 802612c:	e014      	b.n	8026158 <_svfiprintf_r+0x110>
 802612e:	eba0 0308 	sub.w	r3, r0, r8
 8026132:	fa09 f303 	lsl.w	r3, r9, r3
 8026136:	4313      	orrs	r3, r2
 8026138:	9304      	str	r3, [sp, #16]
 802613a:	46a2      	mov	sl, r4
 802613c:	e7d2      	b.n	80260e4 <_svfiprintf_r+0x9c>
 802613e:	9b03      	ldr	r3, [sp, #12]
 8026140:	1d19      	adds	r1, r3, #4
 8026142:	681b      	ldr	r3, [r3, #0]
 8026144:	9103      	str	r1, [sp, #12]
 8026146:	2b00      	cmp	r3, #0
 8026148:	bfbb      	ittet	lt
 802614a:	425b      	neglt	r3, r3
 802614c:	f042 0202 	orrlt.w	r2, r2, #2
 8026150:	9307      	strge	r3, [sp, #28]
 8026152:	9307      	strlt	r3, [sp, #28]
 8026154:	bfb8      	it	lt
 8026156:	9204      	strlt	r2, [sp, #16]
 8026158:	7823      	ldrb	r3, [r4, #0]
 802615a:	2b2e      	cmp	r3, #46	; 0x2e
 802615c:	d10c      	bne.n	8026178 <_svfiprintf_r+0x130>
 802615e:	7863      	ldrb	r3, [r4, #1]
 8026160:	2b2a      	cmp	r3, #42	; 0x2a
 8026162:	d135      	bne.n	80261d0 <_svfiprintf_r+0x188>
 8026164:	9b03      	ldr	r3, [sp, #12]
 8026166:	1d1a      	adds	r2, r3, #4
 8026168:	681b      	ldr	r3, [r3, #0]
 802616a:	9203      	str	r2, [sp, #12]
 802616c:	2b00      	cmp	r3, #0
 802616e:	bfb8      	it	lt
 8026170:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8026174:	3402      	adds	r4, #2
 8026176:	9305      	str	r3, [sp, #20]
 8026178:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8026244 <_svfiprintf_r+0x1fc>
 802617c:	7821      	ldrb	r1, [r4, #0]
 802617e:	2203      	movs	r2, #3
 8026180:	4650      	mov	r0, sl
 8026182:	f7da f84d 	bl	8000220 <memchr>
 8026186:	b140      	cbz	r0, 802619a <_svfiprintf_r+0x152>
 8026188:	2340      	movs	r3, #64	; 0x40
 802618a:	eba0 000a 	sub.w	r0, r0, sl
 802618e:	fa03 f000 	lsl.w	r0, r3, r0
 8026192:	9b04      	ldr	r3, [sp, #16]
 8026194:	4303      	orrs	r3, r0
 8026196:	3401      	adds	r4, #1
 8026198:	9304      	str	r3, [sp, #16]
 802619a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802619e:	4826      	ldr	r0, [pc, #152]	; (8026238 <_svfiprintf_r+0x1f0>)
 80261a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80261a4:	2206      	movs	r2, #6
 80261a6:	f7da f83b 	bl	8000220 <memchr>
 80261aa:	2800      	cmp	r0, #0
 80261ac:	d038      	beq.n	8026220 <_svfiprintf_r+0x1d8>
 80261ae:	4b23      	ldr	r3, [pc, #140]	; (802623c <_svfiprintf_r+0x1f4>)
 80261b0:	bb1b      	cbnz	r3, 80261fa <_svfiprintf_r+0x1b2>
 80261b2:	9b03      	ldr	r3, [sp, #12]
 80261b4:	3307      	adds	r3, #7
 80261b6:	f023 0307 	bic.w	r3, r3, #7
 80261ba:	3308      	adds	r3, #8
 80261bc:	9303      	str	r3, [sp, #12]
 80261be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80261c0:	4433      	add	r3, r6
 80261c2:	9309      	str	r3, [sp, #36]	; 0x24
 80261c4:	e767      	b.n	8026096 <_svfiprintf_r+0x4e>
 80261c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80261ca:	460c      	mov	r4, r1
 80261cc:	2001      	movs	r0, #1
 80261ce:	e7a5      	b.n	802611c <_svfiprintf_r+0xd4>
 80261d0:	2300      	movs	r3, #0
 80261d2:	3401      	adds	r4, #1
 80261d4:	9305      	str	r3, [sp, #20]
 80261d6:	4619      	mov	r1, r3
 80261d8:	f04f 0c0a 	mov.w	ip, #10
 80261dc:	4620      	mov	r0, r4
 80261de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80261e2:	3a30      	subs	r2, #48	; 0x30
 80261e4:	2a09      	cmp	r2, #9
 80261e6:	d903      	bls.n	80261f0 <_svfiprintf_r+0x1a8>
 80261e8:	2b00      	cmp	r3, #0
 80261ea:	d0c5      	beq.n	8026178 <_svfiprintf_r+0x130>
 80261ec:	9105      	str	r1, [sp, #20]
 80261ee:	e7c3      	b.n	8026178 <_svfiprintf_r+0x130>
 80261f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80261f4:	4604      	mov	r4, r0
 80261f6:	2301      	movs	r3, #1
 80261f8:	e7f0      	b.n	80261dc <_svfiprintf_r+0x194>
 80261fa:	ab03      	add	r3, sp, #12
 80261fc:	9300      	str	r3, [sp, #0]
 80261fe:	462a      	mov	r2, r5
 8026200:	4b0f      	ldr	r3, [pc, #60]	; (8026240 <_svfiprintf_r+0x1f8>)
 8026202:	a904      	add	r1, sp, #16
 8026204:	4638      	mov	r0, r7
 8026206:	f3af 8000 	nop.w
 802620a:	1c42      	adds	r2, r0, #1
 802620c:	4606      	mov	r6, r0
 802620e:	d1d6      	bne.n	80261be <_svfiprintf_r+0x176>
 8026210:	89ab      	ldrh	r3, [r5, #12]
 8026212:	065b      	lsls	r3, r3, #25
 8026214:	f53f af2c 	bmi.w	8026070 <_svfiprintf_r+0x28>
 8026218:	9809      	ldr	r0, [sp, #36]	; 0x24
 802621a:	b01d      	add	sp, #116	; 0x74
 802621c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026220:	ab03      	add	r3, sp, #12
 8026222:	9300      	str	r3, [sp, #0]
 8026224:	462a      	mov	r2, r5
 8026226:	4b06      	ldr	r3, [pc, #24]	; (8026240 <_svfiprintf_r+0x1f8>)
 8026228:	a904      	add	r1, sp, #16
 802622a:	4638      	mov	r0, r7
 802622c:	f7ff f974 	bl	8025518 <_printf_i>
 8026230:	e7eb      	b.n	802620a <_svfiprintf_r+0x1c2>
 8026232:	bf00      	nop
 8026234:	0807a710 	.word	0x0807a710
 8026238:	0807a71a 	.word	0x0807a71a
 802623c:	00000000 	.word	0x00000000
 8026240:	08025f91 	.word	0x08025f91
 8026244:	0807a716 	.word	0x0807a716

08026248 <__sread>:
 8026248:	b510      	push	{r4, lr}
 802624a:	460c      	mov	r4, r1
 802624c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026250:	f000 f89c 	bl	802638c <_read_r>
 8026254:	2800      	cmp	r0, #0
 8026256:	bfab      	itete	ge
 8026258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802625a:	89a3      	ldrhlt	r3, [r4, #12]
 802625c:	181b      	addge	r3, r3, r0
 802625e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026262:	bfac      	ite	ge
 8026264:	6563      	strge	r3, [r4, #84]	; 0x54
 8026266:	81a3      	strhlt	r3, [r4, #12]
 8026268:	bd10      	pop	{r4, pc}

0802626a <__swrite>:
 802626a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802626e:	461f      	mov	r7, r3
 8026270:	898b      	ldrh	r3, [r1, #12]
 8026272:	05db      	lsls	r3, r3, #23
 8026274:	4605      	mov	r5, r0
 8026276:	460c      	mov	r4, r1
 8026278:	4616      	mov	r6, r2
 802627a:	d505      	bpl.n	8026288 <__swrite+0x1e>
 802627c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026280:	2302      	movs	r3, #2
 8026282:	2200      	movs	r2, #0
 8026284:	f000 f868 	bl	8026358 <_lseek_r>
 8026288:	89a3      	ldrh	r3, [r4, #12]
 802628a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802628e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026292:	81a3      	strh	r3, [r4, #12]
 8026294:	4632      	mov	r2, r6
 8026296:	463b      	mov	r3, r7
 8026298:	4628      	mov	r0, r5
 802629a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802629e:	f000 b817 	b.w	80262d0 <_write_r>

080262a2 <__sseek>:
 80262a2:	b510      	push	{r4, lr}
 80262a4:	460c      	mov	r4, r1
 80262a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80262aa:	f000 f855 	bl	8026358 <_lseek_r>
 80262ae:	1c43      	adds	r3, r0, #1
 80262b0:	89a3      	ldrh	r3, [r4, #12]
 80262b2:	bf15      	itete	ne
 80262b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80262b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80262ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80262be:	81a3      	strheq	r3, [r4, #12]
 80262c0:	bf18      	it	ne
 80262c2:	81a3      	strhne	r3, [r4, #12]
 80262c4:	bd10      	pop	{r4, pc}

080262c6 <__sclose>:
 80262c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80262ca:	f000 b813 	b.w	80262f4 <_close_r>
	...

080262d0 <_write_r>:
 80262d0:	b538      	push	{r3, r4, r5, lr}
 80262d2:	4d07      	ldr	r5, [pc, #28]	; (80262f0 <_write_r+0x20>)
 80262d4:	4604      	mov	r4, r0
 80262d6:	4608      	mov	r0, r1
 80262d8:	4611      	mov	r1, r2
 80262da:	2200      	movs	r2, #0
 80262dc:	602a      	str	r2, [r5, #0]
 80262de:	461a      	mov	r2, r3
 80262e0:	f7dc fb4f 	bl	8002982 <_write>
 80262e4:	1c43      	adds	r3, r0, #1
 80262e6:	d102      	bne.n	80262ee <_write_r+0x1e>
 80262e8:	682b      	ldr	r3, [r5, #0]
 80262ea:	b103      	cbz	r3, 80262ee <_write_r+0x1e>
 80262ec:	6023      	str	r3, [r4, #0]
 80262ee:	bd38      	pop	{r3, r4, r5, pc}
 80262f0:	20047d44 	.word	0x20047d44

080262f4 <_close_r>:
 80262f4:	b538      	push	{r3, r4, r5, lr}
 80262f6:	4d06      	ldr	r5, [pc, #24]	; (8026310 <_close_r+0x1c>)
 80262f8:	2300      	movs	r3, #0
 80262fa:	4604      	mov	r4, r0
 80262fc:	4608      	mov	r0, r1
 80262fe:	602b      	str	r3, [r5, #0]
 8026300:	f7dc fb5b 	bl	80029ba <_close>
 8026304:	1c43      	adds	r3, r0, #1
 8026306:	d102      	bne.n	802630e <_close_r+0x1a>
 8026308:	682b      	ldr	r3, [r5, #0]
 802630a:	b103      	cbz	r3, 802630e <_close_r+0x1a>
 802630c:	6023      	str	r3, [r4, #0]
 802630e:	bd38      	pop	{r3, r4, r5, pc}
 8026310:	20047d44 	.word	0x20047d44

08026314 <_fstat_r>:
 8026314:	b538      	push	{r3, r4, r5, lr}
 8026316:	4d07      	ldr	r5, [pc, #28]	; (8026334 <_fstat_r+0x20>)
 8026318:	2300      	movs	r3, #0
 802631a:	4604      	mov	r4, r0
 802631c:	4608      	mov	r0, r1
 802631e:	4611      	mov	r1, r2
 8026320:	602b      	str	r3, [r5, #0]
 8026322:	f7dc fb56 	bl	80029d2 <_fstat>
 8026326:	1c43      	adds	r3, r0, #1
 8026328:	d102      	bne.n	8026330 <_fstat_r+0x1c>
 802632a:	682b      	ldr	r3, [r5, #0]
 802632c:	b103      	cbz	r3, 8026330 <_fstat_r+0x1c>
 802632e:	6023      	str	r3, [r4, #0]
 8026330:	bd38      	pop	{r3, r4, r5, pc}
 8026332:	bf00      	nop
 8026334:	20047d44 	.word	0x20047d44

08026338 <_isatty_r>:
 8026338:	b538      	push	{r3, r4, r5, lr}
 802633a:	4d06      	ldr	r5, [pc, #24]	; (8026354 <_isatty_r+0x1c>)
 802633c:	2300      	movs	r3, #0
 802633e:	4604      	mov	r4, r0
 8026340:	4608      	mov	r0, r1
 8026342:	602b      	str	r3, [r5, #0]
 8026344:	f7dc fb55 	bl	80029f2 <_isatty>
 8026348:	1c43      	adds	r3, r0, #1
 802634a:	d102      	bne.n	8026352 <_isatty_r+0x1a>
 802634c:	682b      	ldr	r3, [r5, #0]
 802634e:	b103      	cbz	r3, 8026352 <_isatty_r+0x1a>
 8026350:	6023      	str	r3, [r4, #0]
 8026352:	bd38      	pop	{r3, r4, r5, pc}
 8026354:	20047d44 	.word	0x20047d44

08026358 <_lseek_r>:
 8026358:	b538      	push	{r3, r4, r5, lr}
 802635a:	4d07      	ldr	r5, [pc, #28]	; (8026378 <_lseek_r+0x20>)
 802635c:	4604      	mov	r4, r0
 802635e:	4608      	mov	r0, r1
 8026360:	4611      	mov	r1, r2
 8026362:	2200      	movs	r2, #0
 8026364:	602a      	str	r2, [r5, #0]
 8026366:	461a      	mov	r2, r3
 8026368:	f7dc fb4e 	bl	8002a08 <_lseek>
 802636c:	1c43      	adds	r3, r0, #1
 802636e:	d102      	bne.n	8026376 <_lseek_r+0x1e>
 8026370:	682b      	ldr	r3, [r5, #0]
 8026372:	b103      	cbz	r3, 8026376 <_lseek_r+0x1e>
 8026374:	6023      	str	r3, [r4, #0]
 8026376:	bd38      	pop	{r3, r4, r5, pc}
 8026378:	20047d44 	.word	0x20047d44

0802637c <_malloc_usable_size_r>:
 802637c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026380:	1f18      	subs	r0, r3, #4
 8026382:	2b00      	cmp	r3, #0
 8026384:	bfbc      	itt	lt
 8026386:	580b      	ldrlt	r3, [r1, r0]
 8026388:	18c0      	addlt	r0, r0, r3
 802638a:	4770      	bx	lr

0802638c <_read_r>:
 802638c:	b538      	push	{r3, r4, r5, lr}
 802638e:	4d07      	ldr	r5, [pc, #28]	; (80263ac <_read_r+0x20>)
 8026390:	4604      	mov	r4, r0
 8026392:	4608      	mov	r0, r1
 8026394:	4611      	mov	r1, r2
 8026396:	2200      	movs	r2, #0
 8026398:	602a      	str	r2, [r5, #0]
 802639a:	461a      	mov	r2, r3
 802639c:	f7dc fad4 	bl	8002948 <_read>
 80263a0:	1c43      	adds	r3, r0, #1
 80263a2:	d102      	bne.n	80263aa <_read_r+0x1e>
 80263a4:	682b      	ldr	r3, [r5, #0]
 80263a6:	b103      	cbz	r3, 80263aa <_read_r+0x1e>
 80263a8:	6023      	str	r3, [r4, #0]
 80263aa:	bd38      	pop	{r3, r4, r5, pc}
 80263ac:	20047d44 	.word	0x20047d44

080263b0 <_init>:
 80263b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263b2:	bf00      	nop
 80263b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80263b6:	bc08      	pop	{r3}
 80263b8:	469e      	mov	lr, r3
 80263ba:	4770      	bx	lr

080263bc <_fini>:
 80263bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263be:	bf00      	nop
 80263c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80263c2:	bc08      	pop	{r3}
 80263c4:	469e      	mov	lr, r3
 80263c6:	4770      	bx	lr
