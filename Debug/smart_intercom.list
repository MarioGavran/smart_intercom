
smart_intercom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a33c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011c3c  0800a51c  0800a51c  0001a51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c158  0801c158  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  0801c158  0801c158  0002c158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c160  0801c160  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c160  0801c160  0002c160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c164  0801c164  0002c164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801c168  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025ef8  20000090  0801c1f8  00030090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20025f88  0801c1f8  00035f88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fe7  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004774  00000000  00000000  000540a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  00058820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  00059d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bdee  00000000  00000000  0005b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fc24  00000000  00000000  00086ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7598  00000000  00000000  000a6b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018e09a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006250  00000000  00000000  0018e0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000090 	.word	0x20000090
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a504 	.word	0x0800a504

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000094 	.word	0x20000094
 800021c:	0800a504 	.word	0x0800a504

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b96e 	b.w	80005c4 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468c      	mov	ip, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8083 	bne.w	8000416 <__udivmoddi4+0x116>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d947      	bls.n	80003a6 <__udivmoddi4+0xa6>
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	b142      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031c:	f1c2 0020 	rsb	r0, r2, #32
 8000320:	fa24 f000 	lsr.w	r0, r4, r0
 8000324:	4091      	lsls	r1, r2
 8000326:	4097      	lsls	r7, r2
 8000328:	ea40 0c01 	orr.w	ip, r0, r1
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbbc f6f8 	udiv	r6, ip, r8
 8000338:	fa1f fe87 	uxth.w	lr, r7
 800033c:	fb08 c116 	mls	r1, r8, r6, ip
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb06 f10e 	mul.w	r1, r6, lr
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000352:	f080 8119 	bcs.w	8000588 <__udivmoddi4+0x288>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8116 	bls.w	8000588 <__udivmoddi4+0x288>
 800035c:	3e02      	subs	r6, #2
 800035e:	443b      	add	r3, r7
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	193c      	adds	r4, r7, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037e:	f080 8105 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f240 8102 	bls.w	800058c <__udivmoddi4+0x28c>
 8000388:	3802      	subs	r0, #2
 800038a:	443c      	add	r4, r7
 800038c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	2600      	movs	r6, #0
 8000396:	b11d      	cbz	r5, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c5 4300 	strd	r4, r3, [r5]
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	b902      	cbnz	r2, 80003aa <__udivmoddi4+0xaa>
 80003a8:	deff      	udf	#255	; 0xff
 80003aa:	fab2 f282 	clz	r2, r2
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d150      	bne.n	8000454 <__udivmoddi4+0x154>
 80003b2:	1bcb      	subs	r3, r1, r7
 80003b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	2601      	movs	r6, #1
 80003be:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c2:	0c21      	lsrs	r1, r4, #16
 80003c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb08 f30c 	mul.w	r3, r8, ip
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0xe4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0xe2>
 80003dc:	428b      	cmp	r3, r1
 80003de:	f200 80e9 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1ac9      	subs	r1, r1, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x10c>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x10a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80d9 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e7bf      	b.n	8000396 <__udivmoddi4+0x96>
 8000416:	428b      	cmp	r3, r1
 8000418:	d909      	bls.n	800042e <__udivmoddi4+0x12e>
 800041a:	2d00      	cmp	r5, #0
 800041c:	f000 80b1 	beq.w	8000582 <__udivmoddi4+0x282>
 8000420:	2600      	movs	r6, #0
 8000422:	e9c5 0100 	strd	r0, r1, [r5]
 8000426:	4630      	mov	r0, r6
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	fab3 f683 	clz	r6, r3
 8000432:	2e00      	cmp	r6, #0
 8000434:	d14a      	bne.n	80004cc <__udivmoddi4+0x1cc>
 8000436:	428b      	cmp	r3, r1
 8000438:	d302      	bcc.n	8000440 <__udivmoddi4+0x140>
 800043a:	4282      	cmp	r2, r0
 800043c:	f200 80b8 	bhi.w	80005b0 <__udivmoddi4+0x2b0>
 8000440:	1a84      	subs	r4, r0, r2
 8000442:	eb61 0103 	sbc.w	r1, r1, r3
 8000446:	2001      	movs	r0, #1
 8000448:	468c      	mov	ip, r1
 800044a:	2d00      	cmp	r5, #0
 800044c:	d0a8      	beq.n	80003a0 <__udivmoddi4+0xa0>
 800044e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f603 	lsr.w	r6, r0, r3
 800045c:	4097      	lsls	r7, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000466:	40d9      	lsrs	r1, r3
 8000468:	4330      	orrs	r0, r6
 800046a:	0c03      	lsrs	r3, r0, #16
 800046c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000470:	fa1f f887 	uxth.w	r8, r7
 8000474:	fb0e 1116 	mls	r1, lr, r6, r1
 8000478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047c:	fb06 f108 	mul.w	r1, r6, r8
 8000480:	4299      	cmp	r1, r3
 8000482:	fa04 f402 	lsl.w	r4, r4, r2
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x19c>
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800048e:	f080 808d 	bcs.w	80005ac <__udivmoddi4+0x2ac>
 8000492:	4299      	cmp	r1, r3
 8000494:	f240 808a 	bls.w	80005ac <__udivmoddi4+0x2ac>
 8000498:	3e02      	subs	r6, #2
 800049a:	443b      	add	r3, r7
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b281      	uxth	r1, r0
 80004a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb00 f308 	mul.w	r3, r0, r8
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x1c4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ba:	d273      	bcs.n	80005a4 <__udivmoddi4+0x2a4>
 80004bc:	428b      	cmp	r3, r1
 80004be:	d971      	bls.n	80005a4 <__udivmoddi4+0x2a4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4439      	add	r1, r7
 80004c4:	1acb      	subs	r3, r1, r3
 80004c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ca:	e778      	b.n	80003be <__udivmoddi4+0xbe>
 80004cc:	f1c6 0c20 	rsb	ip, r6, #32
 80004d0:	fa03 f406 	lsl.w	r4, r3, r6
 80004d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004d8:	431c      	orrs	r4, r3
 80004da:	fa20 f70c 	lsr.w	r7, r0, ip
 80004de:	fa01 f306 	lsl.w	r3, r1, r6
 80004e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ea:	431f      	orrs	r7, r3
 80004ec:	0c3b      	lsrs	r3, r7, #16
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fa1f f884 	uxth.w	r8, r4
 80004f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000502:	458a      	cmp	sl, r1
 8000504:	fa02 f206 	lsl.w	r2, r2, r6
 8000508:	fa00 f306 	lsl.w	r3, r0, r6
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x220>
 800050e:	1861      	adds	r1, r4, r1
 8000510:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000514:	d248      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 8000516:	458a      	cmp	sl, r1
 8000518:	d946      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800051a:	f1a9 0902 	sub.w	r9, r9, #2
 800051e:	4421      	add	r1, r4
 8000520:	eba1 010a 	sub.w	r1, r1, sl
 8000524:	b2bf      	uxth	r7, r7
 8000526:	fbb1 f0fe 	udiv	r0, r1, lr
 800052a:	fb0e 1110 	mls	r1, lr, r0, r1
 800052e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000532:	fb00 f808 	mul.w	r8, r0, r8
 8000536:	45b8      	cmp	r8, r7
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x24a>
 800053a:	19e7      	adds	r7, r4, r7
 800053c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000540:	d22e      	bcs.n	80005a0 <__udivmoddi4+0x2a0>
 8000542:	45b8      	cmp	r8, r7
 8000544:	d92c      	bls.n	80005a0 <__udivmoddi4+0x2a0>
 8000546:	3802      	subs	r0, #2
 8000548:	4427      	add	r7, r4
 800054a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800054e:	eba7 0708 	sub.w	r7, r7, r8
 8000552:	fba0 8902 	umull	r8, r9, r0, r2
 8000556:	454f      	cmp	r7, r9
 8000558:	46c6      	mov	lr, r8
 800055a:	4649      	mov	r1, r9
 800055c:	d31a      	bcc.n	8000594 <__udivmoddi4+0x294>
 800055e:	d017      	beq.n	8000590 <__udivmoddi4+0x290>
 8000560:	b15d      	cbz	r5, 800057a <__udivmoddi4+0x27a>
 8000562:	ebb3 020e 	subs.w	r2, r3, lr
 8000566:	eb67 0701 	sbc.w	r7, r7, r1
 800056a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800056e:	40f2      	lsrs	r2, r6
 8000570:	ea4c 0202 	orr.w	r2, ip, r2
 8000574:	40f7      	lsrs	r7, r6
 8000576:	e9c5 2700 	strd	r2, r7, [r5]
 800057a:	2600      	movs	r6, #0
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e70b      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0x60>
 800058c:	4618      	mov	r0, r3
 800058e:	e6fd      	b.n	800038c <__udivmoddi4+0x8c>
 8000590:	4543      	cmp	r3, r8
 8000592:	d2e5      	bcs.n	8000560 <__udivmoddi4+0x260>
 8000594:	ebb8 0e02 	subs.w	lr, r8, r2
 8000598:	eb69 0104 	sbc.w	r1, r9, r4
 800059c:	3801      	subs	r0, #1
 800059e:	e7df      	b.n	8000560 <__udivmoddi4+0x260>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e7d2      	b.n	800054a <__udivmoddi4+0x24a>
 80005a4:	4660      	mov	r0, ip
 80005a6:	e78d      	b.n	80004c4 <__udivmoddi4+0x1c4>
 80005a8:	4681      	mov	r9, r0
 80005aa:	e7b9      	b.n	8000520 <__udivmoddi4+0x220>
 80005ac:	4666      	mov	r6, ip
 80005ae:	e775      	b.n	800049c <__udivmoddi4+0x19c>
 80005b0:	4630      	mov	r0, r6
 80005b2:	e74a      	b.n	800044a <__udivmoddi4+0x14a>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	4439      	add	r1, r7
 80005ba:	e713      	b.n	80003e4 <__udivmoddi4+0xe4>
 80005bc:	3802      	subs	r0, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e724      	b.n	800040c <__udivmoddi4+0x10c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <MX_ADC1_Init+0x78>)
 80005dc:	4a19      	ldr	r2, [pc, #100]	; (8000644 <MX_ADC1_Init+0x7c>)
 80005de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_ADC1_Init+0x78>)
 80005e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_ADC1_Init+0x78>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC1_Init+0x78>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC1_Init+0x78>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_ADC1_Init+0x78>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_ADC1_Init+0x78>)
 8000604:	2200      	movs	r2, #0
 8000606:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <MX_ADC1_Init+0x78>)
 800060a:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <MX_ADC1_Init+0x80>)
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_ADC1_Init+0x78>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_ADC1_Init+0x78>)
 8000616:	2202      	movs	r2, #2
 8000618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_ADC1_Init+0x78>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_ADC1_Init+0x78>)
 8000624:	2201      	movs	r2, #1
 8000626:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC1_Init+0x78>)
 800062a:	f002 fc07 	bl	8002e3c <HAL_ADC_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000634:	f001 f8e4 	bl	8001800 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20025c68 	.word	0x20025c68
 8000644:	40012000 	.word	0x40012000
 8000648:	0f000001 	.word	0x0f000001

0800064c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <HAL_ADC_MspInit+0x7c>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d127      	bne.n	80006be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <HAL_ADC_MspInit+0x80>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <HAL_ADC_MspInit+0x80>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067c:	6453      	str	r3, [r2, #68]	; 0x44
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <HAL_ADC_MspInit+0x80>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <HAL_ADC_MspInit+0x80>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <HAL_ADC_MspInit+0x80>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <HAL_ADC_MspInit+0x80>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = TOUCH_XR_Pin;
 80006a6:	2304      	movs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006aa:	2303      	movs	r3, #3
 80006ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TOUCH_XR_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <HAL_ADC_MspInit+0x84>)
 80006ba:	f003 fc8f 	bl	8003fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	; 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40012000 	.word	0x40012000
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020000 	.word	0x40020000

080006d4 <app_main_init>:
{
	setup();
}
//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_init()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	unsigned int l,ll = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]

	NT35510_Init();
 80006de:	f000 fbe1 	bl	8000ea4 <NT35510_Init>

	LCD_ClearScreen(0xFFFFU);
 80006e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006e6:	f000 fb17 	bl	8000d18 <LCD_ClearScreen>
	LCD_SetDirection(HORIZONTAL_RIGHT);
 80006ea:	2003      	movs	r0, #3
 80006ec:	f000 fabc 	bl	8000c68 <LCD_SetDirection>

	//==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~
	// ~=~=~ FERI logo ~=~=~
	LCD_ClearScreen(0xFFFFU);
 80006f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006f4:	f000 fb10 	bl	8000d18 <LCD_ClearScreen>
	LCD_SetWindow(240, 184, 240 + FERI_LOGO_IMG_W -1, 184 + FERI_LOGO_IMG_H -1);
 80006f8:	f44f 7393 	mov.w	r3, #294	; 0x126
 80006fc:	f240 222f 	movw	r2, #559	; 0x22f
 8000700:	21b8      	movs	r1, #184	; 0xb8
 8000702:	20f0      	movs	r0, #240	; 0xf0
 8000704:	f000 fa48 	bl	8000b98 <LCD_SetWindow>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	e013      	b.n	8000736 <app_main_init+0x62>
	{
		FSMC_WR_DAT(((g_feri_logo_image[l] << 8) & 0xFF00U) | (g_feri_logo_image[l+1] & 0x00FFU));
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <app_main_init+0xbc>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b29b      	uxth	r3, r3
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3301      	adds	r3, #1
 8000720:	491b      	ldr	r1, [pc, #108]	; (8000790 <app_main_init+0xbc>)
 8000722:	5ccb      	ldrb	r3, [r1, r3]
 8000724:	b29b      	uxth	r3, r3
 8000726:	4313      	orrs	r3, r2
 8000728:	b29b      	uxth	r3, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fa22 	bl	8000b74 <FSMC_WR_DAT>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3302      	adds	r3, #2
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a16      	ldr	r2, [pc, #88]	; (8000794 <app_main_init+0xc0>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d9e7      	bls.n	800070e <app_main_init+0x3a>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
	{
		FSMC_WR_DAT(((g_feri_logo_image[l] << 8) & 0xFF00U) | (g_feri_logo_image[l+1] & 0x00FFU));
	}
	HAL_Delay(1000);
*/	LCD_SetWindow(0, 0, 799, 479);
 800073e:	f240 13df 	movw	r3, #479	; 0x1df
 8000742:	f240 321f 	movw	r2, #799	; 0x31f
 8000746:	2100      	movs	r1, #0
 8000748:	2000      	movs	r0, #0
 800074a:	f000 fa25 	bl	8000b98 <LCD_SetWindow>
	LCD_ClearScreen(0x1CFCU);
 800074e:	f641 40fc 	movw	r0, #7420	; 0x1cfc
 8000752:	f000 fae1 	bl	8000d18 <LCD_ClearScreen>
	OV7670_RST_HIGH;
	HAL_Delay(300);

	ov7670_initialization();*/

	ov7670_init1();
 8000756:	f001 f9e3 	bl	8001b20 <ov7670_init1>
	HAL_Delay(300);
 800075a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800075e:	f002 fb49 	bl	8002df4 <HAL_Delay>

	TIM1->DIER |= TIM_DIER_TDE;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <app_main_init+0xc4>)
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <app_main_init+0xc4>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim1);
 800076e:	480b      	ldr	r0, [pc, #44]	; (800079c <app_main_init+0xc8>)
 8000770:	f007 f908 	bl	8007984 <HAL_TIM_Base_Start>

	HAL_NVIC_SetPriority(OV7670_VSYNC_EXTI_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2007      	movs	r0, #7
 800077a:	f003 f83a 	bl	80037f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7670_VSYNC_EXTI_IRQn);
 800077e:	2007      	movs	r0, #7
 8000780:	f003 f853 	bl	800382a <HAL_NVIC_EnableIRQ>

	touch_init();
 8000784:	f001 fe98 	bl	80024b8 <touch_init>

}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	0800a56c 	.word	0x0800a56c
 8000794:	0001157f 	.word	0x0001157f
 8000798:	40010000 	.word	0x40010000
 800079c:	20025db4 	.word	0x20025db4

080007a0 <app_main_loop>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_loop()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af02      	add	r7, sp, #8
	uint8_t buff[15] = {0};
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	f8c3 2007 	str.w	r2, [r3, #7]
	uint32_t milis = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t milis2 = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
	int i,j,z = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
	int k = -2;
 80007c4:	f06f 0301 	mvn.w	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]



	LCD_SetDirection(VERTICAL_UP);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 fa4c 	bl	8000c68 <LCD_SetDirection>
	LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 80007d0:	f240 1303 	movw	r3, #259	; 0x103
 80007d4:	f240 1253 	movw	r2, #339	; 0x153
 80007d8:	2114      	movs	r1, #20
 80007da:	2014      	movs	r0, #20
 80007dc:	f000 f9dc 	bl	8000b98 <LCD_SetWindow>
		else
			sprintf(buff, "\n");
		sprintf(buff + strlen(buff),"%03d",abs(g_no_person_score));
		LCD_PrintStr(20, 450, 0xffff, 0x0000, buff, 5);
*/
		uart_tx_process();
 80007e0:	f001 fef0 	bl	80025c4 <uart_tx_process>
		uart_rx_process();
 80007e4:	f001 ff8c 	bl	8002700 <uart_rx_process>
		touch_process();
 80007e8:	f001 fe86 	bl	80024f8 <touch_process>

		//if((g_touch_coordinates.x != 0) && (g_touch_coordinates.y != 0) &&
		//		(g_touch_coordinates.x < 3100) && (g_touch_coordinates.y <= 3100))
		//{
			sprintf(buff, "%04d, %04d", g_touch_coordinates.x, g_touch_coordinates.y);
 80007ec:	4b48      	ldr	r3, [pc, #288]	; (8000910 <app_main_loop+0x170>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b47      	ldr	r3, [pc, #284]	; (8000910 <app_main_loop+0x170>)
 80007f4:	885b      	ldrh	r3, [r3, #2]
 80007f6:	1d38      	adds	r0, r7, #4
 80007f8:	4946      	ldr	r1, [pc, #280]	; (8000914 <app_main_loop+0x174>)
 80007fa:	f009 f821 	bl	8009840 <siprintf>
			LCD_PrintStr(20, 480, 0, 0x841FU, buff, 4);
 80007fe:	2304      	movs	r3, #4
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	f248 431f 	movw	r3, #33823	; 0x841f
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000810:	2014      	movs	r0, #20
 8000812:	f000 fb11 	bl	8000e38 <LCD_PrintStr>
		//}
			if(g_touch_state == TOUCH_IDLE)
 8000816:	4b40      	ldr	r3, [pc, #256]	; (8000918 <app_main_loop+0x178>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b01      	cmp	r3, #1
 800081e:	d10c      	bne.n	800083a <app_main_loop+0x9a>
				LCD_PrintStr(20, 520, 0, 0x841FU, "IDLE    ", 3);
 8000820:	2303      	movs	r3, #3
 8000822:	9301      	str	r3, [sp, #4]
 8000824:	4b3d      	ldr	r3, [pc, #244]	; (800091c <app_main_loop+0x17c>)
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	f248 431f 	movw	r3, #33823	; 0x841f
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000832:	2014      	movs	r0, #20
 8000834:	f000 fb00 	bl	8000e38 <LCD_PrintStr>
 8000838:	e022      	b.n	8000880 <app_main_loop+0xe0>
			else if(g_touch_state == TOUCH_TOUCHED)
 800083a:	4b37      	ldr	r3, [pc, #220]	; (8000918 <app_main_loop+0x178>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b02      	cmp	r3, #2
 8000842:	d10c      	bne.n	800085e <app_main_loop+0xbe>
				LCD_PrintStr(20, 520, 0, 0x841FU, "TOUCHED ", 3);
 8000844:	2303      	movs	r3, #3
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	4b35      	ldr	r3, [pc, #212]	; (8000920 <app_main_loop+0x180>)
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	f248 431f 	movw	r3, #33823	; 0x841f
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000856:	2014      	movs	r0, #20
 8000858:	f000 faee 	bl	8000e38 <LCD_PrintStr>
 800085c:	e010      	b.n	8000880 <app_main_loop+0xe0>
			else if(g_touch_state == TOUCH_RELEASED)
 800085e:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <app_main_loop+0x178>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b04      	cmp	r3, #4
 8000866:	d10b      	bne.n	8000880 <app_main_loop+0xe0>
				LCD_PrintStr(20, 520, 0, 0x841FU, "RELEASED", 3);
 8000868:	2303      	movs	r3, #3
 800086a:	9301      	str	r3, [sp, #4]
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <app_main_loop+0x184>)
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	f248 431f 	movw	r3, #33823	; 0x841f
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7102 	mov.w	r1, #520	; 0x208
 800087a:	2014      	movs	r0, #20
 800087c:	f000 fadc 	bl	8000e38 <LCD_PrintStr>

			FSMC_WR_DAT(graysc);
		}
*/		//*********************************************************************************************************************

		LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 8000880:	f240 1303 	movw	r3, #259	; 0x103
 8000884:	f240 1253 	movw	r2, #339	; 0x153
 8000888:	2114      	movs	r1, #20
 800088a:	2014      	movs	r0, #20
 800088c:	f000 f984 	bl	8000b98 <LCD_SetWindow>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
 8000894:	e013      	b.n	80008be <app_main_loop+0x11e>
			*/

			//int red =	(g_cam_buff[j] & 0xF8U) >> 3;
			//int green =	((g_cam_buff[j] & 0x07U) << 3) | ((g_cam_buff[j+1] & 0xC0U) >> 6);
			//int blue =	((g_cam_buff[j+1] & 0x1FU));
			FSMC_WR_DAT(((g_cam_buff[j] << 8) & 0xFF00U) | (g_cam_buff[j+1] & 0x00FFU));
 8000896:	4a24      	ldr	r2, [pc, #144]	; (8000928 <app_main_loop+0x188>)
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	4413      	add	r3, r2
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	3301      	adds	r3, #1
 80008a8:	491f      	ldr	r1, [pc, #124]	; (8000928 <app_main_loop+0x188>)
 80008aa:	5ccb      	ldrb	r3, [r1, r3]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f95e 	bl	8000b74 <FSMC_WR_DAT>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	3302      	adds	r3, #2
 80008bc:	61fb      	str	r3, [r7, #28]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	4a1a      	ldr	r2, [pc, #104]	; (800092c <app_main_loop+0x18c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	dde7      	ble.n	8000896 <app_main_loop+0xf6>
		}

		if(HAL_GetTick() > milis + 1000)
 80008c6:	f002 fa89 	bl	8002ddc <HAL_GetTick>
 80008ca:	4602      	mov	r2, r0
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d909      	bls.n	80008ea <app_main_loop+0x14a>
		{
			milis = HAL_GetTick();
 80008d6:	f002 fa81 	bl	8002ddc <HAL_GetTick>
 80008da:	6278      	str	r0, [r7, #36]	; 0x24
			if(milis >= (0xFFFFFFFFU - 1000U))
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	f46f 727a 	mvn.w	r2, #1000	; 0x3e8
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d301      	bcc.n	80008ea <app_main_loop+0x14a>
			{
				milis = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{// every second
				//uart_write("hello");
			}
		}
		if(HAL_GetTick() > milis2 + 100)
 80008ea:	f002 fa77 	bl	8002ddc <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	3364      	adds	r3, #100	; 0x64
 80008f4:	429a      	cmp	r2, r3
 80008f6:	f67f af73 	bls.w	80007e0 <app_main_loop+0x40>
		{
			milis2 = HAL_GetTick();
 80008fa:	f002 fa6f 	bl	8002ddc <HAL_GetTick>
 80008fe:	6238      	str	r0, [r7, #32]
			if(milis2 >= (0xFFFFFFFFU - 100U)) //?
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	f113 0f66 	cmn.w	r3, #102	; 0x66
 8000906:	f67f af6b 	bls.w	80007e0 <app_main_loop+0x40>
			{
				milis2 = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
		uart_tx_process();
 800090e:	e767      	b.n	80007e0 <app_main_loop+0x40>
 8000910:	20025b48 	.word	0x20025b48
 8000914:	0800a51c 	.word	0x0800a51c
 8000918:	20000008 	.word	0x20000008
 800091c:	0800a528 	.word	0x0800a528
 8000920:	0800a534 	.word	0x0800a534
 8000924:	0800a540 	.word	0x0800a540
 8000928:	200000c0 	.word	0x200000c0
 800092c:	000257fe 	.word	0x000257fe

08000930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_DMA_Init+0x30>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <MX_DMA_Init+0x30>)
 8000940:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_DMA_Init+0x30>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08e      	sub	sp, #56	; 0x38
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800097e:	463b      	mov	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
 800098c:	615a      	str	r2, [r3, #20]
 800098e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <MX_FSMC_Init+0xf0>)
 8000992:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000996:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000998:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <MX_FSMC_Init+0xf0>)
 800099a:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <MX_FSMC_Init+0xf4>)
 800099c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80009a4:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009b2:	2210      	movs	r2, #16
 80009b4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009dc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_FSMC_Init+0xf0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 9;
 80009fc:	2309      	movs	r3, #9
 80009fe:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000a00:	230f      	movs	r3, #15
 8000a02:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 5;
 8000a04:	2305      	movs	r3, #5
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000a0c:	2310      	movs	r3, #16
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000a10:	2311      	movs	r3, #17
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000a14:	2300      	movs	r3, #0
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8000a20:	2303      	movs	r3, #3
 8000a22:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000a2c:	2311      	movs	r3, #17
 8000a2e:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000a34:	463a      	mov	r2, r7
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_FSMC_Init+0xf0>)
 8000a3e:	f006 ff0d 	bl	800785c <HAL_SRAM_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_FSMC_Init+0xe8>
  {
    Error_Handler( );
 8000a48:	f000 feda 	bl	8001800 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3738      	adds	r7, #56	; 0x38
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20025cb0 	.word	0x20025cb0
 8000a58:	a0000104 	.word	0xa0000104

08000a5c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000a70:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <HAL_FSMC_MspInit+0xc8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d151      	bne.n	8000b1c <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <HAL_FSMC_MspInit+0xc8>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <HAL_FSMC_MspInit+0xcc>)
 8000a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a86:	4a28      	ldr	r2, [pc, #160]	; (8000b28 <HAL_FSMC_MspInit+0xcc>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6393      	str	r3, [r2, #56]	; 0x38
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <HAL_FSMC_MspInit+0xcc>)
 8000a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000a9a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000a9e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000aac:	230c      	movs	r3, #12
 8000aae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	481d      	ldr	r0, [pc, #116]	; (8000b2c <HAL_FSMC_MspInit+0xd0>)
 8000ab6:	f003 fa91 	bl	8003fdc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000acc:	230c      	movs	r3, #12
 8000ace:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4816      	ldr	r0, [pc, #88]	; (8000b30 <HAL_FSMC_MspInit+0xd4>)
 8000ad6:	f003 fa81 	bl	8003fdc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000ada:	f64c 63b0 	movw	r3, #52912	; 0xceb0
 8000ade:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000aec:	230c      	movs	r3, #12
 8000aee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	480f      	ldr	r0, [pc, #60]	; (8000b34 <HAL_FSMC_MspInit+0xd8>)
 8000af6:	f003 fa71 	bl	8003fdc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000afa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000afe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b0c:	230a      	movs	r3, #10
 8000b0e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <HAL_FSMC_MspInit+0xdc>)
 8000b16:	f003 fa61 	bl	8003fdc <HAL_GPIO_Init>
 8000b1a:	e000      	b.n	8000b1e <HAL_FSMC_MspInit+0xc2>
    return;
 8000b1c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200000ac 	.word	0x200000ac
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	40020800 	.word	0x40020800

08000b3c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000b44:	f7ff ff8a 	bl	8000a5c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <FSMC_WR_REG>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void FSMC_WR_REG(uint32_t Reg)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	LCD_FSMC->REG = Reg;
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <FSMC_WR_REG+0x20>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	b292      	uxth	r2, r2
 8000b60:	801a      	strh	r2, [r3, #0]
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000000 	.word	0x20000000

08000b74 <FSMC_WR_DAT>:
* function   :
* parameters :N/A
* retvalue   :N/A
*******************************************************************************************************************************/
void FSMC_WR_DAT(uint16_t Dat)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
	LCD_FSMC->DAT = Dat;
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <FSMC_WR_DAT+0x20>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	88fa      	ldrh	r2, [r7, #6]
 8000b84:	805a      	strh	r2, [r3, #2]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000000 	.word	0x20000000

08000b98 <LCD_SetWindow>:
							LCD_SetDirection function. It calls to FSMC_WR_REG(RAMWR) function at the end.
* parameters :XS(x start address), YS(y start address), XE(x end address) and YE(y end address)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetWindow(uint16_t Xs, uint16_t Ys, uint16_t Xe, uint16_t Ye)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4623      	mov	r3, r4
 8000ba8:	80fb      	strh	r3, [r7, #6]
 8000baa:	4603      	mov	r3, r0
 8000bac:	80bb      	strh	r3, [r7, #4]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	807b      	strh	r3, [r7, #2]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	803b      	strh	r3, [r7, #0]
	FSMC_WR_REG(CASET_XS_H);		FSMC_WR_DAT(Xs >> 8);
 8000bb6:	f44f 5028 	mov.w	r0, #10752	; 0x2a00
 8000bba:	f7ff ffc9 	bl	8000b50 <FSMC_WR_REG>
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ffd5 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XS_L);		FSMC_WR_DAT(Xs & 0x00FFU);
 8000bca:	f642 2001 	movw	r0, #10753	; 0x2a01
 8000bce:	f7ff ffbf 	bl	8000b50 <FSMC_WR_REG>
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ffcb 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_H);		FSMC_WR_DAT(Xe >> 8);
 8000bde:	f642 2002 	movw	r0, #10754	; 0x2a02
 8000be2:	f7ff ffb5 	bl	8000b50 <FSMC_WR_REG>
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ffc1 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_L);		FSMC_WR_DAT(Xe & 0x00FFU);
 8000bf2:	f642 2003 	movw	r0, #10755	; 0x2a03
 8000bf6:	f7ff ffab 	bl	8000b50 <FSMC_WR_REG>
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ffb7 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_H);		FSMC_WR_DAT(Ys >> 8);
 8000c06:	f44f 502c 	mov.w	r0, #11008	; 0x2b00
 8000c0a:	f7ff ffa1 	bl	8000b50 <FSMC_WR_REG>
 8000c0e:	88bb      	ldrh	r3, [r7, #4]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ffad 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_L);		FSMC_WR_DAT(Ys & 0x00FFU);
 8000c1a:	f642 3001 	movw	r0, #11009	; 0x2b01
 8000c1e:	f7ff ff97 	bl	8000b50 <FSMC_WR_REG>
 8000c22:	88bb      	ldrh	r3, [r7, #4]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ffa3 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_H);		FSMC_WR_DAT(Ye >> 8);
 8000c2e:	f642 3002 	movw	r0, #11010	; 0x2b02
 8000c32:	f7ff ff8d 	bl	8000b50 <FSMC_WR_REG>
 8000c36:	883b      	ldrh	r3, [r7, #0]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff99 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_L);		FSMC_WR_DAT(Ye & 0x00FFU);
 8000c42:	f642 3003 	movw	r0, #11011	; 0x2b03
 8000c46:	f7ff ff83 	bl	8000b50 <FSMC_WR_REG>
 8000c4a:	883b      	ldrh	r3, [r7, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff8f 	bl	8000b74 <FSMC_WR_DAT>

	FSMC_WR_REG(RAMWR);
 8000c56:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8000c5a:	f7ff ff79 	bl	8000b50 <FSMC_WR_REG>
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd90      	pop	{r4, r7, pc}
	...

08000c68 <LCD_SetDirection>:
							the selected orientation.
* parameters :Direction(Use Orientation Direction Definitions defined in FSMC_NT35510.h)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetDirection(uint8_t Direction)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
	switch(Direction)
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d84b      	bhi.n	8000d10 <LCD_SetDirection+0xa8>
 8000c78:	a201      	add	r2, pc, #4	; (adr r2, 8000c80 <LCD_SetDirection+0x18>)
 8000c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7e:	bf00      	nop
 8000c80:	08000c91 	.word	0x08000c91
 8000c84:	08000cb1 	.word	0x08000cb1
 8000c88:	08000cd1 	.word	0x08000cd1
 8000c8c:	08000cf1 	.word	0x08000cf1
	{
		case 0:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0000U);
 8000c90:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000c94:	f7ff ff5c 	bl	8000b50 <FSMC_WR_REG>
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f7ff ff6b 	bl	8000b74 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 8000c9e:	f240 331f 	movw	r3, #799	; 0x31f
 8000ca2:	f240 12df 	movw	r2, #479	; 0x1df
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff ff75 	bl	8000b98 <LCD_SetWindow>
		break;
 8000cae:	e02f      	b.n	8000d10 <LCD_SetDirection+0xa8>
		case 1:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00C0U);
 8000cb0:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000cb4:	f7ff ff4c 	bl	8000b50 <FSMC_WR_REG>
 8000cb8:	20c0      	movs	r0, #192	; 0xc0
 8000cba:	f7ff ff5b 	bl	8000b74 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 8000cbe:	f240 331f 	movw	r3, #799	; 0x31f
 8000cc2:	f240 12df 	movw	r2, #479	; 0x1df
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff ff65 	bl	8000b98 <LCD_SetWindow>
		break;
 8000cce:	e01f      	b.n	8000d10 <LCD_SetDirection+0xa8>
		case 2:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0060U);
 8000cd0:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000cd4:	f7ff ff3c 	bl	8000b50 <FSMC_WR_REG>
 8000cd8:	2060      	movs	r0, #96	; 0x60
 8000cda:	f7ff ff4b 	bl	8000b74 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 8000cde:	f240 13df 	movw	r3, #479	; 0x1df
 8000ce2:	f240 321f 	movw	r2, #799	; 0x31f
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff ff55 	bl	8000b98 <LCD_SetWindow>
		break;
 8000cee:	e00f      	b.n	8000d10 <LCD_SetDirection+0xa8>
		case 3:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00A0U);
 8000cf0:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000cf4:	f7ff ff2c 	bl	8000b50 <FSMC_WR_REG>
 8000cf8:	20a0      	movs	r0, #160	; 0xa0
 8000cfa:	f7ff ff3b 	bl	8000b74 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 8000cfe:	f240 13df 	movw	r3, #479	; 0x1df
 8000d02:	f240 321f 	movw	r2, #799	; 0x31f
 8000d06:	2100      	movs	r1, #0
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff ff45 	bl	8000b98 <LCD_SetWindow>
		break;
 8000d0e:	bf00      	nop
	}
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <LCD_ClearScreen>:
							orientation direction change.
* parameters :Color(Desired screen color)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_ClearScreen(uint16_t Color)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80fb      	strh	r3, [r7, #6]
  uint32_t i;

	for(i=0; i<(480*800); i++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e006      	b.n	8000d36 <LCD_ClearScreen+0x1e>
	{
		FSMC_WR_DAT(Color);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff22 	bl	8000b74 <FSMC_WR_DAT>
	for(i=0; i<(480*800); i++)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3301      	adds	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <LCD_ClearScreen+0x30>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d9f4      	bls.n	8000d28 <LCD_ClearScreen+0x10>
	}
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	0005dbff 	.word	0x0005dbff

08000d4c <LCD_PrintCh>:
* parameters :X(x start address), Y(y start address), Color(character color), Bcolor(background
							color), Character(use standard ASCII values for characters) and Size(characters size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintCh(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t Character, uint8_t Size)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4604      	mov	r4, r0
 8000d54:	4608      	mov	r0, r1
 8000d56:	4611      	mov	r1, r2
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	80fb      	strh	r3, [r7, #6]
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80bb      	strh	r3, [r7, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	807b      	strh	r3, [r7, #2]
 8000d66:	4613      	mov	r3, r2
 8000d68:	803b      	strh	r3, [r7, #0]
	uint8_t i, j, k, p=0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	733b      	strb	r3, [r7, #12]
	uint16_t c=0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	817b      	strh	r3, [r7, #10]
	LCD_SetWindow(X, Y, X+(8 * Size - 1), Y+(8  *Size - 1));									// Define area by character size.
 8000d72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	4413      	add	r3, r2
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29c      	uxth	r4, r3
 8000d86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	88bb      	ldrh	r3, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	3b01      	subs	r3, #1
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	88b9      	ldrh	r1, [r7, #4]
 8000d9c:	88f8      	ldrh	r0, [r7, #6]
 8000d9e:	4622      	mov	r2, r4
 8000da0:	f7ff fefa 	bl	8000b98 <LCD_SetWindow>

	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e03c      	b.n	8000e24 <LCD_PrintCh+0xd8>
	{
		for(j=0; j < Size; j++)																					// Print each row size times.
 8000daa:	2300      	movs	r3, #0
 8000dac:	73bb      	strb	r3, [r7, #14]
 8000dae:	e031      	b.n	8000e14 <LCD_PrintCh+0xc8>
		{
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8000db0:	2300      	movs	r3, #0
 8000db2:	737b      	strb	r3, [r7, #13]
 8000db4:	e028      	b.n	8000e08 <LCD_PrintCh+0xbc>
			{
				if((ASCIItable[Character][i]>>(7-k)) & 0x01)
 8000db6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	491d      	ldr	r1, [pc, #116]	; (8000e34 <LCD_PrintCh+0xe8>)
 8000dbe:	00d2      	lsls	r2, r2, #3
 8000dc0:	440a      	add	r2, r1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	7b7b      	ldrb	r3, [r7, #13]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	fa42 f303 	asr.w	r3, r2, r3
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <LCD_PrintCh+0x94>
					c=Color;
 8000dda:	887b      	ldrh	r3, [r7, #2]
 8000ddc:	817b      	strh	r3, [r7, #10]
 8000dde:	e001      	b.n	8000de4 <LCD_PrintCh+0x98>
				else
					c=Bcolor;
 8000de0:	883b      	ldrh	r3, [r7, #0]
 8000de2:	817b      	strh	r3, [r7, #10]
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8000de4:	2300      	movs	r3, #0
 8000de6:	733b      	strb	r3, [r7, #12]
 8000de8:	e006      	b.n	8000df8 <LCD_PrintCh+0xac>
				{
					FSMC_WR_DAT(c);
 8000dea:	897b      	ldrh	r3, [r7, #10]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fec1 	bl	8000b74 <FSMC_WR_DAT>
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8000df2:	7b3b      	ldrb	r3, [r7, #12]
 8000df4:	3301      	adds	r3, #1
 8000df6:	733b      	strb	r3, [r7, #12]
 8000df8:	7b3a      	ldrb	r2, [r7, #12]
 8000dfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d3f3      	bcc.n	8000dea <LCD_PrintCh+0x9e>
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8000e02:	7b7b      	ldrb	r3, [r7, #13]
 8000e04:	3301      	adds	r3, #1
 8000e06:	737b      	strb	r3, [r7, #13]
 8000e08:	7b7b      	ldrb	r3, [r7, #13]
 8000e0a:	2b07      	cmp	r3, #7
 8000e0c:	d9d3      	bls.n	8000db6 <LCD_PrintCh+0x6a>
		for(j=0; j < Size; j++)																					// Print each row size times.
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	3301      	adds	r3, #1
 8000e12:	73bb      	strb	r3, [r7, #14]
 8000e14:	7bba      	ldrb	r2, [r7, #14]
 8000e16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d3c8      	bcc.n	8000db0 <LCD_PrintCh+0x64>
	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	3301      	adds	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	2b07      	cmp	r3, #7
 8000e28:	d9bf      	bls.n	8000daa <LCD_PrintCh+0x5e>
				}
			}
		}
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd90      	pop	{r4, r7, pc}
 8000e34:	0801baec 	.word	0x0801baec

08000e38 <LCD_PrintStr>:
							color), string(pointer to an array of characters, standard ASCII values) and size
							(character size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintStr(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t* String, uint8_t Size)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	4604      	mov	r4, r0
 8000e40:	4608      	mov	r0, r1
 8000e42:	4611      	mov	r1, r2
 8000e44:	461a      	mov	r2, r3
 8000e46:	4623      	mov	r3, r4
 8000e48:	80fb      	strh	r3, [r7, #6]
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	80bb      	strh	r3, [r7, #4]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	807b      	strh	r3, [r7, #2]
 8000e52:	4613      	mov	r3, r2
 8000e54:	803b      	strh	r3, [r7, #0]
	X=X-8*Size;
 8000e56:	7f3b      	ldrb	r3, [r7, #28]
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	88fa      	ldrh	r2, [r7, #6]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	80fb      	strh	r3, [r7, #6]
	while(*String)
 8000e64:	e015      	b.n	8000e92 <LCD_PrintStr+0x5a>
		LCD_PrintCh(X = X + 8 * Size, Y, Color, Bcolor, *String++, Size);
 8000e66:	7f3b      	ldrb	r3, [r7, #28]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	4413      	add	r3, r2
 8000e72:	80fb      	strh	r3, [r7, #6]
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	61ba      	str	r2, [r7, #24]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	883d      	ldrh	r5, [r7, #0]
 8000e7e:	887c      	ldrh	r4, [r7, #2]
 8000e80:	88b9      	ldrh	r1, [r7, #4]
 8000e82:	88f8      	ldrh	r0, [r7, #6]
 8000e84:	7f3a      	ldrb	r2, [r7, #28]
 8000e86:	9201      	str	r2, [sp, #4]
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	462b      	mov	r3, r5
 8000e8c:	4622      	mov	r2, r4
 8000e8e:	f7ff ff5d 	bl	8000d4c <LCD_PrintCh>
	while(*String)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1e5      	bne.n	8000e66 <LCD_PrintStr+0x2e>
}
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bdb0      	pop	{r4, r5, r7, pc}

08000ea4 <NT35510_Init>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void NT35510_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	RST_LOW;													// Reset on.
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2140      	movs	r1, #64	; 0x40
 8000eac:	48fd      	ldr	r0, [pc, #1012]	; (80012a4 <NT35510_Init+0x400>)
 8000eae:	f003 fa29 	bl	8004304 <HAL_GPIO_WritePin>
	HAL_Delay(300);											// Short delay needed on power up
 8000eb2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000eb6:	f001 ff9d 	bl	8002df4 <HAL_Delay>
	RST_HIGH;													// Reset off.
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2140      	movs	r1, #64	; 0x40
 8000ebe:	48f9      	ldr	r0, [pc, #996]	; (80012a4 <NT35510_Init+0x400>)
 8000ec0:	f003 fa20 	bl	8004304 <HAL_GPIO_WritePin>
	HAL_Delay(800);											// Short delay needed on power up
 8000ec4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ec8:	f001 ff94 	bl	8002df4 <HAL_Delay>

	// Manufacture Command Set selection
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8000ecc:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8000ed0:	f7ff fe3e 	bl	8000b50 <FSMC_WR_REG>
 8000ed4:	2055      	movs	r0, #85	; 0x55
 8000ed6:	f7ff fe4d 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8000eda:	f24f 0001 	movw	r0, #61441	; 0xf001
 8000ede:	f7ff fe37 	bl	8000b50 <FSMC_WR_REG>
 8000ee2:	20aa      	movs	r0, #170	; 0xaa
 8000ee4:	f7ff fe46 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8000ee8:	f24f 0002 	movw	r0, #61442	; 0xf002
 8000eec:	f7ff fe30 	bl	8000b50 <FSMC_WR_REG>
 8000ef0:	2052      	movs	r0, #82	; 0x52
 8000ef2:	f7ff fe3f 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8000ef6:	f24f 0003 	movw	r0, #61443	; 0xf003
 8000efa:	f7ff fe29 	bl	8000b50 <FSMC_WR_REG>
 8000efe:	2008      	movs	r0, #8
 8000f00:	f7ff fe38 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0001U);		// Select page 1
 8000f04:	f24f 0004 	movw	r0, #61444	; 0xf004
 8000f08:	f7ff fe22 	bl	8000b50 <FSMC_WR_REG>
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f7ff fe31 	bl	8000b74 <FSMC_WR_DAT>

	// AVDD 5.2V
	FSMC_WR_REG(SETAVDD_NORM);		FSMC_WR_DAT(0x000DU);
 8000f12:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8000f16:	f7ff fe1b 	bl	8000b50 <FSMC_WR_REG>
 8000f1a:	200d      	movs	r0, #13
 8000f1c:	f7ff fe2a 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_IDLE);		FSMC_WR_DAT(0x000DU);
 8000f20:	f24b 0001 	movw	r0, #45057	; 0xb001
 8000f24:	f7ff fe14 	bl	8000b50 <FSMC_WR_REG>
 8000f28:	200d      	movs	r0, #13
 8000f2a:	f7ff fe23 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_PART);		FSMC_WR_DAT(0x000DU);
 8000f2e:	f24b 0002 	movw	r0, #45058	; 0xb002
 8000f32:	f7ff fe0d 	bl	8000b50 <FSMC_WR_REG>
 8000f36:	200d      	movs	r0, #13
 8000f38:	f7ff fe1c 	bl	8000b74 <FSMC_WR_DAT>

	// AVDD ratio
	FSMC_WR_REG(BT1CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8000f3c:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8000f40:	f7ff fe06 	bl	8000b50 <FSMC_WR_REG>
 8000f44:	2034      	movs	r0, #52	; 0x34
 8000f46:	f7ff fe15 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8000f4a:	f24b 6001 	movw	r0, #46593	; 0xb601
 8000f4e:	f7ff fdff 	bl	8000b50 <FSMC_WR_REG>
 8000f52:	2034      	movs	r0, #52	; 0x34
 8000f54:	f7ff fe0e 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_PART);		FSMC_WR_DAT(0x0034U);
 8000f58:	f24b 6002 	movw	r0, #46594	; 0xb602
 8000f5c:	f7ff fdf8 	bl	8000b50 <FSMC_WR_REG>
 8000f60:	2034      	movs	r0, #52	; 0x34
 8000f62:	f7ff fe07 	bl	8000b74 <FSMC_WR_DAT>

	// AVEE  -5.2V
	FSMC_WR_REG(SETAVEE_NORM);		FSMC_WR_DAT(0x000DU);
 8000f66:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8000f6a:	f7ff fdf1 	bl	8000b50 <FSMC_WR_REG>
 8000f6e:	200d      	movs	r0, #13
 8000f70:	f7ff fe00 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_IDLE);		FSMC_WR_DAT(0x000DU);
 8000f74:	f24b 1001 	movw	r0, #45313	; 0xb101
 8000f78:	f7ff fdea 	bl	8000b50 <FSMC_WR_REG>
 8000f7c:	200d      	movs	r0, #13
 8000f7e:	f7ff fdf9 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_PART);		FSMC_WR_DAT(0x000DU);
 8000f82:	f24b 1002 	movw	r0, #45314	; 0xb102
 8000f86:	f7ff fde3 	bl	8000b50 <FSMC_WR_REG>
 8000f8a:	200d      	movs	r0, #13
 8000f8c:	f7ff fdf2 	bl	8000b74 <FSMC_WR_DAT>

	// AVEE ratio
	FSMC_WR_REG(BT2CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8000f90:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8000f94:	f7ff fddc 	bl	8000b50 <FSMC_WR_REG>
 8000f98:	2034      	movs	r0, #52	; 0x34
 8000f9a:	f7ff fdeb 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8000f9e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8000fa2:	f7ff fdd5 	bl	8000b50 <FSMC_WR_REG>
 8000fa6:	2034      	movs	r0, #52	; 0x34
 8000fa8:	f7ff fde4 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_PART);		FSMC_WR_DAT(0x0034U);
 8000fac:	f24b 7002 	movw	r0, #46850	; 0xb702
 8000fb0:	f7ff fdce 	bl	8000b50 <FSMC_WR_REG>
 8000fb4:	2034      	movs	r0, #52	; 0x34
 8000fb6:	f7ff fddd 	bl	8000b74 <FSMC_WR_DAT>

	// VCL  -2.5V
	FSMC_WR_REG(SETVCL_NORM);		FSMC_WR_DAT(0x0000U);
 8000fba:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8000fbe:	f7ff fdc7 	bl	8000b50 <FSMC_WR_REG>
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f7ff fdd6 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_IDLE);		FSMC_WR_DAT(0x0000U);
 8000fc8:	f24b 2001 	movw	r0, #45569	; 0xb201
 8000fcc:	f7ff fdc0 	bl	8000b50 <FSMC_WR_REG>
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fdcf 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_PART);		FSMC_WR_DAT(0x0000U);
 8000fd6:	f24b 2002 	movw	r0, #45570	; 0xb202
 8000fda:	f7ff fdb9 	bl	8000b50 <FSMC_WR_REG>
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fdc8 	bl	8000b74 <FSMC_WR_DAT>

	// VCL ratio
	FSMC_WR_REG(BT3CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8000fe4:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8000fe8:	f7ff fdb2 	bl	8000b50 <FSMC_WR_REG>
 8000fec:	2024      	movs	r0, #36	; 0x24
 8000fee:	f7ff fdc1 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8000ff2:	f64b 0001 	movw	r0, #47105	; 0xb801
 8000ff6:	f7ff fdab 	bl	8000b50 <FSMC_WR_REG>
 8000ffa:	2024      	movs	r0, #36	; 0x24
 8000ffc:	f7ff fdba 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_PART);		FSMC_WR_DAT(0x0024U);
 8001000:	f64b 0002 	movw	r0, #47106	; 0xb802
 8001004:	f7ff fda4 	bl	8000b50 <FSMC_WR_REG>
 8001008:	2024      	movs	r0, #36	; 0x24
 800100a:	f7ff fdb3 	bl	8000b74 <FSMC_WR_DAT>

	// VGH  15V
	FSMC_WR_REG(VGHCTR);			FSMC_WR_DAT(0x01);
 800100e:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8001012:	f7ff fd9d 	bl	8000b50 <FSMC_WR_REG>
 8001016:	2001      	movs	r0, #1
 8001018:	f7ff fdac 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_NORM);		FSMC_WR_DAT(0x000FU);
 800101c:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8001020:	f7ff fd96 	bl	8000b50 <FSMC_WR_REG>
 8001024:	200f      	movs	r0, #15
 8001026:	f7ff fda5 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_IDLE);		FSMC_WR_DAT(0x000FU);
 800102a:	f24b 3001 	movw	r0, #45825	; 0xb301
 800102e:	f7ff fd8f 	bl	8000b50 <FSMC_WR_REG>
 8001032:	200f      	movs	r0, #15
 8001034:	f7ff fd9e 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_PART);		FSMC_WR_DAT(0x000FU);
 8001038:	f24b 3002 	movw	r0, #45826	; 0xb302
 800103c:	f7ff fd88 	bl	8000b50 <FSMC_WR_REG>
 8001040:	200f      	movs	r0, #15
 8001042:	f7ff fd97 	bl	8000b74 <FSMC_WR_DAT>

	// VGH  ratio
	FSMC_WR_REG(BT4CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001046:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800104a:	f7ff fd81 	bl	8000b50 <FSMC_WR_REG>
 800104e:	2034      	movs	r0, #52	; 0x34
 8001050:	f7ff fd90 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001054:	f64b 1001 	movw	r0, #47361	; 0xb901
 8001058:	f7ff fd7a 	bl	8000b50 <FSMC_WR_REG>
 800105c:	2034      	movs	r0, #52	; 0x34
 800105e:	f7ff fd89 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001062:	f64b 1002 	movw	r0, #47362	; 0xb902
 8001066:	f7ff fd73 	bl	8000b50 <FSMC_WR_REG>
 800106a:	2034      	movs	r0, #52	; 0x34
 800106c:	f7ff fd82 	bl	8000b74 <FSMC_WR_DAT>

	// VGL_REG  -10V
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8001070:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001074:	f7ff fd6c 	bl	8000b50 <FSMC_WR_REG>
 8001078:	2008      	movs	r0, #8
 800107a:	f7ff fd7b 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 800107e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001082:	f7ff fd65 	bl	8000b50 <FSMC_WR_REG>
 8001086:	2008      	movs	r0, #8
 8001088:	f7ff fd74 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB501);			FSMC_WR_DAT(0x0008U);
 800108c:	f24b 5001 	movw	r0, #46337	; 0xb501
 8001090:	f7ff fd5e 	bl	8000b50 <FSMC_WR_REG>
 8001094:	2008      	movs	r0, #8
 8001096:	f7ff fd6d 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC200);			FSMC_WR_DAT(0x0003U);
 800109a:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 800109e:	f7ff fd57 	bl	8000b50 <FSMC_WR_REG>
 80010a2:	2003      	movs	r0, #3
 80010a4:	f7ff fd66 	bl	8000b74 <FSMC_WR_DAT>

	// VGLX  ratio
	FSMC_WR_REG(BT5CTR_NORM);		FSMC_WR_DAT(0x0024U);
 80010a8:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80010ac:	f7ff fd50 	bl	8000b50 <FSMC_WR_REG>
 80010b0:	2024      	movs	r0, #36	; 0x24
 80010b2:	f7ff fd5f 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 80010b6:	f64b 2001 	movw	r0, #47617	; 0xba01
 80010ba:	f7ff fd49 	bl	8000b50 <FSMC_WR_REG>
 80010be:	2024      	movs	r0, #36	; 0x24
 80010c0:	f7ff fd58 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_PART);		FSMC_WR_DAT(0x0024U);
 80010c4:	f64b 2002 	movw	r0, #47618	; 0xba02
 80010c8:	f7ff fd42 	bl	8000b50 <FSMC_WR_REG>
 80010cc:	2024      	movs	r0, #36	; 0x24
 80010ce:	f7ff fd51 	bl	8000b74 <FSMC_WR_DAT>

	// VGMP/VGSP 4.5V/0V
	FSMC_WR_REG(SETVGP_0);			FSMC_WR_DAT(0x0000U);
 80010d2:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80010d6:	f7ff fd3b 	bl	8000b50 <FSMC_WR_REG>
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff fd4a 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_1);			FSMC_WR_DAT(0x0078U);
 80010e0:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80010e4:	f7ff fd34 	bl	8000b50 <FSMC_WR_REG>
 80010e8:	2078      	movs	r0, #120	; 0x78
 80010ea:	f7ff fd43 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_2);			FSMC_WR_DAT(0x0000U);
 80010ee:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80010f2:	f7ff fd2d 	bl	8000b50 <FSMC_WR_REG>
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff fd3c 	bl	8000b74 <FSMC_WR_DAT>

	// VGMN/VGSN -4.5V/0V
	FSMC_WR_REG(SETVGN_0);			FSMC_WR_DAT(0x0000U);
 80010fc:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8001100:	f7ff fd26 	bl	8000b50 <FSMC_WR_REG>
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff fd35 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_1);			FSMC_WR_DAT(0x0078U);
 800110a:	f64b 5001 	movw	r0, #48385	; 0xbd01
 800110e:	f7ff fd1f 	bl	8000b50 <FSMC_WR_REG>
 8001112:	2078      	movs	r0, #120	; 0x78
 8001114:	f7ff fd2e 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_2);			FSMC_WR_DAT(0x0000U);
 8001118:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800111c:	f7ff fd18 	bl	8000b50 <FSMC_WR_REG>
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff fd27 	bl	8000b74 <FSMC_WR_DAT>

	// VCOM  -1.325V
	FSMC_WR_REG(SETVCMOFF_0);		FSMC_WR_DAT(0x0000);
 8001126:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 800112a:	f7ff fd11 	bl	8000b50 <FSMC_WR_REG>
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fd20 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCMOFF_1);		FSMC_WR_DAT(0x0089);
 8001134:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8001138:	f7ff fd0a 	bl	8000b50 <FSMC_WR_REG>
 800113c:	2089      	movs	r0, #137	; 0x89
 800113e:	f7ff fd19 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(GMBCTR2_BASE | 0x0033U);    FSMC_WR_DAT(0x007FU);
*/
	//**************************************************************************************************************************//

	// Select Page 0
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8001142:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001146:	f7ff fd03 	bl	8000b50 <FSMC_WR_REG>
 800114a:	2055      	movs	r0, #85	; 0x55
 800114c:	f7ff fd12 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8001150:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001154:	f7ff fcfc 	bl	8000b50 <FSMC_WR_REG>
 8001158:	20aa      	movs	r0, #170	; 0xaa
 800115a:	f7ff fd0b 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 800115e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001162:	f7ff fcf5 	bl	8000b50 <FSMC_WR_REG>
 8001166:	2052      	movs	r0, #82	; 0x52
 8001168:	f7ff fd04 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 800116c:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001170:	f7ff fcee 	bl	8000b50 <FSMC_WR_REG>
 8001174:	2008      	movs	r0, #8
 8001176:	f7ff fcfd 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0000U);		// Select page 0
 800117a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800117e:	f7ff fce7 	bl	8000b50 <FSMC_WR_REG>
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff fcf6 	bl	8000b74 <FSMC_WR_DAT>

	// DISPLAY CONTROL
	FSMC_WR_REG(DOPCTR_0);			FSMC_WR_DAT(0x00CCU);
 8001188:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800118c:	f7ff fce0 	bl	8000b50 <FSMC_WR_REG>
 8001190:	20cc      	movs	r0, #204	; 0xcc
 8001192:	f7ff fcef 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(DOPCTR_1);			FSMC_WR_DAT(0x0000U);
 8001196:	f24b 1001 	movw	r0, #45313	; 0xb101
 800119a:	f7ff fcd9 	bl	8000b50 <FSMC_WR_REG>
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff fce8 	bl	8000b74 <FSMC_WR_DAT>

	FSMC_WR_REG(DPRSLCTR);			FSMC_WR_DAT(0x0050U);			// Display Resolution 480RGB x 800
 80011a4:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80011a8:	f7ff fcd2 	bl	8000b50 <FSMC_WR_REG>
 80011ac:	2050      	movs	r0, #80	; 0x50
 80011ae:	f7ff fce1 	bl	8000b74 <FSMC_WR_DAT>

	// SOURCE HOLD TIME
	FSMC_WR_REG(SDHDTCTR);			FSMC_WR_DAT(0x0005U);
 80011b2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80011b6:	f7ff fccb 	bl	8000b50 <FSMC_WR_REG>
 80011ba:	2005      	movs	r0, #5
 80011bc:	f7ff fcda 	bl	8000b74 <FSMC_WR_DAT>

	// Set Gate EQ
	FSMC_WR_REG(GSEQCTR_ST);		FSMC_WR_DAT(0x0070U);
 80011c0:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80011c4:	f7ff fcc4 	bl	8000b50 <FSMC_WR_REG>
 80011c8:	2070      	movs	r0, #112	; 0x70
 80011ca:	f7ff fcd3 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(GSEQCTR_CK);		FSMC_WR_DAT(0x0070U);
 80011ce:	f24b 7001 	movw	r0, #46849	; 0xb701
 80011d2:	f7ff fcbd 	bl	8000b50 <FSMC_WR_REG>
 80011d6:	2070      	movs	r0, #112	; 0x70
 80011d8:	f7ff fccc 	bl	8000b74 <FSMC_WR_DAT>

	// Source EQ control (Mode 2)
	FSMC_WR_REG(SDEQCTR_MOD );	FSMC_WR_DAT(0x0001U);
 80011dc:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80011e0:	f7ff fcb6 	bl	8000b50 <FSMC_WR_REG>
 80011e4:	2001      	movs	r0, #1
 80011e6:	f7ff fcc5 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS1);	FSMC_WR_DAT(0x0003U);
 80011ea:	f64b 0001 	movw	r0, #47105	; 0xb801
 80011ee:	f7ff fcaf 	bl	8000b50 <FSMC_WR_REG>
 80011f2:	2003      	movs	r0, #3
 80011f4:	f7ff fcbe 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS2);	FSMC_WR_DAT(0x0003U);
 80011f8:	f64b 0002 	movw	r0, #47106	; 0xb802
 80011fc:	f7ff fca8 	bl	8000b50 <FSMC_WR_REG>
 8001200:	2003      	movs	r0, #3
 8001202:	f7ff fcb7 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS3);	FSMC_WR_DAT(0x0003U);
 8001206:	f64b 0003 	movw	r0, #47107	; 0xb803
 800120a:	f7ff fca1 	bl	8000b50 <FSMC_WR_REG>
 800120e:	2003      	movs	r0, #3
 8001210:	f7ff fcb0 	bl	8000b74 <FSMC_WR_DAT>

	// INVERSION MODE
	FSMC_WR_REG(INVCTR_NORM);		FSMC_WR_DAT(0x0002U);
 8001214:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8001218:	f7ff fc9a 	bl	8000b50 <FSMC_WR_REG>
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff fca9 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_IDLE);		FSMC_WR_DAT(0x0000U);
 8001222:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8001226:	f7ff fc93 	bl	8000b50 <FSMC_WR_REG>
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fca2 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_PART);		FSMC_WR_DAT(0x0000U);
 8001230:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001234:	f7ff fc8c 	bl	8000b50 <FSMC_WR_REG>
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fc9b 	bl	8000b74 <FSMC_WR_DAT>

	// Timing control
	FSMC_WR_REG(0xC900);				FSMC_WR_DAT(0x00D0U);
 800123e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8001242:	f7ff fc85 	bl	8000b50 <FSMC_WR_REG>
 8001246:	20d0      	movs	r0, #208	; 0xd0
 8001248:	f7ff fc94 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC901);				FSMC_WR_DAT(0x0002U);
 800124c:	f64c 1001 	movw	r0, #51457	; 0xc901
 8001250:	f7ff fc7e 	bl	8000b50 <FSMC_WR_REG>
 8001254:	2002      	movs	r0, #2
 8001256:	f7ff fc8d 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC902);				FSMC_WR_DAT(0x0050U);
 800125a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800125e:	f7ff fc77 	bl	8000b50 <FSMC_WR_REG>
 8001262:	2050      	movs	r0, #80	; 0x50
 8001264:	f7ff fc86 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC903);				FSMC_WR_DAT(0x0050U);
 8001268:	f64c 1003 	movw	r0, #51459	; 0xc903
 800126c:	f7ff fc70 	bl	8000b50 <FSMC_WR_REG>
 8001270:	2050      	movs	r0, #80	; 0x50
 8001272:	f7ff fc7f 	bl	8000b74 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC904);				FSMC_WR_DAT(0x0050U);
 8001276:	f64c 1004 	movw	r0, #51460	; 0xc904
 800127a:	f7ff fc69 	bl	8000b50 <FSMC_WR_REG>
 800127e:	2050      	movs	r0, #80	; 0x50
 8001280:	f7ff fc78 	bl	8000b74 <FSMC_WR_DAT>

	//**************************************************************************************************************************//
	// User Command Set
	FSMC_WR_REG(TEON);   				FSMC_WR_DAT(0x0000U);			// V-Blanking information only
 8001284:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8001288:	f7ff fc62 	bl	8000b50 <FSMC_WR_REG>
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fc71 	bl	8000b74 <FSMC_WR_DAT>


	FSMC_WR_REG(COLMOD);   			FSMC_WR_DAT(0x0055U);		// RGB and MCU Interface Data format 16-Bits
 8001292:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8001296:	f7ff fc5b 	bl	8000b50 <FSMC_WR_REG>
 800129a:	2055      	movs	r0, #85	; 0x55
 800129c:	f7ff fc6a 	bl	8000b74 <FSMC_WR_DAT>
 80012a0:	e002      	b.n	80012a8 <NT35510_Init+0x404>
 80012a2:	bf00      	nop
 80012a4:	40020800 	.word	0x40020800
	FSMC_WR_REG(MADCTL);   			FSMC_WR_DAT(0x0000U);		// MADCTL: MY MX MV RGB MH RSMX RSMY
 80012a8:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 80012ac:	f7ff fc50 	bl	8000b50 <FSMC_WR_REG>
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff fc5f 	bl	8000b74 <FSMC_WR_DAT>


	FSMC_WR_REG(SLPOUT);   						// Sleep Out
 80012b6:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80012ba:	f7ff fc49 	bl	8000b50 <FSMC_WR_REG>

	HAL_Delay(120);
 80012be:	2078      	movs	r0, #120	; 0x78
 80012c0:	f001 fd98 	bl	8002df4 <HAL_Delay>

	FSMC_WR_REG(DISPON);   						// Display On
 80012c4:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80012c8:	f7ff fc42 	bl	8000b50 <FSMC_WR_REG>

	HAL_Delay(200);
 80012cc:	20c8      	movs	r0, #200	; 0xc8
 80012ce:	f001 fd91 	bl	8002df4 <HAL_Delay>

	LCD_SetDirection(VERTICAL_UP);		// Vertical-up display orientation as default
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff fcc8 	bl	8000c68 <LCD_SetDirection>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <MX_GPIO_Init>:

/** Configure pins
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	4b79      	ldr	r3, [pc, #484]	; (80014dc <MX_GPIO_Init+0x200>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a78      	ldr	r2, [pc, #480]	; (80014dc <MX_GPIO_Init+0x200>)
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b76      	ldr	r3, [pc, #472]	; (80014dc <MX_GPIO_Init+0x200>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	4b72      	ldr	r3, [pc, #456]	; (80014dc <MX_GPIO_Init+0x200>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a71      	ldr	r2, [pc, #452]	; (80014dc <MX_GPIO_Init+0x200>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b6f      	ldr	r3, [pc, #444]	; (80014dc <MX_GPIO_Init+0x200>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b6b      	ldr	r3, [pc, #428]	; (80014dc <MX_GPIO_Init+0x200>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a6a      	ldr	r2, [pc, #424]	; (80014dc <MX_GPIO_Init+0x200>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b68      	ldr	r3, [pc, #416]	; (80014dc <MX_GPIO_Init+0x200>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b64      	ldr	r3, [pc, #400]	; (80014dc <MX_GPIO_Init+0x200>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a63      	ldr	r2, [pc, #396]	; (80014dc <MX_GPIO_Init+0x200>)
 8001350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b61      	ldr	r3, [pc, #388]	; (80014dc <MX_GPIO_Init+0x200>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <MX_GPIO_Init+0x200>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a5c      	ldr	r2, [pc, #368]	; (80014dc <MX_GPIO_Init+0x200>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <MX_GPIO_Init+0x200>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b56      	ldr	r3, [pc, #344]	; (80014dc <MX_GPIO_Init+0x200>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a55      	ldr	r2, [pc, #340]	; (80014dc <MX_GPIO_Init+0x200>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b53      	ldr	r3, [pc, #332]	; (80014dc <MX_GPIO_Init+0x200>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	4b4f      	ldr	r3, [pc, #316]	; (80014dc <MX_GPIO_Init+0x200>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a4e      	ldr	r2, [pc, #312]	; (80014dc <MX_GPIO_Init+0x200>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <MX_GPIO_Init+0x200>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OV7670_RST_GPIO_Port, OV7670_RST_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2104      	movs	r1, #4
 80013ba:	4849      	ldr	r0, [pc, #292]	; (80014e0 <MX_GPIO_Init+0x204>)
 80013bc:	f002 ffa2 	bl	8004304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TOUCH_YD_Pin|TOUCH_XL_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2130      	movs	r1, #48	; 0x30
 80013c4:	4847      	ldr	r0, [pc, #284]	; (80014e4 <MX_GPIO_Init+0x208>)
 80013c6:	f002 ff9d 	bl	8004304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d0:	4845      	ldr	r0, [pc, #276]	; (80014e8 <MX_GPIO_Init+0x20c>)
 80013d2:	f002 ff97 	bl	8004304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RST_GPIO_Port, FSMC_RST_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	4844      	ldr	r0, [pc, #272]	; (80014ec <MX_GPIO_Init+0x210>)
 80013dc:	f002 ff92 	bl	8004304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_RST_Pin;
 80013e0:	2304      	movs	r3, #4
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OV7670_RST_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	483a      	ldr	r0, [pc, #232]	; (80014e0 <MX_GPIO_Init+0x204>)
 80013f8:	f002 fdf0 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_YU_Pin;
 80013fc:	2308      	movs	r3, #8
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001400:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <MX_GPIO_Init+0x214>)
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001404:	2301      	movs	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_YU_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	4835      	ldr	r0, [pc, #212]	; (80014e4 <MX_GPIO_Init+0x208>)
 8001410:	f002 fde4 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TOUCH_YD_Pin|TOUCH_XL_Pin;
 8001414:	2330      	movs	r3, #48	; 0x30
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	482e      	ldr	r0, [pc, #184]	; (80014e4 <MX_GPIO_Init+0x208>)
 800142c:	f002 fdd6 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OV7670_D0_Pin|OV7670_D1_Pin|OV7670_D2_Pin|OV7670_D3_Pin
 8001430:	23ff      	movs	r3, #255	; 0xff
 8001432:	61fb      	str	r3, [r7, #28]
                          |OV7670_D4_Pin|OV7670_D5_Pin|OV7670_D6_Pin|OV7670_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	4829      	ldr	r0, [pc, #164]	; (80014e8 <MX_GPIO_Init+0x20c>)
 8001444:	f002 fdca 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_HREF_Pin;
 8001448:	2301      	movs	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_GPIO_Init+0x214>)
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_HREF_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4826      	ldr	r0, [pc, #152]	; (80014f4 <MX_GPIO_Init+0x218>)
 800145c:	f002 fdbe 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_VSYNC_Pin;
 8001460:	2302      	movs	r3, #2
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <MX_GPIO_Init+0x21c>)
 8001466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4820      	ldr	r0, [pc, #128]	; (80014f4 <MX_GPIO_Init+0x218>)
 8001474:	f002 fdb2 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	4815      	ldr	r0, [pc, #84]	; (80014e8 <MX_GPIO_Init+0x20c>)
 8001492:	f002 fda3 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RST_Pin;
 8001496:	2340      	movs	r3, #64	; 0x40
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RST_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	480f      	ldr	r0, [pc, #60]	; (80014ec <MX_GPIO_Init+0x210>)
 80014ae:	f002 fd95 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_XCLK_Pin;
 80014b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OV7670_XCLK_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_GPIO_Init+0x210>)
 80014d0:	f002 fd84 	bl	8003fdc <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);*/

}
 80014d4:	bf00      	nop
 80014d6:	3730      	adds	r7, #48	; 0x30
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40021400 	.word	0x40021400
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020800 	.word	0x40020800
 80014f0:	10210000 	.word	0x10210000
 80014f4:	40021800 	.word	0x40021800
 80014f8:	10310000 	.word	0x10310000

080014fc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_I2C2_Init+0x50>)
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <MX_I2C2_Init+0x54>)
 8001504:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_I2C2_Init+0x50>)
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <MX_I2C2_Init+0x58>)
 800150a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_I2C2_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 66;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_I2C2_Init+0x50>)
 8001514:	2242      	movs	r2, #66	; 0x42
 8001516:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_I2C2_Init+0x50>)
 800151a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800151e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_I2C2_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_I2C2_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_I2C2_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_I2C2_Init+0x50>)
 8001534:	2280      	movs	r2, #128	; 0x80
 8001536:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_I2C2_Init+0x50>)
 800153a:	f002 ff15 	bl	8004368 <HAL_I2C_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001544:	f000 f95c 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20025d00 	.word	0x20025d00
 8001550:	40005800 	.word	0x40005800
 8001554:	00061a80 	.word	0x00061a80

08001558 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <HAL_I2C_MspInit+0x94>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d133      	bne.n	80015e2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <HAL_I2C_MspInit+0x98>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_I2C_MspInit+0x98>)
 8001584:	f043 0320 	orr.w	r3, r3, #32
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_I2C_MspInit+0x98>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0320 	and.w	r3, r3, #32
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001596:	2303      	movs	r3, #3
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159a:	2312      	movs	r3, #18
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015a6:	2304      	movs	r3, #4
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4810      	ldr	r0, [pc, #64]	; (80015f4 <HAL_I2C_MspInit+0x9c>)
 80015b2:	f002 fd13 	bl	8003fdc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_I2C_MspInit+0x98>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <HAL_I2C_MspInit+0x98>)
 80015c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_I2C_MspInit+0x98>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2021      	movs	r0, #33	; 0x21
 80015d8:	f002 f90b 	bl	80037f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80015dc:	2021      	movs	r0, #33	; 0x21
 80015de:	f002 f924 	bl	800382a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40005800 	.word	0x40005800
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40021400 	.word	0x40021400

080015f8 <i2c_read_reg>:
extern I2C_HandleTypeDef hi2c2;


//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
uint8_t i2c_read_reg(uint8_t address, uint8_t reg)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	4603      	mov	r3, r0
 8001600:	460a      	mov	r2, r1
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	4613      	mov	r3, r2
 8001606:	71bb      	strb	r3, [r7, #6]
	tx_data[0] = reg;
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <i2c_read_reg+0x48>)
 800160a:	79bb      	ldrb	r3, [r7, #6]
 800160c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 1, 10);
 800160e:	230a      	movs	r3, #10
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2301      	movs	r3, #1
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <i2c_read_reg+0x48>)
 8001616:	2142      	movs	r1, #66	; 0x42
 8001618:	480a      	ldr	r0, [pc, #40]	; (8001644 <i2c_read_reg+0x4c>)
 800161a:	f002 ffe9 	bl	80045f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0x42U, rx_data, 1, 10);
 800161e:	230a      	movs	r3, #10
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2301      	movs	r3, #1
 8001624:	4a08      	ldr	r2, [pc, #32]	; (8001648 <i2c_read_reg+0x50>)
 8001626:	2142      	movs	r1, #66	; 0x42
 8001628:	4806      	ldr	r0, [pc, #24]	; (8001644 <i2c_read_reg+0x4c>)
 800162a:	f003 f8df 	bl	80047ec <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 800162e:	2001      	movs	r0, #1
 8001630:	f001 fbe0 	bl	8002df4 <HAL_Delay>
	return rx_data[0];
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <i2c_read_reg+0x50>)
 8001636:	781b      	ldrb	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200000b0 	.word	0x200000b0
 8001644:	20025d00 	.word	0x20025d00
 8001648:	200000b8 	.word	0x200000b8

0800164c <i2c_write_reg>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void i2c_write_reg(uint8_t address, uint8_t reg, uint8_t data)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af02      	add	r7, sp, #8
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
 8001656:	460b      	mov	r3, r1
 8001658:	71bb      	strb	r3, [r7, #6]
 800165a:	4613      	mov	r3, r2
 800165c:	717b      	strb	r3, [r7, #5]
	tx_data[0] = reg;
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <i2c_write_reg+0x3c>)
 8001660:	79bb      	ldrb	r3, [r7, #6]
 8001662:	7013      	strb	r3, [r2, #0]
	tx_data[1] = data;
 8001664:	4a08      	ldr	r2, [pc, #32]	; (8001688 <i2c_write_reg+0x3c>)
 8001666:	797b      	ldrb	r3, [r7, #5]
 8001668:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 2, 10);
 800166a:	230a      	movs	r3, #10
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2302      	movs	r3, #2
 8001670:	4a05      	ldr	r2, [pc, #20]	; (8001688 <i2c_write_reg+0x3c>)
 8001672:	2142      	movs	r1, #66	; 0x42
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <i2c_write_reg+0x40>)
 8001676:	f002 ffbb 	bl	80045f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800167a:	2001      	movs	r0, #1
 800167c:	f001 fbba 	bl	8002df4 <HAL_Delay>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200000b0 	.word	0x200000b0
 800168c:	20025d00 	.word	0x20025d00

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001694:	f001 fb3c 	bl	8002d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001698:	f000 f814 	bl	80016c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169c:	f7ff fe1e 	bl	80012dc <MX_GPIO_Init>
  MX_DMA_Init();
 80016a0:	f7ff f946 	bl	8000930 <MX_DMA_Init>
  MX_TIM1_Init();
 80016a4:	f000 fc52 	bl	8001f4c <MX_TIM1_Init>
  MX_FSMC_Init();
 80016a8:	f7ff f95c 	bl	8000964 <MX_FSMC_Init>
  MX_I2C2_Init();
 80016ac:	f7ff ff26 	bl	80014fc <MX_I2C2_Init>
  MX_USART6_UART_Init();
 80016b0:	f001 fa88 	bl	8002bc4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80016b4:	f7fe ff88 	bl	80005c8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 80016b8:	f7ff f80c 	bl	80006d4 <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main_loop();
 80016bc:	f7ff f870 	bl	80007a0 <app_main_loop>
 80016c0:	e7fc      	b.n	80016bc <main+0x2c>
	...

080016c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0aa      	sub	sp, #168	; 0xa8
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016ce:	2234      	movs	r2, #52	; 0x34
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f007 fb36 	bl	8008d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	2258      	movs	r2, #88	; 0x58
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f007 fb27 	bl	8008d44 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <_Z18SystemClock_Configv+0x134>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a3e      	ldr	r2, [pc, #248]	; (80017f8 <_Z18SystemClock_Configv+0x134>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <_Z18SystemClock_Configv+0x134>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	4b39      	ldr	r3, [pc, #228]	; (80017fc <_Z18SystemClock_Configv+0x138>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a38      	ldr	r2, [pc, #224]	; (80017fc <_Z18SystemClock_Configv+0x138>)
 800171c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b36      	ldr	r3, [pc, #216]	; (80017fc <_Z18SystemClock_Configv+0x138>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800172e:	2302      	movs	r3, #2
 8001730:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001732:	2301      	movs	r3, #1
 8001734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001738:	2310      	movs	r3, #16
 800173a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173e:	2302      	movs	r3, #2
 8001740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 800174a:	2308      	movs	r3, #8
 800174c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001750:	2364      	movs	r3, #100	; 0x64
 8001752:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001756:	2302      	movs	r3, #2
 8001758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800175c:	2302      	movs	r3, #2
 800175e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001762:	2302      	movs	r3, #2
 8001764:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001768:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800176c:	4618      	mov	r0, r3
 800176e:	f005 fdf1 	bl	8007354 <HAL_RCC_OscConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf14      	ite	ne
 8001778:	2301      	movne	r3, #1
 800177a:	2300      	moveq	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8001782:	f000 f83d 	bl	8001800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001786:	230f      	movs	r3, #15
 8001788:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178a:	2302      	movs	r3, #2
 800178c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001796:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800179c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017a0:	2103      	movs	r1, #3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f005 f912 	bl	80069cc <HAL_RCC_ClockConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf14      	ite	ne
 80017ae:	2301      	movne	r3, #1
 80017b0:	2300      	moveq	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 80017b8:	f000 f822 	bl	8001800 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
 80017bc:	2304      	movs	r3, #4
 80017be:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80017c0:	2301      	movs	r3, #1
 80017c2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	4618      	mov	r0, r3
 80017cc:	f005 fb36 	bl	8006e3c <HAL_RCCEx_PeriphCLKConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <_Z18SystemClock_Configv+0x120>
  {
    Error_Handler();
 80017e0:	f000 f80e 	bl	8001800 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_5);
 80017e4:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80017e8:	2100      	movs	r1, #0
 80017ea:	2001      	movs	r0, #1
 80017ec:	f005 f9d4 	bl	8006b98 <HAL_RCC_MCOConfig>
}
 80017f0:	bf00      	nop
 80017f2:	37a8      	adds	r7, #168	; 0xa8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40007000 	.word	0x40007000

08001800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001808:	e7fe      	b.n	8001808 <Error_Handler+0x8>

0800180a <comp>:

/****************************************************************
 * Compare function used for qsort()
 ****************************************************************/
int comp (const void * elem1, const void * elem2)
{
 800180a:	b480      	push	{r7}
 800180c:	b085      	sub	sp, #20
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
    int f = *((int*)elem1);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
    int s = *((int*)elem2);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	60bb      	str	r3, [r7, #8]
    if (f > s) return  1;
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	429a      	cmp	r2, r3
 8001826:	dd01      	ble.n	800182c <comp+0x22>
 8001828:	2301      	movs	r3, #1
 800182a:	e007      	b.n	800183c <comp+0x32>
    if (f < s) return -1;
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	429a      	cmp	r2, r3
 8001832:	da02      	bge.n	800183a <comp+0x30>
 8001834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001838:	e000      	b.n	800183c <comp+0x32>
    return 0;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <ov7670_saturation>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_saturation(int8_t s)  //-2 to 2
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
	ov7670_write_register(OV7670_MTX1,	0x80 + 0x20 * s);
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	3304      	adds	r3, #4
 8001858:	b2db      	uxtb	r3, r3
 800185a:	015b      	lsls	r3, r3, #5
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	204f      	movs	r0, #79	; 0x4f
 8001862:	f000 f8ad 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX2, 	0x80 + 0x20 * s);
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	3304      	adds	r3, #4
 800186c:	b2db      	uxtb	r3, r3
 800186e:	015b      	lsls	r3, r3, #5
 8001870:	b2db      	uxtb	r3, r3
 8001872:	4619      	mov	r1, r3
 8001874:	2050      	movs	r0, #80	; 0x50
 8001876:	f000 f8a3 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX3, 	0x00);
 800187a:	2100      	movs	r1, #0
 800187c:	2051      	movs	r0, #81	; 0x51
 800187e:	f000 f89f 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX4, 	0x22 + (0x11 * s) / 2);
 8001882:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001886:	4613      	mov	r3, r2
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	0fda      	lsrs	r2, r3, #31
 800188e:	4413      	add	r3, r2
 8001890:	105b      	asrs	r3, r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	3322      	adds	r3, #34	; 0x22
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4619      	mov	r1, r3
 800189a:	2052      	movs	r0, #82	; 0x52
 800189c:	f000 f890 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX5, 	0x5e + (0x2f * s) / 2);
 80018a0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	0fda      	lsrs	r2, r3, #31
 80018b0:	4413      	add	r3, r2
 80018b2:	105b      	asrs	r3, r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	335e      	adds	r3, #94	; 0x5e
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	2053      	movs	r0, #83	; 0x53
 80018be:	f000 f87f 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_MTX6, 	0x80 + 0x20 * s);
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	3304      	adds	r3, #4
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	015b      	lsls	r3, r3, #5
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4619      	mov	r1, r3
 80018d0:	2054      	movs	r0, #84	; 0x54
 80018d2:	f000 f875 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_MTXS, 	0x9e);
 80018d6:	219e      	movs	r1, #158	; 0x9e
 80018d8:	2058      	movs	r0, #88	; 0x58
 80018da:	f000 f871 	bl	80019c0 <ov7670_write_register>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <ov7670_frame_control>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_frame_control(int16_t hStart,  int16_t vStart) // 154 14
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	460a      	mov	r2, r1
 80018f2:	80fb      	strh	r3, [r7, #6]
 80018f4:	4613      	mov	r3, r2
 80018f6:	80bb      	strh	r3, [r7, #4]
	int hStop = (hStart + 640) % 784; // 10
 80018f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001900:	4a18      	ldr	r2, [pc, #96]	; (8001964 <ov7670_frame_control+0x7c>)
 8001902:	fb82 1203 	smull	r1, r2, r2, r3
 8001906:	1211      	asrs	r1, r2, #8
 8001908:	17da      	asrs	r2, r3, #31
 800190a:	1a8a      	subs	r2, r1, r2
 800190c:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001910:	fb01 f202 	mul.w	r2, r1, r2
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
	ov7670_write_register(OV7670_HSTART,	0x15);//hStart >> 3);
 8001918:	2115      	movs	r1, #21
 800191a:	2017      	movs	r0, #23
 800191c:	f000 f850 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_HSTOP,		0x03);//hStop >> 3);
 8001920:	2103      	movs	r1, #3
 8001922:	2018      	movs	r0, #24
 8001924:	f000 f84c 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_HREF, 		0x80);//((hStop & 0b111) << 3) | (hStart & 0b111));
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	2032      	movs	r0, #50	; 0x32
 800192c:	f000 f848 	bl	80019c0 <ov7670_write_register>

	int vStop = (vStart + 480); // 494
 8001930:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001934:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001938:	60bb      	str	r3, [r7, #8]
	ov7670_write_register(OV7670_VSTRT, 	0x03);//vStart >> 2);
 800193a:	2103      	movs	r1, #3
 800193c:	2019      	movs	r0, #25
 800193e:	f000 f83f 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_VSTOP, 	0x7b);//vStop >> 2);
 8001942:	217b      	movs	r1, #123	; 0x7b
 8001944:	201a      	movs	r0, #26
 8001946:	f000 f83b 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_VREF, 		0x00);//((vStop & 0b11) << 2) | (vStart & 0b11));
 800194a:	2100      	movs	r1, #0
 800194c:	2003      	movs	r0, #3
 800194e:	f000 f837 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_COM10, 	0x20U);
 8001952:	2120      	movs	r1, #32
 8001954:	2015      	movs	r0, #21
 8001956:	f000 f833 	bl	80019c0 <ov7670_write_register>
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	5397829d 	.word	0x5397829d

08001968 <ov7670_subsampling_control>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~= 19 11 f1
void ov7670_subsampling_control(int8_t com14, int8_t downSample, int8_t pclk_div)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
 8001972:	460b      	mov	r3, r1
 8001974:	71bb      	strb	r3, [r7, #6]
 8001976:	4613      	mov	r3, r2
 8001978:	717b      	strb	r3, [r7, #5]
	ov7670_write_register(OV7670_COM3, 			0x04);		//DCW enable
 800197a:	2104      	movs	r1, #4
 800197c:	200c      	movs	r0, #12
 800197e:	f000 f81f 	bl	80019c0 <ov7670_write_register>

	ov7670_write_register(OV7670_COM14, 		com14);		//pixel clock divided by 4, manual scaling enable, DCW and PCLK controlled by register
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	4619      	mov	r1, r3
 8001986:	203e      	movs	r0, #62	; 0x3e
 8001988:	f000 f81a 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_XSC, 		0x3a);
 800198c:	213a      	movs	r1, #58	; 0x3a
 800198e:	2070      	movs	r0, #112	; 0x70
 8001990:	f000 f816 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_YSC, 		0x35);
 8001994:	2135      	movs	r1, #53	; 0x35
 8001996:	2071      	movs	r0, #113	; 0x71
 8001998:	f000 f812 	bl	80019c0 <ov7670_write_register>

	ov7670_write_register(OV7670_SCL_DCWCTR, 	downSample);
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	4619      	mov	r1, r3
 80019a0:	2072      	movs	r0, #114	; 0x72
 80019a2:	f000 f80d 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_PCLK_DIV, 	pclk_div);	//pixel clock divided by 4
 80019a6:	797b      	ldrb	r3, [r7, #5]
 80019a8:	4619      	mov	r1, r3
 80019aa:	2073      	movs	r0, #115	; 0x73
 80019ac:	f000 f808 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_PCLK_DLY, 	0x02);
 80019b0:	2102      	movs	r1, #2
 80019b2:	20a2      	movs	r0, #162	; 0xa2
 80019b4:	f000 f804 	bl	80019c0 <ov7670_write_register>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <ov7670_write_register>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_write_register(unsigned char reg, unsigned char val)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	460a      	mov	r2, r1
 80019ca:	71fb      	strb	r3, [r7, #7]
 80019cc:	4613      	mov	r3, r2
 80019ce:	71bb      	strb	r3, [r7, #6]
	i2c_write_reg(0x42U, reg, val);
 80019d0:	79ba      	ldrb	r2, [r7, #6]
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	4619      	mov	r1, r3
 80019d6:	2042      	movs	r0, #66	; 0x42
 80019d8:	f7ff fe38 	bl	800164c <i2c_write_reg>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <ov7670_read_register>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
uint8_t ov7670_read_register(unsigned char reg)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	return i2c_read_reg(0x42U, reg);
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	4619      	mov	r1, r3
 80019f2:	2042      	movs	r0, #66	; 0x42
 80019f4:	f7ff fe00 	bl	80015f8 <i2c_read_reg>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <ov7670_set_mode>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_set_mode(ov7670_res_fmt_t resolution, uint16_t exposure)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	460a      	mov	r2, r1
 8001a0c:	71fb      	strb	r3, [r7, #7]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	80bb      	strh	r3, [r7, #4]
	if (resolution < 0)
		resolution = 0;
	else if(resolution > 2)
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <ov7670_set_mode+0x1a>
		resolution = 2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	71fb      	strb	r3, [r7, #7]

	ov7670_write_register(OV7670_COM7,	0x80U);			// all registers default
 8001a1c:	2180      	movs	r1, #128	; 0x80
 8001a1e:	2012      	movs	r0, #18
 8001a20:	f7ff ffce 	bl	80019c0 <ov7670_write_register>
	HAL_Delay(3);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f001 f9e5 	bl	8002df4 <HAL_Delay>
	ov7670_write_register(OV7670_CLKRC,	0x80U);
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	2011      	movs	r0, #17
 8001a2e:	f7ff ffc7 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_COM11,	0x08U | 0x02U);	// enable auto 50/60Hz detect + exposure timing can be less
 8001a32:	210a      	movs	r1, #10
 8001a34:	203b      	movs	r0, #59	; 0x3b
 8001a36:	f7ff ffc3 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_COM7,	0x04U);			// RGB
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	2012      	movs	r0, #18
 8001a3e:	f7ff ffbf 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_COM15,	0xC0U | 0x10U);	// RGB565
 8001a42:	21d0      	movs	r1, #208	; 0xd0
 8001a44:	2040      	movs	r0, #64	; 0x40
 8001a46:	f7ff ffbb 	bl	80019c0 <ov7670_write_register>

	switch (resolution) {
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d01c      	beq.n	8001a8a <ov7670_set_mode+0x88>
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	dc25      	bgt.n	8001aa0 <ov7670_set_mode+0x9e>
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <ov7670_set_mode+0x5c>
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d00b      	beq.n	8001a74 <ov7670_set_mode+0x72>
 8001a5c:	e020      	b.n	8001aa0 <ov7670_set_mode+0x9e>
	case QQQVGA_RGB565:
		ov7670_subsampling_control(0x1B, 0x33, 0xF3);
 8001a5e:	f06f 020c 	mvn.w	r2, #12
 8001a62:	2133      	movs	r1, #51	; 0x33
 8001a64:	201b      	movs	r0, #27
 8001a66:	f7ff ff7f 	bl	8001968 <ov7670_subsampling_control>
		ov7670_frame_control(196, 14);
 8001a6a:	210e      	movs	r1, #14
 8001a6c:	20c4      	movs	r0, #196	; 0xc4
 8001a6e:	f7ff ff3b 	bl	80018e8 <ov7670_frame_control>
		break;
 8001a72:	e015      	b.n	8001aa0 <ov7670_set_mode+0x9e>
	case QQVGA_RGB565:
		ov7670_subsampling_control(0x1A, 0x22, 0xF2);
 8001a74:	f06f 020d 	mvn.w	r2, #13
 8001a78:	2122      	movs	r1, #34	; 0x22
 8001a7a:	201a      	movs	r0, #26
 8001a7c:	f7ff ff74 	bl	8001968 <ov7670_subsampling_control>
		ov7670_frame_control(174, 14);
 8001a80:	210e      	movs	r1, #14
 8001a82:	20ae      	movs	r0, #174	; 0xae
 8001a84:	f7ff ff30 	bl	80018e8 <ov7670_frame_control>
		break;
 8001a88:	e00a      	b.n	8001aa0 <ov7670_set_mode+0x9e>
	case QVGA_RGB565:
		ov7670_subsampling_control(0x19, 0x11, 0xF1);
 8001a8a:	f06f 020e 	mvn.w	r2, #14
 8001a8e:	2111      	movs	r1, #17
 8001a90:	2019      	movs	r0, #25
 8001a92:	f7ff ff69 	bl	8001968 <ov7670_subsampling_control>
		ov7670_frame_control(154, 14);
 8001a96:	210e      	movs	r1, #14
 8001a98:	209a      	movs	r0, #154	; 0x9a
 8001a9a:	f7ff ff25 	bl	80018e8 <ov7670_frame_control>
		break;
 8001a9e:	bf00      	nop
	}

	ov7670_write_register(0xB0U, 			0x84U);
 8001aa0:	2184      	movs	r1, #132	; 0x84
 8001aa2:	20b0      	movs	r0, #176	; 0xb0
 8001aa4:	f7ff ff8c 	bl	80019c0 <ov7670_write_register>
	ov7670_saturation(0);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff fecd 	bl	8001848 <ov7670_saturation>
	ov7670_write_register(OV7670_COM8,		0xE7U); // AGC AWB AEC on
 8001aae:	21e7      	movs	r1, #231	; 0xe7
 8001ab0:	2013      	movs	r0, #19
 8001ab2:	f7ff ff85 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_AWBCTR0,	0x9FU); // AWB
 8001ab6:	219f      	movs	r1, #159	; 0x9f
 8001ab8:	206f      	movs	r0, #111	; 0x6f
 8001aba:	f7ff ff81 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_CLKRC, 	0x80U);
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	2011      	movs	r0, #17
 8001ac2:	f7ff ff7d 	bl	80019c0 <ov7670_write_register>

	HAL_Delay(50);
 8001ac6:	2032      	movs	r0, #50	; 0x32
 8001ac8:	f001 f994 	bl	8002df4 <HAL_Delay>

	uint8_t com1 = exposure & 0x03U;				// AEC[1:0]
 8001acc:	88bb      	ldrh	r3, [r7, #4]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	73fb      	strb	r3, [r7, #15]
	uint8_t aech = (exposure >> 2) & 0xFFU;			// AEC[9:2]
 8001ad6:	88bb      	ldrh	r3, [r7, #4]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	73bb      	strb	r3, [r7, #14]
	uint8_t aechh = (exposure >> 10) & 0xFFU;		// AEC[15:10]
 8001ade:	88bb      	ldrh	r3, [r7, #4]
 8001ae0:	0a9b      	lsrs	r3, r3, #10
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	737b      	strb	r3, [r7, #13]

	ov7670_write_register(OV7670_COM1, 		(ov7670_read_register(OV7670_COM1) & ~0x03U) | com1);
 8001ae6:	2004      	movs	r0, #4
 8001ae8:	f7ff ff7c 	bl	80019e4 <ov7670_read_register>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	2004      	movs	r0, #4
 8001afe:	f7ff ff5f 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_AECH, 		aech);
 8001b02:	7bbb      	ldrb	r3, [r7, #14]
 8001b04:	4619      	mov	r1, r3
 8001b06:	2010      	movs	r0, #16
 8001b08:	f7ff ff5a 	bl	80019c0 <ov7670_write_register>
	ov7670_write_register(OV7670_AECHH, 	aechh);
 8001b0c:	7b7b      	ldrb	r3, [r7, #13]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	2007      	movs	r0, #7
 8001b12:	f7ff ff55 	bl	80019c0 <ov7670_write_register>
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <ov7670_init1>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_init1()
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	OV7670_RST_LOW;
 8001b24:	2200      	movs	r2, #0
 8001b26:	2104      	movs	r1, #4
 8001b28:	4815      	ldr	r0, [pc, #84]	; (8001b80 <ov7670_init1+0x60>)
 8001b2a:	f002 fbeb 	bl	8004304 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001b2e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b32:	f001 f95f 	bl	8002df4 <HAL_Delay>
	OV7670_RST_HIGH;
 8001b36:	2201      	movs	r2, #1
 8001b38:	2104      	movs	r1, #4
 8001b3a:	4811      	ldr	r0, [pc, #68]	; (8001b80 <ov7670_init1+0x60>)
 8001b3c:	f002 fbe2 	bl	8004304 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001b40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b44:	f001 f956 	bl	8002df4 <HAL_Delay>

	ov7670_set_mode(QVGA_RGB565, 300);
 8001b48:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f7ff ff58 	bl	8001a02 <ov7670_set_mode>
	HAL_Delay(300);
 8001b52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b56:	f001 f94d 	bl	8002df4 <HAL_Delay>

	TIM1->DIER |= TIM_DIER_TDE;
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <ov7670_init1+0x64>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	4a09      	ldr	r2, [pc, #36]	; (8001b84 <ov7670_init1+0x64>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b64:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim1);
 8001b66:	4808      	ldr	r0, [pc, #32]	; (8001b88 <ov7670_init1+0x68>)
 8001b68:	f005 ff0c 	bl	8007984 <HAL_TIM_Base_Start>

	HAL_NVIC_SetPriority(OV7670_VSYNC_EXTI_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2007      	movs	r0, #7
 8001b72:	f001 fe3e 	bl	80037f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7670_VSYNC_EXTI_IRQn);
 8001b76:	2007      	movs	r0, #7
 8001b78:	f001 fe57 	bl	800382a <HAL_NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021400 	.word	0x40021400
 8001b84:	40010000 	.word	0x40010000
 8001b88:	20025db4 	.word	0x20025db4

08001b8c <EXTI0_HREF_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI0_HREF_Callback()
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	// Falling edge
	HAL_DMA_Abort(&hdma_tim1_trig);
 8001b90:	4810      	ldr	r0, [pc, #64]	; (8001bd4 <EXTI0_HREF_Callback+0x48>)
 8001b92:	f001 ff6a 	bl	8003a6a <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)(g_cam_buff + g_offset), 640);
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <EXTI0_HREF_Callback+0x4c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <EXTI0_HREF_Callback+0x50>)
 8001b9c:	4413      	add	r3, r2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001ba4:	490e      	ldr	r1, [pc, #56]	; (8001be0 <EXTI0_HREF_Callback+0x54>)
 8001ba6:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <EXTI0_HREF_Callback+0x48>)
 8001ba8:	f001 ff24 	bl	80039f4 <HAL_DMA_Start>
	if(g_cam_buff + g_offset >= g_cam_buff + OV7670_FRAME_SIZE_QVGA - 640)//38080=38400-320
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <EXTI0_HREF_Callback+0x4c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <EXTI0_HREF_Callback+0x50>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <EXTI0_HREF_Callback+0x58>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d303      	bcc.n	8001bc2 <EXTI0_HREF_Callback+0x36>
		g_offset = 0;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <EXTI0_HREF_Callback+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
	else
		g_offset += 640;
}
 8001bc0:	e005      	b.n	8001bce <EXTI0_HREF_Callback+0x42>
		g_offset += 640;
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <EXTI0_HREF_Callback+0x4c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bca:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <EXTI0_HREF_Callback+0x4c>)
 8001bcc:	6013      	str	r3, [r2, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20025d54 	.word	0x20025d54
 8001bd8:	20025b40 	.word	0x20025b40
 8001bdc:	200000c0 	.word	0x200000c0
 8001be0:	40020410 	.word	0x40020410
 8001be4:	20025640 	.word	0x20025640

08001be8 <EXTI1_VSYNC_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI1_VSYNC_Callback()
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	// Rising edge
	if(OV7670_VSYNC_GPIO_Port->IDR & OV7670_VSYNC_Pin)
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <EXTI1_VSYNC_Callback+0x54>)
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <EXTI1_VSYNC_Callback+0x1e>
	{
		HAL_DMA_Abort(&hdma_tim1_trig);
 8001bf8:	4811      	ldr	r0, [pc, #68]	; (8001c40 <EXTI1_VSYNC_Callback+0x58>)
 8001bfa:	f001 ff36 	bl	8003a6a <HAL_DMA_Abort>
		HAL_NVIC_DisableIRQ(OV7670_HREF_EXTI_IRQn);
 8001bfe:	2006      	movs	r0, #6
 8001c00:	f001 fe21 	bl	8003846 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_EnableIRQ(OV7670_HREF_EXTI_IRQn);
		HAL_DMA_Abort(&hdma_tim1_trig);
		HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)g_cam_buff, 640); // first line
		g_offset += 640;
	}
}
 8001c04:	e017      	b.n	8001c36 <EXTI1_VSYNC_Callback+0x4e>
		HAL_NVIC_SetPriority(OV7670_HREF_EXTI_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2006      	movs	r0, #6
 8001c0c:	f001 fdf1 	bl	80037f2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(OV7670_HREF_EXTI_IRQn);
 8001c10:	2006      	movs	r0, #6
 8001c12:	f001 fe0a 	bl	800382a <HAL_NVIC_EnableIRQ>
		HAL_DMA_Abort(&hdma_tim1_trig);
 8001c16:	480a      	ldr	r0, [pc, #40]	; (8001c40 <EXTI1_VSYNC_Callback+0x58>)
 8001c18:	f001 ff27 	bl	8003a6a <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)g_cam_buff, 640); // first line
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <EXTI1_VSYNC_Callback+0x5c>)
 8001c1e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001c22:	4909      	ldr	r1, [pc, #36]	; (8001c48 <EXTI1_VSYNC_Callback+0x60>)
 8001c24:	4806      	ldr	r0, [pc, #24]	; (8001c40 <EXTI1_VSYNC_Callback+0x58>)
 8001c26:	f001 fee5 	bl	80039f4 <HAL_DMA_Start>
		g_offset += 640;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <EXTI1_VSYNC_Callback+0x64>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c32:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <EXTI1_VSYNC_Callback+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	20025d54 	.word	0x20025d54
 8001c44:	200000c0 	.word	0x200000c0
 8001c48:	40020410 	.word	0x40020410
 8001c4c:	20025b40 	.word	0x20025b40

08001c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cec:	f001 f862 	bl	8002db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f002 fb1d 	bl	8004338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d06:	2002      	movs	r0, #2
 8001d08:	f002 fb16 	bl	8004338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001d14:	2008      	movs	r0, #8
 8001d16:	f002 fb0f 	bl	8004338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <I2C2_EV_IRQHandler+0x10>)
 8001d26:	f002 ff87 	bl	8004c38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20025d00 	.word	0x20025d00

08001d34 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((USART6->SR & USART_SR_RXNE) && (USART6->CR1 & USART_CR1_RXNEIE))
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <USART6_IRQHandler+0x2c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <USART6_IRQHandler+0x20>
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <USART6_IRQHandler+0x2c>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <USART6_IRQHandler+0x20>
		uart_rx_callback();
 8001d50:	f000 fd7e 	bl	8002850 <uart_rx_callback>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d54:	4803      	ldr	r0, [pc, #12]	; (8001d64 <USART6_IRQHandler+0x30>)
 8001d56:	f006 f97b 	bl	8008050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40011400 	.word	0x40011400
 8001d64:	20025f30 	.word	0x20025f30

08001d68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == OV7670_VSYNC_Pin)
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d102      	bne.n	8001d7e <HAL_GPIO_EXTI_Callback+0x16>
		EXTI1_VSYNC_Callback();
 8001d78:	f7ff ff36 	bl	8001be8 <EXTI1_VSYNC_Callback>
	else if(GPIO_Pin == OV7670_HREF_Pin)
		EXTI0_HREF_Callback();
	else if(GPIO_Pin == TOUCH_YU_Pin)
		//HAL_EXTI_IRQHandler(&hexti_touch_YU);
		EXTI3_TOUCH_Callback();
}
 8001d7c:	e00a      	b.n	8001d94 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == OV7670_HREF_Pin)
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d102      	bne.n	8001d8a <HAL_GPIO_EXTI_Callback+0x22>
		EXTI0_HREF_Callback();
 8001d84:	f7ff ff02 	bl	8001b8c <EXTI0_HREF_Callback>
}
 8001d88:	e004      	b.n	8001d94 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == TOUCH_YU_Pin)
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d101      	bne.n	8001d94 <HAL_GPIO_EXTI_Callback+0x2c>
		EXTI3_TOUCH_Callback();
 8001d90:	f000 fb70 	bl	8002474 <EXTI3_TOUCH_Callback>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
	return 1;
 8001da0:	2301      	movs	r3, #1
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_kill>:

int _kill(int pid, int sig)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001db6:	f006 ff59 	bl	8008c6c <__errno>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2216      	movs	r2, #22
 8001dbe:	601a      	str	r2, [r3, #0]
	return -1;
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_exit>:

void _exit (int status)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ffe7 	bl	8001dac <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dde:	e7fe      	b.n	8001dde <_exit+0x12>

08001de0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e00a      	b.n	8001e08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001df2:	f3af 8000 	nop.w
 8001df6:	4601      	mov	r1, r0
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	60ba      	str	r2, [r7, #8]
 8001dfe:	b2ca      	uxtb	r2, r1
 8001e00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dbf0      	blt.n	8001df2 <_read+0x12>
	}

return len;
 8001e10:	687b      	ldr	r3, [r7, #4]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e009      	b.n	8001e40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	60ba      	str	r2, [r7, #8]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dbf1      	blt.n	8001e2c <_write+0x12>
	}
	return len;
 8001e48:	687b      	ldr	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_close>:

int _close(int file)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
	return -1;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <_isatty>:

int _isatty(int file)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
	return 1;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
	return 0;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec4:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <_sbrk+0x5c>)
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <_sbrk+0x60>)
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <_sbrk+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <_sbrk+0x64>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <_sbrk+0x68>)
 8001edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <_sbrk+0x64>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d207      	bcs.n	8001efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eec:	f006 febe 	bl	8008c6c <__errno>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001efa:	e009      	b.n	8001f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <_sbrk+0x64>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <_sbrk+0x64>)
 8001f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20050000 	.word	0x20050000
 8001f1c:	00000400 	.word	0x00000400
 8001f20:	20025b44 	.word	0x20025b44
 8001f24:	20025f88 	.word	0x20025f88

08001f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <SystemInit+0x20>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <SystemInit+0x20>)
 8001f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <MX_TIM1_Init+0xa4>)
 8001f6c:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <MX_TIM1_Init+0xa8>)
 8001f6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f70:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <MX_TIM1_Init+0xa4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <MX_TIM1_Init+0xa4>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <MX_TIM1_Init+0xa4>)
 8001f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f84:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <MX_TIM1_Init+0xa4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f8a:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <MX_TIM1_Init+0xa4>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <MX_TIM1_Init+0xa4>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f96:	4816      	ldr	r0, [pc, #88]	; (8001ff0 <MX_TIM1_Init+0xa4>)
 8001f98:	f005 fca4 	bl	80078e4 <HAL_TIM_Base_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001fa2:	f7ff fc2d 	bl	8001800 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001faa:	2360      	movs	r3, #96	; 0x60
 8001fac:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	4619      	mov	r1, r3
 8001fbc:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <MX_TIM1_Init+0xa4>)
 8001fbe:	f005 fd49 	bl	8007a54 <HAL_TIM_SlaveConfigSynchro>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001fc8:	f7ff fc1a 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_TIM1_Init+0xa4>)
 8001fda:	f005 ff2b 	bl	8007e34 <HAL_TIMEx_MasterConfigSynchronization>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001fe4:	f7ff fc0c 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20025db4 	.word	0x20025db4
 8001ff4:	40010000 	.word	0x40010000

08001ff8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a31      	ldr	r2, [pc, #196]	; (80020dc <HAL_TIM_Base_MspInit+0xe4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d15b      	bne.n	80020d2 <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_TIM_Base_MspInit+0xe8>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a2f      	ldr	r2, [pc, #188]	; (80020e0 <HAL_TIM_Base_MspInit+0xe8>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_TIM_Base_MspInit+0xe8>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_TIM_Base_MspInit+0xe8>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <HAL_TIM_Base_MspInit+0xe8>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <HAL_TIM_Base_MspInit+0xe8>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = OV7670_PCLK_Pin;
 8002052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002064:	2301      	movs	r3, #1
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OV7670_PCLK_GPIO_Port, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	481d      	ldr	r0, [pc, #116]	; (80020e4 <HAL_TIM_Base_MspInit+0xec>)
 8002070:	f001 ffb4 	bl	8003fdc <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_TRIG Init */
    hdma_tim1_trig.Instance = DMA2_Stream0;
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_TIM_Base_MspInit+0xf0>)
 8002076:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <HAL_TIM_Base_MspInit+0xf4>)
 8002078:	601a      	str	r2, [r3, #0]
    hdma_tim1_trig.Init.Channel = DMA_CHANNEL_6;
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_TIM_Base_MspInit+0xf0>)
 800207c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002080:	605a      	str	r2, [r3, #4]
    hdma_tim1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_TIM_Base_MspInit+0xf0>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
    hdma_tim1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <HAL_TIM_Base_MspInit+0xf0>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
    hdma_tim1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_TIM_Base_MspInit+0xf0>)
 8002090:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002094:	611a      	str	r2, [r3, #16]
    hdma_tim1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_TIM_Base_MspInit+0xf0>)
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
    hdma_tim1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_TIM_Base_MspInit+0xf0>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
    hdma_tim1_trig.Init.Mode = DMA_NORMAL;
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_TIM_Base_MspInit+0xf0>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	61da      	str	r2, [r3, #28]
    hdma_tim1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_TIM_Base_MspInit+0xf0>)
 80020aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020ae:	621a      	str	r2, [r3, #32]
    hdma_tim1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_TIM_Base_MspInit+0xf0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_trig) != HAL_OK)
 80020b6:	480c      	ldr	r0, [pc, #48]	; (80020e8 <HAL_TIM_Base_MspInit+0xf0>)
 80020b8:	f001 fbee 	bl	8003898 <HAL_DMA_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_TIM_Base_MspInit+0xce>
    {
      Error_Handler();
 80020c2:	f7ff fb9d 	bl	8001800 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_trig);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <HAL_TIM_Base_MspInit+0xf0>)
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
 80020cc:	4a06      	ldr	r2, [pc, #24]	; (80020e8 <HAL_TIM_Base_MspInit+0xf0>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80020d2:	bf00      	nop
 80020d4:	3728      	adds	r7, #40	; 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020000 	.word	0x40020000
 80020e8:	20025d54 	.word	0x20025d54
 80020ec:	40026410 	.word	0x40026410

080020f0 <adc_select_x>:

/******************************************************
 * Select TOUCH_XR channel for ADC conversion
******************************************************/
void adc_select_x(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]
 8002104:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = TOUCH_XR_Pin;
 8002112:	2304      	movs	r3, #4
 8002114:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002116:	2303      	movs	r3, #3
 8002118:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800211e:	2302      	movs	r3, #2
 8002120:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(TOUCH_XR_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	480b      	ldr	r0, [pc, #44]	; (8002158 <adc_select_x+0x68>)
 800212a:	f001 ff57 	bl	8003fdc <HAL_GPIO_Init>

	sConfig.Channel = TOUCH_XR_ADC_CHANNEL;
 800212e:	2302      	movs	r3, #2
 8002130:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4807      	ldr	r0, [pc, #28]	; (800215c <adc_select_x+0x6c>)
 8002140:	f001 f80c 	bl	800315c <HAL_ADC_ConfigChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <adc_select_x+0x5e>
	{
		Error_Handler();
 800214a:	f7ff fb59 	bl	8001800 <Error_Handler>
	}
}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40020000 	.word	0x40020000
 800215c:	20025c68 	.word	0x20025c68

08002160 <adc_select_y>:

/******************************************************
 * Select TOUCH_YU channel for ADC conversion
******************************************************/
void adc_select_y(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
 8002174:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = TOUCH_YU_Pin;
 8002182:	2308      	movs	r3, #8
 8002184:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002186:	2303      	movs	r3, #3
 8002188:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800218e:	2302      	movs	r3, #2
 8002190:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(TOUCH_YU_GPIO_Port, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	480b      	ldr	r0, [pc, #44]	; (80021c8 <adc_select_y+0x68>)
 800219a:	f001 ff1f 	bl	8003fdc <HAL_GPIO_Init>

	sConfig.Channel = TOUCH_YU_ADC_CHANNEL;
 800219e:	2303      	movs	r3, #3
 80021a0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 80021a2:	2301      	movs	r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4807      	ldr	r0, [pc, #28]	; (80021cc <adc_select_y+0x6c>)
 80021b0:	f000 ffd4 	bl	800315c <HAL_ADC_ConfigChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <adc_select_y+0x5e>
	{
		Error_Handler();
 80021ba:	f7ff fb21 	bl	8001800 <Error_Handler>
	}
}
 80021be:	bf00      	nop
 80021c0:	3728      	adds	r7, #40	; 0x28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40020000 	.word	0x40020000
 80021cc:	20025c68 	.word	0x20025c68

080021d0 <adc_median_measurement>:

/******************************************************
 *
******************************************************/
uint16_t adc_median_measurement(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
	uint8_t adc_cnt = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	75fb      	strb	r3, [r7, #23]
	uint16_t adc_values[11] = {0};
 80021da:	463b      	mov	r3, r7
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
 80021e8:	829a      	strh	r2, [r3, #20]

	for(adc_cnt = 0; adc_cnt < 11; adc_cnt++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	75fb      	strb	r3, [r7, #23]
 80021ee:	e016      	b.n	800221e <adc_median_measurement+0x4e>
	{
		HAL_ADC_Start(&hadc1);
 80021f0:	4812      	ldr	r0, [pc, #72]	; (800223c <adc_median_measurement+0x6c>)
 80021f2:	f000 fe67 	bl	8002ec4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 500);
 80021f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80021fa:	4810      	ldr	r0, [pc, #64]	; (800223c <adc_median_measurement+0x6c>)
 80021fc:	f000 ff16 	bl	800302c <HAL_ADC_PollForConversion>
		adc_values[adc_cnt] = HAL_ADC_GetValue(&hadc1);
 8002200:	480e      	ldr	r0, [pc, #56]	; (800223c <adc_median_measurement+0x6c>)
 8002202:	f000 ff9e 	bl	8003142 <HAL_ADC_GetValue>
 8002206:	4602      	mov	r2, r0
 8002208:	7dfb      	ldrb	r3, [r7, #23]
 800220a:	b292      	uxth	r2, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	f107 0118 	add.w	r1, r7, #24
 8002212:	440b      	add	r3, r1
 8002214:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(adc_cnt = 0; adc_cnt < 11; adc_cnt++)
 8002218:	7dfb      	ldrb	r3, [r7, #23]
 800221a:	3301      	adds	r3, #1
 800221c:	75fb      	strb	r3, [r7, #23]
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	2b0a      	cmp	r3, #10
 8002222:	d9e5      	bls.n	80021f0 <adc_median_measurement+0x20>
	}
	qsort(adc_values,
 8002224:	4638      	mov	r0, r7
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <adc_median_measurement+0x70>)
 8002228:	2202      	movs	r2, #2
 800222a:	210b      	movs	r1, #11
 800222c:	f007 f963 	bl	80094f6 <qsort>
			sizeof(adc_values)/sizeof(*adc_values),
			sizeof(*adc_values), comp);
	return adc_values[5];
 8002230:	897b      	ldrh	r3, [r7, #10]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20025c68 	.word	0x20025c68
 8002240:	0800180b 	.word	0x0800180b

08002244 <adc_mean_measurement>:

/******************************************************
 *
******************************************************/
uint16_t adc_mean_measurement(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
	uint8_t adc_cnt = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	71fb      	strb	r3, [r7, #7]
	uint16_t adc_value = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	80bb      	strh	r3, [r7, #4]

	for(adc_cnt = 0; adc_cnt < 11; adc_cnt++)
 8002252:	2300      	movs	r3, #0
 8002254:	71fb      	strb	r3, [r7, #7]
 8002256:	e012      	b.n	800227e <adc_mean_measurement+0x3a>
	{
		HAL_ADC_Start(&hadc1);
 8002258:	4810      	ldr	r0, [pc, #64]	; (800229c <adc_mean_measurement+0x58>)
 800225a:	f000 fe33 	bl	8002ec4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 500);
 800225e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002262:	480e      	ldr	r0, [pc, #56]	; (800229c <adc_mean_measurement+0x58>)
 8002264:	f000 fee2 	bl	800302c <HAL_ADC_PollForConversion>
		adc_value += HAL_ADC_GetValue(&hadc1);
 8002268:	480c      	ldr	r0, [pc, #48]	; (800229c <adc_mean_measurement+0x58>)
 800226a:	f000 ff6a 	bl	8003142 <HAL_ADC_GetValue>
 800226e:	4603      	mov	r3, r0
 8002270:	b29a      	uxth	r2, r3
 8002272:	88bb      	ldrh	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	80bb      	strh	r3, [r7, #4]
	for(adc_cnt = 0; adc_cnt < 11; adc_cnt++)
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	3301      	adds	r3, #1
 800227c:	71fb      	strb	r3, [r7, #7]
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2b0a      	cmp	r3, #10
 8002282:	d9e9      	bls.n	8002258 <adc_mean_measurement+0x14>
	}
	adc_value /= 11;
 8002284:	88bb      	ldrh	r3, [r7, #4]
 8002286:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <adc_mean_measurement+0x5c>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	80bb      	strh	r3, [r7, #4]

	return adc_value;
 8002290:	88bb      	ldrh	r3, [r7, #4]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20025c68 	.word	0x20025c68
 80022a0:	ba2e8ba3 	.word	0xba2e8ba3

080022a4 <touch_read_coordinates>:
 * ||  read X  || adc  | open | high | low  |
 * ||  read Y  || high | low  | adc  | open |
 * ------------------------------------------
******************************************************/
touch_coordinates_t touch_read_coordinates()
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
	touch_coordinates_t ret = {0};
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]

	// TOUCH_XR output-high
	GPIOA->MODER &= ~GPIO_MODER_MODER2_Msk;
 80022ae:	4b3c      	ldr	r3, [pc, #240]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a3b      	ldr	r2, [pc, #236]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022b4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022b8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2_0;
 80022ba:	4b39      	ldr	r3, [pc, #228]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a38      	ldr	r2, [pc, #224]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022c0:	f043 0310 	orr.w	r3, r3, #16
 80022c4:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= TOUCH_XR_Pin;
 80022c6:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	4a35      	ldr	r2, [pc, #212]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	6153      	str	r3, [r2, #20]

	// TOUCH_XL output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 80022d2:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a32      	ldr	r2, [pc, #200]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80022dc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_0;
 80022de:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2f      	ldr	r2, [pc, #188]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e8:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_XL_Pin;
 80022ea:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	4a2c      	ldr	r2, [pc, #176]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022f0:	f023 0320 	bic.w	r3, r3, #32
 80022f4:	6153      	str	r3, [r2, #20]

	// TOUCH_YD inout-open
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a29      	ldr	r2, [pc, #164]	; (80023a0 <touch_read_coordinates+0xfc>)
 80022fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002300:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD4_Msk;
 8002302:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	4a26      	ldr	r2, [pc, #152]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800230c:	60d3      	str	r3, [r2, #12]
	//HAL_Delay(5);

	// TOUCH_YU as ADC
	adc_select_y();
 800230e:	f7ff ff27 	bl	8002160 <adc_select_y>

	ret.y = adc_median_measurement();
 8002312:	f7ff ff5d 	bl	80021d0 <adc_median_measurement>
 8002316:	4603      	mov	r3, r0
 8002318:	807b      	strh	r3, [r7, #2]

	// TOUCH_YU output-high
	GPIOA->MODER &= ~GPIO_MODER_MODER3_Msk;
 800231a:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <touch_read_coordinates+0xfc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a20      	ldr	r2, [pc, #128]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002320:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002324:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER3_0;
 8002326:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <touch_read_coordinates+0xfc>)
 800232c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002330:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= TOUCH_YU_Pin;
 8002332:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	4a1a      	ldr	r2, [pc, #104]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002338:	f043 0308 	orr.w	r3, r3, #8
 800233c:	6153      	str	r3, [r2, #20]

	// TOUCH_YD output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a17      	ldr	r2, [pc, #92]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002348:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER4_0;
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <touch_read_coordinates+0xfc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002354:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_YD_Pin;
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <touch_read_coordinates+0xfc>)
 800235c:	f023 0310 	bic.w	r3, r3, #16
 8002360:	6153      	str	r3, [r2, #20]

	// TOUCH_XL input-open
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002368:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800236c:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD5_Msk;
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <touch_read_coordinates+0xfc>)
 8002374:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002378:	60d3      	str	r3, [r2, #12]
	//HAL_Delay(5);

	// TOUCH_XR as ADC
	adc_select_x();
 800237a:	f7ff feb9 	bl	80020f0 <adc_select_x>

	ret.x = adc_median_measurement();
 800237e:	f7ff ff27 	bl	80021d0 <adc_median_measurement>
 8002382:	4603      	mov	r3, r0
 8002384:	803b      	strh	r3, [r7, #0]

	return ret;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	2300      	movs	r3, #0
 800238c:	88ba      	ldrh	r2, [r7, #4]
 800238e:	f362 030f 	bfi	r3, r2, #0, #16
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40020000 	.word	0x40020000

080023a4 <init_TOUCH_YU_as_interrupt>:

/******************************************************
 *
******************************************************/
void init_TOUCH_YU_as_interrupt(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]

	// TOUCH_YD as input-open
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 80023b8:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a29      	ldr	r2, [pc, #164]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 80023be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c2:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD4_Msk;
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a26      	ldr	r2, [pc, #152]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 80023ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ce:	60d3      	str	r3, [r2, #12]

	// TOUCH_XL output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a23      	ldr	r2, [pc, #140]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 80023d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80023da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_0;
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a20      	ldr	r2, [pc, #128]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 80023e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023e6:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_XL_Pin;
 80023e8:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 80023ee:	f023 0320 	bic.w	r3, r3, #32
 80023f2:	6153      	str	r3, [r2, #20]

	// TOUCH_XR output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER2_Msk;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 80023fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2_0;
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a17      	ldr	r2, [pc, #92]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 8002406:	f043 0310 	orr.w	r3, r3, #16
 800240a:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_XR_Pin;
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 8002412:	f023 0304 	bic.w	r3, r3, #4
 8002416:	6153      	str	r3, [r2, #20]

	// TOUCH_YU as interrupt input
	GPIO_InitStruct.Pin = TOUCH_YU_Pin;
 8002418:	2308      	movs	r3, #8
 800241a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <init_TOUCH_YU_as_interrupt+0xc4>)
 800241e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002420:	2301      	movs	r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002424:	2302      	movs	r3, #2
 8002426:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	4619      	mov	r1, r3
 800242c:	480d      	ldr	r0, [pc, #52]	; (8002464 <init_TOUCH_YU_as_interrupt+0xc0>)
 800242e:	f001 fdd5 	bl	8003fdc <HAL_GPIO_Init>

	// Clear PR flag occurring during TOUCHED state
	HAL_EXTI_ClearPending(&hexti_touch_YU, EXTI_TRIGGER_RISING_FALLING);
 8002432:	2103      	movs	r1, #3
 8002434:	480d      	ldr	r0, [pc, #52]	; (800246c <init_TOUCH_YU_as_interrupt+0xc8>)
 8002436:	f001 fda1 	bl	8003f7c <HAL_EXTI_ClearPending>

	// Enable interrupt on YU
	HAL_EXTI_SetConfigLine(&hexti_touch_YU, &extiConfig_touch_YU);
 800243a:	490d      	ldr	r1, [pc, #52]	; (8002470 <init_TOUCH_YU_as_interrupt+0xcc>)
 800243c:	480b      	ldr	r0, [pc, #44]	; (800246c <init_TOUCH_YU_as_interrupt+0xc8>)
 800243e:	f001 fc95 	bl	8003d6c <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(TOUCH_YU_EXTI_IRQn, 0, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	2100      	movs	r1, #0
 8002446:	2009      	movs	r0, #9
 8002448:	f001 f9d3 	bl	80037f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TOUCH_YU_EXTI_IRQn);
 800244c:	2009      	movs	r0, #9
 800244e:	f001 f9ec 	bl	800382a <HAL_NVIC_EnableIRQ>
	HAL_EXTI_ClearPending(&hexti_touch_YU, EXTI_TRIGGER_RISING_FALLING);
 8002452:	2103      	movs	r1, #3
 8002454:	4805      	ldr	r0, [pc, #20]	; (800246c <init_TOUCH_YU_as_interrupt+0xc8>)
 8002456:	f001 fd91 	bl	8003f7c <HAL_EXTI_ClearPending>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40020000 	.word	0x40020000
 8002468:	10210000 	.word	0x10210000
 800246c:	2000000c 	.word	0x2000000c
 8002470:	20000014 	.word	0x20000014

08002474 <EXTI3_TOUCH_Callback>:

/******************************************************
 * EXTI IRQ callback
******************************************************/
void EXTI3_TOUCH_Callback()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	// Disable interrupt on TOUCH_YU pin
	HAL_EXTI_ClearPending(&hexti_touch_YU, EXTI_TRIGGER_RISING_FALLING);
 8002478:	2103      	movs	r1, #3
 800247a:	480c      	ldr	r0, [pc, #48]	; (80024ac <EXTI3_TOUCH_Callback+0x38>)
 800247c:	f001 fd7e 	bl	8003f7c <HAL_EXTI_ClearPending>
	HAL_EXTI_ClearConfigLine(&hexti_touch_YU);
 8002480:	480a      	ldr	r0, [pc, #40]	; (80024ac <EXTI3_TOUCH_Callback+0x38>)
 8002482:	f001 fd1b 	bl	8003ebc <HAL_EXTI_ClearConfigLine>
	HAL_NVIC_ClearPendingIRQ(TOUCH_YU_EXTI_IRQn);
 8002486:	2009      	movs	r0, #9
 8002488:	f001 f9f7 	bl	800387a <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_DisableIRQ(TOUCH_YU_EXTI_IRQn);
 800248c:	2009      	movs	r0, #9
 800248e:	f001 f9da 	bl	8003846 <HAL_NVIC_DisableIRQ>
	// Init analog mode on TOUCH_YU pin
	adc_select_y();
 8002492:	f7ff fe65 	bl	8002160 <adc_select_y>
	g_touch_state = TOUCH_TOUCHED;
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <EXTI3_TOUCH_Callback+0x3c>)
 8002498:	2202      	movs	r2, #2
 800249a:	701a      	strb	r2, [r3, #0]
	touch_timer_start = HAL_GetTick();
 800249c:	f000 fc9e 	bl	8002ddc <HAL_GetTick>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <EXTI3_TOUCH_Callback+0x40>)
 80024a4:	6013      	str	r3, [r2, #0]
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000000c 	.word	0x2000000c
 80024b0:	20000008 	.word	0x20000008
 80024b4:	20025b4c 	.word	0x20025b4c

080024b8 <touch_init>:

/******************************************************
 *
******************************************************/
void touch_init()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	// TOUCH_YD as input-open
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <touch_init+0x34>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <touch_init+0x34>)
 80024c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c6:	6013      	str	r3, [r2, #0]

	// Clear PR flag raised by configuring TOUCH_YD pin
	// to output-low during GPIO initialization at startup
	HAL_EXTI_ClearPending(&hexti_touch_YU, EXTI_TRIGGER_RISING_FALLING);
 80024c8:	2103      	movs	r1, #3
 80024ca:	4809      	ldr	r0, [pc, #36]	; (80024f0 <touch_init+0x38>)
 80024cc:	f001 fd56 	bl	8003f7c <HAL_EXTI_ClearPending>

	// Enable interrupt
	HAL_EXTI_SetConfigLine(&hexti_touch_YU, &extiConfig_touch_YU);
 80024d0:	4908      	ldr	r1, [pc, #32]	; (80024f4 <touch_init+0x3c>)
 80024d2:	4807      	ldr	r0, [pc, #28]	; (80024f0 <touch_init+0x38>)
 80024d4:	f001 fc4a 	bl	8003d6c <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(TOUCH_YU_EXTI_IRQn, 0, 0);
 80024d8:	2200      	movs	r2, #0
 80024da:	2100      	movs	r1, #0
 80024dc:	2009      	movs	r0, #9
 80024de:	f001 f988 	bl	80037f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TOUCH_YU_EXTI_IRQn);
 80024e2:	2009      	movs	r0, #9
 80024e4:	f001 f9a1 	bl	800382a <HAL_NVIC_EnableIRQ>
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40020000 	.word	0x40020000
 80024f0:	2000000c 	.word	0x2000000c
 80024f4:	20000014 	.word	0x20000014

080024f8 <touch_process>:
 * TOUCHED	-> RELEASED	** after timeout & release
 * TOUCHED	-> TOUCHED	** if touch not released
 * RELEASED	-> IDLE		** unconditionally
******************************************************/
void touch_process()
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
	switch(g_touch_state)
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <touch_process+0x98>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b04      	cmp	r3, #4
 8002504:	d03c      	beq.n	8002580 <touch_process+0x88>
 8002506:	2b04      	cmp	r3, #4
 8002508:	dc40      	bgt.n	800258c <touch_process+0x94>
 800250a:	2b01      	cmp	r3, #1
 800250c:	d002      	beq.n	8002514 <touch_process+0x1c>
 800250e:	2b02      	cmp	r3, #2
 8002510:	d007      	beq.n	8002522 <touch_process+0x2a>
	case TOUCH_RELEASED:
		init_TOUCH_YU_as_interrupt();
		g_touch_state = TOUCH_IDLE;
		break;
	}
}
 8002512:	e03b      	b.n	800258c <touch_process+0x94>
		g_touch_coordinates.x = 0;
 8002514:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <touch_process+0x9c>)
 8002516:	2200      	movs	r2, #0
 8002518:	801a      	strh	r2, [r3, #0]
		g_touch_coordinates.y = 0;
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <touch_process+0x9c>)
 800251c:	2200      	movs	r2, #0
 800251e:	805a      	strh	r2, [r3, #2]
		break;
 8002520:	e034      	b.n	800258c <touch_process+0x94>
		if((uint32_t) (HAL_GetTick() - touch_timer_start) < TOUCH_TIMEOUT)
 8002522:	f000 fc5b 	bl	8002ddc <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <touch_process+0xa0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b31      	cmp	r3, #49	; 0x31
 8002530:	d805      	bhi.n	800253e <touch_process+0x46>
			g_touch_coordinates = touch_read_coordinates();
 8002532:	f7ff feb7 	bl	80022a4 <touch_read_coordinates>
 8002536:	4603      	mov	r3, r0
 8002538:	4a16      	ldr	r2, [pc, #88]	; (8002594 <touch_process+0x9c>)
 800253a:	6013      	str	r3, [r2, #0]
		break;
 800253c:	e026      	b.n	800258c <touch_process+0x94>
			GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 800253e:	4b17      	ldr	r3, [pc, #92]	; (800259c <touch_process+0xa4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a16      	ldr	r2, [pc, #88]	; (800259c <touch_process+0xa4>)
 8002544:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002548:	6013      	str	r3, [r2, #0]
			GPIOA->MODER |= GPIO_MODER_MODER5_0;
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <touch_process+0xa4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a13      	ldr	r2, [pc, #76]	; (800259c <touch_process+0xa4>)
 8002550:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002554:	6013      	str	r3, [r2, #0]
			GPIOA->ODR &= ~TOUCH_XL_Pin;
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <touch_process+0xa4>)
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	4a10      	ldr	r2, [pc, #64]	; (800259c <touch_process+0xa4>)
 800255c:	f023 0320 	bic.w	r3, r3, #32
 8002560:	6153      	str	r3, [r2, #20]
			if(adc_mean_measurement() < 100)
 8002562:	f7ff fe6f 	bl	8002244 <adc_mean_measurement>
 8002566:	4603      	mov	r3, r0
 8002568:	2b63      	cmp	r3, #99	; 0x63
 800256a:	d803      	bhi.n	8002574 <touch_process+0x7c>
				g_touch_state = TOUCH_RELEASED;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <touch_process+0x98>)
 800256e:	2204      	movs	r2, #4
 8002570:	701a      	strb	r2, [r3, #0]
		break;
 8002572:	e00b      	b.n	800258c <touch_process+0x94>
				touch_timer_start = HAL_GetTick();
 8002574:	f000 fc32 	bl	8002ddc <HAL_GetTick>
 8002578:	4603      	mov	r3, r0
 800257a:	4a07      	ldr	r2, [pc, #28]	; (8002598 <touch_process+0xa0>)
 800257c:	6013      	str	r3, [r2, #0]
		break;
 800257e:	e005      	b.n	800258c <touch_process+0x94>
		init_TOUCH_YU_as_interrupt();
 8002580:	f7ff ff10 	bl	80023a4 <init_TOUCH_YU_as_interrupt>
		g_touch_state = TOUCH_IDLE;
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <touch_process+0x98>)
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
		break;
 800258a:	bf00      	nop
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000008 	.word	0x20000008
 8002594:	20025b48 	.word	0x20025b48
 8002598:	20025b4c 	.word	0x20025b4c
 800259c:	40020000 	.word	0x40020000

080025a0 <uart_init>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_init()
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <uart_init+0x20>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <uart_init+0x20>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	60da      	str	r2, [r3, #12]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20025f30 	.word	0x20025f30

080025c4 <uart_tx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_tx_process()
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
	static uint8_t last_nose = 0;
	uint8_t string_size;

	switch(g_uart_tx_state)
 80025ca:	4b34      	ldr	r3, [pc, #208]	; (800269c <uart_tx_process+0xd8>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d030      	beq.n	8002634 <uart_tx_process+0x70>
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	dc5e      	bgt.n	8002694 <uart_tx_process+0xd0>
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <uart_tx_process+0x1c>
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d00a      	beq.n	80025f4 <uart_tx_process+0x30>
			g_uart_tx_state = UART_TX_TRANSMIT;
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
			g_uart_tx_state = UART_TX_IDLE;
		break;
	}
}
 80025de:	e059      	b.n	8002694 <uart_tx_process+0xd0>
		if(g_uart_tx_nose != g_uart_tx_tail)
 80025e0:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <uart_tx_process+0xdc>)
 80025e2:	881a      	ldrh	r2, [r3, #0]
 80025e4:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <uart_tx_process+0xe0>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d050      	beq.n	800268e <uart_tx_process+0xca>
			g_uart_tx_state = UART_TX_TRANSMIT;
 80025ec:	4b2b      	ldr	r3, [pc, #172]	; (800269c <uart_tx_process+0xd8>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
		break;
 80025f2:	e04c      	b.n	800268e <uart_tx_process+0xca>
		string_size = strlen(g_uart_tx_buffer + (g_uart_tx_nose)) + 1;
 80025f4:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <uart_tx_process+0xdc>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <uart_tx_process+0xe4>)
 80025fc:	4413      	add	r3, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd fe5e 	bl	80002c0 <strlen>
 8002604:	4603      	mov	r3, r0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3301      	adds	r3, #1
 800260a:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit_IT(
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <uart_tx_process+0xdc>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <uart_tx_process+0xe4>)
 8002614:	4413      	add	r3, r2
 8002616:	79fa      	ldrb	r2, [r7, #7]
 8002618:	b292      	uxth	r2, r2
 800261a:	4619      	mov	r1, r3
 800261c:	4823      	ldr	r0, [pc, #140]	; (80026ac <uart_tx_process+0xe8>)
 800261e:	f005 fcd2 	bl	8007fc6 <HAL_UART_Transmit_IT>
		last_nose = g_uart_tx_nose;
 8002622:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <uart_tx_process+0xdc>)
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <uart_tx_process+0xec>)
 800262a:	701a      	strb	r2, [r3, #0]
		g_uart_tx_state = UART_TX_TRANSMITING;
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <uart_tx_process+0xd8>)
 800262e:	2202      	movs	r2, #2
 8002630:	701a      	strb	r2, [r3, #0]
		break;
 8002632:	e02f      	b.n	8002694 <uart_tx_process+0xd0>
		if((last_nose == g_uart_tx_nose))
 8002634:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <uart_tx_process+0xec>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	b29a      	uxth	r2, r3
 800263a:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <uart_tx_process+0xdc>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d103      	bne.n	800264a <uart_tx_process+0x86>
			g_uart_tx_state = UART_TX_TRANSMITING;
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <uart_tx_process+0xd8>)
 8002644:	2202      	movs	r2, #2
 8002646:	701a      	strb	r2, [r3, #0]
		break;
 8002648:	e023      	b.n	8002692 <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail != g_uart_tx_nose))
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <uart_tx_process+0xec>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	b29a      	uxth	r2, r3
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <uart_tx_process+0xdc>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d009      	beq.n	800266c <uart_tx_process+0xa8>
 8002658:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <uart_tx_process+0xe0>)
 800265a:	881a      	ldrh	r2, [r3, #0]
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <uart_tx_process+0xdc>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d003      	beq.n	800266c <uart_tx_process+0xa8>
			g_uart_tx_state = UART_TX_TRANSMIT;
 8002664:	4b0d      	ldr	r3, [pc, #52]	; (800269c <uart_tx_process+0xd8>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
		break;
 800266a:	e012      	b.n	8002692 <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <uart_tx_process+0xec>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b29a      	uxth	r2, r3
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <uart_tx_process+0xdc>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d00b      	beq.n	8002692 <uart_tx_process+0xce>
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <uart_tx_process+0xe0>)
 800267c:	881a      	ldrh	r2, [r3, #0]
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <uart_tx_process+0xdc>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d105      	bne.n	8002692 <uart_tx_process+0xce>
			g_uart_tx_state = UART_TX_IDLE;
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <uart_tx_process+0xd8>)
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
		break;
 800268c:	e001      	b.n	8002692 <uart_tx_process+0xce>
		break;
 800268e:	bf00      	nop
 8002690:	e000      	b.n	8002694 <uart_tx_process+0xd0>
		break;
 8002692:	bf00      	nop
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20025b50 	.word	0x20025b50
 80026a0:	20025c54 	.word	0x20025c54
 80026a4:	20025c56 	.word	0x20025c56
 80026a8:	20025b54 	.word	0x20025b54
 80026ac:	20025f30 	.word	0x20025f30
 80026b0:	20025c5e 	.word	0x20025c5e

080026b4 <HAL_UART_TxCpltCallback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	g_uart_tx_nose += strlen(g_uart_tx_buffer + g_uart_tx_nose) + 1;
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_UART_TxCpltCallback+0x44>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_UART_TxCpltCallback+0x48>)
 80026c4:	4413      	add	r3, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fd fdfa 	bl	80002c0 <strlen>
 80026cc:	4603      	mov	r3, r0
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_UART_TxCpltCallback+0x44>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	4413      	add	r3, r2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_UART_TxCpltCallback+0x44>)
 80026de:	801a      	strh	r2, [r3, #0]

	if(g_uart_tx_nose >= UART_TX_BUFFER_MAX)
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_UART_TxCpltCallback+0x44>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	2bfe      	cmp	r3, #254	; 0xfe
 80026e6:	d902      	bls.n	80026ee <HAL_UART_TxCpltCallback+0x3a>
		g_uart_tx_nose = 0;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_UART_TxCpltCallback+0x44>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	801a      	strh	r2, [r3, #0]

}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20025c54 	.word	0x20025c54
 80026fc:	20025b54 	.word	0x20025b54

08002700 <uart_rx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_process()
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
	uint8_t string_size = strlen(g_uart_rx_buffer + g_uart_rx_nose + 1) + 1;
 8002706:	4b4b      	ldr	r3, [pc, #300]	; (8002834 <uart_rx_process+0x134>)
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	4a4a      	ldr	r2, [pc, #296]	; (8002838 <uart_rx_process+0x138>)
 800270e:	4413      	add	r3, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd fdd5 	bl	80002c0 <strlen>
 8002716:	4603      	mov	r3, r0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	3301      	adds	r3, #1
 800271c:	71fb      	strb	r3, [r7, #7]

	switch(g_uart_rx_state)
 800271e:	4b47      	ldr	r3, [pc, #284]	; (800283c <uart_rx_process+0x13c>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <uart_rx_process+0x2c>
 8002726:	2b01      	cmp	r3, #1
 8002728:	d008      	beq.n	800273c <uart_rx_process+0x3c>
			g_uart_rx_state = UART_RX_IDLE;
		break;


	}
}
 800272a:	e07e      	b.n	800282a <uart_rx_process+0x12a>
		if(g_uart_rx_cnt)
 800272c:	4b44      	ldr	r3, [pc, #272]	; (8002840 <uart_rx_process+0x140>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d077      	beq.n	8002824 <uart_rx_process+0x124>
			g_uart_rx_state = UART_RX_RECEIVE;
 8002734:	4b41      	ldr	r3, [pc, #260]	; (800283c <uart_rx_process+0x13c>)
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
		break;
 800273a:	e073      	b.n	8002824 <uart_rx_process+0x124>
		if(g_uart_rx_nose < g_uart_rx_tail &&
 800273c:	4b3d      	ldr	r3, [pc, #244]	; (8002834 <uart_rx_process+0x134>)
 800273e:	881a      	ldrh	r2, [r3, #0]
 8002740:	4b40      	ldr	r3, [pc, #256]	; (8002844 <uart_rx_process+0x144>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d21c      	bcs.n	8002782 <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 8002748:	4b3a      	ldr	r3, [pc, #232]	; (8002834 <uart_rx_process+0x134>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	4413      	add	r3, r2
 8002752:	3b02      	subs	r3, #2
 8002754:	4a38      	ldr	r2, [pc, #224]	; (8002838 <uart_rx_process+0x138>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
		if(g_uart_rx_nose < g_uart_rx_tail &&
 8002758:	2b0d      	cmp	r3, #13
 800275a:	d112      	bne.n	8002782 <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 1] == '\n'))
 800275c:	4b35      	ldr	r3, [pc, #212]	; (8002834 <uart_rx_process+0x134>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	4413      	add	r3, r2
 8002766:	3b01      	subs	r3, #1
 8002768:	4a33      	ldr	r2, [pc, #204]	; (8002838 <uart_rx_process+0x138>)
 800276a:	5cd3      	ldrb	r3, [r2, r3]
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 800276c:	2b0a      	cmp	r3, #10
 800276e:	d108      	bne.n	8002782 <uart_rx_process+0x82>
			serial_protocol(g_uart_rx_buffer + g_uart_rx_nose + 1);
 8002770:	4b30      	ldr	r3, [pc, #192]	; (8002834 <uart_rx_process+0x134>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	3301      	adds	r3, #1
 8002776:	4a30      	ldr	r2, [pc, #192]	; (8002838 <uart_rx_process+0x138>)
 8002778:	4413      	add	r3, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f92c 	bl	80029d8 <serial_protocol>
 8002780:	e02e      	b.n	80027e0 <uart_rx_process+0xe0>
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <uart_rx_process+0x134>)
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <uart_rx_process+0x144>)
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d928      	bls.n	80027e0 <uart_rx_process+0xe0>
							(g_uart_rx_buffer[strlen(g_uart_rx_buffer) - 1] == '\n'))
 800278e:	482a      	ldr	r0, [pc, #168]	; (8002838 <uart_rx_process+0x138>)
 8002790:	f7fd fd96 	bl	80002c0 <strlen>
 8002794:	4603      	mov	r3, r0
 8002796:	3b01      	subs	r3, #1
 8002798:	4a27      	ldr	r2, [pc, #156]	; (8002838 <uart_rx_process+0x138>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 800279c:	2b0a      	cmp	r3, #10
 800279e:	d11f      	bne.n	80027e0 <uart_rx_process+0xe0>
			strncpy(g_uart_rx_tmp_buf, g_uart_rx_buffer + g_uart_rx_nose + 1, string_size);
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <uart_rx_process+0x134>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	3301      	adds	r3, #1
 80027a6:	4a24      	ldr	r2, [pc, #144]	; (8002838 <uart_rx_process+0x138>)
 80027a8:	4413      	add	r3, r2
 80027aa:	79fa      	ldrb	r2, [r7, #7]
 80027ac:	4619      	mov	r1, r3
 80027ae:	4826      	ldr	r0, [pc, #152]	; (8002848 <uart_rx_process+0x148>)
 80027b0:	f007 f878 	bl	80098a4 <strncpy>
			string_size = strlen(g_uart_rx_buffer + 1) + 1;
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <uart_rx_process+0x14c>)
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd fd82 	bl	80002c0 <strlen>
 80027bc:	4603      	mov	r3, r0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	71fb      	strb	r3, [r7, #7]
			strncpy(g_uart_rx_tmp_buf + strlen(g_uart_rx_tmp_buf), g_uart_rx_buffer , string_size);
 80027c4:	4820      	ldr	r0, [pc, #128]	; (8002848 <uart_rx_process+0x148>)
 80027c6:	f7fd fd7b 	bl	80002c0 <strlen>
 80027ca:	4603      	mov	r3, r0
 80027cc:	4a1e      	ldr	r2, [pc, #120]	; (8002848 <uart_rx_process+0x148>)
 80027ce:	4413      	add	r3, r2
 80027d0:	79fa      	ldrb	r2, [r7, #7]
 80027d2:	4919      	ldr	r1, [pc, #100]	; (8002838 <uart_rx_process+0x138>)
 80027d4:	4618      	mov	r0, r3
 80027d6:	f007 f865 	bl	80098a4 <strncpy>
			serial_protocol(g_uart_rx_tmp_buf);
 80027da:	481b      	ldr	r0, [pc, #108]	; (8002848 <uart_rx_process+0x148>)
 80027dc:	f000 f8fc 	bl	80029d8 <serial_protocol>
		g_uart_rx_cnt--;
 80027e0:	4b17      	ldr	r3, [pc, #92]	; (8002840 <uart_rx_process+0x140>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	4b15      	ldr	r3, [pc, #84]	; (8002840 <uart_rx_process+0x140>)
 80027ea:	801a      	strh	r2, [r3, #0]
		if(g_uart_rx_nose + string_size < UART_RX_BUFFER_MAX)
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <uart_rx_process+0x134>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	4413      	add	r3, r2
 80027f6:	2bfe      	cmp	r3, #254	; 0xfe
 80027f8:	dc08      	bgt.n	800280c <uart_rx_process+0x10c>
			g_uart_rx_nose += string_size;
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <uart_rx_process+0x134>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	b29a      	uxth	r2, r3
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <uart_rx_process+0x134>)
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	e003      	b.n	8002814 <uart_rx_process+0x114>
			g_uart_rx_nose = string_size;
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	b29a      	uxth	r2, r3
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <uart_rx_process+0x134>)
 8002812:	801a      	strh	r2, [r3, #0]
		if(!g_uart_rx_cnt)
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <uart_rx_process+0x140>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <uart_rx_process+0x128>
			g_uart_rx_state = UART_RX_IDLE;
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <uart_rx_process+0x13c>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
		break;
 8002822:	e001      	b.n	8002828 <uart_rx_process+0x128>
		break;
 8002824:	bf00      	nop
 8002826:	e000      	b.n	800282a <uart_rx_process+0x12a>
		break;
 8002828:	bf00      	nop
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20025c58 	.word	0x20025c58
 8002838:	20025e30 	.word	0x20025e30
 800283c:	20025b51 	.word	0x20025b51
 8002840:	20025c5c 	.word	0x20025c5c
 8002844:	20025c5a 	.word	0x20025c5a
 8002848:	20025dfc 	.word	0x20025dfc
 800284c:	20025e31 	.word	0x20025e31

08002850 <uart_rx_callback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_callback()
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
	g_uart_rx_tail++;
 8002854:	4b5b      	ldr	r3, [pc, #364]	; (80029c4 <uart_rx_callback+0x174>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	3301      	adds	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	4b59      	ldr	r3, [pc, #356]	; (80029c4 <uart_rx_callback+0x174>)
 800285e:	801a      	strh	r2, [r3, #0]

	if((g_uart_rx_tail < (UART_RX_BUFFER_MAX - 1)) && ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2/*1*/)))
 8002860:	4b58      	ldr	r3, [pc, #352]	; (80029c4 <uart_rx_callback+0x174>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	2bfd      	cmp	r3, #253	; 0xfd
 8002866:	d847      	bhi.n	80028f8 <uart_rx_callback+0xa8>
 8002868:	4b57      	ldr	r3, [pc, #348]	; (80029c8 <uart_rx_callback+0x178>)
 800286a:	881a      	ldrh	r2, [r3, #0]
 800286c:	4b55      	ldr	r3, [pc, #340]	; (80029c4 <uart_rx_callback+0x174>)
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d307      	bcc.n	8002884 <uart_rx_callback+0x34>
 8002874:	4b54      	ldr	r3, [pc, #336]	; (80029c8 <uart_rx_callback+0x178>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	4b52      	ldr	r3, [pc, #328]	; (80029c4 <uart_rx_callback+0x174>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	dd39      	ble.n	80028f8 <uart_rx_callback+0xa8>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);//253
 8002884:	4b51      	ldr	r3, [pc, #324]	; (80029cc <uart_rx_callback+0x17c>)
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	4b4e      	ldr	r3, [pc, #312]	; (80029c4 <uart_rx_callback+0x174>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	b2c9      	uxtb	r1, r1
 8002890:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <uart_rx_callback+0x180>)
 8002892:	5499      	strb	r1, [r3, r2]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8002894:	4b4b      	ldr	r3, [pc, #300]	; (80029c4 <uart_rx_callback+0x174>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <uart_rx_callback+0x180>)
 800289c:	5c9b      	ldrb	r3, [r3, r2]
 800289e:	2b0d      	cmp	r3, #13
 80028a0:	f040 8087 	bne.w	80029b2 <uart_rx_callback+0x162>
		{
			g_uart_rx_buffer[++g_uart_rx_tail] = '\n';//254
 80028a4:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <uart_rx_callback+0x174>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	3301      	adds	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	4b45      	ldr	r3, [pc, #276]	; (80029c4 <uart_rx_callback+0x174>)
 80028ae:	801a      	strh	r2, [r3, #0]
 80028b0:	4b44      	ldr	r3, [pc, #272]	; (80029c4 <uart_rx_callback+0x174>)
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <uart_rx_callback+0x180>)
 80028b8:	210a      	movs	r1, #10
 80028ba:	5499      	strb	r1, [r3, r2]
			g_uart_rx_cnt++;
 80028bc:	4b45      	ldr	r3, [pc, #276]	; (80029d4 <uart_rx_callback+0x184>)
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <uart_rx_callback+0x184>)
 80028c6:	801a      	strh	r2, [r3, #0]
			g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 80028c8:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <uart_rx_callback+0x174>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	4b3c      	ldr	r3, [pc, #240]	; (80029c4 <uart_rx_callback+0x174>)
 80028d2:	801a      	strh	r2, [r3, #0]
 80028d4:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <uart_rx_callback+0x174>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <uart_rx_callback+0x180>)
 80028dc:	2100      	movs	r1, #0
 80028de:	5499      	strb	r1, [r3, r2]
			if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 0))
 80028e0:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <uart_rx_callback+0x174>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	2bff      	cmp	r3, #255	; 0xff
 80028e6:	d164      	bne.n	80029b2 <uart_rx_callback+0x162>
 80028e8:	4b37      	ldr	r3, [pc, #220]	; (80029c8 <uart_rx_callback+0x178>)
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d060      	beq.n	80029b2 <uart_rx_callback+0x162>
			{
				g_uart_rx_tail = 0;
 80028f0:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <uart_rx_callback+0x174>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	801a      	strh	r2, [r3, #0]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 80028f6:	e05c      	b.n	80029b2 <uart_rx_callback+0x162>
			}
		}
	}
	else if((g_uart_rx_tail == (UART_RX_BUFFER_MAX - 1)) && (g_uart_rx_nose > 1)/*(g_uart_rx_nose < g_uart_rx_tail)*/)
 80028f8:	4b32      	ldr	r3, [pc, #200]	; (80029c4 <uart_rx_callback+0x174>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	2bfe      	cmp	r3, #254	; 0xfe
 80028fe:	d13e      	bne.n	800297e <uart_rx_callback+0x12e>
 8002900:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <uart_rx_callback+0x178>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d93a      	bls.n	800297e <uart_rx_callback+0x12e>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);//254
 8002908:	4b30      	ldr	r3, [pc, #192]	; (80029cc <uart_rx_callback+0x17c>)
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <uart_rx_callback+0x174>)
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	b2c9      	uxtb	r1, r1
 8002914:	4b2e      	ldr	r3, [pc, #184]	; (80029d0 <uart_rx_callback+0x180>)
 8002916:	5499      	strb	r1, [r3, r2]
		g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 8002918:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <uart_rx_callback+0x174>)
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	3301      	adds	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <uart_rx_callback+0x174>)
 8002922:	801a      	strh	r2, [r3, #0]
 8002924:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <uart_rx_callback+0x174>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <uart_rx_callback+0x180>)
 800292c:	2100      	movs	r1, #0
 800292e:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8002930:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <uart_rx_callback+0x174>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	3b01      	subs	r3, #1
 8002936:	4a26      	ldr	r2, [pc, #152]	; (80029d0 <uart_rx_callback+0x180>)
 8002938:	5cd3      	ldrb	r3, [r2, r3]
 800293a:	2b0d      	cmp	r3, #13
 800293c:	d13b      	bne.n	80029b6 <uart_rx_callback+0x166>
		{
			g_uart_rx_cnt++;
 800293e:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <uart_rx_callback+0x184>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <uart_rx_callback+0x184>)
 8002948:	801a      	strh	r2, [r3, #0]
			if(g_uart_rx_nose > 1)
 800294a:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <uart_rx_callback+0x178>)
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d931      	bls.n	80029b6 <uart_rx_callback+0x166>
			{
				g_uart_rx_tail = 0;
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <uart_rx_callback+0x174>)
 8002954:	2200      	movs	r2, #0
 8002956:	801a      	strh	r2, [r3, #0]
				g_uart_rx_buffer[g_uart_rx_tail] = '\n';//0
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <uart_rx_callback+0x174>)
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <uart_rx_callback+0x180>)
 8002960:	210a      	movs	r1, #10
 8002962:	5499      	strb	r1, [r3, r2]
				g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//1
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <uart_rx_callback+0x174>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <uart_rx_callback+0x174>)
 800296e:	801a      	strh	r2, [r3, #0]
 8002970:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <uart_rx_callback+0x174>)
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <uart_rx_callback+0x180>)
 8002978:	2100      	movs	r1, #0
 800297a:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 800297c:	e01b      	b.n	80029b6 <uart_rx_callback+0x166>
			{
				//error - full
			}
		}
	}
	else if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 1))
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <uart_rx_callback+0x174>)
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d118      	bne.n	80029b8 <uart_rx_callback+0x168>
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <uart_rx_callback+0x178>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d914      	bls.n	80029b8 <uart_rx_callback+0x168>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = '\0';
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <uart_rx_callback+0x174>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <uart_rx_callback+0x180>)
 8002996:	2100      	movs	r1, #0
 8002998:	5499      	strb	r1, [r3, r2]
		g_uart_rx_tail = 1;
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <uart_rx_callback+0x174>)
 800299c:	2201      	movs	r2, #1
 800299e:	801a      	strh	r2, [r3, #0]
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <uart_rx_callback+0x17c>)
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <uart_rx_callback+0x174>)
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	b2c9      	uxtb	r1, r1
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <uart_rx_callback+0x180>)
 80029ae:	5499      	strb	r1, [r3, r2]

	}

}
 80029b0:	e002      	b.n	80029b8 <uart_rx_callback+0x168>
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <uart_rx_callback+0x168>
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 80029b6:	bf00      	nop
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20025c5a 	.word	0x20025c5a
 80029c8:	20025c58 	.word	0x20025c58
 80029cc:	40011400 	.word	0x40011400
 80029d0:	20025e30 	.word	0x20025e30
 80029d4:	20025c5c 	.word	0x20025c5c

080029d8 <serial_protocol>:


#include <stdlib.h>
//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void serial_protocol(uint8_t* buff)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af02      	add	r7, sp, #8
 80029de:	6078      	str	r0, [r7, #4]
	char *token;
	char temp_buff[5] = {0};
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	2300      	movs	r3, #0
 80029e6:	733b      	strb	r3, [r7, #12]
	unsigned short address, value = 0xFF;
 80029e8:	23ff      	movs	r3, #255	; 0xff
 80029ea:	82fb      	strh	r3, [r7, #22]

	token = strtok(buff, ",");
 80029ec:	496e      	ldr	r1, [pc, #440]	; (8002ba8 <serial_protocol+0x1d0>)
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f006 ff6c 	bl	80098cc <strtok>
 80029f4:	6138      	str	r0, [r7, #16]

	if (strncmp(buff, "OVW", 3) == 0)
 80029f6:	2203      	movs	r2, #3
 80029f8:	496c      	ldr	r1, [pc, #432]	; (8002bac <serial_protocol+0x1d4>)
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f006 ff40 	bl	8009880 <strncmp>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d164      	bne.n	8002ad0 <serial_protocol+0xf8>
	{
		token = strtok(NULL, ",");
 8002a06:	4968      	ldr	r1, [pc, #416]	; (8002ba8 <serial_protocol+0x1d0>)
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f006 ff5f 	bl	80098cc <strtok>
 8002a0e:	6138      	str	r0, [r7, #16]
		strncpy(temp_buff, token, 2);
 8002a10:	f107 0308 	add.w	r3, r7, #8
 8002a14:	2202      	movs	r2, #2
 8002a16:	6939      	ldr	r1, [r7, #16]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f006 ff43 	bl	80098a4 <strncpy>
		address = strtoll(temp_buff, NULL, 16);
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	2210      	movs	r2, #16
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f007 f842 	bl	8009ab0 <strtoll>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4613      	mov	r3, r2
 8002a32:	81fb      	strh	r3, [r7, #14]

		token = strtok(NULL, ",");
 8002a34:	495c      	ldr	r1, [pc, #368]	; (8002ba8 <serial_protocol+0x1d0>)
 8002a36:	2000      	movs	r0, #0
 8002a38:	f006 ff48 	bl	80098cc <strtok>
 8002a3c:	6138      	str	r0, [r7, #16]
		strncpy(temp_buff, token, 2);
 8002a3e:	f107 0308 	add.w	r3, r7, #8
 8002a42:	2202      	movs	r2, #2
 8002a44:	6939      	ldr	r1, [r7, #16]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f006 ff2c 	bl	80098a4 <strncpy>
		value = strtoll(temp_buff, NULL, 16);
 8002a4c:	f107 0308 	add.w	r3, r7, #8
 8002a50:	2210      	movs	r2, #16
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f007 f82b 	bl	8009ab0 <strtoll>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4613      	mov	r3, r2
 8002a60:	82fb      	strh	r3, [r7, #22]

		ov7670_write_register(address, value);
 8002a62:	89fb      	ldrh	r3, [r7, #14]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	8afa      	ldrh	r2, [r7, #22]
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe ffa7 	bl	80019c0 <ov7670_write_register>
		sprintf(temp_buff, "%02X\0", address);
 8002a72:	89fa      	ldrh	r2, [r7, #14]
 8002a74:	f107 0308 	add.w	r3, r7, #8
 8002a78:	494d      	ldr	r1, [pc, #308]	; (8002bb0 <serial_protocol+0x1d8>)
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f006 fee0 	bl	8009840 <siprintf>
		LCD_PrintStr(20, 400, 0, 0x841FU, temp_buff, 5);
 8002a80:	2305      	movs	r3, #5
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	f107 0308 	add.w	r3, r7, #8
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	f248 431f 	movw	r3, #33823	; 0x841f
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002a94:	2014      	movs	r0, #20
 8002a96:	f7fe f9cf 	bl	8000e38 <LCD_PrintStr>
		sprintf(temp_buff, "%02X\0", ov7670_read_register(address));
 8002a9a:	89fb      	ldrh	r3, [r7, #14]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe ffa0 	bl	80019e4 <ov7670_read_register>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f107 0308 	add.w	r3, r7, #8
 8002aac:	4940      	ldr	r1, [pc, #256]	; (8002bb0 <serial_protocol+0x1d8>)
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f006 fec6 	bl	8009840 <siprintf>
		LCD_PrintStr(20, 440, 0, 0x841FU, temp_buff, 5);
 8002ab4:	2305      	movs	r3, #5
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	f107 0308 	add.w	r3, r7, #8
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	f248 431f 	movw	r3, #33823	; 0x841f
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8002ac8:	2014      	movs	r0, #20
 8002aca:	f7fe f9b5 	bl	8000e38 <LCD_PrintStr>
	{
		token = strtok(NULL, ",");
		if (strncmp(token, "touch", 5) == 00)
			HAL_EXTI_GenerateSWI(&hexti_touch_YU);
	}
}
 8002ace:	e066      	b.n	8002b9e <serial_protocol+0x1c6>
	else if (strncmp(buff, "OVR", 3) == 0)
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	4938      	ldr	r1, [pc, #224]	; (8002bb4 <serial_protocol+0x1dc>)
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f006 fed3 	bl	8009880 <strncmp>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d146      	bne.n	8002b6e <serial_protocol+0x196>
		token = strtok(NULL, ",");
 8002ae0:	4931      	ldr	r1, [pc, #196]	; (8002ba8 <serial_protocol+0x1d0>)
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f006 fef2 	bl	80098cc <strtok>
 8002ae8:	6138      	str	r0, [r7, #16]
		strncpy(temp_buff, token, 2);
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	2202      	movs	r2, #2
 8002af0:	6939      	ldr	r1, [r7, #16]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f006 fed6 	bl	80098a4 <strncpy>
		address = strtoll(temp_buff, NULL, 16);
 8002af8:	f107 0308 	add.w	r3, r7, #8
 8002afc:	2210      	movs	r2, #16
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f006 ffd5 	bl	8009ab0 <strtoll>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	81fb      	strh	r3, [r7, #14]
		value = ov7670_read_register(address);
 8002b0e:	89fb      	ldrh	r3, [r7, #14]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe ff66 	bl	80019e4 <ov7670_read_register>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	82fb      	strh	r3, [r7, #22]
		sprintf(temp_buff, "%02X\0", address);
 8002b1c:	89fa      	ldrh	r2, [r7, #14]
 8002b1e:	f107 0308 	add.w	r3, r7, #8
 8002b22:	4923      	ldr	r1, [pc, #140]	; (8002bb0 <serial_protocol+0x1d8>)
 8002b24:	4618      	mov	r0, r3
 8002b26:	f006 fe8b 	bl	8009840 <siprintf>
		LCD_PrintStr(20, 400, 0, 0x841FU, temp_buff, 5);
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	f248 431f 	movw	r3, #33823	; 0x841f
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002b3e:	2014      	movs	r0, #20
 8002b40:	f7fe f97a 	bl	8000e38 <LCD_PrintStr>
		sprintf(temp_buff, "%02X\0", value);
 8002b44:	8afa      	ldrh	r2, [r7, #22]
 8002b46:	f107 0308 	add.w	r3, r7, #8
 8002b4a:	4919      	ldr	r1, [pc, #100]	; (8002bb0 <serial_protocol+0x1d8>)
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f006 fe77 	bl	8009840 <siprintf>
		LCD_PrintStr(20, 440, 0, 0x841FU, temp_buff, 5);
 8002b52:	2305      	movs	r3, #5
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	f107 0308 	add.w	r3, r7, #8
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	f248 431f 	movw	r3, #33823	; 0x841f
 8002b60:	2200      	movs	r2, #0
 8002b62:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8002b66:	2014      	movs	r0, #20
 8002b68:	f7fe f966 	bl	8000e38 <LCD_PrintStr>
}
 8002b6c:	e017      	b.n	8002b9e <serial_protocol+0x1c6>
	else if (strncmp(buff, "SWI", 3) == 0)
 8002b6e:	2203      	movs	r2, #3
 8002b70:	4911      	ldr	r1, [pc, #68]	; (8002bb8 <serial_protocol+0x1e0>)
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f006 fe84 	bl	8009880 <strncmp>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <serial_protocol+0x1c6>
		token = strtok(NULL, ",");
 8002b7e:	490a      	ldr	r1, [pc, #40]	; (8002ba8 <serial_protocol+0x1d0>)
 8002b80:	2000      	movs	r0, #0
 8002b82:	f006 fea3 	bl	80098cc <strtok>
 8002b86:	6138      	str	r0, [r7, #16]
		if (strncmp(token, "touch", 5) == 00)
 8002b88:	2205      	movs	r2, #5
 8002b8a:	490c      	ldr	r1, [pc, #48]	; (8002bbc <serial_protocol+0x1e4>)
 8002b8c:	6938      	ldr	r0, [r7, #16]
 8002b8e:	f006 fe77 	bl	8009880 <strncmp>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <serial_protocol+0x1c6>
			HAL_EXTI_GenerateSWI(&hexti_touch_YU);
 8002b98:	4809      	ldr	r0, [pc, #36]	; (8002bc0 <serial_protocol+0x1e8>)
 8002b9a:	f001 fa07 	bl	8003fac <HAL_EXTI_GenerateSWI>
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	0800a54c 	.word	0x0800a54c
 8002bac:	0800a550 	.word	0x0800a550
 8002bb0:	0800a554 	.word	0x0800a554
 8002bb4:	0800a55c 	.word	0x0800a55c
 8002bb8:	0800a560 	.word	0x0800a560
 8002bbc:	0800a564 	.word	0x0800a564
 8002bc0:	2000000c 	.word	0x2000000c

08002bc4 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <MX_USART6_UART_Init+0x4c>)
 8002bca:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <MX_USART6_UART_Init+0x50>)
 8002bcc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <MX_USART6_UART_Init+0x4c>)
 8002bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bd4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <MX_USART6_UART_Init+0x4c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <MX_USART6_UART_Init+0x4c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <MX_USART6_UART_Init+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <MX_USART6_UART_Init+0x4c>)
 8002bea:	220c      	movs	r2, #12
 8002bec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <MX_USART6_UART_Init+0x4c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <MX_USART6_UART_Init+0x4c>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002bfa:	4805      	ldr	r0, [pc, #20]	; (8002c10 <MX_USART6_UART_Init+0x4c>)
 8002bfc:	f005 f996 	bl	8007f2c <HAL_UART_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002c06:	f7fe fdfb 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20025f30 	.word	0x20025f30
 8002c14:	40011400 	.word	0x40011400

08002c18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1e      	ldr	r2, [pc, #120]	; (8002cb0 <HAL_UART_MspInit+0x98>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d136      	bne.n	8002ca8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_UART_MspInit+0x9c>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	4a1c      	ldr	r2, [pc, #112]	; (8002cb4 <HAL_UART_MspInit+0x9c>)
 8002c44:	f043 0320 	orr.w	r3, r3, #32
 8002c48:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <HAL_UART_MspInit+0x9c>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <HAL_UART_MspInit+0x9c>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <HAL_UART_MspInit+0x9c>)
 8002c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c64:	6313      	str	r3, [r2, #48]	; 0x30
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_UART_MspInit+0x9c>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8002c72:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c84:	2308      	movs	r3, #8
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	480a      	ldr	r0, [pc, #40]	; (8002cb8 <HAL_UART_MspInit+0xa0>)
 8002c90:	f001 f9a4 	bl	8003fdc <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2100      	movs	r1, #0
 8002c98:	2047      	movs	r0, #71	; 0x47
 8002c9a:	f000 fdaa 	bl	80037f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002c9e:	2047      	movs	r0, #71	; 0x47
 8002ca0:	f000 fdc3 	bl	800382a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */
    uart_init();
 8002ca4:	f7ff fc7c 	bl	80025a0 <uart_init>
  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3728      	adds	r7, #40	; 0x28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40011400 	.word	0x40011400
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40021800 	.word	0x40021800

08002cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cc0:	480d      	ldr	r0, [pc, #52]	; (8002cf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cc2:	490e      	ldr	r1, [pc, #56]	; (8002cfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cc4:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc8:	e002      	b.n	8002cd0 <LoopCopyDataInit>

08002cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cce:	3304      	adds	r3, #4

08002cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cd4:	d3f9      	bcc.n	8002cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cd6:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cd8:	4c0b      	ldr	r4, [pc, #44]	; (8002d08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cdc:	e001      	b.n	8002ce2 <LoopFillZerobss>

08002cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ce0:	3204      	adds	r2, #4

08002ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ce4:	d3fb      	bcc.n	8002cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ce6:	f7ff f91f 	bl	8001f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cea:	f005 ffd7 	bl	8008c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cee:	f7fe fccf 	bl	8001690 <main>
  bx  lr    
 8002cf2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002cf4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cfc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002d00:	0801c168 	.word	0x0801c168
  ldr r2, =_sbss
 8002d04:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002d08:	20025f88 	.word	0x20025f88

08002d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d0c:	e7fe      	b.n	8002d0c <ADC_IRQHandler>
	...

08002d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <HAL_Init+0x40>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0d      	ldr	r2, [pc, #52]	; (8002d50 <HAL_Init+0x40>)
 8002d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_Init+0x40>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <HAL_Init+0x40>)
 8002d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_Init+0x40>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a07      	ldr	r2, [pc, #28]	; (8002d50 <HAL_Init+0x40>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d38:	2003      	movs	r0, #3
 8002d3a:	f000 fd4f 	bl	80037dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f000 f808 	bl	8002d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d44:	f7fe ff84 	bl	8001c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023c00 	.word	0x40023c00

08002d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_InitTick+0x54>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_InitTick+0x58>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	4619      	mov	r1, r3
 8002d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fd75 	bl	8003862 <HAL_SYSTICK_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00e      	b.n	8002da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b0f      	cmp	r3, #15
 8002d86:	d80a      	bhi.n	8002d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d90:	f000 fd2f 	bl	80037f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d94:	4a06      	ldr	r2, [pc, #24]	; (8002db0 <HAL_InitTick+0x5c>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e000      	b.n	8002da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000004 	.word	0x20000004
 8002dac:	20000028 	.word	0x20000028
 8002db0:	20000024 	.word	0x20000024

08002db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_IncTick+0x20>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_IncTick+0x24>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_IncTick+0x24>)
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000028 	.word	0x20000028
 8002dd8:	20025f74 	.word	0x20025f74

08002ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return uwTick;
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <HAL_GetTick+0x14>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20025f74 	.word	0x20025f74

08002df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dfc:	f7ff ffee 	bl	8002ddc <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e0c:	d005      	beq.n	8002e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <HAL_Delay+0x44>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e1a:	bf00      	nop
 8002e1c:	f7ff ffde 	bl	8002ddc <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d8f7      	bhi.n	8002e1c <HAL_Delay+0x28>
  {
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000028 	.word	0x20000028

08002e3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e033      	b.n	8002eba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fbf6 	bl	800064c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d118      	bne.n	8002eac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e82:	f023 0302 	bic.w	r3, r3, #2
 8002e86:	f043 0202 	orr.w	r2, r3, #2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fa96 	bl	80033c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
 8002eaa:	e001      	b.n	8002eb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_Start+0x1a>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e097      	b.n	800300e <HAL_ADC_Start+0x14a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d018      	beq.n	8002f26 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f04:	4b45      	ldr	r3, [pc, #276]	; (800301c <HAL_ADC_Start+0x158>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a45      	ldr	r2, [pc, #276]	; (8003020 <HAL_ADC_Start+0x15c>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9a      	lsrs	r2, r3, #18
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f18:	e002      	b.n	8002f20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f9      	bne.n	8002f1a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d15f      	bne.n	8002ff4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	d106      	bne.n	8002f82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f023 0206 	bic.w	r2, r3, #6
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	645a      	str	r2, [r3, #68]	; 0x44
 8002f80:	e002      	b.n	8002f88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f90:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_ADC_Start+0x160>)
 8002f92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f9c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10f      	bne.n	8002fca <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d129      	bne.n	800300c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	e020      	b.n	800300c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a16      	ldr	r2, [pc, #88]	; (8003028 <HAL_ADC_Start+0x164>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d11b      	bne.n	800300c <HAL_ADC_Start+0x148>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d114      	bne.n	800300c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ff0:	609a      	str	r2, [r3, #8]
 8002ff2:	e00b      	b.n	800300c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f043 0210 	orr.w	r2, r3, #16
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f043 0201 	orr.w	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20000004 	.word	0x20000004
 8003020:	431bde83 	.word	0x431bde83
 8003024:	40012300 	.word	0x40012300
 8003028:	40012000 	.word	0x40012000

0800302c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003048:	d113      	bne.n	8003072 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003058:	d10b      	bne.n	8003072 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0220 	orr.w	r2, r3, #32
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e063      	b.n	800313a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003072:	f7ff feb3 	bl	8002ddc <HAL_GetTick>
 8003076:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003078:	e021      	b.n	80030be <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003080:	d01d      	beq.n	80030be <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d007      	beq.n	8003098 <HAL_ADC_PollForConversion+0x6c>
 8003088:	f7ff fea8 	bl	8002ddc <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d212      	bcs.n	80030be <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d00b      	beq.n	80030be <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f043 0204 	orr.w	r2, r3, #4
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e03d      	b.n	800313a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d1d6      	bne.n	800307a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0212 	mvn.w	r2, #18
 80030d4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d123      	bne.n	8003138 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d11f      	bne.n	8003138 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003102:	2b00      	cmp	r3, #0
 8003104:	d006      	beq.n	8003114 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003110:	2b00      	cmp	r3, #0
 8003112:	d111      	bne.n	8003138 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d105      	bne.n	8003138 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x1c>
 8003174:	2302      	movs	r3, #2
 8003176:	e113      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x244>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b09      	cmp	r3, #9
 8003186:	d925      	bls.n	80031d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68d9      	ldr	r1, [r3, #12]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	b29b      	uxth	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	3b1e      	subs	r3, #30
 800319e:	2207      	movs	r2, #7
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43da      	mvns	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	400a      	ands	r2, r1
 80031ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68d9      	ldr	r1, [r3, #12]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	4618      	mov	r0, r3
 80031c0:	4603      	mov	r3, r0
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4403      	add	r3, r0
 80031c6:	3b1e      	subs	r3, #30
 80031c8:	409a      	lsls	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	e022      	b.n	800321a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6919      	ldr	r1, [r3, #16]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	2207      	movs	r2, #7
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	400a      	ands	r2, r1
 80031f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6919      	ldr	r1, [r3, #16]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	4618      	mov	r0, r3
 800320a:	4603      	mov	r3, r0
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4403      	add	r3, r0
 8003210:	409a      	lsls	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b06      	cmp	r3, #6
 8003220:	d824      	bhi.n	800326c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	3b05      	subs	r3, #5
 8003234:	221f      	movs	r2, #31
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	400a      	ands	r2, r1
 8003242:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	b29b      	uxth	r3, r3
 8003250:	4618      	mov	r0, r3
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	3b05      	subs	r3, #5
 800325e:	fa00 f203 	lsl.w	r2, r0, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	635a      	str	r2, [r3, #52]	; 0x34
 800326a:	e04c      	b.n	8003306 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b0c      	cmp	r3, #12
 8003272:	d824      	bhi.n	80032be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	3b23      	subs	r3, #35	; 0x23
 8003286:	221f      	movs	r2, #31
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43da      	mvns	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	400a      	ands	r2, r1
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	4618      	mov	r0, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	3b23      	subs	r3, #35	; 0x23
 80032b0:	fa00 f203 	lsl.w	r2, r0, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
 80032bc:	e023      	b.n	8003306 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	3b41      	subs	r3, #65	; 0x41
 80032d0:	221f      	movs	r2, #31
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	400a      	ands	r2, r1
 80032de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	4618      	mov	r0, r3
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	3b41      	subs	r3, #65	; 0x41
 80032fa:	fa00 f203 	lsl.w	r2, r0, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003306:	4b29      	ldr	r3, [pc, #164]	; (80033ac <HAL_ADC_ConfigChannel+0x250>)
 8003308:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a28      	ldr	r2, [pc, #160]	; (80033b0 <HAL_ADC_ConfigChannel+0x254>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10f      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x1d8>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b12      	cmp	r3, #18
 800331a:	d10b      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1d      	ldr	r2, [pc, #116]	; (80033b0 <HAL_ADC_ConfigChannel+0x254>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d12b      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x23a>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <HAL_ADC_ConfigChannel+0x258>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d003      	beq.n	8003350 <HAL_ADC_ConfigChannel+0x1f4>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b11      	cmp	r3, #17
 800334e:	d122      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a11      	ldr	r2, [pc, #68]	; (80033b4 <HAL_ADC_ConfigChannel+0x258>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d111      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <HAL_ADC_ConfigChannel+0x25c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a11      	ldr	r2, [pc, #68]	; (80033bc <HAL_ADC_ConfigChannel+0x260>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	0c9a      	lsrs	r2, r3, #18
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003388:	e002      	b.n	8003390 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	3b01      	subs	r3, #1
 800338e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f9      	bne.n	800338a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	40012300 	.word	0x40012300
 80033b0:	40012000 	.word	0x40012000
 80033b4:	10000012 	.word	0x10000012
 80033b8:	20000004 	.word	0x20000004
 80033bc:	431bde83 	.word	0x431bde83

080033c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033c8:	4b79      	ldr	r3, [pc, #484]	; (80035b0 <ADC_Init+0x1f0>)
 80033ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	021a      	lsls	r2, r3, #8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003418:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800343a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6899      	ldr	r1, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	4a58      	ldr	r2, [pc, #352]	; (80035b4 <ADC_Init+0x1f4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d022      	beq.n	800349e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003466:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6899      	ldr	r1, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6899      	ldr	r1, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	e00f      	b.n	80034be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0202 	bic.w	r2, r2, #2
 80034cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6899      	ldr	r1, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7e1b      	ldrb	r3, [r3, #24]
 80034d8:	005a      	lsls	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01b      	beq.n	8003524 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800350a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	3b01      	subs	r3, #1
 8003518:	035a      	lsls	r2, r3, #13
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	e007      	b.n	8003534 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003532:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	3b01      	subs	r3, #1
 8003550:	051a      	lsls	r2, r3, #20
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003568:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6899      	ldr	r1, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003576:	025a      	lsls	r2, r3, #9
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6899      	ldr	r1, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	029a      	lsls	r2, r3, #10
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]
}
 80035a4:	bf00      	nop
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	40012300 	.word	0x40012300
 80035b4:	0f000001 	.word	0x0f000001

080035b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <__NVIC_SetPriorityGrouping+0x44>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035d4:	4013      	ands	r3, r2
 80035d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ea:	4a04      	ldr	r2, [pc, #16]	; (80035fc <__NVIC_SetPriorityGrouping+0x44>)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	60d3      	str	r3, [r2, #12]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003604:	4b04      	ldr	r3, [pc, #16]	; (8003618 <__NVIC_GetPriorityGrouping+0x18>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	0a1b      	lsrs	r3, r3, #8
 800360a:	f003 0307 	and.w	r3, r3, #7
}
 800360e:	4618      	mov	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	2b00      	cmp	r3, #0
 800362c:	db0b      	blt.n	8003646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	f003 021f 	and.w	r2, r3, #31
 8003634:	4907      	ldr	r1, [pc, #28]	; (8003654 <__NVIC_EnableIRQ+0x38>)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2001      	movs	r0, #1
 800363e:	fa00 f202 	lsl.w	r2, r0, r2
 8003642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	e000e100 	.word	0xe000e100

08003658 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	2b00      	cmp	r3, #0
 8003668:	db12      	blt.n	8003690 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	490a      	ldr	r1, [pc, #40]	; (800369c <__NVIC_DisableIRQ+0x44>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2001      	movs	r0, #1
 800367a:	fa00 f202 	lsl.w	r2, r0, r2
 800367e:	3320      	adds	r3, #32
 8003680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003684:	f3bf 8f4f 	dsb	sy
}
 8003688:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800368a:	f3bf 8f6f 	isb	sy
}
 800368e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000e100 	.word	0xe000e100

080036a0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	db0c      	blt.n	80036cc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	f003 021f 	and.w	r2, r3, #31
 80036b8:	4907      	ldr	r1, [pc, #28]	; (80036d8 <__NVIC_ClearPendingIRQ+0x38>)
 80036ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	2001      	movs	r0, #1
 80036c2:	fa00 f202 	lsl.w	r2, r0, r2
 80036c6:	3360      	adds	r3, #96	; 0x60
 80036c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000e100 	.word	0xe000e100

080036dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	6039      	str	r1, [r7, #0]
 80036e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	db0a      	blt.n	8003706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	490c      	ldr	r1, [pc, #48]	; (8003728 <__NVIC_SetPriority+0x4c>)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	0112      	lsls	r2, r2, #4
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	440b      	add	r3, r1
 8003700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003704:	e00a      	b.n	800371c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4908      	ldr	r1, [pc, #32]	; (800372c <__NVIC_SetPriority+0x50>)
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	3b04      	subs	r3, #4
 8003714:	0112      	lsls	r2, r2, #4
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	440b      	add	r3, r1
 800371a:	761a      	strb	r2, [r3, #24]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000e100 	.word	0xe000e100
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003730:	b480      	push	{r7}
 8003732:	b089      	sub	sp, #36	; 0x24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f1c3 0307 	rsb	r3, r3, #7
 800374a:	2b04      	cmp	r3, #4
 800374c:	bf28      	it	cs
 800374e:	2304      	movcs	r3, #4
 8003750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3304      	adds	r3, #4
 8003756:	2b06      	cmp	r3, #6
 8003758:	d902      	bls.n	8003760 <NVIC_EncodePriority+0x30>
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3b03      	subs	r3, #3
 800375e:	e000      	b.n	8003762 <NVIC_EncodePriority+0x32>
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43da      	mvns	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	401a      	ands	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	43d9      	mvns	r1, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003788:	4313      	orrs	r3, r2
         );
}
 800378a:	4618      	mov	r0, r3
 800378c:	3724      	adds	r7, #36	; 0x24
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a8:	d301      	bcc.n	80037ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037aa:	2301      	movs	r3, #1
 80037ac:	e00f      	b.n	80037ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ae:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <SysTick_Config+0x40>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037b6:	210f      	movs	r1, #15
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037bc:	f7ff ff8e 	bl	80036dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <SysTick_Config+0x40>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037c6:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <SysTick_Config+0x40>)
 80037c8:	2207      	movs	r2, #7
 80037ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	e000e010 	.word	0xe000e010

080037dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fee7 	bl	80035b8 <__NVIC_SetPriorityGrouping>
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b086      	sub	sp, #24
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	4603      	mov	r3, r0
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003804:	f7ff fefc 	bl	8003600 <__NVIC_GetPriorityGrouping>
 8003808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f7ff ff8e 	bl	8003730 <NVIC_EncodePriority>
 8003814:	4602      	mov	r2, r0
 8003816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff5d 	bl	80036dc <__NVIC_SetPriority>
}
 8003822:	bf00      	nop
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	4603      	mov	r3, r0
 8003832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff feef 	bl	800361c <__NVIC_EnableIRQ>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	4603      	mov	r3, r0
 800384e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff feff 	bl	8003658 <__NVIC_DisableIRQ>
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ff94 	bl	8003798 <SysTick_Config>
 8003870:	4603      	mov	r3, r0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ff09 	bl	80036a0 <__NVIC_ClearPendingIRQ>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7ff fa9a 	bl	8002ddc <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e099      	b.n	80039e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038d4:	e00f      	b.n	80038f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038d6:	f7ff fa81 	bl	8002ddc <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	d908      	bls.n	80038f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2203      	movs	r2, #3
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e078      	b.n	80039e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e8      	bne.n	80038d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <HAL_DMA_Init+0x158>)
 8003910:	4013      	ands	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003922:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	2b04      	cmp	r3, #4
 800394e:	d107      	bne.n	8003960 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	4313      	orrs	r3, r2
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f023 0307 	bic.w	r3, r3, #7
 8003976:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	2b04      	cmp	r3, #4
 8003988:	d117      	bne.n	80039ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00e      	beq.n	80039ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f969 	bl	8003c74 <DMA_CheckFifoParam>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2240      	movs	r2, #64	; 0x40
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039b6:	2301      	movs	r3, #1
 80039b8:	e016      	b.n	80039e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f920 	bl	8003c08 <DMA_CalcBaseAndBitshift>
 80039c8:	4603      	mov	r3, r0
 80039ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	223f      	movs	r2, #63	; 0x3f
 80039d2:	409a      	lsls	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	e010803f 	.word	0xe010803f

080039f4 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_DMA_Start+0x20>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e026      	b.n	8003a62 <HAL_DMA_Start+0x6e>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d115      	bne.n	8003a54 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f8b4 	bl	8003baa <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e005      	b.n	8003a60 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7ff f9b0 	bl	8002ddc <HAL_GetTick>
 8003a7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d008      	beq.n	8003a9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2280      	movs	r2, #128	; 0x80
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e052      	b.n	8003b42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0216 	bic.w	r2, r2, #22
 8003aaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <HAL_DMA_Abort+0x62>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0208 	bic.w	r2, r2, #8
 8003ada:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aec:	e013      	b.n	8003b16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aee:	f7ff f975 	bl	8002ddc <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b05      	cmp	r3, #5
 8003afa:	d90c      	bls.n	8003b16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e015      	b.n	8003b42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e4      	bne.n	8003aee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	223f      	movs	r2, #63	; 0x3f
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d004      	beq.n	8003b68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2280      	movs	r2, #128	; 0x80
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e00c      	b.n	8003b82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2205      	movs	r2, #5
 8003b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b9c:	b2db      	uxtb	r3, r3
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bc6:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d108      	bne.n	8003bea <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003be8:	e007      	b.n	8003bfa <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	60da      	str	r2, [r3, #12]
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	3b10      	subs	r3, #16
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <DMA_CalcBaseAndBitshift+0x64>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c22:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <DMA_CalcBaseAndBitshift+0x68>)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d909      	bls.n	8003c4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c3e:	f023 0303 	bic.w	r3, r3, #3
 8003c42:	1d1a      	adds	r2, r3, #4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	659a      	str	r2, [r3, #88]	; 0x58
 8003c48:	e007      	b.n	8003c5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	aaaaaaab 	.word	0xaaaaaaab
 8003c70:	0801bf04 	.word	0x0801bf04

08003c74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d11f      	bne.n	8003cce <DMA_CheckFifoParam+0x5a>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d856      	bhi.n	8003d42 <DMA_CheckFifoParam+0xce>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <DMA_CheckFifoParam+0x28>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cad 	.word	0x08003cad
 8003ca0:	08003cbf 	.word	0x08003cbf
 8003ca4:	08003cad 	.word	0x08003cad
 8003ca8:	08003d43 	.word	0x08003d43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d046      	beq.n	8003d46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cbc:	e043      	b.n	8003d46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cc6:	d140      	bne.n	8003d4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ccc:	e03d      	b.n	8003d4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd6:	d121      	bne.n	8003d1c <DMA_CheckFifoParam+0xa8>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d837      	bhi.n	8003d4e <DMA_CheckFifoParam+0xda>
 8003cde:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <DMA_CheckFifoParam+0x70>)
 8003ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce4:	08003cf5 	.word	0x08003cf5
 8003ce8:	08003cfb 	.word	0x08003cfb
 8003cec:	08003cf5 	.word	0x08003cf5
 8003cf0:	08003d0d 	.word	0x08003d0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf8:	e030      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d025      	beq.n	8003d52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d0a:	e022      	b.n	8003d52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d14:	d11f      	bne.n	8003d56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d1a:	e01c      	b.n	8003d56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d903      	bls.n	8003d2a <DMA_CheckFifoParam+0xb6>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d003      	beq.n	8003d30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d28:	e018      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d2e:	e015      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00e      	beq.n	8003d5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d40:	e00b      	b.n	8003d5a <DMA_CheckFifoParam+0xe6>
      break;
 8003d42:	bf00      	nop
 8003d44:	e00a      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      break;
 8003d46:	bf00      	nop
 8003d48:	e008      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e006      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e004      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      break;
 8003d52:	bf00      	nop
 8003d54:	e002      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d56:	bf00      	nop
 8003d58:	e000      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      break;
 8003d5a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop

08003d6c <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_EXTI_SetConfigLine+0x16>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e08f      	b.n	8003ea6 <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8003d98:	2201      	movs	r2, #1
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d052      	beq.n	8003e54 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d006      	beq.n	8003dc8 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 8003dba:	4b3e      	ldr	r3, [pc, #248]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	493d      	ldr	r1, [pc, #244]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
 8003dc6:	e006      	b.n	8003dd6 <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8003dc8:	4b3a      	ldr	r3, [pc, #232]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	4938      	ldr	r1, [pc, #224]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 8003de2:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	4933      	ldr	r1, [pc, #204]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60cb      	str	r3, [r1, #12]
 8003dee:	e006      	b.n	8003dfe <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8003df0:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	492e      	ldr	r1, [pc, #184]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003e06:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003e0a:	d123      	bne.n	8003e54 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8003e0c:	4a2a      	ldr	r2, [pc, #168]	; (8003eb8 <HAL_EXTI_SetConfigLine+0x14c>)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	3302      	adds	r3, #2
 8003e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e18:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	220f      	movs	r2, #15
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8003e46:	491c      	ldr	r1, [pc, #112]	; (8003eb8 <HAL_EXTI_SetConfigLine+0x14c>)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d006      	beq.n	8003e6e <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 8003e60:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4913      	ldr	r1, [pc, #76]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	600b      	str	r3, [r1, #0]
 8003e6c:	e006      	b.n	8003e7c <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8003e6e:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	490f      	ldr	r1, [pc, #60]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d006      	beq.n	8003e96 <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	4909      	ldr	r1, [pc, #36]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
 8003e94:	e006      	b.n	8003ea4 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 8003e96:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	4905      	ldr	r1, [pc, #20]	; (8003eb4 <HAL_EXTI_SetConfigLine+0x148>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40013c00 	.word	0x40013c00
 8003eb8:	40013800 	.word	0x40013800

08003ebc <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e04c      	b.n	8003f68 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8003ed8:	2201      	movs	r2, #1
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 8003ee2:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <HAL_EXTI_ClearConfigLine+0xb8>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	4922      	ldr	r1, [pc, #136]	; (8003f74 <HAL_EXTI_ClearConfigLine+0xb8>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 8003ef0:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <HAL_EXTI_ClearConfigLine+0xb8>)
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	491e      	ldr	r1, [pc, #120]	; (8003f74 <HAL_EXTI_ClearConfigLine+0xb8>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d02d      	beq.n	8003f66 <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <HAL_EXTI_ClearConfigLine+0xb8>)
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	4918      	ldr	r1, [pc, #96]	; (8003f74 <HAL_EXTI_ClearConfigLine+0xb8>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 8003f18:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <HAL_EXTI_ClearConfigLine+0xb8>)
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	4914      	ldr	r1, [pc, #80]	; (8003f74 <HAL_EXTI_ClearConfigLine+0xb8>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003f2e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003f32:	d118      	bne.n	8003f66 <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8003f34:	4a10      	ldr	r2, [pc, #64]	; (8003f78 <HAL_EXTI_ClearConfigLine+0xbc>)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f40:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	220f      	movs	r2, #15
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4013      	ands	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8003f58:	4907      	ldr	r1, [pc, #28]	; (8003f78 <HAL_EXTI_ClearConfigLine+0xbc>)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	3302      	adds	r3, #2
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	40013c00 	.word	0x40013c00
 8003f78:	40013800 	.word	0x40013800

08003f7c <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 031f 	and.w	r3, r3, #31
 8003f8e:	2201      	movs	r2, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003f96:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <HAL_EXTI_ClearPending+0x2c>)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6153      	str	r3, [r2, #20]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40013c00 	.word	0x40013c00

08003fac <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8003fc4:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <HAL_EXTI_GenerateSWI+0x2c>)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6113      	str	r3, [r2, #16]
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40013c00 	.word	0x40013c00

08003fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b089      	sub	sp, #36	; 0x24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	e165      	b.n	80042c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	429a      	cmp	r2, r3
 8004012:	f040 8154 	bne.w	80042be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b01      	cmp	r3, #1
 8004020:	d005      	beq.n	800402e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800402a:	2b02      	cmp	r3, #2
 800402c:	d130      	bne.n	8004090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	2203      	movs	r2, #3
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004064:	2201      	movs	r2, #1
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	091b      	lsrs	r3, r3, #4
 800407a:	f003 0201 	and.w	r2, r3, #1
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4313      	orrs	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	2b03      	cmp	r3, #3
 800409a:	d017      	beq.n	80040cc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	2203      	movs	r2, #3
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d123      	bne.n	8004120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	08da      	lsrs	r2, r3, #3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3208      	adds	r2, #8
 80040e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	220f      	movs	r2, #15
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4013      	ands	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4313      	orrs	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	08da      	lsrs	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3208      	adds	r2, #8
 800411a:	69b9      	ldr	r1, [r7, #24]
 800411c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	2203      	movs	r2, #3
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 0203 	and.w	r2, r3, #3
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4313      	orrs	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80ae 	beq.w	80042be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	4b5d      	ldr	r3, [pc, #372]	; (80042dc <HAL_GPIO_Init+0x300>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	4a5c      	ldr	r2, [pc, #368]	; (80042dc <HAL_GPIO_Init+0x300>)
 800416c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004170:	6453      	str	r3, [r2, #68]	; 0x44
 8004172:	4b5a      	ldr	r3, [pc, #360]	; (80042dc <HAL_GPIO_Init+0x300>)
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800417e:	4a58      	ldr	r2, [pc, #352]	; (80042e0 <HAL_GPIO_Init+0x304>)
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	089b      	lsrs	r3, r3, #2
 8004184:	3302      	adds	r3, #2
 8004186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	220f      	movs	r2, #15
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4013      	ands	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a4f      	ldr	r2, [pc, #316]	; (80042e4 <HAL_GPIO_Init+0x308>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d025      	beq.n	80041f6 <HAL_GPIO_Init+0x21a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a4e      	ldr	r2, [pc, #312]	; (80042e8 <HAL_GPIO_Init+0x30c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d01f      	beq.n	80041f2 <HAL_GPIO_Init+0x216>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a4d      	ldr	r2, [pc, #308]	; (80042ec <HAL_GPIO_Init+0x310>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d019      	beq.n	80041ee <HAL_GPIO_Init+0x212>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a4c      	ldr	r2, [pc, #304]	; (80042f0 <HAL_GPIO_Init+0x314>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <HAL_GPIO_Init+0x20e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a4b      	ldr	r2, [pc, #300]	; (80042f4 <HAL_GPIO_Init+0x318>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00d      	beq.n	80041e6 <HAL_GPIO_Init+0x20a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a4a      	ldr	r2, [pc, #296]	; (80042f8 <HAL_GPIO_Init+0x31c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <HAL_GPIO_Init+0x206>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a49      	ldr	r2, [pc, #292]	; (80042fc <HAL_GPIO_Init+0x320>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d101      	bne.n	80041de <HAL_GPIO_Init+0x202>
 80041da:	2306      	movs	r3, #6
 80041dc:	e00c      	b.n	80041f8 <HAL_GPIO_Init+0x21c>
 80041de:	2307      	movs	r3, #7
 80041e0:	e00a      	b.n	80041f8 <HAL_GPIO_Init+0x21c>
 80041e2:	2305      	movs	r3, #5
 80041e4:	e008      	b.n	80041f8 <HAL_GPIO_Init+0x21c>
 80041e6:	2304      	movs	r3, #4
 80041e8:	e006      	b.n	80041f8 <HAL_GPIO_Init+0x21c>
 80041ea:	2303      	movs	r3, #3
 80041ec:	e004      	b.n	80041f8 <HAL_GPIO_Init+0x21c>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e002      	b.n	80041f8 <HAL_GPIO_Init+0x21c>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_GPIO_Init+0x21c>
 80041f6:	2300      	movs	r3, #0
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	f002 0203 	and.w	r2, r2, #3
 80041fe:	0092      	lsls	r2, r2, #2
 8004200:	4093      	lsls	r3, r2
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004208:	4935      	ldr	r1, [pc, #212]	; (80042e0 <HAL_GPIO_Init+0x304>)
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	089b      	lsrs	r3, r3, #2
 800420e:	3302      	adds	r3, #2
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004216:	4b3a      	ldr	r3, [pc, #232]	; (8004300 <HAL_GPIO_Init+0x324>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	43db      	mvns	r3, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4013      	ands	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800423a:	4a31      	ldr	r2, [pc, #196]	; (8004300 <HAL_GPIO_Init+0x324>)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004240:	4b2f      	ldr	r3, [pc, #188]	; (8004300 <HAL_GPIO_Init+0x324>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	43db      	mvns	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4013      	ands	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004264:	4a26      	ldr	r2, [pc, #152]	; (8004300 <HAL_GPIO_Init+0x324>)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800426a:	4b25      	ldr	r3, [pc, #148]	; (8004300 <HAL_GPIO_Init+0x324>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	43db      	mvns	r3, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4013      	ands	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800428e:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <HAL_GPIO_Init+0x324>)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004294:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <HAL_GPIO_Init+0x324>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042b8:	4a11      	ldr	r2, [pc, #68]	; (8004300 <HAL_GPIO_Init+0x324>)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3301      	adds	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2b0f      	cmp	r3, #15
 80042c8:	f67f ae96 	bls.w	8003ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3724      	adds	r7, #36	; 0x24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40013800 	.word	0x40013800
 80042e4:	40020000 	.word	0x40020000
 80042e8:	40020400 	.word	0x40020400
 80042ec:	40020800 	.word	0x40020800
 80042f0:	40020c00 	.word	0x40020c00
 80042f4:	40021000 	.word	0x40021000
 80042f8:	40021400 	.word	0x40021400
 80042fc:	40021800 	.word	0x40021800
 8004300:	40013c00 	.word	0x40013c00

08004304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	807b      	strh	r3, [r7, #2]
 8004310:	4613      	mov	r3, r2
 8004312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004314:	787b      	ldrb	r3, [r7, #1]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800431a:	887a      	ldrh	r2, [r7, #2]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004320:	e003      	b.n	800432a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004322:	887b      	ldrh	r3, [r7, #2]
 8004324:	041a      	lsls	r2, r3, #16
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	619a      	str	r2, [r3, #24]
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004342:	4b08      	ldr	r3, [pc, #32]	; (8004364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	4013      	ands	r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d006      	beq.n	800435c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800434e:	4a05      	ldr	r2, [pc, #20]	; (8004364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	4618      	mov	r0, r3
 8004358:	f7fd fd06 	bl	8001d68 <HAL_GPIO_EXTI_Callback>
  }
}
 800435c:	bf00      	nop
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40013c00 	.word	0x40013c00

08004368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e12b      	b.n	80045d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fd f8e2 	bl	8001558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2224      	movs	r2, #36	; 0x24
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043cc:	f002 fd0e 	bl	8006dec <HAL_RCC_GetPCLK1Freq>
 80043d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4a81      	ldr	r2, [pc, #516]	; (80045dc <HAL_I2C_Init+0x274>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d807      	bhi.n	80043ec <HAL_I2C_Init+0x84>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a80      	ldr	r2, [pc, #512]	; (80045e0 <HAL_I2C_Init+0x278>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	bf94      	ite	ls
 80043e4:	2301      	movls	r3, #1
 80043e6:	2300      	movhi	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e006      	b.n	80043fa <HAL_I2C_Init+0x92>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4a7d      	ldr	r2, [pc, #500]	; (80045e4 <HAL_I2C_Init+0x27c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	bf94      	ite	ls
 80043f4:	2301      	movls	r3, #1
 80043f6:	2300      	movhi	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e0e7      	b.n	80045d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a78      	ldr	r2, [pc, #480]	; (80045e8 <HAL_I2C_Init+0x280>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	0c9b      	lsrs	r3, r3, #18
 800440c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4a6a      	ldr	r2, [pc, #424]	; (80045dc <HAL_I2C_Init+0x274>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d802      	bhi.n	800443c <HAL_I2C_Init+0xd4>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3301      	adds	r3, #1
 800443a:	e009      	b.n	8004450 <HAL_I2C_Init+0xe8>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	4a69      	ldr	r2, [pc, #420]	; (80045ec <HAL_I2C_Init+0x284>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	3301      	adds	r3, #1
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	430b      	orrs	r3, r1
 8004456:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004462:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	495c      	ldr	r1, [pc, #368]	; (80045dc <HAL_I2C_Init+0x274>)
 800446c:	428b      	cmp	r3, r1
 800446e:	d819      	bhi.n	80044a4 <HAL_I2C_Init+0x13c>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1e59      	subs	r1, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	fbb1 f3f3 	udiv	r3, r1, r3
 800447e:	1c59      	adds	r1, r3, #1
 8004480:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004484:	400b      	ands	r3, r1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_I2C_Init+0x138>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1e59      	subs	r1, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	fbb1 f3f3 	udiv	r3, r1, r3
 8004498:	3301      	adds	r3, #1
 800449a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449e:	e051      	b.n	8004544 <HAL_I2C_Init+0x1dc>
 80044a0:	2304      	movs	r3, #4
 80044a2:	e04f      	b.n	8004544 <HAL_I2C_Init+0x1dc>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d111      	bne.n	80044d0 <HAL_I2C_Init+0x168>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1e58      	subs	r0, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6859      	ldr	r1, [r3, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	440b      	add	r3, r1
 80044ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80044be:	3301      	adds	r3, #1
 80044c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e012      	b.n	80044f6 <HAL_I2C_Init+0x18e>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1e58      	subs	r0, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	0099      	lsls	r1, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e6:	3301      	adds	r3, #1
 80044e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_I2C_Init+0x196>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e022      	b.n	8004544 <HAL_I2C_Init+0x1dc>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10e      	bne.n	8004524 <HAL_I2C_Init+0x1bc>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1e58      	subs	r0, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6859      	ldr	r1, [r3, #4]
 800450e:	460b      	mov	r3, r1
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	440b      	add	r3, r1
 8004514:	fbb0 f3f3 	udiv	r3, r0, r3
 8004518:	3301      	adds	r3, #1
 800451a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004522:	e00f      	b.n	8004544 <HAL_I2C_Init+0x1dc>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1e58      	subs	r0, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6859      	ldr	r1, [r3, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	0099      	lsls	r1, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	fbb0 f3f3 	udiv	r3, r0, r3
 800453a:	3301      	adds	r3, #1
 800453c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	6809      	ldr	r1, [r1, #0]
 8004548:	4313      	orrs	r3, r2
 800454a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004572:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6911      	ldr	r1, [r2, #16]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68d2      	ldr	r2, [r2, #12]
 800457e:	4311      	orrs	r1, r2
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	430b      	orrs	r3, r1
 8004586:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	000186a0 	.word	0x000186a0
 80045e0:	001e847f 	.word	0x001e847f
 80045e4:	003d08ff 	.word	0x003d08ff
 80045e8:	431bde83 	.word	0x431bde83
 80045ec:	10624dd3 	.word	0x10624dd3

080045f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	461a      	mov	r2, r3
 80045fc:	460b      	mov	r3, r1
 80045fe:	817b      	strh	r3, [r7, #10]
 8004600:	4613      	mov	r3, r2
 8004602:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004604:	f7fe fbea 	bl	8002ddc <HAL_GetTick>
 8004608:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b20      	cmp	r3, #32
 8004614:	f040 80e0 	bne.w	80047d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2319      	movs	r3, #25
 800461e:	2201      	movs	r2, #1
 8004620:	4970      	ldr	r1, [pc, #448]	; (80047e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f001 ffa8 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800462e:	2302      	movs	r3, #2
 8004630:	e0d3      	b.n	80047da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_I2C_Master_Transmit+0x50>
 800463c:	2302      	movs	r3, #2
 800463e:	e0cc      	b.n	80047da <HAL_I2C_Master_Transmit+0x1ea>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b01      	cmp	r3, #1
 8004654:	d007      	beq.n	8004666 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0201 	orr.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004674:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2221      	movs	r2, #33	; 0x21
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2210      	movs	r2, #16
 8004682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	893a      	ldrh	r2, [r7, #8]
 8004696:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a50      	ldr	r2, [pc, #320]	; (80047e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80046a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046a8:	8979      	ldrh	r1, [r7, #10]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	6a3a      	ldr	r2, [r7, #32]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f001 fd6a 	bl	8006188 <I2C_MasterRequestWrite>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e08d      	b.n	80047da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80046d4:	e066      	b.n	80047a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	6a39      	ldr	r1, [r7, #32]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f002 f822 	bl	8006724 <I2C_WaitOnTXEFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00d      	beq.n	8004702 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d107      	bne.n	80046fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e06b      	b.n	80047da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	781a      	ldrb	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b04      	cmp	r3, #4
 800473e:	d11b      	bne.n	8004778 <HAL_I2C_Master_Transmit+0x188>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d017      	beq.n	8004778 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	6a39      	ldr	r1, [r7, #32]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f002 f812 	bl	80067a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	2b04      	cmp	r3, #4
 800478e:	d107      	bne.n	80047a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e01a      	b.n	80047da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d194      	bne.n	80046d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e000      	b.n	80047da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80047d8:	2302      	movs	r3, #2
  }
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	00100002 	.word	0x00100002
 80047e8:	ffff0000 	.word	0xffff0000

080047ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08c      	sub	sp, #48	; 0x30
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	607a      	str	r2, [r7, #4]
 80047f6:	461a      	mov	r2, r3
 80047f8:	460b      	mov	r3, r1
 80047fa:	817b      	strh	r3, [r7, #10]
 80047fc:	4613      	mov	r3, r2
 80047fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004800:	f7fe faec 	bl	8002ddc <HAL_GetTick>
 8004804:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b20      	cmp	r3, #32
 8004810:	f040 820b 	bne.w	8004c2a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	2319      	movs	r3, #25
 800481a:	2201      	movs	r2, #1
 800481c:	497c      	ldr	r1, [pc, #496]	; (8004a10 <HAL_I2C_Master_Receive+0x224>)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f001 feaa 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800482a:	2302      	movs	r3, #2
 800482c:	e1fe      	b.n	8004c2c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_I2C_Master_Receive+0x50>
 8004838:	2302      	movs	r3, #2
 800483a:	e1f7      	b.n	8004c2c <HAL_I2C_Master_Receive+0x440>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b01      	cmp	r3, #1
 8004850:	d007      	beq.n	8004862 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2222      	movs	r2, #34	; 0x22
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2210      	movs	r2, #16
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	893a      	ldrh	r2, [r7, #8]
 8004892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4a5c      	ldr	r2, [pc, #368]	; (8004a14 <HAL_I2C_Master_Receive+0x228>)
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048a4:	8979      	ldrh	r1, [r7, #10]
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f001 fcee 	bl	800628c <I2C_MasterRequestRead>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e1b8      	b.n	8004c2c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d113      	bne.n	80048ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c2:	2300      	movs	r3, #0
 80048c4:	623b      	str	r3, [r7, #32]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	623b      	str	r3, [r7, #32]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	623b      	str	r3, [r7, #32]
 80048d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	e18c      	b.n	8004c04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d11b      	bne.n	800492a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004900:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004902:	2300      	movs	r3, #0
 8004904:	61fb      	str	r3, [r7, #28]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e16c      	b.n	8004c04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492e:	2b02      	cmp	r3, #2
 8004930:	d11b      	bne.n	800496a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004940:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004950:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	e14c      	b.n	8004c04 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004978:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004990:	e138      	b.n	8004c04 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004996:	2b03      	cmp	r3, #3
 8004998:	f200 80f1 	bhi.w	8004b7e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d123      	bne.n	80049ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f001 ff6f 	bl	800688c <I2C_WaitOnRXNEFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e139      	b.n	8004c2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049ea:	e10b      	b.n	8004c04 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d14e      	bne.n	8004a92 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	2200      	movs	r2, #0
 80049fc:	4906      	ldr	r1, [pc, #24]	; (8004a18 <HAL_I2C_Master_Receive+0x22c>)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f001 fdba 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e10e      	b.n	8004c2c <HAL_I2C_Master_Receive+0x440>
 8004a0e:	bf00      	nop
 8004a10:	00100002 	.word	0x00100002
 8004a14:	ffff0000 	.word	0xffff0000
 8004a18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a90:	e0b8      	b.n	8004c04 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	2200      	movs	r2, #0
 8004a9a:	4966      	ldr	r1, [pc, #408]	; (8004c34 <HAL_I2C_Master_Receive+0x448>)
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f001 fd6b 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0bf      	b.n	8004c2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	2200      	movs	r2, #0
 8004af6:	494f      	ldr	r1, [pc, #316]	; (8004c34 <HAL_I2C_Master_Receive+0x448>)
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f001 fd3d 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e091      	b.n	8004c2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b7c:	e042      	b.n	8004c04 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f001 fe82 	bl	800688c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e04c      	b.n	8004c2c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d118      	bne.n	8004c04 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f47f aec2 	bne.w	8004992 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e000      	b.n	8004c2c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004c2a:	2302      	movs	r3, #2
  }
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3728      	adds	r7, #40	; 0x28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	00010004 	.word	0x00010004

08004c38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b088      	sub	sp, #32
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c60:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d003      	beq.n	8004c70 <HAL_I2C_EV_IRQHandler+0x38>
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	2b40      	cmp	r3, #64	; 0x40
 8004c6c:	f040 80bd 	bne.w	8004dea <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10d      	bne.n	8004ca6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c90:	d003      	beq.n	8004c9a <HAL_I2C_EV_IRQHandler+0x62>
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c98:	d101      	bne.n	8004c9e <HAL_I2C_EV_IRQHandler+0x66>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <HAL_I2C_EV_IRQHandler+0x68>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	f000 812e 	beq.w	8004f02 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00c      	beq.n	8004cca <HAL_I2C_EV_IRQHandler+0x92>
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	0a5b      	lsrs	r3, r3, #9
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d006      	beq.n	8004cca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f001 fe6a 	bl	8006996 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fcbb 	bl	800563e <I2C_Master_SB>
 8004cc8:	e08e      	b.n	8004de8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	08db      	lsrs	r3, r3, #3
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_I2C_EV_IRQHandler+0xb2>
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	0a5b      	lsrs	r3, r3, #9
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fd31 	bl	800574a <I2C_Master_ADD10>
 8004ce8:	e07e      	b.n	8004de8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_I2C_EV_IRQHandler+0xd2>
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	0a5b      	lsrs	r3, r3, #9
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fd4b 	bl	800579e <I2C_Master_ADDR>
 8004d08:	e06e      	b.n	8004de8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	089b      	lsrs	r3, r3, #2
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d037      	beq.n	8004d86 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d24:	f000 80ef 	beq.w	8004f06 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	09db      	lsrs	r3, r3, #7
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00f      	beq.n	8004d54 <HAL_I2C_EV_IRQHandler+0x11c>
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	0a9b      	lsrs	r3, r3, #10
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <HAL_I2C_EV_IRQHandler+0x11c>
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	089b      	lsrs	r3, r3, #2
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d103      	bne.n	8004d54 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f948 	bl	8004fe2 <I2C_MasterTransmit_TXE>
 8004d52:	e049      	b.n	8004de8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	089b      	lsrs	r3, r3, #2
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80d2 	beq.w	8004f06 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	0a5b      	lsrs	r3, r3, #9
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 80cb 	beq.w	8004f06 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	2b10      	cmp	r3, #16
 8004d74:	d103      	bne.n	8004d7e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9cf 	bl	800511a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d7c:	e0c3      	b.n	8004f06 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fa33 	bl	80051ea <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d84:	e0bf      	b.n	8004f06 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d94:	f000 80b7 	beq.w	8004f06 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	099b      	lsrs	r3, r3, #6
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00f      	beq.n	8004dc4 <HAL_I2C_EV_IRQHandler+0x18c>
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	0a9b      	lsrs	r3, r3, #10
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d009      	beq.n	8004dc4 <HAL_I2C_EV_IRQHandler+0x18c>
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	089b      	lsrs	r3, r3, #2
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 faa3 	bl	8005308 <I2C_MasterReceive_RXNE>
 8004dc2:	e011      	b.n	8004de8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 809a 	beq.w	8004f06 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	0a5b      	lsrs	r3, r3, #9
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8093 	beq.w	8004f06 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fb42 	bl	800546a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004de6:	e08e      	b.n	8004f06 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004de8:	e08d      	b.n	8004f06 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d004      	beq.n	8004dfc <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	e007      	b.n	8004e0c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	085b      	lsrs	r3, r3, #1
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d012      	beq.n	8004e3e <HAL_I2C_EV_IRQHandler+0x206>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	0a5b      	lsrs	r3, r3, #9
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00c      	beq.n	8004e3e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004e34:	69b9      	ldr	r1, [r7, #24]
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 ff00 	bl	8005c3c <I2C_Slave_ADDR>
 8004e3c:	e066      	b.n	8004f0c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <HAL_I2C_EV_IRQHandler+0x226>
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	0a5b      	lsrs	r3, r3, #9
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 ff34 	bl	8005cc4 <I2C_Slave_STOPF>
 8004e5c:	e056      	b.n	8004f0c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e5e:	7bbb      	ldrb	r3, [r7, #14]
 8004e60:	2b21      	cmp	r3, #33	; 0x21
 8004e62:	d002      	beq.n	8004e6a <HAL_I2C_EV_IRQHandler+0x232>
 8004e64:	7bbb      	ldrb	r3, [r7, #14]
 8004e66:	2b29      	cmp	r3, #41	; 0x29
 8004e68:	d125      	bne.n	8004eb6 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	09db      	lsrs	r3, r3, #7
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00f      	beq.n	8004e96 <HAL_I2C_EV_IRQHandler+0x25e>
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	0a9b      	lsrs	r3, r3, #10
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_I2C_EV_IRQHandler+0x25e>
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	089b      	lsrs	r3, r3, #2
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d103      	bne.n	8004e96 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fe16 	bl	8005ac0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e94:	e039      	b.n	8004f0a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	089b      	lsrs	r3, r3, #2
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d033      	beq.n	8004f0a <HAL_I2C_EV_IRQHandler+0x2d2>
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	0a5b      	lsrs	r3, r3, #9
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d02d      	beq.n	8004f0a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fe43 	bl	8005b3a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004eb4:	e029      	b.n	8004f0a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00f      	beq.n	8004ee2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	0a9b      	lsrs	r3, r3, #10
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	089b      	lsrs	r3, r3, #2
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fe4e 	bl	8005b7c <I2C_SlaveReceive_RXNE>
 8004ee0:	e014      	b.n	8004f0c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	089b      	lsrs	r3, r3, #2
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00e      	beq.n	8004f0c <HAL_I2C_EV_IRQHandler+0x2d4>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	0a5b      	lsrs	r3, r3, #9
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d008      	beq.n	8004f0c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fe7c 	bl	8005bf8 <I2C_SlaveReceive_BTF>
 8004f00:	e004      	b.n	8004f0c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004f02:	bf00      	nop
 8004f04:	e002      	b.n	8004f0c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f06:	bf00      	nop
 8004f08:	e000      	b.n	8004f0c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f0a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004f0c:	3720      	adds	r7, #32
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	70fb      	strb	r3, [r7, #3]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005004:	2b00      	cmp	r3, #0
 8005006:	d150      	bne.n	80050aa <I2C_MasterTransmit_TXE+0xc8>
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	2b21      	cmp	r3, #33	; 0x21
 800500c:	d14d      	bne.n	80050aa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b08      	cmp	r3, #8
 8005012:	d01d      	beq.n	8005050 <I2C_MasterTransmit_TXE+0x6e>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b20      	cmp	r3, #32
 8005018:	d01a      	beq.n	8005050 <I2C_MasterTransmit_TXE+0x6e>
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005020:	d016      	beq.n	8005050 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005030:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2211      	movs	r2, #17
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff ff62 	bl	8004f12 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800504e:	e060      	b.n	8005112 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800505e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800506e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	d107      	bne.n	800509a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff ff7d 	bl	8004f92 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005098:	e03b      	b.n	8005112 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff ff35 	bl	8004f12 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050a8:	e033      	b.n	8005112 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	2b21      	cmp	r3, #33	; 0x21
 80050ae:	d005      	beq.n	80050bc <I2C_MasterTransmit_TXE+0xda>
 80050b0:	7bbb      	ldrb	r3, [r7, #14]
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d12d      	bne.n	8005112 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
 80050b8:	2b22      	cmp	r3, #34	; 0x22
 80050ba:	d12a      	bne.n	8005112 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d108      	bne.n	80050d8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80050d6:	e01c      	b.n	8005112 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b40      	cmp	r3, #64	; 0x40
 80050e2:	d103      	bne.n	80050ec <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f880 	bl	80051ea <I2C_MemoryTransmit_TXE_BTF>
}
 80050ea:	e012      	b.n	8005112 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	781a      	ldrb	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005110:	e7ff      	b.n	8005112 <I2C_MasterTransmit_TXE+0x130>
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b21      	cmp	r3, #33	; 0x21
 8005132:	d156      	bne.n	80051e2 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d012      	beq.n	8005164 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	781a      	ldrb	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005162:	e03e      	b.n	80051e2 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b08      	cmp	r3, #8
 8005168:	d01d      	beq.n	80051a6 <I2C_MasterTransmit_BTF+0x8c>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b20      	cmp	r3, #32
 800516e:	d01a      	beq.n	80051a6 <I2C_MasterTransmit_BTF+0x8c>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005176:	d016      	beq.n	80051a6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005186:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2211      	movs	r2, #17
 800518c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff feb7 	bl	8004f12 <HAL_I2C_MasterTxCpltCallback>
}
 80051a4:	e01d      	b.n	80051e2 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051b4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fe98 	bl	8004f12 <HAL_I2C_MasterTxCpltCallback>
}
 80051e2:	bf00      	nop
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d11d      	bne.n	800523e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d10b      	bne.n	8005222 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520e:	b2da      	uxtb	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521a:	1c9a      	adds	r2, r3, #2
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005220:	e06e      	b.n	8005300 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005226:	b29b      	uxth	r3, r3
 8005228:	121b      	asrs	r3, r3, #8
 800522a:	b2da      	uxtb	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800523c:	e060      	b.n	8005300 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005242:	2b01      	cmp	r3, #1
 8005244:	d10b      	bne.n	800525e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524a:	b2da      	uxtb	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800525c:	e050      	b.n	8005300 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005262:	2b02      	cmp	r3, #2
 8005264:	d14c      	bne.n	8005300 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b22      	cmp	r3, #34	; 0x22
 800526a:	d108      	bne.n	800527e <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800527a:	601a      	str	r2, [r3, #0]
}
 800527c:	e040      	b.n	8005300 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d015      	beq.n	80052b4 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	2b21      	cmp	r3, #33	; 0x21
 800528c:	d112      	bne.n	80052b4 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	781a      	ldrb	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052b2:	e025      	b.n	8005300 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d120      	bne.n	8005300 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80052be:	7bfb      	ldrb	r3, [r7, #15]
 80052c0:	2b21      	cmp	r3, #33	; 0x21
 80052c2:	d11d      	bne.n	8005300 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052d2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff fe49 	bl	8004f92 <HAL_I2C_MemTxCpltCallback>
}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b22      	cmp	r3, #34	; 0x22
 800531a:	f040 80a2 	bne.w	8005462 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005322:	b29b      	uxth	r3, r3
 8005324:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b03      	cmp	r3, #3
 800532a:	d921      	bls.n	8005370 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b03      	cmp	r3, #3
 800535a:	f040 8082 	bne.w	8005462 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800536c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800536e:	e078      	b.n	8005462 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	2b02      	cmp	r3, #2
 8005376:	d074      	beq.n	8005462 <I2C_MasterReceive_RXNE+0x15a>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d002      	beq.n	8005384 <I2C_MasterReceive_RXNE+0x7c>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d16e      	bne.n	8005462 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 fa4f 	bl	8006828 <I2C_WaitOnSTOPRequestThroughIT>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d142      	bne.n	8005416 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	d10a      	bne.n	8005400 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff fdd4 	bl	8004fa6 <HAL_I2C_MemRxCpltCallback>
}
 80053fe:	e030      	b.n	8005462 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2212      	movs	r2, #18
 800540c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff fd89 	bl	8004f26 <HAL_I2C_MasterRxCpltCallback>
}
 8005414:	e025      	b.n	8005462 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005424:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005442:	b29b      	uxth	r3, r3
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff fdac 	bl	8004fba <HAL_I2C_ErrorCallback>
}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b04      	cmp	r3, #4
 8005480:	d11b      	bne.n	80054ba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005490:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80054b8:	e0bd      	b.n	8005636 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d129      	bne.n	8005518 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d00a      	beq.n	80054f0 <I2C_MasterReceive_BTF+0x86>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d007      	beq.n	80054f0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005516:	e08e      	b.n	8005636 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d176      	bne.n	8005610 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d002      	beq.n	800552e <I2C_MasterReceive_BTF+0xc4>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b10      	cmp	r3, #16
 800552c:	d108      	bne.n	8005540 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	e019      	b.n	8005574 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b04      	cmp	r3, #4
 8005544:	d002      	beq.n	800554c <I2C_MasterReceive_BTF+0xe2>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d108      	bne.n	800555e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e00a      	b.n	8005574 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b10      	cmp	r3, #16
 8005562:	d007      	beq.n	8005574 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005572:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	3b01      	subs	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80055ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b40      	cmp	r3, #64	; 0x40
 80055e2:	d10a      	bne.n	80055fa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff fcd7 	bl	8004fa6 <HAL_I2C_MemRxCpltCallback>
}
 80055f8:	e01d      	b.n	8005636 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2212      	movs	r2, #18
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff fc8c 	bl	8004f26 <HAL_I2C_MasterRxCpltCallback>
}
 800560e:	e012      	b.n	8005636 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d117      	bne.n	8005682 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565e:	b2db      	uxtb	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800566a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800566c:	e067      	b.n	800573e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	b2da      	uxtb	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	611a      	str	r2, [r3, #16]
}
 8005680:	e05d      	b.n	800573e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800568a:	d133      	bne.n	80056f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b21      	cmp	r3, #33	; 0x21
 8005696:	d109      	bne.n	80056ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569c:	b2db      	uxtb	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056a8:	611a      	str	r2, [r3, #16]
 80056aa:	e008      	b.n	80056be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	f043 0301 	orr.w	r3, r3, #1
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <I2C_Master_SB+0x92>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d108      	bne.n	80056e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d032      	beq.n	800573e <I2C_Master_SB+0x100>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d02d      	beq.n	800573e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f0:	605a      	str	r2, [r3, #4]
}
 80056f2:	e024      	b.n	800573e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10e      	bne.n	800571a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	b29b      	uxth	r3, r3
 8005702:	11db      	asrs	r3, r3, #7
 8005704:	b2db      	uxtb	r3, r3
 8005706:	f003 0306 	and.w	r3, r3, #6
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f063 030f 	orn	r3, r3, #15
 8005710:	b2da      	uxtb	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	611a      	str	r2, [r3, #16]
}
 8005718:	e011      	b.n	800573e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571e:	2b01      	cmp	r3, #1
 8005720:	d10d      	bne.n	800573e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005726:	b29b      	uxth	r3, r3
 8005728:	11db      	asrs	r3, r3, #7
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f003 0306 	and.w	r3, r3, #6
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f063 030e 	orn	r3, r3, #14
 8005736:	b2da      	uxtb	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	611a      	str	r2, [r3, #16]
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	b2da      	uxtb	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <I2C_Master_ADD10+0x26>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d108      	bne.n	8005782 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <I2C_Master_ADD10+0x48>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005790:	605a      	str	r2, [r3, #4]
  }
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800579e:	b480      	push	{r7}
 80057a0:	b091      	sub	sp, #68	; 0x44
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b22      	cmp	r3, #34	; 0x22
 80057c6:	f040 8169 	bne.w	8005a9c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10f      	bne.n	80057f2 <I2C_Master_ADDR+0x54>
 80057d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d10b      	bne.n	80057f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057da:	2300      	movs	r3, #0
 80057dc:	633b      	str	r3, [r7, #48]	; 0x30
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	633b      	str	r3, [r7, #48]	; 0x30
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	633b      	str	r3, [r7, #48]	; 0x30
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	e160      	b.n	8005ab4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d11d      	bne.n	8005836 <I2C_Master_ADDR+0x98>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005802:	d118      	bne.n	8005836 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005804:	2300      	movs	r3, #0
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005818:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005828:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	651a      	str	r2, [r3, #80]	; 0x50
 8005834:	e13e      	b.n	8005ab4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d113      	bne.n	8005868 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005840:	2300      	movs	r3, #0
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	e115      	b.n	8005a94 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	f040 808a 	bne.w	8005988 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005876:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800587a:	d137      	bne.n	80058ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800589a:	d113      	bne.n	80058c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ac:	2300      	movs	r3, #0
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	e0e7      	b.n	8005a94 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c4:	2300      	movs	r3, #0
 80058c6:	623b      	str	r3, [r7, #32]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	623b      	str	r3, [r7, #32]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	623b      	str	r3, [r7, #32]
 80058d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e0d3      	b.n	8005a94 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80058ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	d02e      	beq.n	8005950 <I2C_Master_ADDR+0x1b2>
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d02b      	beq.n	8005950 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80058f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fa:	2b12      	cmp	r3, #18
 80058fc:	d102      	bne.n	8005904 <I2C_Master_ADDR+0x166>
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	2b01      	cmp	r3, #1
 8005902:	d125      	bne.n	8005950 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005906:	2b04      	cmp	r3, #4
 8005908:	d00e      	beq.n	8005928 <I2C_Master_ADDR+0x18a>
 800590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590c:	2b02      	cmp	r3, #2
 800590e:	d00b      	beq.n	8005928 <I2C_Master_ADDR+0x18a>
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	2b10      	cmp	r3, #16
 8005914:	d008      	beq.n	8005928 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e007      	b.n	8005938 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005936:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	e0a1      	b.n	8005a94 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005960:	2300      	movs	r3, #0
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	61bb      	str	r3, [r7, #24]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	e085      	b.n	8005a94 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d14d      	bne.n	8005a2e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	2b04      	cmp	r3, #4
 8005996:	d016      	beq.n	80059c6 <I2C_Master_ADDR+0x228>
 8005998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599a:	2b02      	cmp	r3, #2
 800599c:	d013      	beq.n	80059c6 <I2C_Master_ADDR+0x228>
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	2b10      	cmp	r3, #16
 80059a2:	d010      	beq.n	80059c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e007      	b.n	80059d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e4:	d117      	bne.n	8005a16 <I2C_Master_ADDR+0x278>
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059ec:	d00b      	beq.n	8005a06 <I2C_Master_ADDR+0x268>
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d008      	beq.n	8005a06 <I2C_Master_ADDR+0x268>
 80059f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d005      	beq.n	8005a06 <I2C_Master_ADDR+0x268>
 80059fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fc:	2b10      	cmp	r3, #16
 80059fe:	d002      	beq.n	8005a06 <I2C_Master_ADDR+0x268>
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d107      	bne.n	8005a16 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	e032      	b.n	8005a94 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a3c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a4c:	d117      	bne.n	8005a7e <I2C_Master_ADDR+0x2e0>
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a54:	d00b      	beq.n	8005a6e <I2C_Master_ADDR+0x2d0>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d008      	beq.n	8005a6e <I2C_Master_ADDR+0x2d0>
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d005      	beq.n	8005a6e <I2C_Master_ADDR+0x2d0>
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d002      	beq.n	8005a6e <I2C_Master_ADDR+0x2d0>
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	d107      	bne.n	8005a7e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005a9a:	e00b      	b.n	8005ab4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
}
 8005ab2:	e7ff      	b.n	8005ab4 <I2C_Master_ADDR+0x316>
 8005ab4:	bf00      	nop
 8005ab6:	3744      	adds	r7, #68	; 0x44
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ace:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d02b      	beq.n	8005b32 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	781a      	ldrb	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d114      	bne.n	8005b32 <I2C_SlaveTransmit_TXE+0x72>
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	2b29      	cmp	r3, #41	; 0x29
 8005b0c:	d111      	bne.n	8005b32 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2221      	movs	r2, #33	; 0x21
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2228      	movs	r2, #40	; 0x28
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff fa04 	bl	8004f3a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b32:	bf00      	nop
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d011      	beq.n	8005b70 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	781a      	ldrb	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d02c      	beq.n	8005bf0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d114      	bne.n	8005bf0 <I2C_SlaveReceive_RXNE+0x74>
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8005bca:	d111      	bne.n	8005bf0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bda:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2222      	movs	r2, #34	; 0x22
 8005be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2228      	movs	r2, #40	; 0x28
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff f9af 	bl	8004f4e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d012      	beq.n	8005c30 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c56:	2b28      	cmp	r3, #40	; 0x28
 8005c58:	d127      	bne.n	8005caa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c68:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	089b      	lsrs	r3, r3, #2
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005c76:	2301      	movs	r3, #1
 8005c78:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	09db      	lsrs	r3, r3, #7
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	81bb      	strh	r3, [r7, #12]
 8005c8c:	e002      	b.n	8005c94 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005c9c:	89ba      	ldrh	r2, [r7, #12]
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7ff f95d 	bl	8004f62 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ca8:	e008      	b.n	8005cbc <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f06f 0202 	mvn.w	r2, #2
 8005cb2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ce2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60bb      	str	r3, [r7, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d10:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d20:	d172      	bne.n	8005e08 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b22      	cmp	r3, #34	; 0x22
 8005d26:	d002      	beq.n	8005d2e <I2C_Slave_STOPF+0x6a>
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d2c:	d135      	bne.n	8005d9a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	f043 0204 	orr.w	r2, r3, #4
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fd ff11 	bl	8003b8e <HAL_DMA_GetState>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d049      	beq.n	8005e06 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	4a69      	ldr	r2, [pc, #420]	; (8005f1c <I2C_Slave_STOPF+0x258>)
 8005d78:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fd fee3 	bl	8003b4a <HAL_DMA_Abort_IT>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03d      	beq.n	8005e06 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d98:	e035      	b.n	8005e06 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d005      	beq.n	8005dbe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f043 0204 	orr.w	r2, r3, #4
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dcc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fd fedb 	bl	8003b8e <HAL_DMA_GetState>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d014      	beq.n	8005e08 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de2:	4a4e      	ldr	r2, [pc, #312]	; (8005f1c <I2C_Slave_STOPF+0x258>)
 8005de4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fd fead 	bl	8003b4a <HAL_DMA_Abort_IT>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d008      	beq.n	8005e08 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e00:	4610      	mov	r0, r2
 8005e02:	4798      	blx	r3
 8005e04:	e000      	b.n	8005e08 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e06:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d03e      	beq.n	8005e90 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d112      	bne.n	8005e46 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	d112      	bne.n	8005e7a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	f043 0204 	orr.w	r2, r3, #4
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f843 	bl	8005f24 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e9e:	e039      	b.n	8005f14 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ea4:	d109      	bne.n	8005eba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2228      	movs	r2, #40	; 0x28
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff f84a 	bl	8004f4e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b28      	cmp	r3, #40	; 0x28
 8005ec4:	d111      	bne.n	8005eea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a15      	ldr	r2, [pc, #84]	; (8005f20 <I2C_Slave_STOPF+0x25c>)
 8005eca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff f84b 	bl	8004f7e <HAL_I2C_ListenCpltCallback>
}
 8005ee8:	e014      	b.n	8005f14 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eee:	2b22      	cmp	r3, #34	; 0x22
 8005ef0:	d002      	beq.n	8005ef8 <I2C_Slave_STOPF+0x234>
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	2b22      	cmp	r3, #34	; 0x22
 8005ef6:	d10d      	bne.n	8005f14 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7ff f81d 	bl	8004f4e <HAL_I2C_SlaveRxCpltCallback>
}
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	08006429 	.word	0x08006429
 8005f20:	ffff0000 	.word	0xffff0000

08005f24 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	2b10      	cmp	r3, #16
 8005f40:	d002      	beq.n	8005f48 <I2C_ITError+0x24>
 8005f42:	7bbb      	ldrb	r3, [r7, #14]
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d10a      	bne.n	8005f5e <I2C_ITError+0x3a>
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	2b22      	cmp	r3, #34	; 0x22
 8005f4c:	d107      	bne.n	8005f5e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f5c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f64:	2b28      	cmp	r3, #40	; 0x28
 8005f66:	d107      	bne.n	8005f78 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2228      	movs	r2, #40	; 0x28
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f76:	e015      	b.n	8005fa4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f86:	d00a      	beq.n	8005f9e <I2C_ITError+0x7a>
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	2b60      	cmp	r3, #96	; 0x60
 8005f8c:	d007      	beq.n	8005f9e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb2:	d162      	bne.n	800607a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fc2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d020      	beq.n	8006014 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd6:	4a6a      	ldr	r2, [pc, #424]	; (8006180 <I2C_ITError+0x25c>)
 8005fd8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fd fdb3 	bl	8003b4a <HAL_DMA_Abort_IT>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8089 	beq.w	80060fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0201 	bic.w	r2, r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800600e:	4610      	mov	r0, r2
 8006010:	4798      	blx	r3
 8006012:	e074      	b.n	80060fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	4a59      	ldr	r2, [pc, #356]	; (8006180 <I2C_ITError+0x25c>)
 800601a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	4618      	mov	r0, r3
 8006022:	f7fd fd92 	bl	8003b4a <HAL_DMA_Abort_IT>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d068      	beq.n	80060fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b40      	cmp	r3, #64	; 0x40
 8006038:	d10b      	bne.n	8006052 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	b2d2      	uxtb	r2, r2
 8006046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0201 	bic.w	r2, r2, #1
 8006060:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006074:	4610      	mov	r0, r2
 8006076:	4798      	blx	r3
 8006078:	e041      	b.n	80060fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b60      	cmp	r3, #96	; 0x60
 8006084:	d125      	bne.n	80060d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2220      	movs	r2, #32
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609e:	2b40      	cmp	r3, #64	; 0x40
 80060a0:	d10b      	bne.n	80060ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0201 	bic.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fe ff7f 	bl	8004fce <HAL_I2C_AbortCpltCallback>
 80060d0:	e015      	b.n	80060fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d10b      	bne.n	80060f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fe ff5e 	bl	8004fba <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10e      	bne.n	800612c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800611e:	2b00      	cmp	r3, #0
 8006120:	d104      	bne.n	800612c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800613a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006142:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b04      	cmp	r3, #4
 800614e:	d113      	bne.n	8006178 <I2C_ITError+0x254>
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	2b28      	cmp	r3, #40	; 0x28
 8006154:	d110      	bne.n	8006178 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a0a      	ldr	r2, [pc, #40]	; (8006184 <I2C_ITError+0x260>)
 800615a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fe ff03 	bl	8004f7e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	08006429 	.word	0x08006429
 8006184:	ffff0000 	.word	0xffff0000

08006188 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af02      	add	r7, sp, #8
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	460b      	mov	r3, r1
 8006196:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d006      	beq.n	80061b2 <I2C_MasterRequestWrite+0x2a>
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d003      	beq.n	80061b2 <I2C_MasterRequestWrite+0x2a>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061b0:	d108      	bne.n	80061c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	e00b      	b.n	80061dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	2b12      	cmp	r3, #18
 80061ca:	d107      	bne.n	80061dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f9c5 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00d      	beq.n	8006210 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006202:	d103      	bne.n	800620c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800620a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e035      	b.n	800627c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006218:	d108      	bne.n	800622c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800621a:	897b      	ldrh	r3, [r7, #10]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	461a      	mov	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006228:	611a      	str	r2, [r3, #16]
 800622a:	e01b      	b.n	8006264 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800622c:	897b      	ldrh	r3, [r7, #10]
 800622e:	11db      	asrs	r3, r3, #7
 8006230:	b2db      	uxtb	r3, r3
 8006232:	f003 0306 	and.w	r3, r3, #6
 8006236:	b2db      	uxtb	r3, r3
 8006238:	f063 030f 	orn	r3, r3, #15
 800623c:	b2da      	uxtb	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	490e      	ldr	r1, [pc, #56]	; (8006284 <I2C_MasterRequestWrite+0xfc>)
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 f9eb 	bl	8006626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e010      	b.n	800627c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800625a:	897b      	ldrh	r3, [r7, #10]
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4907      	ldr	r1, [pc, #28]	; (8006288 <I2C_MasterRequestWrite+0x100>)
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f9db 	bl	8006626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	00010008 	.word	0x00010008
 8006288:	00010002 	.word	0x00010002

0800628c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b088      	sub	sp, #32
 8006290:	af02      	add	r7, sp, #8
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	603b      	str	r3, [r7, #0]
 8006298:	460b      	mov	r3, r1
 800629a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d006      	beq.n	80062c6 <I2C_MasterRequestRead+0x3a>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d003      	beq.n	80062c6 <I2C_MasterRequestRead+0x3a>
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062c4:	d108      	bne.n	80062d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	e00b      	b.n	80062f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	2b11      	cmp	r3, #17
 80062de:	d107      	bne.n	80062f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 f93b 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00d      	beq.n	8006324 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006316:	d103      	bne.n	8006320 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800631e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e079      	b.n	8006418 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800632c:	d108      	bne.n	8006340 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800632e:	897b      	ldrh	r3, [r7, #10]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	b2da      	uxtb	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	611a      	str	r2, [r3, #16]
 800633e:	e05f      	b.n	8006400 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006340:	897b      	ldrh	r3, [r7, #10]
 8006342:	11db      	asrs	r3, r3, #7
 8006344:	b2db      	uxtb	r3, r3
 8006346:	f003 0306 	and.w	r3, r3, #6
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f063 030f 	orn	r3, r3, #15
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	4930      	ldr	r1, [pc, #192]	; (8006420 <I2C_MasterRequestRead+0x194>)
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f961 	bl	8006626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e054      	b.n	8006418 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800636e:	897b      	ldrh	r3, [r7, #10]
 8006370:	b2da      	uxtb	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	4929      	ldr	r1, [pc, #164]	; (8006424 <I2C_MasterRequestRead+0x198>)
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 f951 	bl	8006626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e044      	b.n	8006418 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800638e:	2300      	movs	r3, #0
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f8d9 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00d      	beq.n	80063e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063da:	d103      	bne.n	80063e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e017      	b.n	8006418 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80063e8:	897b      	ldrh	r3, [r7, #10]
 80063ea:	11db      	asrs	r3, r3, #7
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f003 0306 	and.w	r3, r3, #6
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f063 030e 	orn	r3, r3, #14
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	4907      	ldr	r1, [pc, #28]	; (8006424 <I2C_MasterRequestRead+0x198>)
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f90d 	bl	8006626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	00010008 	.word	0x00010008
 8006424:	00010002 	.word	0x00010002

08006428 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006440:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006442:	4b4b      	ldr	r3, [pc, #300]	; (8006570 <I2C_DMAAbort+0x148>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	08db      	lsrs	r3, r3, #3
 8006448:	4a4a      	ldr	r2, [pc, #296]	; (8006574 <I2C_DMAAbort+0x14c>)
 800644a:	fba2 2303 	umull	r2, r3, r2, r3
 800644e:	0a1a      	lsrs	r2, r3, #8
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	00da      	lsls	r2, r3, #3
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f043 0220 	orr.w	r2, r3, #32
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800646e:	e00a      	b.n	8006486 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3b01      	subs	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006484:	d0ea      	beq.n	800645c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006492:	2200      	movs	r2, #0
 8006494:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	2200      	movs	r2, #0
 80064a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c8:	2200      	movs	r2, #0
 80064ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	2200      	movs	r2, #0
 80064da:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0201 	bic.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b60      	cmp	r3, #96	; 0x60
 80064f6:	d10e      	bne.n	8006516 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2200      	movs	r2, #0
 800650c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800650e:	6978      	ldr	r0, [r7, #20]
 8006510:	f7fe fd5d 	bl	8004fce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006514:	e027      	b.n	8006566 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006516:	7cfb      	ldrb	r3, [r7, #19]
 8006518:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800651c:	2b28      	cmp	r3, #40	; 0x28
 800651e:	d117      	bne.n	8006550 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800653e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2200      	movs	r2, #0
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2228      	movs	r2, #40	; 0x28
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800654e:	e007      	b.n	8006560 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006560:	6978      	ldr	r0, [r7, #20]
 8006562:	f7fe fd2a 	bl	8004fba <HAL_I2C_ErrorCallback>
}
 8006566:	bf00      	nop
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000004 	.word	0x20000004
 8006574:	14f8b589 	.word	0x14f8b589

08006578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	4613      	mov	r3, r2
 8006586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006588:	e025      	b.n	80065d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006590:	d021      	beq.n	80065d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006592:	f7fc fc23 	bl	8002ddc <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d302      	bcc.n	80065a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d116      	bne.n	80065d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f043 0220 	orr.w	r2, r3, #32
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e023      	b.n	800661e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	0c1b      	lsrs	r3, r3, #16
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10d      	bne.n	80065fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	43da      	mvns	r2, r3
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4013      	ands	r3, r2
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	bf0c      	ite	eq
 80065f2:	2301      	moveq	r3, #1
 80065f4:	2300      	movne	r3, #0
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	e00c      	b.n	8006616 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	43da      	mvns	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4013      	ands	r3, r2
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	bf0c      	ite	eq
 800660e:	2301      	moveq	r3, #1
 8006610:	2300      	movne	r3, #0
 8006612:	b2db      	uxtb	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	429a      	cmp	r2, r3
 800661a:	d0b6      	beq.n	800658a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006634:	e051      	b.n	80066da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006644:	d123      	bne.n	800668e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006654:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800665e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	f043 0204 	orr.w	r2, r3, #4
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e046      	b.n	800671c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006694:	d021      	beq.n	80066da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006696:	f7fc fba1 	bl	8002ddc <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d302      	bcc.n	80066ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d116      	bne.n	80066da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	f043 0220 	orr.w	r2, r3, #32
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e020      	b.n	800671c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	0c1b      	lsrs	r3, r3, #16
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d10c      	bne.n	80066fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	43da      	mvns	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4013      	ands	r3, r2
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bf14      	ite	ne
 80066f6:	2301      	movne	r3, #1
 80066f8:	2300      	moveq	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	e00b      	b.n	8006716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	43da      	mvns	r2, r3
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4013      	ands	r3, r2
 800670a:	b29b      	uxth	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	bf14      	ite	ne
 8006710:	2301      	movne	r3, #1
 8006712:	2300      	moveq	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d18d      	bne.n	8006636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006730:	e02d      	b.n	800678e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f900 	bl	8006938 <I2C_IsAcknowledgeFailed>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e02d      	b.n	800679e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006748:	d021      	beq.n	800678e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674a:	f7fc fb47 	bl	8002ddc <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	429a      	cmp	r2, r3
 8006758:	d302      	bcc.n	8006760 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d116      	bne.n	800678e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f043 0220 	orr.w	r2, r3, #32
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e007      	b.n	800679e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006798:	2b80      	cmp	r3, #128	; 0x80
 800679a:	d1ca      	bne.n	8006732 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067b2:	e02d      	b.n	8006810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f8bf 	bl	8006938 <I2C_IsAcknowledgeFailed>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e02d      	b.n	8006820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ca:	d021      	beq.n	8006810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067cc:	f7fc fb06 	bl	8002ddc <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d302      	bcc.n	80067e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d116      	bne.n	8006810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fc:	f043 0220 	orr.w	r2, r3, #32
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e007      	b.n	8006820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	2b04      	cmp	r3, #4
 800681c:	d1ca      	bne.n	80067b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006834:	4b13      	ldr	r3, [pc, #76]	; (8006884 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	08db      	lsrs	r3, r3, #3
 800683a:	4a13      	ldr	r2, [pc, #76]	; (8006888 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800683c:	fba2 2303 	umull	r2, r3, r2, r3
 8006840:	0a1a      	lsrs	r2, r3, #8
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3b01      	subs	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d107      	bne.n	8006866 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	f043 0220 	orr.w	r2, r3, #32
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e008      	b.n	8006878 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006874:	d0e9      	beq.n	800684a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	20000004 	.word	0x20000004
 8006888:	14f8b589 	.word	0x14f8b589

0800688c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006898:	e042      	b.n	8006920 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b10      	cmp	r3, #16
 80068a6:	d119      	bne.n	80068dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f06f 0210 	mvn.w	r2, #16
 80068b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e029      	b.n	8006930 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068dc:	f7fc fa7e 	bl	8002ddc <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d302      	bcc.n	80068f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d116      	bne.n	8006920 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	f043 0220 	orr.w	r2, r3, #32
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e007      	b.n	8006930 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692a:	2b40      	cmp	r3, #64	; 0x40
 800692c:	d1b5      	bne.n	800689a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800694a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694e:	d11b      	bne.n	8006988 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006958:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2220      	movs	r2, #32
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	f043 0204 	orr.w	r2, r3, #4
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80069a6:	d103      	bne.n	80069b0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80069ae:	e007      	b.n	80069c0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80069b8:	d102      	bne.n	80069c0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2208      	movs	r2, #8
 80069be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e0cc      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069e0:	4b68      	ldr	r3, [pc, #416]	; (8006b84 <HAL_RCC_ClockConfig+0x1b8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d90c      	bls.n	8006a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ee:	4b65      	ldr	r3, [pc, #404]	; (8006b84 <HAL_RCC_ClockConfig+0x1b8>)
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f6:	4b63      	ldr	r3, [pc, #396]	; (8006b84 <HAL_RCC_ClockConfig+0x1b8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d001      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e0b8      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d020      	beq.n	8006a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a20:	4b59      	ldr	r3, [pc, #356]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	4a58      	ldr	r2, [pc, #352]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d005      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a38:	4b53      	ldr	r3, [pc, #332]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	4a52      	ldr	r2, [pc, #328]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a44:	4b50      	ldr	r3, [pc, #320]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	494d      	ldr	r1, [pc, #308]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d044      	beq.n	8006aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d107      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a6a:	4b47      	ldr	r3, [pc, #284]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d119      	bne.n	8006aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e07f      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d003      	beq.n	8006a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d107      	bne.n	8006a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a8a:	4b3f      	ldr	r3, [pc, #252]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d109      	bne.n	8006aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e06f      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a9a:	4b3b      	ldr	r3, [pc, #236]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e067      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006aaa:	4b37      	ldr	r3, [pc, #220]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f023 0203 	bic.w	r2, r3, #3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	4934      	ldr	r1, [pc, #208]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006abc:	f7fc f98e 	bl	8002ddc <HAL_GetTick>
 8006ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ac2:	e00a      	b.n	8006ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ac4:	f7fc f98a 	bl	8002ddc <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e04f      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ada:	4b2b      	ldr	r3, [pc, #172]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 020c 	and.w	r2, r3, #12
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d1eb      	bne.n	8006ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006aec:	4b25      	ldr	r3, [pc, #148]	; (8006b84 <HAL_RCC_ClockConfig+0x1b8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d20c      	bcs.n	8006b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006afa:	4b22      	ldr	r3, [pc, #136]	; (8006b84 <HAL_RCC_ClockConfig+0x1b8>)
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b02:	4b20      	ldr	r3, [pc, #128]	; (8006b84 <HAL_RCC_ClockConfig+0x1b8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d001      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e032      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d008      	beq.n	8006b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b20:	4b19      	ldr	r3, [pc, #100]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	4916      	ldr	r1, [pc, #88]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b3e:	4b12      	ldr	r3, [pc, #72]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	490e      	ldr	r1, [pc, #56]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b52:	f000 f889 	bl	8006c68 <HAL_RCC_GetSysClockFreq>
 8006b56:	4602      	mov	r2, r0
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	091b      	lsrs	r3, r3, #4
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	490a      	ldr	r1, [pc, #40]	; (8006b8c <HAL_RCC_ClockConfig+0x1c0>)
 8006b64:	5ccb      	ldrb	r3, [r1, r3]
 8006b66:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6a:	4a09      	ldr	r2, [pc, #36]	; (8006b90 <HAL_RCC_ClockConfig+0x1c4>)
 8006b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b6e:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fc f8ee 	bl	8002d54 <HAL_InitTick>

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	40023c00 	.word	0x40023c00
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	0801beec 	.word	0x0801beec
 8006b90:	20000004 	.word	0x20000004
 8006b94:	20000024 	.word	0x20000024

08006b98 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08c      	sub	sp, #48	; 0x30
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d129      	bne.n	8006bfe <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8006baa:	2300      	movs	r3, #0
 8006bac:	61bb      	str	r3, [r7, #24]
 8006bae:	4b2b      	ldr	r3, [pc, #172]	; (8006c5c <HAL_RCC_MCOConfig+0xc4>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	4a2a      	ldr	r2, [pc, #168]	; (8006c5c <HAL_RCC_MCOConfig+0xc4>)
 8006bb4:	f043 0301 	orr.w	r3, r3, #1
 8006bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8006bba:	4b28      	ldr	r3, [pc, #160]	; (8006c5c <HAL_RCC_MCOConfig+0xc4>)
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006bdc:	f107 031c 	add.w	r3, r7, #28
 8006be0:	4619      	mov	r1, r3
 8006be2:	481f      	ldr	r0, [pc, #124]	; (8006c60 <HAL_RCC_MCOConfig+0xc8>)
 8006be4:	f7fd f9fa 	bl	8003fdc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006be8:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <HAL_RCC_MCOConfig+0xc4>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8006bf0:	68b9      	ldr	r1, [r7, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	4919      	ldr	r1, [pc, #100]	; (8006c5c <HAL_RCC_MCOConfig+0xc4>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006bfc:	e029      	b.n	8006c52 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	4b16      	ldr	r3, [pc, #88]	; (8006c5c <HAL_RCC_MCOConfig+0xc4>)
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <HAL_RCC_MCOConfig+0xc4>)
 8006c08:	f043 0304 	orr.w	r3, r3, #4
 8006c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c0e:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <HAL_RCC_MCOConfig+0xc4>)
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c20:	2302      	movs	r3, #2
 8006c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c24:	2303      	movs	r3, #3
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006c30:	f107 031c 	add.w	r3, r7, #28
 8006c34:	4619      	mov	r1, r3
 8006c36:	480b      	ldr	r0, [pc, #44]	; (8006c64 <HAL_RCC_MCOConfig+0xcc>)
 8006c38:	f7fd f9d0 	bl	8003fdc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006c3c:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <HAL_RCC_MCOConfig+0xc4>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	00d9      	lsls	r1, r3, #3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	4903      	ldr	r1, [pc, #12]	; (8006c5c <HAL_RCC_MCOConfig+0xc4>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	608b      	str	r3, [r1, #8]
}
 8006c52:	bf00      	nop
 8006c54:	3730      	adds	r7, #48	; 0x30
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	40020000 	.word	0x40020000
 8006c64:	40020800 	.word	0x40020800

08006c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c68:	b5b0      	push	{r4, r5, r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c6e:	2100      	movs	r1, #0
 8006c70:	6079      	str	r1, [r7, #4]
 8006c72:	2100      	movs	r1, #0
 8006c74:	60f9      	str	r1, [r7, #12]
 8006c76:	2100      	movs	r1, #0
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c7e:	4952      	ldr	r1, [pc, #328]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c80:	6889      	ldr	r1, [r1, #8]
 8006c82:	f001 010c 	and.w	r1, r1, #12
 8006c86:	2908      	cmp	r1, #8
 8006c88:	d00d      	beq.n	8006ca6 <HAL_RCC_GetSysClockFreq+0x3e>
 8006c8a:	2908      	cmp	r1, #8
 8006c8c:	f200 8094 	bhi.w	8006db8 <HAL_RCC_GetSysClockFreq+0x150>
 8006c90:	2900      	cmp	r1, #0
 8006c92:	d002      	beq.n	8006c9a <HAL_RCC_GetSysClockFreq+0x32>
 8006c94:	2904      	cmp	r1, #4
 8006c96:	d003      	beq.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x38>
 8006c98:	e08e      	b.n	8006db8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c9a:	4b4c      	ldr	r3, [pc, #304]	; (8006dcc <HAL_RCC_GetSysClockFreq+0x164>)
 8006c9c:	60bb      	str	r3, [r7, #8]
       break;
 8006c9e:	e08e      	b.n	8006dbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ca0:	4b4b      	ldr	r3, [pc, #300]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8006ca2:	60bb      	str	r3, [r7, #8]
      break;
 8006ca4:	e08b      	b.n	8006dbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ca6:	4948      	ldr	r1, [pc, #288]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006ca8:	6849      	ldr	r1, [r1, #4]
 8006caa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006cae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cb0:	4945      	ldr	r1, [pc, #276]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006cb2:	6849      	ldr	r1, [r1, #4]
 8006cb4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006cb8:	2900      	cmp	r1, #0
 8006cba:	d024      	beq.n	8006d06 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cbc:	4942      	ldr	r1, [pc, #264]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006cbe:	6849      	ldr	r1, [r1, #4]
 8006cc0:	0989      	lsrs	r1, r1, #6
 8006cc2:	4608      	mov	r0, r1
 8006cc4:	f04f 0100 	mov.w	r1, #0
 8006cc8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006ccc:	f04f 0500 	mov.w	r5, #0
 8006cd0:	ea00 0204 	and.w	r2, r0, r4
 8006cd4:	ea01 0305 	and.w	r3, r1, r5
 8006cd8:	493d      	ldr	r1, [pc, #244]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8006cda:	fb01 f003 	mul.w	r0, r1, r3
 8006cde:	2100      	movs	r1, #0
 8006ce0:	fb01 f102 	mul.w	r1, r1, r2
 8006ce4:	1844      	adds	r4, r0, r1
 8006ce6:	493a      	ldr	r1, [pc, #232]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8006ce8:	fba2 0101 	umull	r0, r1, r2, r1
 8006cec:	1863      	adds	r3, r4, r1
 8006cee:	4619      	mov	r1, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f04f 0300 	mov.w	r3, #0
 8006cf8:	f7f9 faea 	bl	80002d0 <__aeabi_uldivmod>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4613      	mov	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	e04a      	b.n	8006d9c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d06:	4b30      	ldr	r3, [pc, #192]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	099b      	lsrs	r3, r3, #6
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	f04f 0300 	mov.w	r3, #0
 8006d12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d16:	f04f 0100 	mov.w	r1, #0
 8006d1a:	ea02 0400 	and.w	r4, r2, r0
 8006d1e:	ea03 0501 	and.w	r5, r3, r1
 8006d22:	4620      	mov	r0, r4
 8006d24:	4629      	mov	r1, r5
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	014b      	lsls	r3, r1, #5
 8006d30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006d34:	0142      	lsls	r2, r0, #5
 8006d36:	4610      	mov	r0, r2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	1b00      	subs	r0, r0, r4
 8006d3c:	eb61 0105 	sbc.w	r1, r1, r5
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	018b      	lsls	r3, r1, #6
 8006d4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d4e:	0182      	lsls	r2, r0, #6
 8006d50:	1a12      	subs	r2, r2, r0
 8006d52:	eb63 0301 	sbc.w	r3, r3, r1
 8006d56:	f04f 0000 	mov.w	r0, #0
 8006d5a:	f04f 0100 	mov.w	r1, #0
 8006d5e:	00d9      	lsls	r1, r3, #3
 8006d60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d64:	00d0      	lsls	r0, r2, #3
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	1912      	adds	r2, r2, r4
 8006d6c:	eb45 0303 	adc.w	r3, r5, r3
 8006d70:	f04f 0000 	mov.w	r0, #0
 8006d74:	f04f 0100 	mov.w	r1, #0
 8006d78:	0299      	lsls	r1, r3, #10
 8006d7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006d7e:	0290      	lsls	r0, r2, #10
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4610      	mov	r0, r2
 8006d86:	4619      	mov	r1, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	f7f9 fa9e 	bl	80002d0 <__aeabi_uldivmod>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4613      	mov	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	0c1b      	lsrs	r3, r3, #16
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	3301      	adds	r3, #1
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db4:	60bb      	str	r3, [r7, #8]
      break;
 8006db6:	e002      	b.n	8006dbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006db8:	4b04      	ldr	r3, [pc, #16]	; (8006dcc <HAL_RCC_GetSysClockFreq+0x164>)
 8006dba:	60bb      	str	r3, [r7, #8]
      break;
 8006dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8006dc8:	40023800 	.word	0x40023800
 8006dcc:	00f42400 	.word	0x00f42400
 8006dd0:	017d7840 	.word	0x017d7840

08006dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dd8:	4b03      	ldr	r3, [pc, #12]	; (8006de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006dda:	681b      	ldr	r3, [r3, #0]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	20000004 	.word	0x20000004

08006dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006df0:	f7ff fff0 	bl	8006dd4 <HAL_RCC_GetHCLKFreq>
 8006df4:	4602      	mov	r2, r0
 8006df6:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	0a9b      	lsrs	r3, r3, #10
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	4903      	ldr	r1, [pc, #12]	; (8006e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e02:	5ccb      	ldrb	r3, [r1, r3]
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	40023800 	.word	0x40023800
 8006e10:	0801befc 	.word	0x0801befc

08006e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e18:	f7ff ffdc 	bl	8006dd4 <HAL_RCC_GetHCLKFreq>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	0b5b      	lsrs	r3, r3, #13
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	4903      	ldr	r1, [pc, #12]	; (8006e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e2a:	5ccb      	ldrb	r3, [r1, r3]
 8006e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40023800 	.word	0x40023800
 8006e38:	0801befc 	.word	0x0801befc

08006e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d010      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006e60:	4b7a      	ldr	r3, [pc, #488]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e66:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	4977      	ldr	r1, [pc, #476]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d010      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006e8e:	4b6f      	ldr	r3, [pc, #444]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e94:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	496b      	ldr	r1, [pc, #428]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8006eac:	2301      	movs	r3, #1
 8006eae:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d022      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8006ebc:	4b63      	ldr	r3, [pc, #396]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ec2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eca:	4960      	ldr	r1, [pc, #384]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8006eda:	2301      	movs	r3, #1
 8006edc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ee6:	d10c      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006ee8:	4b58      	ldr	r3, [pc, #352]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	021b      	lsls	r3, r3, #8
 8006efa:	4954      	ldr	r1, [pc, #336]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d022      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8006f0e:	4b4f      	ldr	r3, [pc, #316]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1c:	494b      	ldr	r1, [pc, #300]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f38:	d10c      	bne.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006f3a:	4b44      	ldr	r3, [pc, #272]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	493f      	ldr	r1, [pc, #252]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0308 	and.w	r3, r3, #8
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 808a 	beq.w	8007076 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	4b39      	ldr	r3, [pc, #228]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	4a38      	ldr	r2, [pc, #224]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f70:	6413      	str	r3, [r2, #64]	; 0x40
 8006f72:	4b36      	ldr	r3, [pc, #216]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006f7e:	4b34      	ldr	r3, [pc, #208]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a33      	ldr	r2, [pc, #204]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f8a:	f7fb ff27 	bl	8002ddc <HAL_GetTick>
 8006f8e:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f90:	e008      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f92:	f7fb ff23 	bl	8002ddc <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d901      	bls.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e1d1      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006fa4:	4b2a      	ldr	r3, [pc, #168]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0f0      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fb0:	4b26      	ldr	r3, [pc, #152]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb8:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d02f      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d028      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fce:	4b1f      	ldr	r3, [pc, #124]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fd8:	4b1e      	ldr	r3, [pc, #120]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fde:	4b1d      	ldr	r3, [pc, #116]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006fe4:	4a19      	ldr	r2, [pc, #100]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006fea:	4b18      	ldr	r3, [pc, #96]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d114      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ff6:	f7fb fef1 	bl	8002ddc <HAL_GetTick>
 8006ffa:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ffc:	e00a      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ffe:	f7fb feed 	bl	8002ddc <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	f241 3288 	movw	r2, #5000	; 0x1388
 800700c:	4293      	cmp	r3, r2
 800700e:	d901      	bls.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e199      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007014:	4b0d      	ldr	r3, [pc, #52]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0ee      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800702c:	d114      	bne.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800702e:	4b07      	ldr	r3, [pc, #28]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800703e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007042:	4902      	ldr	r1, [pc, #8]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007044:	4313      	orrs	r3, r2
 8007046:	608b      	str	r3, [r1, #8]
 8007048:	e00c      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800704a:	bf00      	nop
 800704c:	40023800 	.word	0x40023800
 8007050:	40007000 	.word	0x40007000
 8007054:	42470e40 	.word	0x42470e40
 8007058:	4b89      	ldr	r3, [pc, #548]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	4a88      	ldr	r2, [pc, #544]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800705e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007062:	6093      	str	r3, [r2, #8]
 8007064:	4b86      	ldr	r3, [pc, #536]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007066:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007070:	4983      	ldr	r1, [pc, #524]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007072:	4313      	orrs	r3, r2
 8007074:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0304 	and.w	r3, r3, #4
 800707e:	2b00      	cmp	r3, #0
 8007080:	d004      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007088:	4b7e      	ldr	r3, [pc, #504]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800708a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00a      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007098:	4b79      	ldr	r3, [pc, #484]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800709a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800709e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	4976      	ldr	r1, [pc, #472]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d011      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80070ba:	4b71      	ldr	r3, [pc, #452]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80070bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	496d      	ldr	r1, [pc, #436]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070d8:	d101      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80070da:	2301      	movs	r3, #1
 80070dc:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80070ea:	4b65      	ldr	r3, [pc, #404]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80070ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f8:	4961      	ldr	r1, [pc, #388]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d004      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b80      	cmp	r3, #128	; 0x80
 800710c:	f040 80c6 	bne.w	800729c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007110:	4b5d      	ldr	r3, [pc, #372]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007116:	f7fb fe61 	bl	8002ddc <HAL_GetTick>
 800711a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800711c:	e008      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800711e:	f7fb fe5d 	bl	8002ddc <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b02      	cmp	r3, #2
 800712a:	d901      	bls.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e10b      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007130:	4b53      	ldr	r3, [pc, #332]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1f0      	bne.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 800713c:	4a53      	ldr	r2, [pc, #332]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007142:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d023      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d019      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007180:	d00e      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800718a:	2b00      	cmp	r3, #0
 800718c:	d019      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	d115      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800719e:	d110      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	019b      	lsls	r3, r3, #6
 80071aa:	431a      	orrs	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	061b      	lsls	r3, r3, #24
 80071b2:	431a      	orrs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	071b      	lsls	r3, r3, #28
 80071ba:	4931      	ldr	r1, [pc, #196]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d026      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d122      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80071ea:	4b25      	ldr	r3, [pc, #148]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80071ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f0:	0e1b      	lsrs	r3, r3, #24
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	019b      	lsls	r3, r3, #6
 8007202:	431a      	orrs	r2, r3
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	061b      	lsls	r3, r3, #24
 8007208:	431a      	orrs	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	071b      	lsls	r3, r3, #28
 8007210:	491b      	ldr	r1, [pc, #108]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007212:	4313      	orrs	r3, r2
 8007214:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8007218:	4b19      	ldr	r3, [pc, #100]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800721a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800721e:	f023 021f 	bic.w	r2, r3, #31
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	3b01      	subs	r3, #1
 8007228:	4915      	ldr	r1, [pc, #84]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007238:	2b00      	cmp	r3, #0
 800723a:	d010      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	019b      	lsls	r3, r3, #6
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	061b      	lsls	r3, r3, #24
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	071b      	lsls	r3, r3, #28
 8007256:	490a      	ldr	r1, [pc, #40]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007258:	4313      	orrs	r3, r2
 800725a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800725e:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007260:	2201      	movs	r2, #1
 8007262:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007264:	f7fb fdba 	bl	8002ddc <HAL_GetTick>
 8007268:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800726a:	e011      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800726c:	f7fb fdb6 	bl	8002ddc <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d90a      	bls.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e064      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800727e:	bf00      	nop
 8007280:	40023800 	.word	0x40023800
 8007284:	424711e0 	.word	0x424711e0
 8007288:	42470068 	.word	0x42470068
 800728c:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007290:	4b2f      	ldr	r3, [pc, #188]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0e7      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072a8:	4b29      	ldr	r3, [pc, #164]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b6:	4926      	ldr	r1, [pc, #152]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80072ca:	4b21      	ldr	r3, [pc, #132]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072d0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	491d      	ldr	r1, [pc, #116]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80072ec:	4b18      	ldr	r3, [pc, #96]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fa:	4915      	ldr	r1, [pc, #84]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800730e:	4b10      	ldr	r3, [pc, #64]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007314:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	490c      	ldr	r1, [pc, #48]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800731e:	4313      	orrs	r3, r2
 8007320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00a      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007336:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733e:	4904      	ldr	r1, [pc, #16]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007340:	4313      	orrs	r3, r2
 8007342:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3720      	adds	r7, #32
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	40023800 	.word	0x40023800

08007354 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e270      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d075      	beq.n	800745e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007372:	4ba3      	ldr	r3, [pc, #652]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 030c 	and.w	r3, r3, #12
 800737a:	2b04      	cmp	r3, #4
 800737c:	d00c      	beq.n	8007398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800737e:	4ba0      	ldr	r3, [pc, #640]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007386:	2b08      	cmp	r3, #8
 8007388:	d112      	bne.n	80073b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800738a:	4b9d      	ldr	r3, [pc, #628]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007396:	d10b      	bne.n	80073b0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007398:	4b99      	ldr	r3, [pc, #612]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d05b      	beq.n	800745c <HAL_RCC_OscConfig+0x108>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d157      	bne.n	800745c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e24b      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b8:	d106      	bne.n	80073c8 <HAL_RCC_OscConfig+0x74>
 80073ba:	4b91      	ldr	r3, [pc, #580]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a90      	ldr	r2, [pc, #576]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	e01d      	b.n	8007404 <HAL_RCC_OscConfig+0xb0>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073d0:	d10c      	bne.n	80073ec <HAL_RCC_OscConfig+0x98>
 80073d2:	4b8b      	ldr	r3, [pc, #556]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a8a      	ldr	r2, [pc, #552]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	4b88      	ldr	r3, [pc, #544]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a87      	ldr	r2, [pc, #540]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	e00b      	b.n	8007404 <HAL_RCC_OscConfig+0xb0>
 80073ec:	4b84      	ldr	r3, [pc, #528]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a83      	ldr	r2, [pc, #524]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	4b81      	ldr	r3, [pc, #516]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a80      	ldr	r2, [pc, #512]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80073fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d013      	beq.n	8007434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740c:	f7fb fce6 	bl	8002ddc <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007414:	f7fb fce2 	bl	8002ddc <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b64      	cmp	r3, #100	; 0x64
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e210      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007426:	4b76      	ldr	r3, [pc, #472]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0f0      	beq.n	8007414 <HAL_RCC_OscConfig+0xc0>
 8007432:	e014      	b.n	800745e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007434:	f7fb fcd2 	bl	8002ddc <HAL_GetTick>
 8007438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800743a:	e008      	b.n	800744e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800743c:	f7fb fcce 	bl	8002ddc <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b64      	cmp	r3, #100	; 0x64
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e1fc      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800744e:	4b6c      	ldr	r3, [pc, #432]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1f0      	bne.n	800743c <HAL_RCC_OscConfig+0xe8>
 800745a:	e000      	b.n	800745e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800745c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d063      	beq.n	8007532 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800746a:	4b65      	ldr	r3, [pc, #404]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 030c 	and.w	r3, r3, #12
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00b      	beq.n	800748e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007476:	4b62      	ldr	r3, [pc, #392]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800747e:	2b08      	cmp	r3, #8
 8007480:	d11c      	bne.n	80074bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007482:	4b5f      	ldr	r3, [pc, #380]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d116      	bne.n	80074bc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800748e:	4b5c      	ldr	r3, [pc, #368]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_RCC_OscConfig+0x152>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d001      	beq.n	80074a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e1d0      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074a6:	4b56      	ldr	r3, [pc, #344]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	4952      	ldr	r1, [pc, #328]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074ba:	e03a      	b.n	8007532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d020      	beq.n	8007506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074c4:	4b4f      	ldr	r3, [pc, #316]	; (8007604 <HAL_RCC_OscConfig+0x2b0>)
 80074c6:	2201      	movs	r2, #1
 80074c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ca:	f7fb fc87 	bl	8002ddc <HAL_GetTick>
 80074ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074d0:	e008      	b.n	80074e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074d2:	f7fb fc83 	bl	8002ddc <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d901      	bls.n	80074e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e1b1      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e4:	4b46      	ldr	r3, [pc, #280]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0f0      	beq.n	80074d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074f0:	4b43      	ldr	r3, [pc, #268]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	4940      	ldr	r1, [pc, #256]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007500:	4313      	orrs	r3, r2
 8007502:	600b      	str	r3, [r1, #0]
 8007504:	e015      	b.n	8007532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007506:	4b3f      	ldr	r3, [pc, #252]	; (8007604 <HAL_RCC_OscConfig+0x2b0>)
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750c:	f7fb fc66 	bl	8002ddc <HAL_GetTick>
 8007510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007514:	f7fb fc62 	bl	8002ddc <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b02      	cmp	r3, #2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e190      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007526:	4b36      	ldr	r3, [pc, #216]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f0      	bne.n	8007514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b00      	cmp	r3, #0
 800753c:	d030      	beq.n	80075a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d016      	beq.n	8007574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007546:	4b30      	ldr	r3, [pc, #192]	; (8007608 <HAL_RCC_OscConfig+0x2b4>)
 8007548:	2201      	movs	r2, #1
 800754a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800754c:	f7fb fc46 	bl	8002ddc <HAL_GetTick>
 8007550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007552:	e008      	b.n	8007566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007554:	f7fb fc42 	bl	8002ddc <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e170      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007566:	4b26      	ldr	r3, [pc, #152]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0f0      	beq.n	8007554 <HAL_RCC_OscConfig+0x200>
 8007572:	e015      	b.n	80075a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007574:	4b24      	ldr	r3, [pc, #144]	; (8007608 <HAL_RCC_OscConfig+0x2b4>)
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800757a:	f7fb fc2f 	bl	8002ddc <HAL_GetTick>
 800757e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007580:	e008      	b.n	8007594 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007582:	f7fb fc2b 	bl	8002ddc <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d901      	bls.n	8007594 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e159      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007594:	4b1a      	ldr	r3, [pc, #104]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 8007596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1f0      	bne.n	8007582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 80a0 	beq.w	80076ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075ae:	2300      	movs	r3, #0
 80075b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075b2:	4b13      	ldr	r3, [pc, #76]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10f      	bne.n	80075de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075be:	2300      	movs	r3, #0
 80075c0:	60bb      	str	r3, [r7, #8]
 80075c2:	4b0f      	ldr	r3, [pc, #60]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	4a0e      	ldr	r2, [pc, #56]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80075c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075cc:	6413      	str	r3, [r2, #64]	; 0x40
 80075ce:	4b0c      	ldr	r3, [pc, #48]	; (8007600 <HAL_RCC_OscConfig+0x2ac>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d6:	60bb      	str	r3, [r7, #8]
 80075d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075da:	2301      	movs	r3, #1
 80075dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075de:	4b0b      	ldr	r3, [pc, #44]	; (800760c <HAL_RCC_OscConfig+0x2b8>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d121      	bne.n	800762e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075ea:	4b08      	ldr	r3, [pc, #32]	; (800760c <HAL_RCC_OscConfig+0x2b8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a07      	ldr	r2, [pc, #28]	; (800760c <HAL_RCC_OscConfig+0x2b8>)
 80075f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075f6:	f7fb fbf1 	bl	8002ddc <HAL_GetTick>
 80075fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075fc:	e011      	b.n	8007622 <HAL_RCC_OscConfig+0x2ce>
 80075fe:	bf00      	nop
 8007600:	40023800 	.word	0x40023800
 8007604:	42470000 	.word	0x42470000
 8007608:	42470e80 	.word	0x42470e80
 800760c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007610:	f7fb fbe4 	bl	8002ddc <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e112      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007622:	4b8b      	ldr	r3, [pc, #556]	; (8007850 <HAL_RCC_OscConfig+0x4fc>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0f0      	beq.n	8007610 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d106      	bne.n	8007644 <HAL_RCC_OscConfig+0x2f0>
 8007636:	4b87      	ldr	r3, [pc, #540]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 8007638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763a:	4a86      	ldr	r2, [pc, #536]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 800763c:	f043 0301 	orr.w	r3, r3, #1
 8007640:	6713      	str	r3, [r2, #112]	; 0x70
 8007642:	e01c      	b.n	800767e <HAL_RCC_OscConfig+0x32a>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	2b05      	cmp	r3, #5
 800764a:	d10c      	bne.n	8007666 <HAL_RCC_OscConfig+0x312>
 800764c:	4b81      	ldr	r3, [pc, #516]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 800764e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007650:	4a80      	ldr	r2, [pc, #512]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 8007652:	f043 0304 	orr.w	r3, r3, #4
 8007656:	6713      	str	r3, [r2, #112]	; 0x70
 8007658:	4b7e      	ldr	r3, [pc, #504]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 800765a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765c:	4a7d      	ldr	r2, [pc, #500]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 800765e:	f043 0301 	orr.w	r3, r3, #1
 8007662:	6713      	str	r3, [r2, #112]	; 0x70
 8007664:	e00b      	b.n	800767e <HAL_RCC_OscConfig+0x32a>
 8007666:	4b7b      	ldr	r3, [pc, #492]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766a:	4a7a      	ldr	r2, [pc, #488]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 800766c:	f023 0301 	bic.w	r3, r3, #1
 8007670:	6713      	str	r3, [r2, #112]	; 0x70
 8007672:	4b78      	ldr	r3, [pc, #480]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 8007674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007676:	4a77      	ldr	r2, [pc, #476]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 8007678:	f023 0304 	bic.w	r3, r3, #4
 800767c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d015      	beq.n	80076b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007686:	f7fb fba9 	bl	8002ddc <HAL_GetTick>
 800768a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800768c:	e00a      	b.n	80076a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800768e:	f7fb fba5 	bl	8002ddc <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	f241 3288 	movw	r2, #5000	; 0x1388
 800769c:	4293      	cmp	r3, r2
 800769e:	d901      	bls.n	80076a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e0d1      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a4:	4b6b      	ldr	r3, [pc, #428]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 80076a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d0ee      	beq.n	800768e <HAL_RCC_OscConfig+0x33a>
 80076b0:	e014      	b.n	80076dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076b2:	f7fb fb93 	bl	8002ddc <HAL_GetTick>
 80076b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076b8:	e00a      	b.n	80076d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076ba:	f7fb fb8f 	bl	8002ddc <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e0bb      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076d0:	4b60      	ldr	r3, [pc, #384]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 80076d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1ee      	bne.n	80076ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d105      	bne.n	80076ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076e2:	4b5c      	ldr	r3, [pc, #368]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	4a5b      	ldr	r2, [pc, #364]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 80076e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80a7 	beq.w	8007846 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076f8:	4b56      	ldr	r3, [pc, #344]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f003 030c 	and.w	r3, r3, #12
 8007700:	2b08      	cmp	r3, #8
 8007702:	d060      	beq.n	80077c6 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	2b02      	cmp	r3, #2
 800770a:	d145      	bne.n	8007798 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800770c:	4b52      	ldr	r3, [pc, #328]	; (8007858 <HAL_RCC_OscConfig+0x504>)
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007712:	f7fb fb63 	bl	8002ddc <HAL_GetTick>
 8007716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007718:	e008      	b.n	800772c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800771a:	f7fb fb5f 	bl	8002ddc <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d901      	bls.n	800772c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e08d      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800772c:	4b49      	ldr	r3, [pc, #292]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1f0      	bne.n	800771a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	69da      	ldr	r2, [r3, #28]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	019b      	lsls	r3, r3, #6
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	085b      	lsrs	r3, r3, #1
 8007750:	3b01      	subs	r3, #1
 8007752:	041b      	lsls	r3, r3, #16
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775a:	061b      	lsls	r3, r3, #24
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	071b      	lsls	r3, r3, #28
 8007764:	493b      	ldr	r1, [pc, #236]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 8007766:	4313      	orrs	r3, r2
 8007768:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800776a:	4b3b      	ldr	r3, [pc, #236]	; (8007858 <HAL_RCC_OscConfig+0x504>)
 800776c:	2201      	movs	r2, #1
 800776e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007770:	f7fb fb34 	bl	8002ddc <HAL_GetTick>
 8007774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007776:	e008      	b.n	800778a <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007778:	f7fb fb30 	bl	8002ddc <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e05e      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800778a:	4b32      	ldr	r3, [pc, #200]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0f0      	beq.n	8007778 <HAL_RCC_OscConfig+0x424>
 8007796:	e056      	b.n	8007846 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007798:	4b2f      	ldr	r3, [pc, #188]	; (8007858 <HAL_RCC_OscConfig+0x504>)
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779e:	f7fb fb1d 	bl	8002ddc <HAL_GetTick>
 80077a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077a4:	e008      	b.n	80077b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077a6:	f7fb fb19 	bl	8002ddc <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e047      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b8:	4b26      	ldr	r3, [pc, #152]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1f0      	bne.n	80077a6 <HAL_RCC_OscConfig+0x452>
 80077c4:	e03f      	b.n	8007846 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d101      	bne.n	80077d2 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e03a      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077d2:	4b20      	ldr	r3, [pc, #128]	; (8007854 <HAL_RCC_OscConfig+0x500>)
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d030      	beq.n	8007842 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d129      	bne.n	8007842 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d122      	bne.n	8007842 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007802:	4013      	ands	r3, r2
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007808:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800780a:	4293      	cmp	r3, r2
 800780c:	d119      	bne.n	8007842 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007818:	085b      	lsrs	r3, r3, #1
 800781a:	3b01      	subs	r3, #1
 800781c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800781e:	429a      	cmp	r2, r3
 8007820:	d10f      	bne.n	8007842 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800782e:	429a      	cmp	r2, r3
 8007830:	d107      	bne.n	8007842 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783c:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800783e:	429a      	cmp	r2, r3
 8007840:	d001      	beq.n	8007846 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e000      	b.n	8007848 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	40007000 	.word	0x40007000
 8007854:	40023800 	.word	0x40023800
 8007858:	42470060 	.word	0x42470060

0800785c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e034      	b.n	80078dc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d106      	bne.n	800788c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7f9 f958 	bl	8000b3c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3308      	adds	r3, #8
 8007894:	4619      	mov	r1, r3
 8007896:	4610      	mov	r0, r2
 8007898:	f001 f8be 	bl	8008a18 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6818      	ldr	r0, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	461a      	mov	r2, r3
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	f001 f926 	bl	8008af8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6858      	ldr	r0, [r3, #4]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b8:	6879      	ldr	r1, [r7, #4]
 80078ba:	f001 f971 	bl	8008ba0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	6892      	ldr	r2, [r2, #8]
 80078c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	6892      	ldr	r2, [r2, #8]
 80078d2:	f041 0101 	orr.w	r1, r1, #1
 80078d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e041      	b.n	800797a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d106      	bne.n	8007910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7fa fb74 	bl	8001ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3304      	adds	r3, #4
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f000 f8d8 	bl	8007ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b01      	cmp	r3, #1
 8007996:	d001      	beq.n	800799c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e046      	b.n	8007a2a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a23      	ldr	r2, [pc, #140]	; (8007a38 <HAL_TIM_Base_Start+0xb4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d022      	beq.n	80079f4 <HAL_TIM_Base_Start+0x70>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b6:	d01d      	beq.n	80079f4 <HAL_TIM_Base_Start+0x70>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1f      	ldr	r2, [pc, #124]	; (8007a3c <HAL_TIM_Base_Start+0xb8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d018      	beq.n	80079f4 <HAL_TIM_Base_Start+0x70>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a1e      	ldr	r2, [pc, #120]	; (8007a40 <HAL_TIM_Base_Start+0xbc>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d013      	beq.n	80079f4 <HAL_TIM_Base_Start+0x70>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a1c      	ldr	r2, [pc, #112]	; (8007a44 <HAL_TIM_Base_Start+0xc0>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00e      	beq.n	80079f4 <HAL_TIM_Base_Start+0x70>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a1b      	ldr	r2, [pc, #108]	; (8007a48 <HAL_TIM_Base_Start+0xc4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d009      	beq.n	80079f4 <HAL_TIM_Base_Start+0x70>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a19      	ldr	r2, [pc, #100]	; (8007a4c <HAL_TIM_Base_Start+0xc8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d004      	beq.n	80079f4 <HAL_TIM_Base_Start+0x70>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a18      	ldr	r2, [pc, #96]	; (8007a50 <HAL_TIM_Base_Start+0xcc>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d111      	bne.n	8007a18 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b06      	cmp	r3, #6
 8007a04:	d010      	beq.n	8007a28 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f042 0201 	orr.w	r2, r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a16:	e007      	b.n	8007a28 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0201 	orr.w	r2, r2, #1
 8007a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	40010000 	.word	0x40010000
 8007a3c:	40000400 	.word	0x40000400
 8007a40:	40000800 	.word	0x40000800
 8007a44:	40000c00 	.word	0x40000c00
 8007a48:	40010400 	.word	0x40010400
 8007a4c:	40014000 	.word	0x40014000
 8007a50:	40001800 	.word	0x40001800

08007a54 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_TIM_SlaveConfigSynchro+0x18>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e031      	b.n	8007ad0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f8ca 	bl	8007c18 <TIM_SlaveTimer_SetConfig>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d009      	beq.n	8007a9e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e018      	b.n	8007ad0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007abc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a40      	ldr	r2, [pc, #256]	; (8007bec <TIM_Base_SetConfig+0x114>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d013      	beq.n	8007b18 <TIM_Base_SetConfig+0x40>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af6:	d00f      	beq.n	8007b18 <TIM_Base_SetConfig+0x40>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a3d      	ldr	r2, [pc, #244]	; (8007bf0 <TIM_Base_SetConfig+0x118>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00b      	beq.n	8007b18 <TIM_Base_SetConfig+0x40>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a3c      	ldr	r2, [pc, #240]	; (8007bf4 <TIM_Base_SetConfig+0x11c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d007      	beq.n	8007b18 <TIM_Base_SetConfig+0x40>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a3b      	ldr	r2, [pc, #236]	; (8007bf8 <TIM_Base_SetConfig+0x120>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d003      	beq.n	8007b18 <TIM_Base_SetConfig+0x40>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a3a      	ldr	r2, [pc, #232]	; (8007bfc <TIM_Base_SetConfig+0x124>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d108      	bne.n	8007b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a2f      	ldr	r2, [pc, #188]	; (8007bec <TIM_Base_SetConfig+0x114>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d02b      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b38:	d027      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a2c      	ldr	r2, [pc, #176]	; (8007bf0 <TIM_Base_SetConfig+0x118>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d023      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a2b      	ldr	r2, [pc, #172]	; (8007bf4 <TIM_Base_SetConfig+0x11c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d01f      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a2a      	ldr	r2, [pc, #168]	; (8007bf8 <TIM_Base_SetConfig+0x120>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d01b      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a29      	ldr	r2, [pc, #164]	; (8007bfc <TIM_Base_SetConfig+0x124>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d017      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a28      	ldr	r2, [pc, #160]	; (8007c00 <TIM_Base_SetConfig+0x128>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d013      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a27      	ldr	r2, [pc, #156]	; (8007c04 <TIM_Base_SetConfig+0x12c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00f      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a26      	ldr	r2, [pc, #152]	; (8007c08 <TIM_Base_SetConfig+0x130>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d00b      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a25      	ldr	r2, [pc, #148]	; (8007c0c <TIM_Base_SetConfig+0x134>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d007      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a24      	ldr	r2, [pc, #144]	; (8007c10 <TIM_Base_SetConfig+0x138>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d003      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a23      	ldr	r2, [pc, #140]	; (8007c14 <TIM_Base_SetConfig+0x13c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d108      	bne.n	8007b9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a0a      	ldr	r2, [pc, #40]	; (8007bec <TIM_Base_SetConfig+0x114>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d003      	beq.n	8007bd0 <TIM_Base_SetConfig+0xf8>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a0c      	ldr	r2, [pc, #48]	; (8007bfc <TIM_Base_SetConfig+0x124>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d103      	bne.n	8007bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	691a      	ldr	r2, [r3, #16]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	615a      	str	r2, [r3, #20]
}
 8007bde:	bf00      	nop
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	40010000 	.word	0x40010000
 8007bf0:	40000400 	.word	0x40000400
 8007bf4:	40000800 	.word	0x40000800
 8007bf8:	40000c00 	.word	0x40000c00
 8007bfc:	40010400 	.word	0x40010400
 8007c00:	40014000 	.word	0x40014000
 8007c04:	40014400 	.word	0x40014400
 8007c08:	40014800 	.word	0x40014800
 8007c0c:	40001800 	.word	0x40001800
 8007c10:	40001c00 	.word	0x40001c00
 8007c14:	40002000 	.word	0x40002000

08007c18 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c30:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f023 0307 	bic.w	r3, r3, #7
 8007c42:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b70      	cmp	r3, #112	; 0x70
 8007c5c:	d01a      	beq.n	8007c94 <TIM_SlaveTimer_SetConfig+0x7c>
 8007c5e:	2b70      	cmp	r3, #112	; 0x70
 8007c60:	d860      	bhi.n	8007d24 <TIM_SlaveTimer_SetConfig+0x10c>
 8007c62:	2b60      	cmp	r3, #96	; 0x60
 8007c64:	d054      	beq.n	8007d10 <TIM_SlaveTimer_SetConfig+0xf8>
 8007c66:	2b60      	cmp	r3, #96	; 0x60
 8007c68:	d85c      	bhi.n	8007d24 <TIM_SlaveTimer_SetConfig+0x10c>
 8007c6a:	2b50      	cmp	r3, #80	; 0x50
 8007c6c:	d046      	beq.n	8007cfc <TIM_SlaveTimer_SetConfig+0xe4>
 8007c6e:	2b50      	cmp	r3, #80	; 0x50
 8007c70:	d858      	bhi.n	8007d24 <TIM_SlaveTimer_SetConfig+0x10c>
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	d019      	beq.n	8007caa <TIM_SlaveTimer_SetConfig+0x92>
 8007c76:	2b40      	cmp	r3, #64	; 0x40
 8007c78:	d854      	bhi.n	8007d24 <TIM_SlaveTimer_SetConfig+0x10c>
 8007c7a:	2b30      	cmp	r3, #48	; 0x30
 8007c7c:	d054      	beq.n	8007d28 <TIM_SlaveTimer_SetConfig+0x110>
 8007c7e:	2b30      	cmp	r3, #48	; 0x30
 8007c80:	d850      	bhi.n	8007d24 <TIM_SlaveTimer_SetConfig+0x10c>
 8007c82:	2b20      	cmp	r3, #32
 8007c84:	d050      	beq.n	8007d28 <TIM_SlaveTimer_SetConfig+0x110>
 8007c86:	2b20      	cmp	r3, #32
 8007c88:	d84c      	bhi.n	8007d24 <TIM_SlaveTimer_SetConfig+0x10c>
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d04c      	beq.n	8007d28 <TIM_SlaveTimer_SetConfig+0x110>
 8007c8e:	2b10      	cmp	r3, #16
 8007c90:	d04a      	beq.n	8007d28 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8007c92:	e047      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6818      	ldr	r0, [r3, #0]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	68d9      	ldr	r1, [r3, #12]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	f000 f8a5 	bl	8007df2 <TIM_ETR_SetConfig>
      break;
 8007ca8:	e03f      	b.n	8007d2a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b05      	cmp	r3, #5
 8007cb0:	d101      	bne.n	8007cb6 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e03a      	b.n	8007d2c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6a1a      	ldr	r2, [r3, #32]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0201 	bic.w	r2, r2, #1
 8007ccc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cdc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	621a      	str	r2, [r3, #32]
      break;
 8007cfa:	e016      	b.n	8007d2a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	6899      	ldr	r1, [r3, #8]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	f000 f813 	bl	8007d34 <TIM_TI1_ConfigInputStage>
      break;
 8007d0e:	e00c      	b.n	8007d2a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6818      	ldr	r0, [r3, #0]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	6899      	ldr	r1, [r3, #8]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f000 f838 	bl	8007d92 <TIM_TI2_ConfigInputStage>
      break;
 8007d22:	e002      	b.n	8007d2a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8007d24:	bf00      	nop
 8007d26:	e000      	b.n	8007d2a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8007d28:	bf00      	nop
  }
  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	f023 0201 	bic.w	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f023 030a 	bic.w	r3, r3, #10
 8007d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b087      	sub	sp, #28
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	f023 0210 	bic.w	r2, r3, #16
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	031b      	lsls	r3, r3, #12
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	621a      	str	r2, [r3, #32]
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b087      	sub	sp, #28
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	60f8      	str	r0, [r7, #12]
 8007dfa:	60b9      	str	r1, [r7, #8]
 8007dfc:	607a      	str	r2, [r7, #4]
 8007dfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	021a      	lsls	r2, r3, #8
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	431a      	orrs	r2, r3
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	609a      	str	r2, [r3, #8]
}
 8007e26:	bf00      	nop
 8007e28:	371c      	adds	r7, #28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
	...

08007e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d101      	bne.n	8007e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e05a      	b.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a21      	ldr	r2, [pc, #132]	; (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d022      	beq.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e98:	d01d      	beq.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d018      	beq.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a1b      	ldr	r2, [pc, #108]	; (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d013      	beq.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a1a      	ldr	r2, [pc, #104]	; (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d00e      	beq.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a18      	ldr	r2, [pc, #96]	; (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d009      	beq.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a17      	ldr	r2, [pc, #92]	; (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d004      	beq.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a15      	ldr	r2, [pc, #84]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d10c      	bne.n	8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40010000 	.word	0x40010000
 8007f14:	40000400 	.word	0x40000400
 8007f18:	40000800 	.word	0x40000800
 8007f1c:	40000c00 	.word	0x40000c00
 8007f20:	40010400 	.word	0x40010400
 8007f24:	40014000 	.word	0x40014000
 8007f28:	40001800 	.word	0x40001800

08007f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e03f      	b.n	8007fbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d106      	bne.n	8007f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7fa fe60 	bl	8002c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2224      	movs	r2, #36	; 0x24
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68da      	ldr	r2, [r3, #12]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fb79 	bl	8008668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	691a      	ldr	r2, [r3, #16]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	695a      	ldr	r2, [r3, #20]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68da      	ldr	r2, [r3, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	d130      	bne.n	8008042 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d002      	beq.n	8007fec <HAL_UART_Transmit_IT+0x26>
 8007fe6:	88fb      	ldrh	r3, [r7, #6]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e029      	b.n	8008044 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d101      	bne.n	8007ffe <HAL_UART_Transmit_IT+0x38>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e022      	b.n	8008044 <HAL_UART_Transmit_IT+0x7e>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	88fa      	ldrh	r2, [r7, #6]
 8008010:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	88fa      	ldrh	r2, [r7, #6]
 8008016:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2221      	movs	r2, #33	; 0x21
 8008022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68da      	ldr	r2, [r3, #12]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800803c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	e000      	b.n	8008044 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008042:	2302      	movs	r3, #2
  }
}
 8008044:	4618      	mov	r0, r3
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b08a      	sub	sp, #40	; 0x28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008070:	2300      	movs	r3, #0
 8008072:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	f003 030f 	and.w	r3, r3, #15
 800807e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10d      	bne.n	80080a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	f003 0320 	and.w	r3, r3, #32
 800808c:	2b00      	cmp	r3, #0
 800808e:	d008      	beq.n	80080a2 <HAL_UART_IRQHandler+0x52>
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa4d 	bl	800853a <UART_Receive_IT>
      return;
 80080a0:	e17c      	b.n	800839c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 80b1 	beq.w	800820c <HAL_UART_IRQHandler+0x1bc>
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d105      	bne.n	80080c0 <HAL_UART_IRQHandler+0x70>
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 80a6 	beq.w	800820c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <HAL_UART_IRQHandler+0x90>
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d8:	f043 0201 	orr.w	r2, r3, #1
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	f003 0304 	and.w	r3, r3, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <HAL_UART_IRQHandler+0xb0>
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d005      	beq.n	8008100 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	f043 0202 	orr.w	r2, r3, #2
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <HAL_UART_IRQHandler+0xd0>
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d005      	beq.n	8008120 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008118:	f043 0204 	orr.w	r2, r3, #4
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	f003 0308 	and.w	r3, r3, #8
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00f      	beq.n	800814a <HAL_UART_IRQHandler+0xfa>
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	f003 0320 	and.w	r3, r3, #32
 8008130:	2b00      	cmp	r3, #0
 8008132:	d104      	bne.n	800813e <HAL_UART_IRQHandler+0xee>
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d005      	beq.n	800814a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	f043 0208 	orr.w	r2, r3, #8
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 811f 	beq.w	8008392 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d007      	beq.n	800816e <HAL_UART_IRQHandler+0x11e>
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f9e6 	bl	800853a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008178:	2b40      	cmp	r3, #64	; 0x40
 800817a:	bf0c      	ite	eq
 800817c:	2301      	moveq	r3, #1
 800817e:	2300      	movne	r3, #0
 8008180:	b2db      	uxtb	r3, r3
 8008182:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008188:	f003 0308 	and.w	r3, r3, #8
 800818c:	2b00      	cmp	r3, #0
 800818e:	d102      	bne.n	8008196 <HAL_UART_IRQHandler+0x146>
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d031      	beq.n	80081fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f926 	bl	80083e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a6:	2b40      	cmp	r3, #64	; 0x40
 80081a8:	d123      	bne.n	80081f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	695a      	ldr	r2, [r3, #20]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d013      	beq.n	80081ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	4a77      	ldr	r2, [pc, #476]	; (80083a4 <HAL_UART_IRQHandler+0x354>)
 80081c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fb fcbb 	bl	8003b4a <HAL_DMA_Abort_IT>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d016      	beq.n	8008208 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081e4:	4610      	mov	r0, r2
 80081e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e8:	e00e      	b.n	8008208 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f8e6 	bl	80083bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f0:	e00a      	b.n	8008208 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f8e2 	bl	80083bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f8:	e006      	b.n	8008208 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f8de 	bl	80083bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008206:	e0c4      	b.n	8008392 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008208:	bf00      	nop
    return;
 800820a:	e0c2      	b.n	8008392 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008210:	2b01      	cmp	r3, #1
 8008212:	f040 80a2 	bne.w	800835a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 809c 	beq.w	800835a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	f003 0310 	and.w	r3, r3, #16
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 8096 	beq.w	800835a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800822e:	2300      	movs	r3, #0
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60fb      	str	r3, [r7, #12]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	60fb      	str	r3, [r7, #12]
 8008242:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824e:	2b40      	cmp	r3, #64	; 0x40
 8008250:	d14f      	bne.n	80082f2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800825c:	8a3b      	ldrh	r3, [r7, #16]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 8099 	beq.w	8008396 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008268:	8a3a      	ldrh	r2, [r7, #16]
 800826a:	429a      	cmp	r2, r3
 800826c:	f080 8093 	bcs.w	8008396 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8a3a      	ldrh	r2, [r7, #16]
 8008274:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008280:	d02b      	beq.n	80082da <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68da      	ldr	r2, [r3, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008290:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	695a      	ldr	r2, [r3, #20]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0201 	bic.w	r2, r2, #1
 80082a0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695a      	ldr	r2, [r3, #20]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082b0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f022 0210 	bic.w	r2, r2, #16
 80082ce:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fb fbc8 	bl	8003a6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f870 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80082f0:	e051      	b.n	8008396 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008304:	b29b      	uxth	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d047      	beq.n	800839a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800830a:	8a7b      	ldrh	r3, [r7, #18]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d044      	beq.n	800839a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800831e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	695a      	ldr	r2, [r3, #20]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0201 	bic.w	r2, r2, #1
 800832e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2220      	movs	r2, #32
 8008334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68da      	ldr	r2, [r3, #12]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0210 	bic.w	r2, r2, #16
 800834c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800834e:	8a7b      	ldrh	r3, [r7, #18]
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f83c 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008358:	e01f      	b.n	800839a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008360:	2b00      	cmp	r3, #0
 8008362:	d008      	beq.n	8008376 <HAL_UART_IRQHandler+0x326>
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f87b 	bl	800846a <UART_Transmit_IT>
    return;
 8008374:	e012      	b.n	800839c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00d      	beq.n	800839c <HAL_UART_IRQHandler+0x34c>
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008386:	2b00      	cmp	r3, #0
 8008388:	d008      	beq.n	800839c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f8bd 	bl	800850a <UART_EndTransmit_IT>
    return;
 8008390:	e004      	b.n	800839c <HAL_UART_IRQHandler+0x34c>
    return;
 8008392:	bf00      	nop
 8008394:	e002      	b.n	800839c <HAL_UART_IRQHandler+0x34c>
      return;
 8008396:	bf00      	nop
 8008398:	e000      	b.n	800839c <HAL_UART_IRQHandler+0x34c>
      return;
 800839a:	bf00      	nop
  }
}
 800839c:	3728      	adds	r7, #40	; 0x28
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	08008443 	.word	0x08008443

080083a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80083fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	695a      	ldr	r2, [r3, #20]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0201 	bic.w	r2, r2, #1
 800840e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008414:	2b01      	cmp	r3, #1
 8008416:	d107      	bne.n	8008428 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0210 	bic.w	r2, r2, #16
 8008426:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008436:	bf00      	nop
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7ff ffad 	bl	80083bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008462:	bf00      	nop
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b21      	cmp	r3, #33	; 0x21
 800847c:	d13e      	bne.n	80084fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008486:	d114      	bne.n	80084b2 <UART_Transmit_IT+0x48>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d110      	bne.n	80084b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	1c9a      	adds	r2, r3, #2
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	621a      	str	r2, [r3, #32]
 80084b0:	e008      	b.n	80084c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	1c59      	adds	r1, r3, #1
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	6211      	str	r1, [r2, #32]
 80084bc:	781a      	ldrb	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	3b01      	subs	r3, #1
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	4619      	mov	r1, r3
 80084d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10f      	bne.n	80084f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	e000      	b.n	80084fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084fc:	2302      	movs	r3, #2
  }
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008520:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2220      	movs	r2, #32
 8008526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7fa f8c2 	bl	80026b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b22      	cmp	r3, #34	; 0x22
 800854c:	f040 8087 	bne.w	800865e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008558:	d117      	bne.n	800858a <UART_Receive_IT+0x50>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d113      	bne.n	800858a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	b29b      	uxth	r3, r3
 8008574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008578:	b29a      	uxth	r2, r3
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008582:	1c9a      	adds	r2, r3, #2
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	629a      	str	r2, [r3, #40]	; 0x28
 8008588:	e026      	b.n	80085d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800859c:	d007      	beq.n	80085ae <UART_Receive_IT+0x74>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10a      	bne.n	80085bc <UART_Receive_IT+0x82>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d106      	bne.n	80085bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	e008      	b.n	80085ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085dc:	b29b      	uxth	r3, r3
 80085de:	3b01      	subs	r3, #1
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	4619      	mov	r1, r3
 80085e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d136      	bne.n	800865a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0220 	bic.w	r2, r2, #32
 80085fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800860a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	695a      	ldr	r2, [r3, #20]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f022 0201 	bic.w	r2, r2, #1
 800861a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2220      	movs	r2, #32
 8008620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008628:	2b01      	cmp	r3, #1
 800862a:	d10e      	bne.n	800864a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0210 	bic.w	r2, r2, #16
 800863a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7ff fec4 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
 8008648:	e002      	b.n	8008650 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff feac 	bl	80083a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	e002      	b.n	8008660 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	e000      	b.n	8008660 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800865e:	2302      	movs	r3, #2
  }
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	b09f      	sub	sp, #124	; 0x7c
 800866e:	af00      	add	r7, sp, #0
 8008670:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800867c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867e:	68d9      	ldr	r1, [r3, #12]
 8008680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	ea40 0301 	orr.w	r3, r0, r1
 8008688:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800868a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800868c:	689a      	ldr	r2, [r3, #8]
 800868e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	431a      	orrs	r2, r3
 8008694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	431a      	orrs	r2, r3
 800869a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	4313      	orrs	r3, r2
 80086a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80086a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80086ac:	f021 010c 	bic.w	r1, r1, #12
 80086b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086b6:	430b      	orrs	r3, r1
 80086b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80086c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086c6:	6999      	ldr	r1, [r3, #24]
 80086c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	ea40 0301 	orr.w	r3, r0, r1
 80086d0:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80086d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4b6a      	ldr	r3, [pc, #424]	; (8008880 <UART_SetConfig+0x218>)
 80086d8:	429a      	cmp	r2, r3
 80086da:	d00e      	beq.n	80086fa <UART_SetConfig+0x92>
 80086dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	4b68      	ldr	r3, [pc, #416]	; (8008884 <UART_SetConfig+0x21c>)
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d009      	beq.n	80086fa <UART_SetConfig+0x92>
 80086e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	4b67      	ldr	r3, [pc, #412]	; (8008888 <UART_SetConfig+0x220>)
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d004      	beq.n	80086fa <UART_SetConfig+0x92>
 80086f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	4b65      	ldr	r3, [pc, #404]	; (800888c <UART_SetConfig+0x224>)
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d103      	bne.n	8008702 <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086fa:	f7fe fb8b 	bl	8006e14 <HAL_RCC_GetPCLK2Freq>
 80086fe:	6778      	str	r0, [r7, #116]	; 0x74
 8008700:	e002      	b.n	8008708 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008702:	f7fe fb73 	bl	8006dec <HAL_RCC_GetPCLK1Freq>
 8008706:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008710:	f040 80c0 	bne.w	8008894 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008716:	461c      	mov	r4, r3
 8008718:	f04f 0500 	mov.w	r5, #0
 800871c:	4622      	mov	r2, r4
 800871e:	462b      	mov	r3, r5
 8008720:	1891      	adds	r1, r2, r2
 8008722:	6439      	str	r1, [r7, #64]	; 0x40
 8008724:	415b      	adcs	r3, r3
 8008726:	647b      	str	r3, [r7, #68]	; 0x44
 8008728:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800872c:	1912      	adds	r2, r2, r4
 800872e:	eb45 0303 	adc.w	r3, r5, r3
 8008732:	f04f 0000 	mov.w	r0, #0
 8008736:	f04f 0100 	mov.w	r1, #0
 800873a:	00d9      	lsls	r1, r3, #3
 800873c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008740:	00d0      	lsls	r0, r2, #3
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	1911      	adds	r1, r2, r4
 8008748:	6639      	str	r1, [r7, #96]	; 0x60
 800874a:	416b      	adcs	r3, r5
 800874c:	667b      	str	r3, [r7, #100]	; 0x64
 800874e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	461a      	mov	r2, r3
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	1891      	adds	r1, r2, r2
 800875a:	63b9      	str	r1, [r7, #56]	; 0x38
 800875c:	415b      	adcs	r3, r3
 800875e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008760:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008764:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008768:	f7f7 fdb2 	bl	80002d0 <__aeabi_uldivmod>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	4b47      	ldr	r3, [pc, #284]	; (8008890 <UART_SetConfig+0x228>)
 8008772:	fba3 2302 	umull	r2, r3, r3, r2
 8008776:	095b      	lsrs	r3, r3, #5
 8008778:	011e      	lsls	r6, r3, #4
 800877a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800877c:	461c      	mov	r4, r3
 800877e:	f04f 0500 	mov.w	r5, #0
 8008782:	4622      	mov	r2, r4
 8008784:	462b      	mov	r3, r5
 8008786:	1891      	adds	r1, r2, r2
 8008788:	6339      	str	r1, [r7, #48]	; 0x30
 800878a:	415b      	adcs	r3, r3
 800878c:	637b      	str	r3, [r7, #52]	; 0x34
 800878e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008792:	1912      	adds	r2, r2, r4
 8008794:	eb45 0303 	adc.w	r3, r5, r3
 8008798:	f04f 0000 	mov.w	r0, #0
 800879c:	f04f 0100 	mov.w	r1, #0
 80087a0:	00d9      	lsls	r1, r3, #3
 80087a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087a6:	00d0      	lsls	r0, r2, #3
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	1911      	adds	r1, r2, r4
 80087ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80087b0:	416b      	adcs	r3, r5
 80087b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	461a      	mov	r2, r3
 80087ba:	f04f 0300 	mov.w	r3, #0
 80087be:	1891      	adds	r1, r2, r2
 80087c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80087c2:	415b      	adcs	r3, r3
 80087c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80087ce:	f7f7 fd7f 	bl	80002d0 <__aeabi_uldivmod>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4b2e      	ldr	r3, [pc, #184]	; (8008890 <UART_SetConfig+0x228>)
 80087d8:	fba3 1302 	umull	r1, r3, r3, r2
 80087dc:	095b      	lsrs	r3, r3, #5
 80087de:	2164      	movs	r1, #100	; 0x64
 80087e0:	fb01 f303 	mul.w	r3, r1, r3
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	3332      	adds	r3, #50	; 0x32
 80087ea:	4a29      	ldr	r2, [pc, #164]	; (8008890 <UART_SetConfig+0x228>)
 80087ec:	fba2 2303 	umull	r2, r3, r2, r3
 80087f0:	095b      	lsrs	r3, r3, #5
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80087f8:	441e      	add	r6, r3
 80087fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087fc:	4618      	mov	r0, r3
 80087fe:	f04f 0100 	mov.w	r1, #0
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	1894      	adds	r4, r2, r2
 8008808:	623c      	str	r4, [r7, #32]
 800880a:	415b      	adcs	r3, r3
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
 800880e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008812:	1812      	adds	r2, r2, r0
 8008814:	eb41 0303 	adc.w	r3, r1, r3
 8008818:	f04f 0400 	mov.w	r4, #0
 800881c:	f04f 0500 	mov.w	r5, #0
 8008820:	00dd      	lsls	r5, r3, #3
 8008822:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008826:	00d4      	lsls	r4, r2, #3
 8008828:	4622      	mov	r2, r4
 800882a:	462b      	mov	r3, r5
 800882c:	1814      	adds	r4, r2, r0
 800882e:	653c      	str	r4, [r7, #80]	; 0x50
 8008830:	414b      	adcs	r3, r1
 8008832:	657b      	str	r3, [r7, #84]	; 0x54
 8008834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	461a      	mov	r2, r3
 800883a:	f04f 0300 	mov.w	r3, #0
 800883e:	1891      	adds	r1, r2, r2
 8008840:	61b9      	str	r1, [r7, #24]
 8008842:	415b      	adcs	r3, r3
 8008844:	61fb      	str	r3, [r7, #28]
 8008846:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800884a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800884e:	f7f7 fd3f 	bl	80002d0 <__aeabi_uldivmod>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4b0e      	ldr	r3, [pc, #56]	; (8008890 <UART_SetConfig+0x228>)
 8008858:	fba3 1302 	umull	r1, r3, r3, r2
 800885c:	095b      	lsrs	r3, r3, #5
 800885e:	2164      	movs	r1, #100	; 0x64
 8008860:	fb01 f303 	mul.w	r3, r1, r3
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	3332      	adds	r3, #50	; 0x32
 800886a:	4a09      	ldr	r2, [pc, #36]	; (8008890 <UART_SetConfig+0x228>)
 800886c:	fba2 2303 	umull	r2, r3, r2, r3
 8008870:	095b      	lsrs	r3, r3, #5
 8008872:	f003 0207 	and.w	r2, r3, #7
 8008876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4432      	add	r2, r6
 800887c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800887e:	e0c3      	b.n	8008a08 <UART_SetConfig+0x3a0>
 8008880:	40011000 	.word	0x40011000
 8008884:	40011400 	.word	0x40011400
 8008888:	40011800 	.word	0x40011800
 800888c:	40011c00 	.word	0x40011c00
 8008890:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008896:	461c      	mov	r4, r3
 8008898:	f04f 0500 	mov.w	r5, #0
 800889c:	4622      	mov	r2, r4
 800889e:	462b      	mov	r3, r5
 80088a0:	1891      	adds	r1, r2, r2
 80088a2:	6139      	str	r1, [r7, #16]
 80088a4:	415b      	adcs	r3, r3
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80088ac:	1912      	adds	r2, r2, r4
 80088ae:	eb45 0303 	adc.w	r3, r5, r3
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f04f 0100 	mov.w	r1, #0
 80088ba:	00d9      	lsls	r1, r3, #3
 80088bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088c0:	00d0      	lsls	r0, r2, #3
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	eb12 0804 	adds.w	r8, r2, r4
 80088ca:	eb43 0905 	adc.w	r9, r3, r5
 80088ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f04f 0100 	mov.w	r1, #0
 80088d8:	f04f 0200 	mov.w	r2, #0
 80088dc:	f04f 0300 	mov.w	r3, #0
 80088e0:	008b      	lsls	r3, r1, #2
 80088e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80088e6:	0082      	lsls	r2, r0, #2
 80088e8:	4640      	mov	r0, r8
 80088ea:	4649      	mov	r1, r9
 80088ec:	f7f7 fcf0 	bl	80002d0 <__aeabi_uldivmod>
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4b47      	ldr	r3, [pc, #284]	; (8008a14 <UART_SetConfig+0x3ac>)
 80088f6:	fba3 2302 	umull	r2, r3, r3, r2
 80088fa:	095b      	lsrs	r3, r3, #5
 80088fc:	011e      	lsls	r6, r3, #4
 80088fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008900:	4618      	mov	r0, r3
 8008902:	f04f 0100 	mov.w	r1, #0
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	1894      	adds	r4, r2, r2
 800890c:	60bc      	str	r4, [r7, #8]
 800890e:	415b      	adcs	r3, r3
 8008910:	60fb      	str	r3, [r7, #12]
 8008912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008916:	1812      	adds	r2, r2, r0
 8008918:	eb41 0303 	adc.w	r3, r1, r3
 800891c:	f04f 0400 	mov.w	r4, #0
 8008920:	f04f 0500 	mov.w	r5, #0
 8008924:	00dd      	lsls	r5, r3, #3
 8008926:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800892a:	00d4      	lsls	r4, r2, #3
 800892c:	4622      	mov	r2, r4
 800892e:	462b      	mov	r3, r5
 8008930:	1814      	adds	r4, r2, r0
 8008932:	64bc      	str	r4, [r7, #72]	; 0x48
 8008934:	414b      	adcs	r3, r1
 8008936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	4618      	mov	r0, r3
 800893e:	f04f 0100 	mov.w	r1, #0
 8008942:	f04f 0200 	mov.w	r2, #0
 8008946:	f04f 0300 	mov.w	r3, #0
 800894a:	008b      	lsls	r3, r1, #2
 800894c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008950:	0082      	lsls	r2, r0, #2
 8008952:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008956:	f7f7 fcbb 	bl	80002d0 <__aeabi_uldivmod>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4b2d      	ldr	r3, [pc, #180]	; (8008a14 <UART_SetConfig+0x3ac>)
 8008960:	fba3 1302 	umull	r1, r3, r3, r2
 8008964:	095b      	lsrs	r3, r3, #5
 8008966:	2164      	movs	r1, #100	; 0x64
 8008968:	fb01 f303 	mul.w	r3, r1, r3
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	3332      	adds	r3, #50	; 0x32
 8008972:	4a28      	ldr	r2, [pc, #160]	; (8008a14 <UART_SetConfig+0x3ac>)
 8008974:	fba2 2303 	umull	r2, r3, r2, r3
 8008978:	095b      	lsrs	r3, r3, #5
 800897a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800897e:	441e      	add	r6, r3
 8008980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008982:	4618      	mov	r0, r3
 8008984:	f04f 0100 	mov.w	r1, #0
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	1894      	adds	r4, r2, r2
 800898e:	603c      	str	r4, [r7, #0]
 8008990:	415b      	adcs	r3, r3
 8008992:	607b      	str	r3, [r7, #4]
 8008994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008998:	1812      	adds	r2, r2, r0
 800899a:	eb41 0303 	adc.w	r3, r1, r3
 800899e:	f04f 0400 	mov.w	r4, #0
 80089a2:	f04f 0500 	mov.w	r5, #0
 80089a6:	00dd      	lsls	r5, r3, #3
 80089a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80089ac:	00d4      	lsls	r4, r2, #3
 80089ae:	4622      	mov	r2, r4
 80089b0:	462b      	mov	r3, r5
 80089b2:	eb12 0a00 	adds.w	sl, r2, r0
 80089b6:	eb43 0b01 	adc.w	fp, r3, r1
 80089ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	4618      	mov	r0, r3
 80089c0:	f04f 0100 	mov.w	r1, #0
 80089c4:	f04f 0200 	mov.w	r2, #0
 80089c8:	f04f 0300 	mov.w	r3, #0
 80089cc:	008b      	lsls	r3, r1, #2
 80089ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089d2:	0082      	lsls	r2, r0, #2
 80089d4:	4650      	mov	r0, sl
 80089d6:	4659      	mov	r1, fp
 80089d8:	f7f7 fc7a 	bl	80002d0 <__aeabi_uldivmod>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4b0c      	ldr	r3, [pc, #48]	; (8008a14 <UART_SetConfig+0x3ac>)
 80089e2:	fba3 1302 	umull	r1, r3, r3, r2
 80089e6:	095b      	lsrs	r3, r3, #5
 80089e8:	2164      	movs	r1, #100	; 0x64
 80089ea:	fb01 f303 	mul.w	r3, r1, r3
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	3332      	adds	r3, #50	; 0x32
 80089f4:	4a07      	ldr	r2, [pc, #28]	; (8008a14 <UART_SetConfig+0x3ac>)
 80089f6:	fba2 2303 	umull	r2, r3, r2, r3
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	f003 020f 	and.w	r2, r3, #15
 8008a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4432      	add	r2, r6
 8008a06:	609a      	str	r2, [r3, #8]
}
 8008a08:	bf00      	nop
 8008a0a:	377c      	adds	r7, #124	; 0x7c
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a12:	bf00      	nop
 8008a14:	51eb851f 	.word	0x51eb851f

08008a18 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a30:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	4b2f      	ldr	r3, [pc, #188]	; (8008af4 <FSMC_NORSRAM_Init+0xdc>)
 8008a36:	4013      	ands	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008a42:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008a48:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008a4e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008a54:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8008a5a:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008a60:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008a66:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008a6c:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008a72:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8008a78:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8008a7e:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8008a84:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8008a8a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	2b08      	cmp	r3, #8
 8008a98:	d103      	bne.n	8008aa2 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aa0:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68f9      	ldr	r1, [r7, #12]
 8008aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ab6:	d10a      	bne.n	8008ace <FSMC_NORSRAM_Init+0xb6>
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d006      	beq.n	8008ace <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d006      	beq.n	8008ae4 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	ffc00480 	.word	0xffc00480

08008af8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b12:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008b1a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008b26:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008b2e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008b36:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008b40:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	3b02      	subs	r3, #2
 8008b48:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008b4a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008b50:	4313      	orrs	r3, r2
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6979      	ldr	r1, [r7, #20]
 8008b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b70:	d10e      	bne.n	8008b90 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b7a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	051b      	lsls	r3, r3, #20
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	371c      	adds	r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
	...

08008ba0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
 8008bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bb8:	d122      	bne.n	8008c00 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	4b15      	ldr	r3, [pc, #84]	; (8008c1c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008bc8:	4013      	ands	r3, r2
 8008bca:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008bd6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008bde:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008be6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008bec:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	6979      	ldr	r1, [r7, #20]
 8008bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008bfe:	e005      	b.n	8008c0c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	cff00000 	.word	0xcff00000

08008c20 <abort>:
 8008c20:	b508      	push	{r3, lr}
 8008c22:	2006      	movs	r0, #6
 8008c24:	f000 fdf0 	bl	8009808 <raise>
 8008c28:	2001      	movs	r0, #1
 8008c2a:	f7f9 f8cf 	bl	8001dcc <_exit>
	...

08008c30 <__assert_func>:
 8008c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c32:	4614      	mov	r4, r2
 8008c34:	461a      	mov	r2, r3
 8008c36:	4b09      	ldr	r3, [pc, #36]	; (8008c5c <__assert_func+0x2c>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	68d8      	ldr	r0, [r3, #12]
 8008c3e:	b14c      	cbz	r4, 8008c54 <__assert_func+0x24>
 8008c40:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <__assert_func+0x30>)
 8008c42:	9100      	str	r1, [sp, #0]
 8008c44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c48:	4906      	ldr	r1, [pc, #24]	; (8008c64 <__assert_func+0x34>)
 8008c4a:	462b      	mov	r3, r5
 8008c4c:	f000 f814 	bl	8008c78 <fiprintf>
 8008c50:	f7ff ffe6 	bl	8008c20 <abort>
 8008c54:	4b04      	ldr	r3, [pc, #16]	; (8008c68 <__assert_func+0x38>)
 8008c56:	461c      	mov	r4, r3
 8008c58:	e7f3      	b.n	8008c42 <__assert_func+0x12>
 8008c5a:	bf00      	nop
 8008c5c:	2000002c 	.word	0x2000002c
 8008c60:	0801bf0c 	.word	0x0801bf0c
 8008c64:	0801bf19 	.word	0x0801bf19
 8008c68:	0801bf47 	.word	0x0801bf47

08008c6c <__errno>:
 8008c6c:	4b01      	ldr	r3, [pc, #4]	; (8008c74 <__errno+0x8>)
 8008c6e:	6818      	ldr	r0, [r3, #0]
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	2000002c 	.word	0x2000002c

08008c78 <fiprintf>:
 8008c78:	b40e      	push	{r1, r2, r3}
 8008c7a:	b503      	push	{r0, r1, lr}
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	ab03      	add	r3, sp, #12
 8008c80:	4805      	ldr	r0, [pc, #20]	; (8008c98 <fiprintf+0x20>)
 8008c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c86:	6800      	ldr	r0, [r0, #0]
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	f000 f937 	bl	8008efc <_vfiprintf_r>
 8008c8e:	b002      	add	sp, #8
 8008c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c94:	b003      	add	sp, #12
 8008c96:	4770      	bx	lr
 8008c98:	2000002c 	.word	0x2000002c

08008c9c <__libc_init_array>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	4d0d      	ldr	r5, [pc, #52]	; (8008cd4 <__libc_init_array+0x38>)
 8008ca0:	4c0d      	ldr	r4, [pc, #52]	; (8008cd8 <__libc_init_array+0x3c>)
 8008ca2:	1b64      	subs	r4, r4, r5
 8008ca4:	10a4      	asrs	r4, r4, #2
 8008ca6:	2600      	movs	r6, #0
 8008ca8:	42a6      	cmp	r6, r4
 8008caa:	d109      	bne.n	8008cc0 <__libc_init_array+0x24>
 8008cac:	4d0b      	ldr	r5, [pc, #44]	; (8008cdc <__libc_init_array+0x40>)
 8008cae:	4c0c      	ldr	r4, [pc, #48]	; (8008ce0 <__libc_init_array+0x44>)
 8008cb0:	f001 fc28 	bl	800a504 <_init>
 8008cb4:	1b64      	subs	r4, r4, r5
 8008cb6:	10a4      	asrs	r4, r4, #2
 8008cb8:	2600      	movs	r6, #0
 8008cba:	42a6      	cmp	r6, r4
 8008cbc:	d105      	bne.n	8008cca <__libc_init_array+0x2e>
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc4:	4798      	blx	r3
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	e7ee      	b.n	8008ca8 <__libc_init_array+0xc>
 8008cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cce:	4798      	blx	r3
 8008cd0:	3601      	adds	r6, #1
 8008cd2:	e7f2      	b.n	8008cba <__libc_init_array+0x1e>
 8008cd4:	0801c160 	.word	0x0801c160
 8008cd8:	0801c160 	.word	0x0801c160
 8008cdc:	0801c160 	.word	0x0801c160
 8008ce0:	0801c164 	.word	0x0801c164

08008ce4 <malloc>:
 8008ce4:	4b02      	ldr	r3, [pc, #8]	; (8008cf0 <malloc+0xc>)
 8008ce6:	4601      	mov	r1, r0
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	f000 b883 	b.w	8008df4 <_malloc_r>
 8008cee:	bf00      	nop
 8008cf0:	2000002c 	.word	0x2000002c

08008cf4 <memcpy>:
 8008cf4:	440a      	add	r2, r1
 8008cf6:	4291      	cmp	r1, r2
 8008cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008cfc:	d100      	bne.n	8008d00 <memcpy+0xc>
 8008cfe:	4770      	bx	lr
 8008d00:	b510      	push	{r4, lr}
 8008d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d0a:	4291      	cmp	r1, r2
 8008d0c:	d1f9      	bne.n	8008d02 <memcpy+0xe>
 8008d0e:	bd10      	pop	{r4, pc}

08008d10 <memmove>:
 8008d10:	4288      	cmp	r0, r1
 8008d12:	b510      	push	{r4, lr}
 8008d14:	eb01 0402 	add.w	r4, r1, r2
 8008d18:	d902      	bls.n	8008d20 <memmove+0x10>
 8008d1a:	4284      	cmp	r4, r0
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	d807      	bhi.n	8008d30 <memmove+0x20>
 8008d20:	1e43      	subs	r3, r0, #1
 8008d22:	42a1      	cmp	r1, r4
 8008d24:	d008      	beq.n	8008d38 <memmove+0x28>
 8008d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d2e:	e7f8      	b.n	8008d22 <memmove+0x12>
 8008d30:	4402      	add	r2, r0
 8008d32:	4601      	mov	r1, r0
 8008d34:	428a      	cmp	r2, r1
 8008d36:	d100      	bne.n	8008d3a <memmove+0x2a>
 8008d38:	bd10      	pop	{r4, pc}
 8008d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d42:	e7f7      	b.n	8008d34 <memmove+0x24>

08008d44 <memset>:
 8008d44:	4402      	add	r2, r0
 8008d46:	4603      	mov	r3, r0
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d100      	bne.n	8008d4e <memset+0xa>
 8008d4c:	4770      	bx	lr
 8008d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d52:	e7f9      	b.n	8008d48 <memset+0x4>

08008d54 <_free_r>:
 8008d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d56:	2900      	cmp	r1, #0
 8008d58:	d048      	beq.n	8008dec <_free_r+0x98>
 8008d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d5e:	9001      	str	r0, [sp, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f1a1 0404 	sub.w	r4, r1, #4
 8008d66:	bfb8      	it	lt
 8008d68:	18e4      	addlt	r4, r4, r3
 8008d6a:	f001 f989 	bl	800a080 <__malloc_lock>
 8008d6e:	4a20      	ldr	r2, [pc, #128]	; (8008df0 <_free_r+0x9c>)
 8008d70:	9801      	ldr	r0, [sp, #4]
 8008d72:	6813      	ldr	r3, [r2, #0]
 8008d74:	4615      	mov	r5, r2
 8008d76:	b933      	cbnz	r3, 8008d86 <_free_r+0x32>
 8008d78:	6063      	str	r3, [r4, #4]
 8008d7a:	6014      	str	r4, [r2, #0]
 8008d7c:	b003      	add	sp, #12
 8008d7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d82:	f001 b983 	b.w	800a08c <__malloc_unlock>
 8008d86:	42a3      	cmp	r3, r4
 8008d88:	d90b      	bls.n	8008da2 <_free_r+0x4e>
 8008d8a:	6821      	ldr	r1, [r4, #0]
 8008d8c:	1862      	adds	r2, r4, r1
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	bf04      	itt	eq
 8008d92:	681a      	ldreq	r2, [r3, #0]
 8008d94:	685b      	ldreq	r3, [r3, #4]
 8008d96:	6063      	str	r3, [r4, #4]
 8008d98:	bf04      	itt	eq
 8008d9a:	1852      	addeq	r2, r2, r1
 8008d9c:	6022      	streq	r2, [r4, #0]
 8008d9e:	602c      	str	r4, [r5, #0]
 8008da0:	e7ec      	b.n	8008d7c <_free_r+0x28>
 8008da2:	461a      	mov	r2, r3
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	b10b      	cbz	r3, 8008dac <_free_r+0x58>
 8008da8:	42a3      	cmp	r3, r4
 8008daa:	d9fa      	bls.n	8008da2 <_free_r+0x4e>
 8008dac:	6811      	ldr	r1, [r2, #0]
 8008dae:	1855      	adds	r5, r2, r1
 8008db0:	42a5      	cmp	r5, r4
 8008db2:	d10b      	bne.n	8008dcc <_free_r+0x78>
 8008db4:	6824      	ldr	r4, [r4, #0]
 8008db6:	4421      	add	r1, r4
 8008db8:	1854      	adds	r4, r2, r1
 8008dba:	42a3      	cmp	r3, r4
 8008dbc:	6011      	str	r1, [r2, #0]
 8008dbe:	d1dd      	bne.n	8008d7c <_free_r+0x28>
 8008dc0:	681c      	ldr	r4, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	6053      	str	r3, [r2, #4]
 8008dc6:	4421      	add	r1, r4
 8008dc8:	6011      	str	r1, [r2, #0]
 8008dca:	e7d7      	b.n	8008d7c <_free_r+0x28>
 8008dcc:	d902      	bls.n	8008dd4 <_free_r+0x80>
 8008dce:	230c      	movs	r3, #12
 8008dd0:	6003      	str	r3, [r0, #0]
 8008dd2:	e7d3      	b.n	8008d7c <_free_r+0x28>
 8008dd4:	6825      	ldr	r5, [r4, #0]
 8008dd6:	1961      	adds	r1, r4, r5
 8008dd8:	428b      	cmp	r3, r1
 8008dda:	bf04      	itt	eq
 8008ddc:	6819      	ldreq	r1, [r3, #0]
 8008dde:	685b      	ldreq	r3, [r3, #4]
 8008de0:	6063      	str	r3, [r4, #4]
 8008de2:	bf04      	itt	eq
 8008de4:	1949      	addeq	r1, r1, r5
 8008de6:	6021      	streq	r1, [r4, #0]
 8008de8:	6054      	str	r4, [r2, #4]
 8008dea:	e7c7      	b.n	8008d7c <_free_r+0x28>
 8008dec:	b003      	add	sp, #12
 8008dee:	bd30      	pop	{r4, r5, pc}
 8008df0:	20025c60 	.word	0x20025c60

08008df4 <_malloc_r>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	1ccd      	adds	r5, r1, #3
 8008df8:	f025 0503 	bic.w	r5, r5, #3
 8008dfc:	3508      	adds	r5, #8
 8008dfe:	2d0c      	cmp	r5, #12
 8008e00:	bf38      	it	cc
 8008e02:	250c      	movcc	r5, #12
 8008e04:	2d00      	cmp	r5, #0
 8008e06:	4606      	mov	r6, r0
 8008e08:	db01      	blt.n	8008e0e <_malloc_r+0x1a>
 8008e0a:	42a9      	cmp	r1, r5
 8008e0c:	d903      	bls.n	8008e16 <_malloc_r+0x22>
 8008e0e:	230c      	movs	r3, #12
 8008e10:	6033      	str	r3, [r6, #0]
 8008e12:	2000      	movs	r0, #0
 8008e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e16:	f001 f933 	bl	800a080 <__malloc_lock>
 8008e1a:	4921      	ldr	r1, [pc, #132]	; (8008ea0 <_malloc_r+0xac>)
 8008e1c:	680a      	ldr	r2, [r1, #0]
 8008e1e:	4614      	mov	r4, r2
 8008e20:	b99c      	cbnz	r4, 8008e4a <_malloc_r+0x56>
 8008e22:	4f20      	ldr	r7, [pc, #128]	; (8008ea4 <_malloc_r+0xb0>)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	b923      	cbnz	r3, 8008e32 <_malloc_r+0x3e>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f000 fcb4 	bl	8009798 <_sbrk_r>
 8008e30:	6038      	str	r0, [r7, #0]
 8008e32:	4629      	mov	r1, r5
 8008e34:	4630      	mov	r0, r6
 8008e36:	f000 fcaf 	bl	8009798 <_sbrk_r>
 8008e3a:	1c43      	adds	r3, r0, #1
 8008e3c:	d123      	bne.n	8008e86 <_malloc_r+0x92>
 8008e3e:	230c      	movs	r3, #12
 8008e40:	6033      	str	r3, [r6, #0]
 8008e42:	4630      	mov	r0, r6
 8008e44:	f001 f922 	bl	800a08c <__malloc_unlock>
 8008e48:	e7e3      	b.n	8008e12 <_malloc_r+0x1e>
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	1b5b      	subs	r3, r3, r5
 8008e4e:	d417      	bmi.n	8008e80 <_malloc_r+0x8c>
 8008e50:	2b0b      	cmp	r3, #11
 8008e52:	d903      	bls.n	8008e5c <_malloc_r+0x68>
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	441c      	add	r4, r3
 8008e58:	6025      	str	r5, [r4, #0]
 8008e5a:	e004      	b.n	8008e66 <_malloc_r+0x72>
 8008e5c:	6863      	ldr	r3, [r4, #4]
 8008e5e:	42a2      	cmp	r2, r4
 8008e60:	bf0c      	ite	eq
 8008e62:	600b      	streq	r3, [r1, #0]
 8008e64:	6053      	strne	r3, [r2, #4]
 8008e66:	4630      	mov	r0, r6
 8008e68:	f001 f910 	bl	800a08c <__malloc_unlock>
 8008e6c:	f104 000b 	add.w	r0, r4, #11
 8008e70:	1d23      	adds	r3, r4, #4
 8008e72:	f020 0007 	bic.w	r0, r0, #7
 8008e76:	1ac2      	subs	r2, r0, r3
 8008e78:	d0cc      	beq.n	8008e14 <_malloc_r+0x20>
 8008e7a:	1a1b      	subs	r3, r3, r0
 8008e7c:	50a3      	str	r3, [r4, r2]
 8008e7e:	e7c9      	b.n	8008e14 <_malloc_r+0x20>
 8008e80:	4622      	mov	r2, r4
 8008e82:	6864      	ldr	r4, [r4, #4]
 8008e84:	e7cc      	b.n	8008e20 <_malloc_r+0x2c>
 8008e86:	1cc4      	adds	r4, r0, #3
 8008e88:	f024 0403 	bic.w	r4, r4, #3
 8008e8c:	42a0      	cmp	r0, r4
 8008e8e:	d0e3      	beq.n	8008e58 <_malloc_r+0x64>
 8008e90:	1a21      	subs	r1, r4, r0
 8008e92:	4630      	mov	r0, r6
 8008e94:	f000 fc80 	bl	8009798 <_sbrk_r>
 8008e98:	3001      	adds	r0, #1
 8008e9a:	d1dd      	bne.n	8008e58 <_malloc_r+0x64>
 8008e9c:	e7cf      	b.n	8008e3e <_malloc_r+0x4a>
 8008e9e:	bf00      	nop
 8008ea0:	20025c60 	.word	0x20025c60
 8008ea4:	20025c64 	.word	0x20025c64

08008ea8 <__sfputc_r>:
 8008ea8:	6893      	ldr	r3, [r2, #8]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	b410      	push	{r4}
 8008eb0:	6093      	str	r3, [r2, #8]
 8008eb2:	da08      	bge.n	8008ec6 <__sfputc_r+0x1e>
 8008eb4:	6994      	ldr	r4, [r2, #24]
 8008eb6:	42a3      	cmp	r3, r4
 8008eb8:	db01      	blt.n	8008ebe <__sfputc_r+0x16>
 8008eba:	290a      	cmp	r1, #10
 8008ebc:	d103      	bne.n	8008ec6 <__sfputc_r+0x1e>
 8008ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ec2:	f000 bdff 	b.w	8009ac4 <__swbuf_r>
 8008ec6:	6813      	ldr	r3, [r2, #0]
 8008ec8:	1c58      	adds	r0, r3, #1
 8008eca:	6010      	str	r0, [r2, #0]
 8008ecc:	7019      	strb	r1, [r3, #0]
 8008ece:	4608      	mov	r0, r1
 8008ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <__sfputs_r>:
 8008ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed8:	4606      	mov	r6, r0
 8008eda:	460f      	mov	r7, r1
 8008edc:	4614      	mov	r4, r2
 8008ede:	18d5      	adds	r5, r2, r3
 8008ee0:	42ac      	cmp	r4, r5
 8008ee2:	d101      	bne.n	8008ee8 <__sfputs_r+0x12>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	e007      	b.n	8008ef8 <__sfputs_r+0x22>
 8008ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eec:	463a      	mov	r2, r7
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f7ff ffda 	bl	8008ea8 <__sfputc_r>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	d1f3      	bne.n	8008ee0 <__sfputs_r+0xa>
 8008ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008efc <_vfiprintf_r>:
 8008efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f00:	460d      	mov	r5, r1
 8008f02:	b09d      	sub	sp, #116	; 0x74
 8008f04:	4614      	mov	r4, r2
 8008f06:	4698      	mov	r8, r3
 8008f08:	4606      	mov	r6, r0
 8008f0a:	b118      	cbz	r0, 8008f14 <_vfiprintf_r+0x18>
 8008f0c:	6983      	ldr	r3, [r0, #24]
 8008f0e:	b90b      	cbnz	r3, 8008f14 <_vfiprintf_r+0x18>
 8008f10:	f000 ffb2 	bl	8009e78 <__sinit>
 8008f14:	4b89      	ldr	r3, [pc, #548]	; (800913c <_vfiprintf_r+0x240>)
 8008f16:	429d      	cmp	r5, r3
 8008f18:	d11b      	bne.n	8008f52 <_vfiprintf_r+0x56>
 8008f1a:	6875      	ldr	r5, [r6, #4]
 8008f1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f1e:	07d9      	lsls	r1, r3, #31
 8008f20:	d405      	bmi.n	8008f2e <_vfiprintf_r+0x32>
 8008f22:	89ab      	ldrh	r3, [r5, #12]
 8008f24:	059a      	lsls	r2, r3, #22
 8008f26:	d402      	bmi.n	8008f2e <_vfiprintf_r+0x32>
 8008f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f2a:	f001 f843 	bl	8009fb4 <__retarget_lock_acquire_recursive>
 8008f2e:	89ab      	ldrh	r3, [r5, #12]
 8008f30:	071b      	lsls	r3, r3, #28
 8008f32:	d501      	bpl.n	8008f38 <_vfiprintf_r+0x3c>
 8008f34:	692b      	ldr	r3, [r5, #16]
 8008f36:	b9eb      	cbnz	r3, 8008f74 <_vfiprintf_r+0x78>
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f000 fe14 	bl	8009b68 <__swsetup_r>
 8008f40:	b1c0      	cbz	r0, 8008f74 <_vfiprintf_r+0x78>
 8008f42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f44:	07dc      	lsls	r4, r3, #31
 8008f46:	d50e      	bpl.n	8008f66 <_vfiprintf_r+0x6a>
 8008f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f4c:	b01d      	add	sp, #116	; 0x74
 8008f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f52:	4b7b      	ldr	r3, [pc, #492]	; (8009140 <_vfiprintf_r+0x244>)
 8008f54:	429d      	cmp	r5, r3
 8008f56:	d101      	bne.n	8008f5c <_vfiprintf_r+0x60>
 8008f58:	68b5      	ldr	r5, [r6, #8]
 8008f5a:	e7df      	b.n	8008f1c <_vfiprintf_r+0x20>
 8008f5c:	4b79      	ldr	r3, [pc, #484]	; (8009144 <_vfiprintf_r+0x248>)
 8008f5e:	429d      	cmp	r5, r3
 8008f60:	bf08      	it	eq
 8008f62:	68f5      	ldreq	r5, [r6, #12]
 8008f64:	e7da      	b.n	8008f1c <_vfiprintf_r+0x20>
 8008f66:	89ab      	ldrh	r3, [r5, #12]
 8008f68:	0598      	lsls	r0, r3, #22
 8008f6a:	d4ed      	bmi.n	8008f48 <_vfiprintf_r+0x4c>
 8008f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f6e:	f001 f822 	bl	8009fb6 <__retarget_lock_release_recursive>
 8008f72:	e7e9      	b.n	8008f48 <_vfiprintf_r+0x4c>
 8008f74:	2300      	movs	r3, #0
 8008f76:	9309      	str	r3, [sp, #36]	; 0x24
 8008f78:	2320      	movs	r3, #32
 8008f7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f82:	2330      	movs	r3, #48	; 0x30
 8008f84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009148 <_vfiprintf_r+0x24c>
 8008f88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f8c:	f04f 0901 	mov.w	r9, #1
 8008f90:	4623      	mov	r3, r4
 8008f92:	469a      	mov	sl, r3
 8008f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f98:	b10a      	cbz	r2, 8008f9e <_vfiprintf_r+0xa2>
 8008f9a:	2a25      	cmp	r2, #37	; 0x25
 8008f9c:	d1f9      	bne.n	8008f92 <_vfiprintf_r+0x96>
 8008f9e:	ebba 0b04 	subs.w	fp, sl, r4
 8008fa2:	d00b      	beq.n	8008fbc <_vfiprintf_r+0xc0>
 8008fa4:	465b      	mov	r3, fp
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	4629      	mov	r1, r5
 8008faa:	4630      	mov	r0, r6
 8008fac:	f7ff ff93 	bl	8008ed6 <__sfputs_r>
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	f000 80aa 	beq.w	800910a <_vfiprintf_r+0x20e>
 8008fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fb8:	445a      	add	r2, fp
 8008fba:	9209      	str	r2, [sp, #36]	; 0x24
 8008fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 80a2 	beq.w	800910a <_vfiprintf_r+0x20e>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fd0:	f10a 0a01 	add.w	sl, sl, #1
 8008fd4:	9304      	str	r3, [sp, #16]
 8008fd6:	9307      	str	r3, [sp, #28]
 8008fd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fdc:	931a      	str	r3, [sp, #104]	; 0x68
 8008fde:	4654      	mov	r4, sl
 8008fe0:	2205      	movs	r2, #5
 8008fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe6:	4858      	ldr	r0, [pc, #352]	; (8009148 <_vfiprintf_r+0x24c>)
 8008fe8:	f7f7 f91a 	bl	8000220 <memchr>
 8008fec:	9a04      	ldr	r2, [sp, #16]
 8008fee:	b9d8      	cbnz	r0, 8009028 <_vfiprintf_r+0x12c>
 8008ff0:	06d1      	lsls	r1, r2, #27
 8008ff2:	bf44      	itt	mi
 8008ff4:	2320      	movmi	r3, #32
 8008ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ffa:	0713      	lsls	r3, r2, #28
 8008ffc:	bf44      	itt	mi
 8008ffe:	232b      	movmi	r3, #43	; 0x2b
 8009000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009004:	f89a 3000 	ldrb.w	r3, [sl]
 8009008:	2b2a      	cmp	r3, #42	; 0x2a
 800900a:	d015      	beq.n	8009038 <_vfiprintf_r+0x13c>
 800900c:	9a07      	ldr	r2, [sp, #28]
 800900e:	4654      	mov	r4, sl
 8009010:	2000      	movs	r0, #0
 8009012:	f04f 0c0a 	mov.w	ip, #10
 8009016:	4621      	mov	r1, r4
 8009018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800901c:	3b30      	subs	r3, #48	; 0x30
 800901e:	2b09      	cmp	r3, #9
 8009020:	d94e      	bls.n	80090c0 <_vfiprintf_r+0x1c4>
 8009022:	b1b0      	cbz	r0, 8009052 <_vfiprintf_r+0x156>
 8009024:	9207      	str	r2, [sp, #28]
 8009026:	e014      	b.n	8009052 <_vfiprintf_r+0x156>
 8009028:	eba0 0308 	sub.w	r3, r0, r8
 800902c:	fa09 f303 	lsl.w	r3, r9, r3
 8009030:	4313      	orrs	r3, r2
 8009032:	9304      	str	r3, [sp, #16]
 8009034:	46a2      	mov	sl, r4
 8009036:	e7d2      	b.n	8008fde <_vfiprintf_r+0xe2>
 8009038:	9b03      	ldr	r3, [sp, #12]
 800903a:	1d19      	adds	r1, r3, #4
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	9103      	str	r1, [sp, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	bfbb      	ittet	lt
 8009044:	425b      	neglt	r3, r3
 8009046:	f042 0202 	orrlt.w	r2, r2, #2
 800904a:	9307      	strge	r3, [sp, #28]
 800904c:	9307      	strlt	r3, [sp, #28]
 800904e:	bfb8      	it	lt
 8009050:	9204      	strlt	r2, [sp, #16]
 8009052:	7823      	ldrb	r3, [r4, #0]
 8009054:	2b2e      	cmp	r3, #46	; 0x2e
 8009056:	d10c      	bne.n	8009072 <_vfiprintf_r+0x176>
 8009058:	7863      	ldrb	r3, [r4, #1]
 800905a:	2b2a      	cmp	r3, #42	; 0x2a
 800905c:	d135      	bne.n	80090ca <_vfiprintf_r+0x1ce>
 800905e:	9b03      	ldr	r3, [sp, #12]
 8009060:	1d1a      	adds	r2, r3, #4
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	9203      	str	r2, [sp, #12]
 8009066:	2b00      	cmp	r3, #0
 8009068:	bfb8      	it	lt
 800906a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800906e:	3402      	adds	r4, #2
 8009070:	9305      	str	r3, [sp, #20]
 8009072:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009158 <_vfiprintf_r+0x25c>
 8009076:	7821      	ldrb	r1, [r4, #0]
 8009078:	2203      	movs	r2, #3
 800907a:	4650      	mov	r0, sl
 800907c:	f7f7 f8d0 	bl	8000220 <memchr>
 8009080:	b140      	cbz	r0, 8009094 <_vfiprintf_r+0x198>
 8009082:	2340      	movs	r3, #64	; 0x40
 8009084:	eba0 000a 	sub.w	r0, r0, sl
 8009088:	fa03 f000 	lsl.w	r0, r3, r0
 800908c:	9b04      	ldr	r3, [sp, #16]
 800908e:	4303      	orrs	r3, r0
 8009090:	3401      	adds	r4, #1
 8009092:	9304      	str	r3, [sp, #16]
 8009094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009098:	482c      	ldr	r0, [pc, #176]	; (800914c <_vfiprintf_r+0x250>)
 800909a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800909e:	2206      	movs	r2, #6
 80090a0:	f7f7 f8be 	bl	8000220 <memchr>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d03f      	beq.n	8009128 <_vfiprintf_r+0x22c>
 80090a8:	4b29      	ldr	r3, [pc, #164]	; (8009150 <_vfiprintf_r+0x254>)
 80090aa:	bb1b      	cbnz	r3, 80090f4 <_vfiprintf_r+0x1f8>
 80090ac:	9b03      	ldr	r3, [sp, #12]
 80090ae:	3307      	adds	r3, #7
 80090b0:	f023 0307 	bic.w	r3, r3, #7
 80090b4:	3308      	adds	r3, #8
 80090b6:	9303      	str	r3, [sp, #12]
 80090b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ba:	443b      	add	r3, r7
 80090bc:	9309      	str	r3, [sp, #36]	; 0x24
 80090be:	e767      	b.n	8008f90 <_vfiprintf_r+0x94>
 80090c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80090c4:	460c      	mov	r4, r1
 80090c6:	2001      	movs	r0, #1
 80090c8:	e7a5      	b.n	8009016 <_vfiprintf_r+0x11a>
 80090ca:	2300      	movs	r3, #0
 80090cc:	3401      	adds	r4, #1
 80090ce:	9305      	str	r3, [sp, #20]
 80090d0:	4619      	mov	r1, r3
 80090d2:	f04f 0c0a 	mov.w	ip, #10
 80090d6:	4620      	mov	r0, r4
 80090d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090dc:	3a30      	subs	r2, #48	; 0x30
 80090de:	2a09      	cmp	r2, #9
 80090e0:	d903      	bls.n	80090ea <_vfiprintf_r+0x1ee>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0c5      	beq.n	8009072 <_vfiprintf_r+0x176>
 80090e6:	9105      	str	r1, [sp, #20]
 80090e8:	e7c3      	b.n	8009072 <_vfiprintf_r+0x176>
 80090ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80090ee:	4604      	mov	r4, r0
 80090f0:	2301      	movs	r3, #1
 80090f2:	e7f0      	b.n	80090d6 <_vfiprintf_r+0x1da>
 80090f4:	ab03      	add	r3, sp, #12
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	462a      	mov	r2, r5
 80090fa:	4b16      	ldr	r3, [pc, #88]	; (8009154 <_vfiprintf_r+0x258>)
 80090fc:	a904      	add	r1, sp, #16
 80090fe:	4630      	mov	r0, r6
 8009100:	f3af 8000 	nop.w
 8009104:	4607      	mov	r7, r0
 8009106:	1c78      	adds	r0, r7, #1
 8009108:	d1d6      	bne.n	80090b8 <_vfiprintf_r+0x1bc>
 800910a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800910c:	07d9      	lsls	r1, r3, #31
 800910e:	d405      	bmi.n	800911c <_vfiprintf_r+0x220>
 8009110:	89ab      	ldrh	r3, [r5, #12]
 8009112:	059a      	lsls	r2, r3, #22
 8009114:	d402      	bmi.n	800911c <_vfiprintf_r+0x220>
 8009116:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009118:	f000 ff4d 	bl	8009fb6 <__retarget_lock_release_recursive>
 800911c:	89ab      	ldrh	r3, [r5, #12]
 800911e:	065b      	lsls	r3, r3, #25
 8009120:	f53f af12 	bmi.w	8008f48 <_vfiprintf_r+0x4c>
 8009124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009126:	e711      	b.n	8008f4c <_vfiprintf_r+0x50>
 8009128:	ab03      	add	r3, sp, #12
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	462a      	mov	r2, r5
 800912e:	4b09      	ldr	r3, [pc, #36]	; (8009154 <_vfiprintf_r+0x258>)
 8009130:	a904      	add	r1, sp, #16
 8009132:	4630      	mov	r0, r6
 8009134:	f000 f880 	bl	8009238 <_printf_i>
 8009138:	e7e4      	b.n	8009104 <_vfiprintf_r+0x208>
 800913a:	bf00      	nop
 800913c:	0801c118 	.word	0x0801c118
 8009140:	0801c138 	.word	0x0801c138
 8009144:	0801c0f8 	.word	0x0801c0f8
 8009148:	0801bf4c 	.word	0x0801bf4c
 800914c:	0801bf56 	.word	0x0801bf56
 8009150:	00000000 	.word	0x00000000
 8009154:	08008ed7 	.word	0x08008ed7
 8009158:	0801bf52 	.word	0x0801bf52

0800915c <_printf_common>:
 800915c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009160:	4616      	mov	r6, r2
 8009162:	4699      	mov	r9, r3
 8009164:	688a      	ldr	r2, [r1, #8]
 8009166:	690b      	ldr	r3, [r1, #16]
 8009168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800916c:	4293      	cmp	r3, r2
 800916e:	bfb8      	it	lt
 8009170:	4613      	movlt	r3, r2
 8009172:	6033      	str	r3, [r6, #0]
 8009174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009178:	4607      	mov	r7, r0
 800917a:	460c      	mov	r4, r1
 800917c:	b10a      	cbz	r2, 8009182 <_printf_common+0x26>
 800917e:	3301      	adds	r3, #1
 8009180:	6033      	str	r3, [r6, #0]
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	0699      	lsls	r1, r3, #26
 8009186:	bf42      	ittt	mi
 8009188:	6833      	ldrmi	r3, [r6, #0]
 800918a:	3302      	addmi	r3, #2
 800918c:	6033      	strmi	r3, [r6, #0]
 800918e:	6825      	ldr	r5, [r4, #0]
 8009190:	f015 0506 	ands.w	r5, r5, #6
 8009194:	d106      	bne.n	80091a4 <_printf_common+0x48>
 8009196:	f104 0a19 	add.w	sl, r4, #25
 800919a:	68e3      	ldr	r3, [r4, #12]
 800919c:	6832      	ldr	r2, [r6, #0]
 800919e:	1a9b      	subs	r3, r3, r2
 80091a0:	42ab      	cmp	r3, r5
 80091a2:	dc26      	bgt.n	80091f2 <_printf_common+0x96>
 80091a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091a8:	1e13      	subs	r3, r2, #0
 80091aa:	6822      	ldr	r2, [r4, #0]
 80091ac:	bf18      	it	ne
 80091ae:	2301      	movne	r3, #1
 80091b0:	0692      	lsls	r2, r2, #26
 80091b2:	d42b      	bmi.n	800920c <_printf_common+0xb0>
 80091b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091b8:	4649      	mov	r1, r9
 80091ba:	4638      	mov	r0, r7
 80091bc:	47c0      	blx	r8
 80091be:	3001      	adds	r0, #1
 80091c0:	d01e      	beq.n	8009200 <_printf_common+0xa4>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	68e5      	ldr	r5, [r4, #12]
 80091c6:	6832      	ldr	r2, [r6, #0]
 80091c8:	f003 0306 	and.w	r3, r3, #6
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	bf08      	it	eq
 80091d0:	1aad      	subeq	r5, r5, r2
 80091d2:	68a3      	ldr	r3, [r4, #8]
 80091d4:	6922      	ldr	r2, [r4, #16]
 80091d6:	bf0c      	ite	eq
 80091d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091dc:	2500      	movne	r5, #0
 80091de:	4293      	cmp	r3, r2
 80091e0:	bfc4      	itt	gt
 80091e2:	1a9b      	subgt	r3, r3, r2
 80091e4:	18ed      	addgt	r5, r5, r3
 80091e6:	2600      	movs	r6, #0
 80091e8:	341a      	adds	r4, #26
 80091ea:	42b5      	cmp	r5, r6
 80091ec:	d11a      	bne.n	8009224 <_printf_common+0xc8>
 80091ee:	2000      	movs	r0, #0
 80091f0:	e008      	b.n	8009204 <_printf_common+0xa8>
 80091f2:	2301      	movs	r3, #1
 80091f4:	4652      	mov	r2, sl
 80091f6:	4649      	mov	r1, r9
 80091f8:	4638      	mov	r0, r7
 80091fa:	47c0      	blx	r8
 80091fc:	3001      	adds	r0, #1
 80091fe:	d103      	bne.n	8009208 <_printf_common+0xac>
 8009200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009208:	3501      	adds	r5, #1
 800920a:	e7c6      	b.n	800919a <_printf_common+0x3e>
 800920c:	18e1      	adds	r1, r4, r3
 800920e:	1c5a      	adds	r2, r3, #1
 8009210:	2030      	movs	r0, #48	; 0x30
 8009212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009216:	4422      	add	r2, r4
 8009218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800921c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009220:	3302      	adds	r3, #2
 8009222:	e7c7      	b.n	80091b4 <_printf_common+0x58>
 8009224:	2301      	movs	r3, #1
 8009226:	4622      	mov	r2, r4
 8009228:	4649      	mov	r1, r9
 800922a:	4638      	mov	r0, r7
 800922c:	47c0      	blx	r8
 800922e:	3001      	adds	r0, #1
 8009230:	d0e6      	beq.n	8009200 <_printf_common+0xa4>
 8009232:	3601      	adds	r6, #1
 8009234:	e7d9      	b.n	80091ea <_printf_common+0x8e>
	...

08009238 <_printf_i>:
 8009238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800923c:	460c      	mov	r4, r1
 800923e:	4691      	mov	r9, r2
 8009240:	7e27      	ldrb	r7, [r4, #24]
 8009242:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009244:	2f78      	cmp	r7, #120	; 0x78
 8009246:	4680      	mov	r8, r0
 8009248:	469a      	mov	sl, r3
 800924a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800924e:	d807      	bhi.n	8009260 <_printf_i+0x28>
 8009250:	2f62      	cmp	r7, #98	; 0x62
 8009252:	d80a      	bhi.n	800926a <_printf_i+0x32>
 8009254:	2f00      	cmp	r7, #0
 8009256:	f000 80d8 	beq.w	800940a <_printf_i+0x1d2>
 800925a:	2f58      	cmp	r7, #88	; 0x58
 800925c:	f000 80a3 	beq.w	80093a6 <_printf_i+0x16e>
 8009260:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009268:	e03a      	b.n	80092e0 <_printf_i+0xa8>
 800926a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800926e:	2b15      	cmp	r3, #21
 8009270:	d8f6      	bhi.n	8009260 <_printf_i+0x28>
 8009272:	a001      	add	r0, pc, #4	; (adr r0, 8009278 <_printf_i+0x40>)
 8009274:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009278:	080092d1 	.word	0x080092d1
 800927c:	080092e5 	.word	0x080092e5
 8009280:	08009261 	.word	0x08009261
 8009284:	08009261 	.word	0x08009261
 8009288:	08009261 	.word	0x08009261
 800928c:	08009261 	.word	0x08009261
 8009290:	080092e5 	.word	0x080092e5
 8009294:	08009261 	.word	0x08009261
 8009298:	08009261 	.word	0x08009261
 800929c:	08009261 	.word	0x08009261
 80092a0:	08009261 	.word	0x08009261
 80092a4:	080093f1 	.word	0x080093f1
 80092a8:	08009315 	.word	0x08009315
 80092ac:	080093d3 	.word	0x080093d3
 80092b0:	08009261 	.word	0x08009261
 80092b4:	08009261 	.word	0x08009261
 80092b8:	08009413 	.word	0x08009413
 80092bc:	08009261 	.word	0x08009261
 80092c0:	08009315 	.word	0x08009315
 80092c4:	08009261 	.word	0x08009261
 80092c8:	08009261 	.word	0x08009261
 80092cc:	080093db 	.word	0x080093db
 80092d0:	680b      	ldr	r3, [r1, #0]
 80092d2:	1d1a      	adds	r2, r3, #4
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	600a      	str	r2, [r1, #0]
 80092d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092e0:	2301      	movs	r3, #1
 80092e2:	e0a3      	b.n	800942c <_printf_i+0x1f4>
 80092e4:	6825      	ldr	r5, [r4, #0]
 80092e6:	6808      	ldr	r0, [r1, #0]
 80092e8:	062e      	lsls	r6, r5, #24
 80092ea:	f100 0304 	add.w	r3, r0, #4
 80092ee:	d50a      	bpl.n	8009306 <_printf_i+0xce>
 80092f0:	6805      	ldr	r5, [r0, #0]
 80092f2:	600b      	str	r3, [r1, #0]
 80092f4:	2d00      	cmp	r5, #0
 80092f6:	da03      	bge.n	8009300 <_printf_i+0xc8>
 80092f8:	232d      	movs	r3, #45	; 0x2d
 80092fa:	426d      	negs	r5, r5
 80092fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009300:	485e      	ldr	r0, [pc, #376]	; (800947c <_printf_i+0x244>)
 8009302:	230a      	movs	r3, #10
 8009304:	e019      	b.n	800933a <_printf_i+0x102>
 8009306:	f015 0f40 	tst.w	r5, #64	; 0x40
 800930a:	6805      	ldr	r5, [r0, #0]
 800930c:	600b      	str	r3, [r1, #0]
 800930e:	bf18      	it	ne
 8009310:	b22d      	sxthne	r5, r5
 8009312:	e7ef      	b.n	80092f4 <_printf_i+0xbc>
 8009314:	680b      	ldr	r3, [r1, #0]
 8009316:	6825      	ldr	r5, [r4, #0]
 8009318:	1d18      	adds	r0, r3, #4
 800931a:	6008      	str	r0, [r1, #0]
 800931c:	0628      	lsls	r0, r5, #24
 800931e:	d501      	bpl.n	8009324 <_printf_i+0xec>
 8009320:	681d      	ldr	r5, [r3, #0]
 8009322:	e002      	b.n	800932a <_printf_i+0xf2>
 8009324:	0669      	lsls	r1, r5, #25
 8009326:	d5fb      	bpl.n	8009320 <_printf_i+0xe8>
 8009328:	881d      	ldrh	r5, [r3, #0]
 800932a:	4854      	ldr	r0, [pc, #336]	; (800947c <_printf_i+0x244>)
 800932c:	2f6f      	cmp	r7, #111	; 0x6f
 800932e:	bf0c      	ite	eq
 8009330:	2308      	moveq	r3, #8
 8009332:	230a      	movne	r3, #10
 8009334:	2100      	movs	r1, #0
 8009336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800933a:	6866      	ldr	r6, [r4, #4]
 800933c:	60a6      	str	r6, [r4, #8]
 800933e:	2e00      	cmp	r6, #0
 8009340:	bfa2      	ittt	ge
 8009342:	6821      	ldrge	r1, [r4, #0]
 8009344:	f021 0104 	bicge.w	r1, r1, #4
 8009348:	6021      	strge	r1, [r4, #0]
 800934a:	b90d      	cbnz	r5, 8009350 <_printf_i+0x118>
 800934c:	2e00      	cmp	r6, #0
 800934e:	d04d      	beq.n	80093ec <_printf_i+0x1b4>
 8009350:	4616      	mov	r6, r2
 8009352:	fbb5 f1f3 	udiv	r1, r5, r3
 8009356:	fb03 5711 	mls	r7, r3, r1, r5
 800935a:	5dc7      	ldrb	r7, [r0, r7]
 800935c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009360:	462f      	mov	r7, r5
 8009362:	42bb      	cmp	r3, r7
 8009364:	460d      	mov	r5, r1
 8009366:	d9f4      	bls.n	8009352 <_printf_i+0x11a>
 8009368:	2b08      	cmp	r3, #8
 800936a:	d10b      	bne.n	8009384 <_printf_i+0x14c>
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	07df      	lsls	r7, r3, #31
 8009370:	d508      	bpl.n	8009384 <_printf_i+0x14c>
 8009372:	6923      	ldr	r3, [r4, #16]
 8009374:	6861      	ldr	r1, [r4, #4]
 8009376:	4299      	cmp	r1, r3
 8009378:	bfde      	ittt	le
 800937a:	2330      	movle	r3, #48	; 0x30
 800937c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009380:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009384:	1b92      	subs	r2, r2, r6
 8009386:	6122      	str	r2, [r4, #16]
 8009388:	f8cd a000 	str.w	sl, [sp]
 800938c:	464b      	mov	r3, r9
 800938e:	aa03      	add	r2, sp, #12
 8009390:	4621      	mov	r1, r4
 8009392:	4640      	mov	r0, r8
 8009394:	f7ff fee2 	bl	800915c <_printf_common>
 8009398:	3001      	adds	r0, #1
 800939a:	d14c      	bne.n	8009436 <_printf_i+0x1fe>
 800939c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093a0:	b004      	add	sp, #16
 80093a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a6:	4835      	ldr	r0, [pc, #212]	; (800947c <_printf_i+0x244>)
 80093a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093ac:	6823      	ldr	r3, [r4, #0]
 80093ae:	680e      	ldr	r6, [r1, #0]
 80093b0:	061f      	lsls	r7, r3, #24
 80093b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80093b6:	600e      	str	r6, [r1, #0]
 80093b8:	d514      	bpl.n	80093e4 <_printf_i+0x1ac>
 80093ba:	07d9      	lsls	r1, r3, #31
 80093bc:	bf44      	itt	mi
 80093be:	f043 0320 	orrmi.w	r3, r3, #32
 80093c2:	6023      	strmi	r3, [r4, #0]
 80093c4:	b91d      	cbnz	r5, 80093ce <_printf_i+0x196>
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	f023 0320 	bic.w	r3, r3, #32
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	2310      	movs	r3, #16
 80093d0:	e7b0      	b.n	8009334 <_printf_i+0xfc>
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	f043 0320 	orr.w	r3, r3, #32
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	2378      	movs	r3, #120	; 0x78
 80093dc:	4828      	ldr	r0, [pc, #160]	; (8009480 <_printf_i+0x248>)
 80093de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093e2:	e7e3      	b.n	80093ac <_printf_i+0x174>
 80093e4:	065e      	lsls	r6, r3, #25
 80093e6:	bf48      	it	mi
 80093e8:	b2ad      	uxthmi	r5, r5
 80093ea:	e7e6      	b.n	80093ba <_printf_i+0x182>
 80093ec:	4616      	mov	r6, r2
 80093ee:	e7bb      	b.n	8009368 <_printf_i+0x130>
 80093f0:	680b      	ldr	r3, [r1, #0]
 80093f2:	6826      	ldr	r6, [r4, #0]
 80093f4:	6960      	ldr	r0, [r4, #20]
 80093f6:	1d1d      	adds	r5, r3, #4
 80093f8:	600d      	str	r5, [r1, #0]
 80093fa:	0635      	lsls	r5, r6, #24
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	d501      	bpl.n	8009404 <_printf_i+0x1cc>
 8009400:	6018      	str	r0, [r3, #0]
 8009402:	e002      	b.n	800940a <_printf_i+0x1d2>
 8009404:	0671      	lsls	r1, r6, #25
 8009406:	d5fb      	bpl.n	8009400 <_printf_i+0x1c8>
 8009408:	8018      	strh	r0, [r3, #0]
 800940a:	2300      	movs	r3, #0
 800940c:	6123      	str	r3, [r4, #16]
 800940e:	4616      	mov	r6, r2
 8009410:	e7ba      	b.n	8009388 <_printf_i+0x150>
 8009412:	680b      	ldr	r3, [r1, #0]
 8009414:	1d1a      	adds	r2, r3, #4
 8009416:	600a      	str	r2, [r1, #0]
 8009418:	681e      	ldr	r6, [r3, #0]
 800941a:	6862      	ldr	r2, [r4, #4]
 800941c:	2100      	movs	r1, #0
 800941e:	4630      	mov	r0, r6
 8009420:	f7f6 fefe 	bl	8000220 <memchr>
 8009424:	b108      	cbz	r0, 800942a <_printf_i+0x1f2>
 8009426:	1b80      	subs	r0, r0, r6
 8009428:	6060      	str	r0, [r4, #4]
 800942a:	6863      	ldr	r3, [r4, #4]
 800942c:	6123      	str	r3, [r4, #16]
 800942e:	2300      	movs	r3, #0
 8009430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009434:	e7a8      	b.n	8009388 <_printf_i+0x150>
 8009436:	6923      	ldr	r3, [r4, #16]
 8009438:	4632      	mov	r2, r6
 800943a:	4649      	mov	r1, r9
 800943c:	4640      	mov	r0, r8
 800943e:	47d0      	blx	sl
 8009440:	3001      	adds	r0, #1
 8009442:	d0ab      	beq.n	800939c <_printf_i+0x164>
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	079b      	lsls	r3, r3, #30
 8009448:	d413      	bmi.n	8009472 <_printf_i+0x23a>
 800944a:	68e0      	ldr	r0, [r4, #12]
 800944c:	9b03      	ldr	r3, [sp, #12]
 800944e:	4298      	cmp	r0, r3
 8009450:	bfb8      	it	lt
 8009452:	4618      	movlt	r0, r3
 8009454:	e7a4      	b.n	80093a0 <_printf_i+0x168>
 8009456:	2301      	movs	r3, #1
 8009458:	4632      	mov	r2, r6
 800945a:	4649      	mov	r1, r9
 800945c:	4640      	mov	r0, r8
 800945e:	47d0      	blx	sl
 8009460:	3001      	adds	r0, #1
 8009462:	d09b      	beq.n	800939c <_printf_i+0x164>
 8009464:	3501      	adds	r5, #1
 8009466:	68e3      	ldr	r3, [r4, #12]
 8009468:	9903      	ldr	r1, [sp, #12]
 800946a:	1a5b      	subs	r3, r3, r1
 800946c:	42ab      	cmp	r3, r5
 800946e:	dcf2      	bgt.n	8009456 <_printf_i+0x21e>
 8009470:	e7eb      	b.n	800944a <_printf_i+0x212>
 8009472:	2500      	movs	r5, #0
 8009474:	f104 0619 	add.w	r6, r4, #25
 8009478:	e7f5      	b.n	8009466 <_printf_i+0x22e>
 800947a:	bf00      	nop
 800947c:	0801bf5d 	.word	0x0801bf5d
 8009480:	0801bf6e 	.word	0x0801bf6e

08009484 <swapfunc>:
 8009484:	2b02      	cmp	r3, #2
 8009486:	b510      	push	{r4, lr}
 8009488:	d00a      	beq.n	80094a0 <swapfunc+0x1c>
 800948a:	0892      	lsrs	r2, r2, #2
 800948c:	3a01      	subs	r2, #1
 800948e:	6803      	ldr	r3, [r0, #0]
 8009490:	680c      	ldr	r4, [r1, #0]
 8009492:	f840 4b04 	str.w	r4, [r0], #4
 8009496:	2a00      	cmp	r2, #0
 8009498:	f841 3b04 	str.w	r3, [r1], #4
 800949c:	dcf6      	bgt.n	800948c <swapfunc+0x8>
 800949e:	bd10      	pop	{r4, pc}
 80094a0:	4402      	add	r2, r0
 80094a2:	780c      	ldrb	r4, [r1, #0]
 80094a4:	7803      	ldrb	r3, [r0, #0]
 80094a6:	f800 4b01 	strb.w	r4, [r0], #1
 80094aa:	f801 3b01 	strb.w	r3, [r1], #1
 80094ae:	1a13      	subs	r3, r2, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	dcf6      	bgt.n	80094a2 <swapfunc+0x1e>
 80094b4:	e7f3      	b.n	800949e <swapfunc+0x1a>

080094b6 <med3.isra.0>:
 80094b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b8:	460f      	mov	r7, r1
 80094ba:	4614      	mov	r4, r2
 80094bc:	4606      	mov	r6, r0
 80094be:	461d      	mov	r5, r3
 80094c0:	4798      	blx	r3
 80094c2:	2800      	cmp	r0, #0
 80094c4:	4621      	mov	r1, r4
 80094c6:	4638      	mov	r0, r7
 80094c8:	da0c      	bge.n	80094e4 <med3.isra.0+0x2e>
 80094ca:	47a8      	blx	r5
 80094cc:	2800      	cmp	r0, #0
 80094ce:	da02      	bge.n	80094d6 <med3.isra.0+0x20>
 80094d0:	463c      	mov	r4, r7
 80094d2:	4620      	mov	r0, r4
 80094d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094d6:	4621      	mov	r1, r4
 80094d8:	4630      	mov	r0, r6
 80094da:	47a8      	blx	r5
 80094dc:	2800      	cmp	r0, #0
 80094de:	dbf8      	blt.n	80094d2 <med3.isra.0+0x1c>
 80094e0:	4634      	mov	r4, r6
 80094e2:	e7f6      	b.n	80094d2 <med3.isra.0+0x1c>
 80094e4:	47a8      	blx	r5
 80094e6:	2800      	cmp	r0, #0
 80094e8:	dcf2      	bgt.n	80094d0 <med3.isra.0+0x1a>
 80094ea:	4621      	mov	r1, r4
 80094ec:	4630      	mov	r0, r6
 80094ee:	47a8      	blx	r5
 80094f0:	2800      	cmp	r0, #0
 80094f2:	daee      	bge.n	80094d2 <med3.isra.0+0x1c>
 80094f4:	e7f4      	b.n	80094e0 <med3.isra.0+0x2a>

080094f6 <qsort>:
 80094f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fa:	469a      	mov	sl, r3
 80094fc:	ea40 0302 	orr.w	r3, r0, r2
 8009500:	079b      	lsls	r3, r3, #30
 8009502:	b097      	sub	sp, #92	; 0x5c
 8009504:	4606      	mov	r6, r0
 8009506:	4614      	mov	r4, r2
 8009508:	d11a      	bne.n	8009540 <qsort+0x4a>
 800950a:	f1b2 0804 	subs.w	r8, r2, #4
 800950e:	bf18      	it	ne
 8009510:	f04f 0801 	movne.w	r8, #1
 8009514:	2300      	movs	r3, #0
 8009516:	9302      	str	r3, [sp, #8]
 8009518:	1933      	adds	r3, r6, r4
 800951a:	fb04 f701 	mul.w	r7, r4, r1
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	2906      	cmp	r1, #6
 8009522:	eb06 0307 	add.w	r3, r6, r7
 8009526:	9303      	str	r3, [sp, #12]
 8009528:	d82a      	bhi.n	8009580 <qsort+0x8a>
 800952a:	9b01      	ldr	r3, [sp, #4]
 800952c:	9a03      	ldr	r2, [sp, #12]
 800952e:	4293      	cmp	r3, r2
 8009530:	d310      	bcc.n	8009554 <qsort+0x5e>
 8009532:	9b02      	ldr	r3, [sp, #8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	f040 811f 	bne.w	8009778 <qsort+0x282>
 800953a:	b017      	add	sp, #92	; 0x5c
 800953c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009540:	f04f 0802 	mov.w	r8, #2
 8009544:	e7e6      	b.n	8009514 <qsort+0x1e>
 8009546:	4643      	mov	r3, r8
 8009548:	4622      	mov	r2, r4
 800954a:	4639      	mov	r1, r7
 800954c:	4628      	mov	r0, r5
 800954e:	f7ff ff99 	bl	8009484 <swapfunc>
 8009552:	e00e      	b.n	8009572 <qsort+0x7c>
 8009554:	9d01      	ldr	r5, [sp, #4]
 8009556:	e00d      	b.n	8009574 <qsort+0x7e>
 8009558:	1b2f      	subs	r7, r5, r4
 800955a:	4629      	mov	r1, r5
 800955c:	4638      	mov	r0, r7
 800955e:	47d0      	blx	sl
 8009560:	2800      	cmp	r0, #0
 8009562:	dd09      	ble.n	8009578 <qsort+0x82>
 8009564:	f1b8 0f00 	cmp.w	r8, #0
 8009568:	d1ed      	bne.n	8009546 <qsort+0x50>
 800956a:	682b      	ldr	r3, [r5, #0]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	602a      	str	r2, [r5, #0]
 8009570:	603b      	str	r3, [r7, #0]
 8009572:	463d      	mov	r5, r7
 8009574:	42ae      	cmp	r6, r5
 8009576:	d3ef      	bcc.n	8009558 <qsort+0x62>
 8009578:	9b01      	ldr	r3, [sp, #4]
 800957a:	4423      	add	r3, r4
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	e7d4      	b.n	800952a <qsort+0x34>
 8009580:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8009584:	1b3f      	subs	r7, r7, r4
 8009586:	2907      	cmp	r1, #7
 8009588:	fb04 6909 	mla	r9, r4, r9, r6
 800958c:	4437      	add	r7, r6
 800958e:	d022      	beq.n	80095d6 <qsort+0xe0>
 8009590:	2928      	cmp	r1, #40	; 0x28
 8009592:	d945      	bls.n	8009620 <qsort+0x12a>
 8009594:	08c9      	lsrs	r1, r1, #3
 8009596:	fb04 f501 	mul.w	r5, r4, r1
 800959a:	4653      	mov	r3, sl
 800959c:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 80095a0:	1971      	adds	r1, r6, r5
 80095a2:	4630      	mov	r0, r6
 80095a4:	f7ff ff87 	bl	80094b6 <med3.isra.0>
 80095a8:	4649      	mov	r1, r9
 80095aa:	eb09 0205 	add.w	r2, r9, r5
 80095ae:	4653      	mov	r3, sl
 80095b0:	4683      	mov	fp, r0
 80095b2:	1b48      	subs	r0, r1, r5
 80095b4:	f7ff ff7f 	bl	80094b6 <med3.isra.0>
 80095b8:	463a      	mov	r2, r7
 80095ba:	4681      	mov	r9, r0
 80095bc:	4653      	mov	r3, sl
 80095be:	1b79      	subs	r1, r7, r5
 80095c0:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 80095c4:	f7ff ff77 	bl	80094b6 <med3.isra.0>
 80095c8:	4602      	mov	r2, r0
 80095ca:	4649      	mov	r1, r9
 80095cc:	4653      	mov	r3, sl
 80095ce:	4658      	mov	r0, fp
 80095d0:	f7ff ff71 	bl	80094b6 <med3.isra.0>
 80095d4:	4681      	mov	r9, r0
 80095d6:	f1b8 0f00 	cmp.w	r8, #0
 80095da:	d124      	bne.n	8009626 <qsort+0x130>
 80095dc:	6833      	ldr	r3, [r6, #0]
 80095de:	f8d9 2000 	ldr.w	r2, [r9]
 80095e2:	6032      	str	r2, [r6, #0]
 80095e4:	f8c9 3000 	str.w	r3, [r9]
 80095e8:	eb06 0b04 	add.w	fp, r6, r4
 80095ec:	46b9      	mov	r9, r7
 80095ee:	465d      	mov	r5, fp
 80095f0:	2300      	movs	r3, #0
 80095f2:	45bb      	cmp	fp, r7
 80095f4:	d835      	bhi.n	8009662 <qsort+0x16c>
 80095f6:	4631      	mov	r1, r6
 80095f8:	4658      	mov	r0, fp
 80095fa:	9304      	str	r3, [sp, #16]
 80095fc:	47d0      	blx	sl
 80095fe:	2800      	cmp	r0, #0
 8009600:	9b04      	ldr	r3, [sp, #16]
 8009602:	dc3e      	bgt.n	8009682 <qsort+0x18c>
 8009604:	d10a      	bne.n	800961c <qsort+0x126>
 8009606:	f1b8 0f00 	cmp.w	r8, #0
 800960a:	d113      	bne.n	8009634 <qsort+0x13e>
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	f8db 2000 	ldr.w	r2, [fp]
 8009612:	602a      	str	r2, [r5, #0]
 8009614:	f8cb 3000 	str.w	r3, [fp]
 8009618:	4425      	add	r5, r4
 800961a:	2301      	movs	r3, #1
 800961c:	44a3      	add	fp, r4
 800961e:	e7e8      	b.n	80095f2 <qsort+0xfc>
 8009620:	463a      	mov	r2, r7
 8009622:	46b3      	mov	fp, r6
 8009624:	e7d1      	b.n	80095ca <qsort+0xd4>
 8009626:	4643      	mov	r3, r8
 8009628:	4622      	mov	r2, r4
 800962a:	4649      	mov	r1, r9
 800962c:	4630      	mov	r0, r6
 800962e:	f7ff ff29 	bl	8009484 <swapfunc>
 8009632:	e7d9      	b.n	80095e8 <qsort+0xf2>
 8009634:	4643      	mov	r3, r8
 8009636:	4622      	mov	r2, r4
 8009638:	4659      	mov	r1, fp
 800963a:	4628      	mov	r0, r5
 800963c:	f7ff ff22 	bl	8009484 <swapfunc>
 8009640:	e7ea      	b.n	8009618 <qsort+0x122>
 8009642:	d10b      	bne.n	800965c <qsort+0x166>
 8009644:	f1b8 0f00 	cmp.w	r8, #0
 8009648:	d114      	bne.n	8009674 <qsort+0x17e>
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	f8d9 2000 	ldr.w	r2, [r9]
 8009650:	603a      	str	r2, [r7, #0]
 8009652:	f8c9 3000 	str.w	r3, [r9]
 8009656:	eba9 0904 	sub.w	r9, r9, r4
 800965a:	2301      	movs	r3, #1
 800965c:	9f04      	ldr	r7, [sp, #16]
 800965e:	45bb      	cmp	fp, r7
 8009660:	d90f      	bls.n	8009682 <qsort+0x18c>
 8009662:	2b00      	cmp	r3, #0
 8009664:	d143      	bne.n	80096ee <qsort+0x1f8>
 8009666:	9b01      	ldr	r3, [sp, #4]
 8009668:	9a03      	ldr	r2, [sp, #12]
 800966a:	4293      	cmp	r3, r2
 800966c:	f4bf af61 	bcs.w	8009532 <qsort+0x3c>
 8009670:	9d01      	ldr	r5, [sp, #4]
 8009672:	e036      	b.n	80096e2 <qsort+0x1ec>
 8009674:	4643      	mov	r3, r8
 8009676:	4622      	mov	r2, r4
 8009678:	4649      	mov	r1, r9
 800967a:	4638      	mov	r0, r7
 800967c:	f7ff ff02 	bl	8009484 <swapfunc>
 8009680:	e7e9      	b.n	8009656 <qsort+0x160>
 8009682:	4631      	mov	r1, r6
 8009684:	4638      	mov	r0, r7
 8009686:	9305      	str	r3, [sp, #20]
 8009688:	47d0      	blx	sl
 800968a:	1b3b      	subs	r3, r7, r4
 800968c:	2800      	cmp	r0, #0
 800968e:	9304      	str	r3, [sp, #16]
 8009690:	9b05      	ldr	r3, [sp, #20]
 8009692:	dad6      	bge.n	8009642 <qsort+0x14c>
 8009694:	f1b8 0f00 	cmp.w	r8, #0
 8009698:	d006      	beq.n	80096a8 <qsort+0x1b2>
 800969a:	4643      	mov	r3, r8
 800969c:	4622      	mov	r2, r4
 800969e:	4639      	mov	r1, r7
 80096a0:	4658      	mov	r0, fp
 80096a2:	f7ff feef 	bl	8009484 <swapfunc>
 80096a6:	e005      	b.n	80096b4 <qsort+0x1be>
 80096a8:	f8db 3000 	ldr.w	r3, [fp]
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	f8cb 2000 	str.w	r2, [fp]
 80096b2:	603b      	str	r3, [r7, #0]
 80096b4:	9f04      	ldr	r7, [sp, #16]
 80096b6:	e7b0      	b.n	800961a <qsort+0x124>
 80096b8:	4643      	mov	r3, r8
 80096ba:	4622      	mov	r2, r4
 80096bc:	4639      	mov	r1, r7
 80096be:	4628      	mov	r0, r5
 80096c0:	f7ff fee0 	bl	8009484 <swapfunc>
 80096c4:	e00c      	b.n	80096e0 <qsort+0x1ea>
 80096c6:	1b2f      	subs	r7, r5, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	4638      	mov	r0, r7
 80096cc:	47d0      	blx	sl
 80096ce:	2800      	cmp	r0, #0
 80096d0:	dd09      	ble.n	80096e6 <qsort+0x1f0>
 80096d2:	f1b8 0f00 	cmp.w	r8, #0
 80096d6:	d1ef      	bne.n	80096b8 <qsort+0x1c2>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	602a      	str	r2, [r5, #0]
 80096de:	603b      	str	r3, [r7, #0]
 80096e0:	463d      	mov	r5, r7
 80096e2:	42ae      	cmp	r6, r5
 80096e4:	d3ef      	bcc.n	80096c6 <qsort+0x1d0>
 80096e6:	9b01      	ldr	r3, [sp, #4]
 80096e8:	4423      	add	r3, r4
 80096ea:	9301      	str	r3, [sp, #4]
 80096ec:	e7bb      	b.n	8009666 <qsort+0x170>
 80096ee:	ebab 0305 	sub.w	r3, fp, r5
 80096f2:	1baa      	subs	r2, r5, r6
 80096f4:	429a      	cmp	r2, r3
 80096f6:	bfa8      	it	ge
 80096f8:	461a      	movge	r2, r3
 80096fa:	9301      	str	r3, [sp, #4]
 80096fc:	b12a      	cbz	r2, 800970a <qsort+0x214>
 80096fe:	4643      	mov	r3, r8
 8009700:	ebab 0102 	sub.w	r1, fp, r2
 8009704:	4630      	mov	r0, r6
 8009706:	f7ff febd 	bl	8009484 <swapfunc>
 800970a:	9b03      	ldr	r3, [sp, #12]
 800970c:	eba3 0209 	sub.w	r2, r3, r9
 8009710:	eba9 0707 	sub.w	r7, r9, r7
 8009714:	1b12      	subs	r2, r2, r4
 8009716:	42ba      	cmp	r2, r7
 8009718:	bf28      	it	cs
 800971a:	463a      	movcs	r2, r7
 800971c:	b12a      	cbz	r2, 800972a <qsort+0x234>
 800971e:	9903      	ldr	r1, [sp, #12]
 8009720:	4643      	mov	r3, r8
 8009722:	1a89      	subs	r1, r1, r2
 8009724:	4658      	mov	r0, fp
 8009726:	f7ff fead 	bl	8009484 <swapfunc>
 800972a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800972e:	9b03      	ldr	r3, [sp, #12]
 8009730:	454f      	cmp	r7, r9
 8009732:	eba3 0007 	sub.w	r0, r3, r7
 8009736:	d904      	bls.n	8009742 <qsort+0x24c>
 8009738:	4633      	mov	r3, r6
 800973a:	46b9      	mov	r9, r7
 800973c:	9f01      	ldr	r7, [sp, #4]
 800973e:	4606      	mov	r6, r0
 8009740:	4618      	mov	r0, r3
 8009742:	42a7      	cmp	r7, r4
 8009744:	d921      	bls.n	800978a <qsort+0x294>
 8009746:	fbb7 f1f4 	udiv	r1, r7, r4
 800974a:	9b02      	ldr	r3, [sp, #8]
 800974c:	2b07      	cmp	r3, #7
 800974e:	d80d      	bhi.n	800976c <qsort+0x276>
 8009750:	fbb9 f7f4 	udiv	r7, r9, r4
 8009754:	aa16      	add	r2, sp, #88	; 0x58
 8009756:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800975a:	f843 6c40 	str.w	r6, [r3, #-64]
 800975e:	f843 7c3c 	str.w	r7, [r3, #-60]
 8009762:	9b02      	ldr	r3, [sp, #8]
 8009764:	3301      	adds	r3, #1
 8009766:	9302      	str	r3, [sp, #8]
 8009768:	4606      	mov	r6, r0
 800976a:	e6d5      	b.n	8009518 <qsort+0x22>
 800976c:	4653      	mov	r3, sl
 800976e:	4622      	mov	r2, r4
 8009770:	f7ff fec1 	bl	80094f6 <qsort>
 8009774:	45a1      	cmp	r9, r4
 8009776:	d80b      	bhi.n	8009790 <qsort+0x29a>
 8009778:	9b02      	ldr	r3, [sp, #8]
 800977a:	aa16      	add	r2, sp, #88	; 0x58
 800977c:	3b01      	subs	r3, #1
 800977e:	9302      	str	r3, [sp, #8]
 8009780:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009784:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8009788:	e7ee      	b.n	8009768 <qsort+0x272>
 800978a:	45a1      	cmp	r9, r4
 800978c:	f67f aed1 	bls.w	8009532 <qsort+0x3c>
 8009790:	fbb9 f1f4 	udiv	r1, r9, r4
 8009794:	4630      	mov	r0, r6
 8009796:	e7e7      	b.n	8009768 <qsort+0x272>

08009798 <_sbrk_r>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	4d06      	ldr	r5, [pc, #24]	; (80097b4 <_sbrk_r+0x1c>)
 800979c:	2300      	movs	r3, #0
 800979e:	4604      	mov	r4, r0
 80097a0:	4608      	mov	r0, r1
 80097a2:	602b      	str	r3, [r5, #0]
 80097a4:	f7f8 fb8a 	bl	8001ebc <_sbrk>
 80097a8:	1c43      	adds	r3, r0, #1
 80097aa:	d102      	bne.n	80097b2 <_sbrk_r+0x1a>
 80097ac:	682b      	ldr	r3, [r5, #0]
 80097ae:	b103      	cbz	r3, 80097b2 <_sbrk_r+0x1a>
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	bd38      	pop	{r3, r4, r5, pc}
 80097b4:	20025f84 	.word	0x20025f84

080097b8 <_raise_r>:
 80097b8:	291f      	cmp	r1, #31
 80097ba:	b538      	push	{r3, r4, r5, lr}
 80097bc:	4604      	mov	r4, r0
 80097be:	460d      	mov	r5, r1
 80097c0:	d904      	bls.n	80097cc <_raise_r+0x14>
 80097c2:	2316      	movs	r3, #22
 80097c4:	6003      	str	r3, [r0, #0]
 80097c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097ca:	bd38      	pop	{r3, r4, r5, pc}
 80097cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80097ce:	b112      	cbz	r2, 80097d6 <_raise_r+0x1e>
 80097d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097d4:	b94b      	cbnz	r3, 80097ea <_raise_r+0x32>
 80097d6:	4620      	mov	r0, r4
 80097d8:	f000 f830 	bl	800983c <_getpid_r>
 80097dc:	462a      	mov	r2, r5
 80097de:	4601      	mov	r1, r0
 80097e0:	4620      	mov	r0, r4
 80097e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097e6:	f000 b817 	b.w	8009818 <_kill_r>
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d00a      	beq.n	8009804 <_raise_r+0x4c>
 80097ee:	1c59      	adds	r1, r3, #1
 80097f0:	d103      	bne.n	80097fa <_raise_r+0x42>
 80097f2:	2316      	movs	r3, #22
 80097f4:	6003      	str	r3, [r0, #0]
 80097f6:	2001      	movs	r0, #1
 80097f8:	e7e7      	b.n	80097ca <_raise_r+0x12>
 80097fa:	2400      	movs	r4, #0
 80097fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009800:	4628      	mov	r0, r5
 8009802:	4798      	blx	r3
 8009804:	2000      	movs	r0, #0
 8009806:	e7e0      	b.n	80097ca <_raise_r+0x12>

08009808 <raise>:
 8009808:	4b02      	ldr	r3, [pc, #8]	; (8009814 <raise+0xc>)
 800980a:	4601      	mov	r1, r0
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	f7ff bfd3 	b.w	80097b8 <_raise_r>
 8009812:	bf00      	nop
 8009814:	2000002c 	.word	0x2000002c

08009818 <_kill_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4d07      	ldr	r5, [pc, #28]	; (8009838 <_kill_r+0x20>)
 800981c:	2300      	movs	r3, #0
 800981e:	4604      	mov	r4, r0
 8009820:	4608      	mov	r0, r1
 8009822:	4611      	mov	r1, r2
 8009824:	602b      	str	r3, [r5, #0]
 8009826:	f7f8 fac1 	bl	8001dac <_kill>
 800982a:	1c43      	adds	r3, r0, #1
 800982c:	d102      	bne.n	8009834 <_kill_r+0x1c>
 800982e:	682b      	ldr	r3, [r5, #0]
 8009830:	b103      	cbz	r3, 8009834 <_kill_r+0x1c>
 8009832:	6023      	str	r3, [r4, #0]
 8009834:	bd38      	pop	{r3, r4, r5, pc}
 8009836:	bf00      	nop
 8009838:	20025f84 	.word	0x20025f84

0800983c <_getpid_r>:
 800983c:	f7f8 baae 	b.w	8001d9c <_getpid>

08009840 <siprintf>:
 8009840:	b40e      	push	{r1, r2, r3}
 8009842:	b500      	push	{lr}
 8009844:	b09c      	sub	sp, #112	; 0x70
 8009846:	ab1d      	add	r3, sp, #116	; 0x74
 8009848:	9002      	str	r0, [sp, #8]
 800984a:	9006      	str	r0, [sp, #24]
 800984c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009850:	4809      	ldr	r0, [pc, #36]	; (8009878 <siprintf+0x38>)
 8009852:	9107      	str	r1, [sp, #28]
 8009854:	9104      	str	r1, [sp, #16]
 8009856:	4909      	ldr	r1, [pc, #36]	; (800987c <siprintf+0x3c>)
 8009858:	f853 2b04 	ldr.w	r2, [r3], #4
 800985c:	9105      	str	r1, [sp, #20]
 800985e:	6800      	ldr	r0, [r0, #0]
 8009860:	9301      	str	r3, [sp, #4]
 8009862:	a902      	add	r1, sp, #8
 8009864:	f000 fc9a 	bl	800a19c <_svfiprintf_r>
 8009868:	9b02      	ldr	r3, [sp, #8]
 800986a:	2200      	movs	r2, #0
 800986c:	701a      	strb	r2, [r3, #0]
 800986e:	b01c      	add	sp, #112	; 0x70
 8009870:	f85d eb04 	ldr.w	lr, [sp], #4
 8009874:	b003      	add	sp, #12
 8009876:	4770      	bx	lr
 8009878:	2000002c 	.word	0x2000002c
 800987c:	ffff0208 	.word	0xffff0208

08009880 <strncmp>:
 8009880:	b510      	push	{r4, lr}
 8009882:	b16a      	cbz	r2, 80098a0 <strncmp+0x20>
 8009884:	3901      	subs	r1, #1
 8009886:	1884      	adds	r4, r0, r2
 8009888:	f810 3b01 	ldrb.w	r3, [r0], #1
 800988c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009890:	4293      	cmp	r3, r2
 8009892:	d103      	bne.n	800989c <strncmp+0x1c>
 8009894:	42a0      	cmp	r0, r4
 8009896:	d001      	beq.n	800989c <strncmp+0x1c>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1f5      	bne.n	8009888 <strncmp+0x8>
 800989c:	1a98      	subs	r0, r3, r2
 800989e:	bd10      	pop	{r4, pc}
 80098a0:	4610      	mov	r0, r2
 80098a2:	e7fc      	b.n	800989e <strncmp+0x1e>

080098a4 <strncpy>:
 80098a4:	b510      	push	{r4, lr}
 80098a6:	3901      	subs	r1, #1
 80098a8:	4603      	mov	r3, r0
 80098aa:	b132      	cbz	r2, 80098ba <strncpy+0x16>
 80098ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80098b0:	f803 4b01 	strb.w	r4, [r3], #1
 80098b4:	3a01      	subs	r2, #1
 80098b6:	2c00      	cmp	r4, #0
 80098b8:	d1f7      	bne.n	80098aa <strncpy+0x6>
 80098ba:	441a      	add	r2, r3
 80098bc:	2100      	movs	r1, #0
 80098be:	4293      	cmp	r3, r2
 80098c0:	d100      	bne.n	80098c4 <strncpy+0x20>
 80098c2:	bd10      	pop	{r4, pc}
 80098c4:	f803 1b01 	strb.w	r1, [r3], #1
 80098c8:	e7f9      	b.n	80098be <strncpy+0x1a>
	...

080098cc <strtok>:
 80098cc:	4b16      	ldr	r3, [pc, #88]	; (8009928 <strtok+0x5c>)
 80098ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098d0:	681e      	ldr	r6, [r3, #0]
 80098d2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80098d4:	4605      	mov	r5, r0
 80098d6:	b9fc      	cbnz	r4, 8009918 <strtok+0x4c>
 80098d8:	2050      	movs	r0, #80	; 0x50
 80098da:	9101      	str	r1, [sp, #4]
 80098dc:	f7ff fa02 	bl	8008ce4 <malloc>
 80098e0:	9901      	ldr	r1, [sp, #4]
 80098e2:	65b0      	str	r0, [r6, #88]	; 0x58
 80098e4:	4602      	mov	r2, r0
 80098e6:	b920      	cbnz	r0, 80098f2 <strtok+0x26>
 80098e8:	4b10      	ldr	r3, [pc, #64]	; (800992c <strtok+0x60>)
 80098ea:	4811      	ldr	r0, [pc, #68]	; (8009930 <strtok+0x64>)
 80098ec:	2157      	movs	r1, #87	; 0x57
 80098ee:	f7ff f99f 	bl	8008c30 <__assert_func>
 80098f2:	e9c0 4400 	strd	r4, r4, [r0]
 80098f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80098fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80098fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009902:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009906:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800990a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800990e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009912:	6184      	str	r4, [r0, #24]
 8009914:	7704      	strb	r4, [r0, #28]
 8009916:	6244      	str	r4, [r0, #36]	; 0x24
 8009918:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800991a:	2301      	movs	r3, #1
 800991c:	4628      	mov	r0, r5
 800991e:	b002      	add	sp, #8
 8009920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009924:	f000 b806 	b.w	8009934 <__strtok_r>
 8009928:	2000002c 	.word	0x2000002c
 800992c:	0801bf7f 	.word	0x0801bf7f
 8009930:	0801bf96 	.word	0x0801bf96

08009934 <__strtok_r>:
 8009934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009936:	b908      	cbnz	r0, 800993c <__strtok_r+0x8>
 8009938:	6810      	ldr	r0, [r2, #0]
 800993a:	b188      	cbz	r0, 8009960 <__strtok_r+0x2c>
 800993c:	4604      	mov	r4, r0
 800993e:	4620      	mov	r0, r4
 8009940:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009944:	460f      	mov	r7, r1
 8009946:	f817 6b01 	ldrb.w	r6, [r7], #1
 800994a:	b91e      	cbnz	r6, 8009954 <__strtok_r+0x20>
 800994c:	b965      	cbnz	r5, 8009968 <__strtok_r+0x34>
 800994e:	6015      	str	r5, [r2, #0]
 8009950:	4628      	mov	r0, r5
 8009952:	e005      	b.n	8009960 <__strtok_r+0x2c>
 8009954:	42b5      	cmp	r5, r6
 8009956:	d1f6      	bne.n	8009946 <__strtok_r+0x12>
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1f0      	bne.n	800993e <__strtok_r+0xa>
 800995c:	6014      	str	r4, [r2, #0]
 800995e:	7003      	strb	r3, [r0, #0]
 8009960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009962:	461c      	mov	r4, r3
 8009964:	e00c      	b.n	8009980 <__strtok_r+0x4c>
 8009966:	b915      	cbnz	r5, 800996e <__strtok_r+0x3a>
 8009968:	f814 3b01 	ldrb.w	r3, [r4], #1
 800996c:	460e      	mov	r6, r1
 800996e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009972:	42ab      	cmp	r3, r5
 8009974:	d1f7      	bne.n	8009966 <__strtok_r+0x32>
 8009976:	2b00      	cmp	r3, #0
 8009978:	d0f3      	beq.n	8009962 <__strtok_r+0x2e>
 800997a:	2300      	movs	r3, #0
 800997c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009980:	6014      	str	r4, [r2, #0]
 8009982:	e7ed      	b.n	8009960 <__strtok_r+0x2c>

08009984 <_strtoll_l.isra.0>:
 8009984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009988:	b087      	sub	sp, #28
 800998a:	4691      	mov	r9, r2
 800998c:	4a47      	ldr	r2, [pc, #284]	; (8009aac <_strtoll_l.isra.0+0x128>)
 800998e:	9005      	str	r0, [sp, #20]
 8009990:	4688      	mov	r8, r1
 8009992:	461f      	mov	r7, r3
 8009994:	460d      	mov	r5, r1
 8009996:	462b      	mov	r3, r5
 8009998:	f815 4b01 	ldrb.w	r4, [r5], #1
 800999c:	5ca6      	ldrb	r6, [r4, r2]
 800999e:	f016 0608 	ands.w	r6, r6, #8
 80099a2:	d1f8      	bne.n	8009996 <_strtoll_l.isra.0+0x12>
 80099a4:	2c2d      	cmp	r4, #45	; 0x2d
 80099a6:	d147      	bne.n	8009a38 <_strtoll_l.isra.0+0xb4>
 80099a8:	782c      	ldrb	r4, [r5, #0]
 80099aa:	2601      	movs	r6, #1
 80099ac:	1c9d      	adds	r5, r3, #2
 80099ae:	2f00      	cmp	r7, #0
 80099b0:	d077      	beq.n	8009aa2 <_strtoll_l.isra.0+0x11e>
 80099b2:	2f10      	cmp	r7, #16
 80099b4:	d109      	bne.n	80099ca <_strtoll_l.isra.0+0x46>
 80099b6:	2c30      	cmp	r4, #48	; 0x30
 80099b8:	d107      	bne.n	80099ca <_strtoll_l.isra.0+0x46>
 80099ba:	782b      	ldrb	r3, [r5, #0]
 80099bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80099c0:	2b58      	cmp	r3, #88	; 0x58
 80099c2:	d169      	bne.n	8009a98 <_strtoll_l.isra.0+0x114>
 80099c4:	786c      	ldrb	r4, [r5, #1]
 80099c6:	2710      	movs	r7, #16
 80099c8:	3502      	adds	r5, #2
 80099ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099ce:	1990      	adds	r0, r2, r6
 80099d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80099d4:	ea4f 7be7 	mov.w	fp, r7, asr #31
 80099d8:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 80099dc:	463a      	mov	r2, r7
 80099de:	465b      	mov	r3, fp
 80099e0:	e9cd 0100 	strd	r0, r1, [sp]
 80099e4:	f7f6 fc74 	bl	80002d0 <__aeabi_uldivmod>
 80099e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099ec:	46ba      	mov	sl, r7
 80099ee:	4696      	mov	lr, r2
 80099f0:	2300      	movs	r3, #0
 80099f2:	2000      	movs	r0, #0
 80099f4:	2100      	movs	r1, #0
 80099f6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80099fa:	f1bc 0f09 	cmp.w	ip, #9
 80099fe:	d820      	bhi.n	8009a42 <_strtoll_l.isra.0+0xbe>
 8009a00:	4664      	mov	r4, ip
 8009a02:	42a7      	cmp	r7, r4
 8009a04:	dd2e      	ble.n	8009a64 <_strtoll_l.isra.0+0xe0>
 8009a06:	1c5a      	adds	r2, r3, #1
 8009a08:	d013      	beq.n	8009a32 <_strtoll_l.isra.0+0xae>
 8009a0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a0e:	428b      	cmp	r3, r1
 8009a10:	bf08      	it	eq
 8009a12:	4282      	cmpeq	r2, r0
 8009a14:	d323      	bcc.n	8009a5e <_strtoll_l.isra.0+0xda>
 8009a16:	d101      	bne.n	8009a1c <_strtoll_l.isra.0+0x98>
 8009a18:	45a6      	cmp	lr, r4
 8009a1a:	db20      	blt.n	8009a5e <_strtoll_l.isra.0+0xda>
 8009a1c:	fb0a f301 	mul.w	r3, sl, r1
 8009a20:	fb00 330b 	mla	r3, r0, fp, r3
 8009a24:	fbaa 0100 	umull	r0, r1, sl, r0
 8009a28:	4419      	add	r1, r3
 8009a2a:	1900      	adds	r0, r0, r4
 8009a2c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8009a30:	2301      	movs	r3, #1
 8009a32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a36:	e7de      	b.n	80099f6 <_strtoll_l.isra.0+0x72>
 8009a38:	2c2b      	cmp	r4, #43	; 0x2b
 8009a3a:	bf04      	itt	eq
 8009a3c:	782c      	ldrbeq	r4, [r5, #0]
 8009a3e:	1c9d      	addeq	r5, r3, #2
 8009a40:	e7b5      	b.n	80099ae <_strtoll_l.isra.0+0x2a>
 8009a42:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009a46:	f1bc 0f19 	cmp.w	ip, #25
 8009a4a:	d801      	bhi.n	8009a50 <_strtoll_l.isra.0+0xcc>
 8009a4c:	3c37      	subs	r4, #55	; 0x37
 8009a4e:	e7d8      	b.n	8009a02 <_strtoll_l.isra.0+0x7e>
 8009a50:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009a54:	f1bc 0f19 	cmp.w	ip, #25
 8009a58:	d804      	bhi.n	8009a64 <_strtoll_l.isra.0+0xe0>
 8009a5a:	3c57      	subs	r4, #87	; 0x57
 8009a5c:	e7d1      	b.n	8009a02 <_strtoll_l.isra.0+0x7e>
 8009a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a62:	e7e6      	b.n	8009a32 <_strtoll_l.isra.0+0xae>
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	d10a      	bne.n	8009a7e <_strtoll_l.isra.0+0xfa>
 8009a68:	9a05      	ldr	r2, [sp, #20]
 8009a6a:	2322      	movs	r3, #34	; 0x22
 8009a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	f1b9 0f00 	cmp.w	r9, #0
 8009a76:	d10a      	bne.n	8009a8e <_strtoll_l.isra.0+0x10a>
 8009a78:	b007      	add	sp, #28
 8009a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7e:	b116      	cbz	r6, 8009a86 <_strtoll_l.isra.0+0x102>
 8009a80:	4240      	negs	r0, r0
 8009a82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009a86:	f1b9 0f00 	cmp.w	r9, #0
 8009a8a:	d0f5      	beq.n	8009a78 <_strtoll_l.isra.0+0xf4>
 8009a8c:	b10b      	cbz	r3, 8009a92 <_strtoll_l.isra.0+0x10e>
 8009a8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8009a92:	f8c9 8000 	str.w	r8, [r9]
 8009a96:	e7ef      	b.n	8009a78 <_strtoll_l.isra.0+0xf4>
 8009a98:	2430      	movs	r4, #48	; 0x30
 8009a9a:	2f00      	cmp	r7, #0
 8009a9c:	d195      	bne.n	80099ca <_strtoll_l.isra.0+0x46>
 8009a9e:	2708      	movs	r7, #8
 8009aa0:	e793      	b.n	80099ca <_strtoll_l.isra.0+0x46>
 8009aa2:	2c30      	cmp	r4, #48	; 0x30
 8009aa4:	d089      	beq.n	80099ba <_strtoll_l.isra.0+0x36>
 8009aa6:	270a      	movs	r7, #10
 8009aa8:	e78f      	b.n	80099ca <_strtoll_l.isra.0+0x46>
 8009aaa:	bf00      	nop
 8009aac:	0801bff8 	.word	0x0801bff8

08009ab0 <strtoll>:
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	460a      	mov	r2, r1
 8009ab4:	4601      	mov	r1, r0
 8009ab6:	4802      	ldr	r0, [pc, #8]	; (8009ac0 <strtoll+0x10>)
 8009ab8:	6800      	ldr	r0, [r0, #0]
 8009aba:	f7ff bf63 	b.w	8009984 <_strtoll_l.isra.0>
 8009abe:	bf00      	nop
 8009ac0:	2000002c 	.word	0x2000002c

08009ac4 <__swbuf_r>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	460e      	mov	r6, r1
 8009ac8:	4614      	mov	r4, r2
 8009aca:	4605      	mov	r5, r0
 8009acc:	b118      	cbz	r0, 8009ad6 <__swbuf_r+0x12>
 8009ace:	6983      	ldr	r3, [r0, #24]
 8009ad0:	b90b      	cbnz	r3, 8009ad6 <__swbuf_r+0x12>
 8009ad2:	f000 f9d1 	bl	8009e78 <__sinit>
 8009ad6:	4b21      	ldr	r3, [pc, #132]	; (8009b5c <__swbuf_r+0x98>)
 8009ad8:	429c      	cmp	r4, r3
 8009ada:	d12b      	bne.n	8009b34 <__swbuf_r+0x70>
 8009adc:	686c      	ldr	r4, [r5, #4]
 8009ade:	69a3      	ldr	r3, [r4, #24]
 8009ae0:	60a3      	str	r3, [r4, #8]
 8009ae2:	89a3      	ldrh	r3, [r4, #12]
 8009ae4:	071a      	lsls	r2, r3, #28
 8009ae6:	d52f      	bpl.n	8009b48 <__swbuf_r+0x84>
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	b36b      	cbz	r3, 8009b48 <__swbuf_r+0x84>
 8009aec:	6923      	ldr	r3, [r4, #16]
 8009aee:	6820      	ldr	r0, [r4, #0]
 8009af0:	1ac0      	subs	r0, r0, r3
 8009af2:	6963      	ldr	r3, [r4, #20]
 8009af4:	b2f6      	uxtb	r6, r6
 8009af6:	4283      	cmp	r3, r0
 8009af8:	4637      	mov	r7, r6
 8009afa:	dc04      	bgt.n	8009b06 <__swbuf_r+0x42>
 8009afc:	4621      	mov	r1, r4
 8009afe:	4628      	mov	r0, r5
 8009b00:	f000 f926 	bl	8009d50 <_fflush_r>
 8009b04:	bb30      	cbnz	r0, 8009b54 <__swbuf_r+0x90>
 8009b06:	68a3      	ldr	r3, [r4, #8]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	60a3      	str	r3, [r4, #8]
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	6022      	str	r2, [r4, #0]
 8009b12:	701e      	strb	r6, [r3, #0]
 8009b14:	6963      	ldr	r3, [r4, #20]
 8009b16:	3001      	adds	r0, #1
 8009b18:	4283      	cmp	r3, r0
 8009b1a:	d004      	beq.n	8009b26 <__swbuf_r+0x62>
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	07db      	lsls	r3, r3, #31
 8009b20:	d506      	bpl.n	8009b30 <__swbuf_r+0x6c>
 8009b22:	2e0a      	cmp	r6, #10
 8009b24:	d104      	bne.n	8009b30 <__swbuf_r+0x6c>
 8009b26:	4621      	mov	r1, r4
 8009b28:	4628      	mov	r0, r5
 8009b2a:	f000 f911 	bl	8009d50 <_fflush_r>
 8009b2e:	b988      	cbnz	r0, 8009b54 <__swbuf_r+0x90>
 8009b30:	4638      	mov	r0, r7
 8009b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b34:	4b0a      	ldr	r3, [pc, #40]	; (8009b60 <__swbuf_r+0x9c>)
 8009b36:	429c      	cmp	r4, r3
 8009b38:	d101      	bne.n	8009b3e <__swbuf_r+0x7a>
 8009b3a:	68ac      	ldr	r4, [r5, #8]
 8009b3c:	e7cf      	b.n	8009ade <__swbuf_r+0x1a>
 8009b3e:	4b09      	ldr	r3, [pc, #36]	; (8009b64 <__swbuf_r+0xa0>)
 8009b40:	429c      	cmp	r4, r3
 8009b42:	bf08      	it	eq
 8009b44:	68ec      	ldreq	r4, [r5, #12]
 8009b46:	e7ca      	b.n	8009ade <__swbuf_r+0x1a>
 8009b48:	4621      	mov	r1, r4
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	f000 f80c 	bl	8009b68 <__swsetup_r>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d0cb      	beq.n	8009aec <__swbuf_r+0x28>
 8009b54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009b58:	e7ea      	b.n	8009b30 <__swbuf_r+0x6c>
 8009b5a:	bf00      	nop
 8009b5c:	0801c118 	.word	0x0801c118
 8009b60:	0801c138 	.word	0x0801c138
 8009b64:	0801c0f8 	.word	0x0801c0f8

08009b68 <__swsetup_r>:
 8009b68:	4b32      	ldr	r3, [pc, #200]	; (8009c34 <__swsetup_r+0xcc>)
 8009b6a:	b570      	push	{r4, r5, r6, lr}
 8009b6c:	681d      	ldr	r5, [r3, #0]
 8009b6e:	4606      	mov	r6, r0
 8009b70:	460c      	mov	r4, r1
 8009b72:	b125      	cbz	r5, 8009b7e <__swsetup_r+0x16>
 8009b74:	69ab      	ldr	r3, [r5, #24]
 8009b76:	b913      	cbnz	r3, 8009b7e <__swsetup_r+0x16>
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f000 f97d 	bl	8009e78 <__sinit>
 8009b7e:	4b2e      	ldr	r3, [pc, #184]	; (8009c38 <__swsetup_r+0xd0>)
 8009b80:	429c      	cmp	r4, r3
 8009b82:	d10f      	bne.n	8009ba4 <__swsetup_r+0x3c>
 8009b84:	686c      	ldr	r4, [r5, #4]
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b8c:	0719      	lsls	r1, r3, #28
 8009b8e:	d42c      	bmi.n	8009bea <__swsetup_r+0x82>
 8009b90:	06dd      	lsls	r5, r3, #27
 8009b92:	d411      	bmi.n	8009bb8 <__swsetup_r+0x50>
 8009b94:	2309      	movs	r3, #9
 8009b96:	6033      	str	r3, [r6, #0]
 8009b98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b9c:	81a3      	strh	r3, [r4, #12]
 8009b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ba2:	e03e      	b.n	8009c22 <__swsetup_r+0xba>
 8009ba4:	4b25      	ldr	r3, [pc, #148]	; (8009c3c <__swsetup_r+0xd4>)
 8009ba6:	429c      	cmp	r4, r3
 8009ba8:	d101      	bne.n	8009bae <__swsetup_r+0x46>
 8009baa:	68ac      	ldr	r4, [r5, #8]
 8009bac:	e7eb      	b.n	8009b86 <__swsetup_r+0x1e>
 8009bae:	4b24      	ldr	r3, [pc, #144]	; (8009c40 <__swsetup_r+0xd8>)
 8009bb0:	429c      	cmp	r4, r3
 8009bb2:	bf08      	it	eq
 8009bb4:	68ec      	ldreq	r4, [r5, #12]
 8009bb6:	e7e6      	b.n	8009b86 <__swsetup_r+0x1e>
 8009bb8:	0758      	lsls	r0, r3, #29
 8009bba:	d512      	bpl.n	8009be2 <__swsetup_r+0x7a>
 8009bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bbe:	b141      	cbz	r1, 8009bd2 <__swsetup_r+0x6a>
 8009bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bc4:	4299      	cmp	r1, r3
 8009bc6:	d002      	beq.n	8009bce <__swsetup_r+0x66>
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7ff f8c3 	bl	8008d54 <_free_r>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	6363      	str	r3, [r4, #52]	; 0x34
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bd8:	81a3      	strh	r3, [r4, #12]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	6063      	str	r3, [r4, #4]
 8009bde:	6923      	ldr	r3, [r4, #16]
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	f043 0308 	orr.w	r3, r3, #8
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	b94b      	cbnz	r3, 8009c02 <__swsetup_r+0x9a>
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bf8:	d003      	beq.n	8009c02 <__swsetup_r+0x9a>
 8009bfa:	4621      	mov	r1, r4
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f000 f9ff 	bl	800a000 <__smakebuf_r>
 8009c02:	89a0      	ldrh	r0, [r4, #12]
 8009c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c08:	f010 0301 	ands.w	r3, r0, #1
 8009c0c:	d00a      	beq.n	8009c24 <__swsetup_r+0xbc>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	60a3      	str	r3, [r4, #8]
 8009c12:	6963      	ldr	r3, [r4, #20]
 8009c14:	425b      	negs	r3, r3
 8009c16:	61a3      	str	r3, [r4, #24]
 8009c18:	6923      	ldr	r3, [r4, #16]
 8009c1a:	b943      	cbnz	r3, 8009c2e <__swsetup_r+0xc6>
 8009c1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c20:	d1ba      	bne.n	8009b98 <__swsetup_r+0x30>
 8009c22:	bd70      	pop	{r4, r5, r6, pc}
 8009c24:	0781      	lsls	r1, r0, #30
 8009c26:	bf58      	it	pl
 8009c28:	6963      	ldrpl	r3, [r4, #20]
 8009c2a:	60a3      	str	r3, [r4, #8]
 8009c2c:	e7f4      	b.n	8009c18 <__swsetup_r+0xb0>
 8009c2e:	2000      	movs	r0, #0
 8009c30:	e7f7      	b.n	8009c22 <__swsetup_r+0xba>
 8009c32:	bf00      	nop
 8009c34:	2000002c 	.word	0x2000002c
 8009c38:	0801c118 	.word	0x0801c118
 8009c3c:	0801c138 	.word	0x0801c138
 8009c40:	0801c0f8 	.word	0x0801c0f8

08009c44 <__sflush_r>:
 8009c44:	898a      	ldrh	r2, [r1, #12]
 8009c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	0710      	lsls	r0, r2, #28
 8009c4e:	460c      	mov	r4, r1
 8009c50:	d458      	bmi.n	8009d04 <__sflush_r+0xc0>
 8009c52:	684b      	ldr	r3, [r1, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	dc05      	bgt.n	8009c64 <__sflush_r+0x20>
 8009c58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	dc02      	bgt.n	8009c64 <__sflush_r+0x20>
 8009c5e:	2000      	movs	r0, #0
 8009c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c66:	2e00      	cmp	r6, #0
 8009c68:	d0f9      	beq.n	8009c5e <__sflush_r+0x1a>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c70:	682f      	ldr	r7, [r5, #0]
 8009c72:	602b      	str	r3, [r5, #0]
 8009c74:	d032      	beq.n	8009cdc <__sflush_r+0x98>
 8009c76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	075a      	lsls	r2, r3, #29
 8009c7c:	d505      	bpl.n	8009c8a <__sflush_r+0x46>
 8009c7e:	6863      	ldr	r3, [r4, #4]
 8009c80:	1ac0      	subs	r0, r0, r3
 8009c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c84:	b10b      	cbz	r3, 8009c8a <__sflush_r+0x46>
 8009c86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c88:	1ac0      	subs	r0, r0, r3
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c90:	6a21      	ldr	r1, [r4, #32]
 8009c92:	4628      	mov	r0, r5
 8009c94:	47b0      	blx	r6
 8009c96:	1c43      	adds	r3, r0, #1
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	d106      	bne.n	8009caa <__sflush_r+0x66>
 8009c9c:	6829      	ldr	r1, [r5, #0]
 8009c9e:	291d      	cmp	r1, #29
 8009ca0:	d82c      	bhi.n	8009cfc <__sflush_r+0xb8>
 8009ca2:	4a2a      	ldr	r2, [pc, #168]	; (8009d4c <__sflush_r+0x108>)
 8009ca4:	40ca      	lsrs	r2, r1
 8009ca6:	07d6      	lsls	r6, r2, #31
 8009ca8:	d528      	bpl.n	8009cfc <__sflush_r+0xb8>
 8009caa:	2200      	movs	r2, #0
 8009cac:	6062      	str	r2, [r4, #4]
 8009cae:	04d9      	lsls	r1, r3, #19
 8009cb0:	6922      	ldr	r2, [r4, #16]
 8009cb2:	6022      	str	r2, [r4, #0]
 8009cb4:	d504      	bpl.n	8009cc0 <__sflush_r+0x7c>
 8009cb6:	1c42      	adds	r2, r0, #1
 8009cb8:	d101      	bne.n	8009cbe <__sflush_r+0x7a>
 8009cba:	682b      	ldr	r3, [r5, #0]
 8009cbc:	b903      	cbnz	r3, 8009cc0 <__sflush_r+0x7c>
 8009cbe:	6560      	str	r0, [r4, #84]	; 0x54
 8009cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cc2:	602f      	str	r7, [r5, #0]
 8009cc4:	2900      	cmp	r1, #0
 8009cc6:	d0ca      	beq.n	8009c5e <__sflush_r+0x1a>
 8009cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ccc:	4299      	cmp	r1, r3
 8009cce:	d002      	beq.n	8009cd6 <__sflush_r+0x92>
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f7ff f83f 	bl	8008d54 <_free_r>
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	6360      	str	r0, [r4, #52]	; 0x34
 8009cda:	e7c1      	b.n	8009c60 <__sflush_r+0x1c>
 8009cdc:	6a21      	ldr	r1, [r4, #32]
 8009cde:	2301      	movs	r3, #1
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	47b0      	blx	r6
 8009ce4:	1c41      	adds	r1, r0, #1
 8009ce6:	d1c7      	bne.n	8009c78 <__sflush_r+0x34>
 8009ce8:	682b      	ldr	r3, [r5, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0c4      	beq.n	8009c78 <__sflush_r+0x34>
 8009cee:	2b1d      	cmp	r3, #29
 8009cf0:	d001      	beq.n	8009cf6 <__sflush_r+0xb2>
 8009cf2:	2b16      	cmp	r3, #22
 8009cf4:	d101      	bne.n	8009cfa <__sflush_r+0xb6>
 8009cf6:	602f      	str	r7, [r5, #0]
 8009cf8:	e7b1      	b.n	8009c5e <__sflush_r+0x1a>
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	e7ad      	b.n	8009c60 <__sflush_r+0x1c>
 8009d04:	690f      	ldr	r7, [r1, #16]
 8009d06:	2f00      	cmp	r7, #0
 8009d08:	d0a9      	beq.n	8009c5e <__sflush_r+0x1a>
 8009d0a:	0793      	lsls	r3, r2, #30
 8009d0c:	680e      	ldr	r6, [r1, #0]
 8009d0e:	bf08      	it	eq
 8009d10:	694b      	ldreq	r3, [r1, #20]
 8009d12:	600f      	str	r7, [r1, #0]
 8009d14:	bf18      	it	ne
 8009d16:	2300      	movne	r3, #0
 8009d18:	eba6 0807 	sub.w	r8, r6, r7
 8009d1c:	608b      	str	r3, [r1, #8]
 8009d1e:	f1b8 0f00 	cmp.w	r8, #0
 8009d22:	dd9c      	ble.n	8009c5e <__sflush_r+0x1a>
 8009d24:	6a21      	ldr	r1, [r4, #32]
 8009d26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d28:	4643      	mov	r3, r8
 8009d2a:	463a      	mov	r2, r7
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	47b0      	blx	r6
 8009d30:	2800      	cmp	r0, #0
 8009d32:	dc06      	bgt.n	8009d42 <__sflush_r+0xfe>
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d3a:	81a3      	strh	r3, [r4, #12]
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d40:	e78e      	b.n	8009c60 <__sflush_r+0x1c>
 8009d42:	4407      	add	r7, r0
 8009d44:	eba8 0800 	sub.w	r8, r8, r0
 8009d48:	e7e9      	b.n	8009d1e <__sflush_r+0xda>
 8009d4a:	bf00      	nop
 8009d4c:	20400001 	.word	0x20400001

08009d50 <_fflush_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	690b      	ldr	r3, [r1, #16]
 8009d54:	4605      	mov	r5, r0
 8009d56:	460c      	mov	r4, r1
 8009d58:	b913      	cbnz	r3, 8009d60 <_fflush_r+0x10>
 8009d5a:	2500      	movs	r5, #0
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	bd38      	pop	{r3, r4, r5, pc}
 8009d60:	b118      	cbz	r0, 8009d6a <_fflush_r+0x1a>
 8009d62:	6983      	ldr	r3, [r0, #24]
 8009d64:	b90b      	cbnz	r3, 8009d6a <_fflush_r+0x1a>
 8009d66:	f000 f887 	bl	8009e78 <__sinit>
 8009d6a:	4b14      	ldr	r3, [pc, #80]	; (8009dbc <_fflush_r+0x6c>)
 8009d6c:	429c      	cmp	r4, r3
 8009d6e:	d11b      	bne.n	8009da8 <_fflush_r+0x58>
 8009d70:	686c      	ldr	r4, [r5, #4]
 8009d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0ef      	beq.n	8009d5a <_fflush_r+0xa>
 8009d7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d7c:	07d0      	lsls	r0, r2, #31
 8009d7e:	d404      	bmi.n	8009d8a <_fflush_r+0x3a>
 8009d80:	0599      	lsls	r1, r3, #22
 8009d82:	d402      	bmi.n	8009d8a <_fflush_r+0x3a>
 8009d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d86:	f000 f915 	bl	8009fb4 <__retarget_lock_acquire_recursive>
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	f7ff ff59 	bl	8009c44 <__sflush_r>
 8009d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d94:	07da      	lsls	r2, r3, #31
 8009d96:	4605      	mov	r5, r0
 8009d98:	d4e0      	bmi.n	8009d5c <_fflush_r+0xc>
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	059b      	lsls	r3, r3, #22
 8009d9e:	d4dd      	bmi.n	8009d5c <_fflush_r+0xc>
 8009da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009da2:	f000 f908 	bl	8009fb6 <__retarget_lock_release_recursive>
 8009da6:	e7d9      	b.n	8009d5c <_fflush_r+0xc>
 8009da8:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <_fflush_r+0x70>)
 8009daa:	429c      	cmp	r4, r3
 8009dac:	d101      	bne.n	8009db2 <_fflush_r+0x62>
 8009dae:	68ac      	ldr	r4, [r5, #8]
 8009db0:	e7df      	b.n	8009d72 <_fflush_r+0x22>
 8009db2:	4b04      	ldr	r3, [pc, #16]	; (8009dc4 <_fflush_r+0x74>)
 8009db4:	429c      	cmp	r4, r3
 8009db6:	bf08      	it	eq
 8009db8:	68ec      	ldreq	r4, [r5, #12]
 8009dba:	e7da      	b.n	8009d72 <_fflush_r+0x22>
 8009dbc:	0801c118 	.word	0x0801c118
 8009dc0:	0801c138 	.word	0x0801c138
 8009dc4:	0801c0f8 	.word	0x0801c0f8

08009dc8 <std>:
 8009dc8:	2300      	movs	r3, #0
 8009dca:	b510      	push	{r4, lr}
 8009dcc:	4604      	mov	r4, r0
 8009dce:	e9c0 3300 	strd	r3, r3, [r0]
 8009dd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dd6:	6083      	str	r3, [r0, #8]
 8009dd8:	8181      	strh	r1, [r0, #12]
 8009dda:	6643      	str	r3, [r0, #100]	; 0x64
 8009ddc:	81c2      	strh	r2, [r0, #14]
 8009dde:	6183      	str	r3, [r0, #24]
 8009de0:	4619      	mov	r1, r3
 8009de2:	2208      	movs	r2, #8
 8009de4:	305c      	adds	r0, #92	; 0x5c
 8009de6:	f7fe ffad 	bl	8008d44 <memset>
 8009dea:	4b05      	ldr	r3, [pc, #20]	; (8009e00 <std+0x38>)
 8009dec:	6263      	str	r3, [r4, #36]	; 0x24
 8009dee:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <std+0x3c>)
 8009df0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009df2:	4b05      	ldr	r3, [pc, #20]	; (8009e08 <std+0x40>)
 8009df4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009df6:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <std+0x44>)
 8009df8:	6224      	str	r4, [r4, #32]
 8009dfa:	6323      	str	r3, [r4, #48]	; 0x30
 8009dfc:	bd10      	pop	{r4, pc}
 8009dfe:	bf00      	nop
 8009e00:	0800a39d 	.word	0x0800a39d
 8009e04:	0800a3bf 	.word	0x0800a3bf
 8009e08:	0800a3f7 	.word	0x0800a3f7
 8009e0c:	0800a41b 	.word	0x0800a41b

08009e10 <_cleanup_r>:
 8009e10:	4901      	ldr	r1, [pc, #4]	; (8009e18 <_cleanup_r+0x8>)
 8009e12:	f000 b8af 	b.w	8009f74 <_fwalk_reent>
 8009e16:	bf00      	nop
 8009e18:	08009d51 	.word	0x08009d51

08009e1c <__sfmoreglue>:
 8009e1c:	b570      	push	{r4, r5, r6, lr}
 8009e1e:	1e4a      	subs	r2, r1, #1
 8009e20:	2568      	movs	r5, #104	; 0x68
 8009e22:	4355      	muls	r5, r2
 8009e24:	460e      	mov	r6, r1
 8009e26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e2a:	f7fe ffe3 	bl	8008df4 <_malloc_r>
 8009e2e:	4604      	mov	r4, r0
 8009e30:	b140      	cbz	r0, 8009e44 <__sfmoreglue+0x28>
 8009e32:	2100      	movs	r1, #0
 8009e34:	e9c0 1600 	strd	r1, r6, [r0]
 8009e38:	300c      	adds	r0, #12
 8009e3a:	60a0      	str	r0, [r4, #8]
 8009e3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e40:	f7fe ff80 	bl	8008d44 <memset>
 8009e44:	4620      	mov	r0, r4
 8009e46:	bd70      	pop	{r4, r5, r6, pc}

08009e48 <__sfp_lock_acquire>:
 8009e48:	4801      	ldr	r0, [pc, #4]	; (8009e50 <__sfp_lock_acquire+0x8>)
 8009e4a:	f000 b8b3 	b.w	8009fb4 <__retarget_lock_acquire_recursive>
 8009e4e:	bf00      	nop
 8009e50:	20025f7c 	.word	0x20025f7c

08009e54 <__sfp_lock_release>:
 8009e54:	4801      	ldr	r0, [pc, #4]	; (8009e5c <__sfp_lock_release+0x8>)
 8009e56:	f000 b8ae 	b.w	8009fb6 <__retarget_lock_release_recursive>
 8009e5a:	bf00      	nop
 8009e5c:	20025f7c 	.word	0x20025f7c

08009e60 <__sinit_lock_acquire>:
 8009e60:	4801      	ldr	r0, [pc, #4]	; (8009e68 <__sinit_lock_acquire+0x8>)
 8009e62:	f000 b8a7 	b.w	8009fb4 <__retarget_lock_acquire_recursive>
 8009e66:	bf00      	nop
 8009e68:	20025f7b 	.word	0x20025f7b

08009e6c <__sinit_lock_release>:
 8009e6c:	4801      	ldr	r0, [pc, #4]	; (8009e74 <__sinit_lock_release+0x8>)
 8009e6e:	f000 b8a2 	b.w	8009fb6 <__retarget_lock_release_recursive>
 8009e72:	bf00      	nop
 8009e74:	20025f7b 	.word	0x20025f7b

08009e78 <__sinit>:
 8009e78:	b510      	push	{r4, lr}
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	f7ff fff0 	bl	8009e60 <__sinit_lock_acquire>
 8009e80:	69a3      	ldr	r3, [r4, #24]
 8009e82:	b11b      	cbz	r3, 8009e8c <__sinit+0x14>
 8009e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e88:	f7ff bff0 	b.w	8009e6c <__sinit_lock_release>
 8009e8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e90:	6523      	str	r3, [r4, #80]	; 0x50
 8009e92:	4b13      	ldr	r3, [pc, #76]	; (8009ee0 <__sinit+0x68>)
 8009e94:	4a13      	ldr	r2, [pc, #76]	; (8009ee4 <__sinit+0x6c>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e9a:	42a3      	cmp	r3, r4
 8009e9c:	bf04      	itt	eq
 8009e9e:	2301      	moveq	r3, #1
 8009ea0:	61a3      	streq	r3, [r4, #24]
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 f820 	bl	8009ee8 <__sfp>
 8009ea8:	6060      	str	r0, [r4, #4]
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f000 f81c 	bl	8009ee8 <__sfp>
 8009eb0:	60a0      	str	r0, [r4, #8]
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 f818 	bl	8009ee8 <__sfp>
 8009eb8:	2200      	movs	r2, #0
 8009eba:	60e0      	str	r0, [r4, #12]
 8009ebc:	2104      	movs	r1, #4
 8009ebe:	6860      	ldr	r0, [r4, #4]
 8009ec0:	f7ff ff82 	bl	8009dc8 <std>
 8009ec4:	68a0      	ldr	r0, [r4, #8]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	2109      	movs	r1, #9
 8009eca:	f7ff ff7d 	bl	8009dc8 <std>
 8009ece:	68e0      	ldr	r0, [r4, #12]
 8009ed0:	2202      	movs	r2, #2
 8009ed2:	2112      	movs	r1, #18
 8009ed4:	f7ff ff78 	bl	8009dc8 <std>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	61a3      	str	r3, [r4, #24]
 8009edc:	e7d2      	b.n	8009e84 <__sinit+0xc>
 8009ede:	bf00      	nop
 8009ee0:	0801bf48 	.word	0x0801bf48
 8009ee4:	08009e11 	.word	0x08009e11

08009ee8 <__sfp>:
 8009ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eea:	4607      	mov	r7, r0
 8009eec:	f7ff ffac 	bl	8009e48 <__sfp_lock_acquire>
 8009ef0:	4b1e      	ldr	r3, [pc, #120]	; (8009f6c <__sfp+0x84>)
 8009ef2:	681e      	ldr	r6, [r3, #0]
 8009ef4:	69b3      	ldr	r3, [r6, #24]
 8009ef6:	b913      	cbnz	r3, 8009efe <__sfp+0x16>
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f7ff ffbd 	bl	8009e78 <__sinit>
 8009efe:	3648      	adds	r6, #72	; 0x48
 8009f00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f04:	3b01      	subs	r3, #1
 8009f06:	d503      	bpl.n	8009f10 <__sfp+0x28>
 8009f08:	6833      	ldr	r3, [r6, #0]
 8009f0a:	b30b      	cbz	r3, 8009f50 <__sfp+0x68>
 8009f0c:	6836      	ldr	r6, [r6, #0]
 8009f0e:	e7f7      	b.n	8009f00 <__sfp+0x18>
 8009f10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f14:	b9d5      	cbnz	r5, 8009f4c <__sfp+0x64>
 8009f16:	4b16      	ldr	r3, [pc, #88]	; (8009f70 <__sfp+0x88>)
 8009f18:	60e3      	str	r3, [r4, #12]
 8009f1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f1e:	6665      	str	r5, [r4, #100]	; 0x64
 8009f20:	f000 f847 	bl	8009fb2 <__retarget_lock_init_recursive>
 8009f24:	f7ff ff96 	bl	8009e54 <__sfp_lock_release>
 8009f28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f30:	6025      	str	r5, [r4, #0]
 8009f32:	61a5      	str	r5, [r4, #24]
 8009f34:	2208      	movs	r2, #8
 8009f36:	4629      	mov	r1, r5
 8009f38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f3c:	f7fe ff02 	bl	8008d44 <memset>
 8009f40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f48:	4620      	mov	r0, r4
 8009f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f4c:	3468      	adds	r4, #104	; 0x68
 8009f4e:	e7d9      	b.n	8009f04 <__sfp+0x1c>
 8009f50:	2104      	movs	r1, #4
 8009f52:	4638      	mov	r0, r7
 8009f54:	f7ff ff62 	bl	8009e1c <__sfmoreglue>
 8009f58:	4604      	mov	r4, r0
 8009f5a:	6030      	str	r0, [r6, #0]
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d1d5      	bne.n	8009f0c <__sfp+0x24>
 8009f60:	f7ff ff78 	bl	8009e54 <__sfp_lock_release>
 8009f64:	230c      	movs	r3, #12
 8009f66:	603b      	str	r3, [r7, #0]
 8009f68:	e7ee      	b.n	8009f48 <__sfp+0x60>
 8009f6a:	bf00      	nop
 8009f6c:	0801bf48 	.word	0x0801bf48
 8009f70:	ffff0001 	.word	0xffff0001

08009f74 <_fwalk_reent>:
 8009f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f78:	4606      	mov	r6, r0
 8009f7a:	4688      	mov	r8, r1
 8009f7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f80:	2700      	movs	r7, #0
 8009f82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f86:	f1b9 0901 	subs.w	r9, r9, #1
 8009f8a:	d505      	bpl.n	8009f98 <_fwalk_reent+0x24>
 8009f8c:	6824      	ldr	r4, [r4, #0]
 8009f8e:	2c00      	cmp	r4, #0
 8009f90:	d1f7      	bne.n	8009f82 <_fwalk_reent+0xe>
 8009f92:	4638      	mov	r0, r7
 8009f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f98:	89ab      	ldrh	r3, [r5, #12]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d907      	bls.n	8009fae <_fwalk_reent+0x3a>
 8009f9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	d003      	beq.n	8009fae <_fwalk_reent+0x3a>
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	4630      	mov	r0, r6
 8009faa:	47c0      	blx	r8
 8009fac:	4307      	orrs	r7, r0
 8009fae:	3568      	adds	r5, #104	; 0x68
 8009fb0:	e7e9      	b.n	8009f86 <_fwalk_reent+0x12>

08009fb2 <__retarget_lock_init_recursive>:
 8009fb2:	4770      	bx	lr

08009fb4 <__retarget_lock_acquire_recursive>:
 8009fb4:	4770      	bx	lr

08009fb6 <__retarget_lock_release_recursive>:
 8009fb6:	4770      	bx	lr

08009fb8 <__swhatbuf_r>:
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	460e      	mov	r6, r1
 8009fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fc0:	2900      	cmp	r1, #0
 8009fc2:	b096      	sub	sp, #88	; 0x58
 8009fc4:	4614      	mov	r4, r2
 8009fc6:	461d      	mov	r5, r3
 8009fc8:	da07      	bge.n	8009fda <__swhatbuf_r+0x22>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	602b      	str	r3, [r5, #0]
 8009fce:	89b3      	ldrh	r3, [r6, #12]
 8009fd0:	061a      	lsls	r2, r3, #24
 8009fd2:	d410      	bmi.n	8009ff6 <__swhatbuf_r+0x3e>
 8009fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd8:	e00e      	b.n	8009ff8 <__swhatbuf_r+0x40>
 8009fda:	466a      	mov	r2, sp
 8009fdc:	f000 fa44 	bl	800a468 <_fstat_r>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	dbf2      	blt.n	8009fca <__swhatbuf_r+0x12>
 8009fe4:	9a01      	ldr	r2, [sp, #4]
 8009fe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fee:	425a      	negs	r2, r3
 8009ff0:	415a      	adcs	r2, r3
 8009ff2:	602a      	str	r2, [r5, #0]
 8009ff4:	e7ee      	b.n	8009fd4 <__swhatbuf_r+0x1c>
 8009ff6:	2340      	movs	r3, #64	; 0x40
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	6023      	str	r3, [r4, #0]
 8009ffc:	b016      	add	sp, #88	; 0x58
 8009ffe:	bd70      	pop	{r4, r5, r6, pc}

0800a000 <__smakebuf_r>:
 800a000:	898b      	ldrh	r3, [r1, #12]
 800a002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a004:	079d      	lsls	r5, r3, #30
 800a006:	4606      	mov	r6, r0
 800a008:	460c      	mov	r4, r1
 800a00a:	d507      	bpl.n	800a01c <__smakebuf_r+0x1c>
 800a00c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	6123      	str	r3, [r4, #16]
 800a014:	2301      	movs	r3, #1
 800a016:	6163      	str	r3, [r4, #20]
 800a018:	b002      	add	sp, #8
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	ab01      	add	r3, sp, #4
 800a01e:	466a      	mov	r2, sp
 800a020:	f7ff ffca 	bl	8009fb8 <__swhatbuf_r>
 800a024:	9900      	ldr	r1, [sp, #0]
 800a026:	4605      	mov	r5, r0
 800a028:	4630      	mov	r0, r6
 800a02a:	f7fe fee3 	bl	8008df4 <_malloc_r>
 800a02e:	b948      	cbnz	r0, 800a044 <__smakebuf_r+0x44>
 800a030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a034:	059a      	lsls	r2, r3, #22
 800a036:	d4ef      	bmi.n	800a018 <__smakebuf_r+0x18>
 800a038:	f023 0303 	bic.w	r3, r3, #3
 800a03c:	f043 0302 	orr.w	r3, r3, #2
 800a040:	81a3      	strh	r3, [r4, #12]
 800a042:	e7e3      	b.n	800a00c <__smakebuf_r+0xc>
 800a044:	4b0d      	ldr	r3, [pc, #52]	; (800a07c <__smakebuf_r+0x7c>)
 800a046:	62b3      	str	r3, [r6, #40]	; 0x28
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	6020      	str	r0, [r4, #0]
 800a04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a050:	81a3      	strh	r3, [r4, #12]
 800a052:	9b00      	ldr	r3, [sp, #0]
 800a054:	6163      	str	r3, [r4, #20]
 800a056:	9b01      	ldr	r3, [sp, #4]
 800a058:	6120      	str	r0, [r4, #16]
 800a05a:	b15b      	cbz	r3, 800a074 <__smakebuf_r+0x74>
 800a05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a060:	4630      	mov	r0, r6
 800a062:	f000 fa13 	bl	800a48c <_isatty_r>
 800a066:	b128      	cbz	r0, 800a074 <__smakebuf_r+0x74>
 800a068:	89a3      	ldrh	r3, [r4, #12]
 800a06a:	f023 0303 	bic.w	r3, r3, #3
 800a06e:	f043 0301 	orr.w	r3, r3, #1
 800a072:	81a3      	strh	r3, [r4, #12]
 800a074:	89a0      	ldrh	r0, [r4, #12]
 800a076:	4305      	orrs	r5, r0
 800a078:	81a5      	strh	r5, [r4, #12]
 800a07a:	e7cd      	b.n	800a018 <__smakebuf_r+0x18>
 800a07c:	08009e11 	.word	0x08009e11

0800a080 <__malloc_lock>:
 800a080:	4801      	ldr	r0, [pc, #4]	; (800a088 <__malloc_lock+0x8>)
 800a082:	f7ff bf97 	b.w	8009fb4 <__retarget_lock_acquire_recursive>
 800a086:	bf00      	nop
 800a088:	20025f78 	.word	0x20025f78

0800a08c <__malloc_unlock>:
 800a08c:	4801      	ldr	r0, [pc, #4]	; (800a094 <__malloc_unlock+0x8>)
 800a08e:	f7ff bf92 	b.w	8009fb6 <__retarget_lock_release_recursive>
 800a092:	bf00      	nop
 800a094:	20025f78 	.word	0x20025f78

0800a098 <_realloc_r>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	4607      	mov	r7, r0
 800a09c:	4614      	mov	r4, r2
 800a09e:	460e      	mov	r6, r1
 800a0a0:	b921      	cbnz	r1, 800a0ac <_realloc_r+0x14>
 800a0a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	f7fe bea4 	b.w	8008df4 <_malloc_r>
 800a0ac:	b922      	cbnz	r2, 800a0b8 <_realloc_r+0x20>
 800a0ae:	f7fe fe51 	bl	8008d54 <_free_r>
 800a0b2:	4625      	mov	r5, r4
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0b8:	f000 fa0a 	bl	800a4d0 <_malloc_usable_size_r>
 800a0bc:	42a0      	cmp	r0, r4
 800a0be:	d20f      	bcs.n	800a0e0 <_realloc_r+0x48>
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	4638      	mov	r0, r7
 800a0c4:	f7fe fe96 	bl	8008df4 <_malloc_r>
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d0f2      	beq.n	800a0b4 <_realloc_r+0x1c>
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4622      	mov	r2, r4
 800a0d2:	f7fe fe0f 	bl	8008cf4 <memcpy>
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	4638      	mov	r0, r7
 800a0da:	f7fe fe3b 	bl	8008d54 <_free_r>
 800a0de:	e7e9      	b.n	800a0b4 <_realloc_r+0x1c>
 800a0e0:	4635      	mov	r5, r6
 800a0e2:	e7e7      	b.n	800a0b4 <_realloc_r+0x1c>

0800a0e4 <__ssputs_r>:
 800a0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0e8:	688e      	ldr	r6, [r1, #8]
 800a0ea:	429e      	cmp	r6, r3
 800a0ec:	4682      	mov	sl, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	4690      	mov	r8, r2
 800a0f2:	461f      	mov	r7, r3
 800a0f4:	d838      	bhi.n	800a168 <__ssputs_r+0x84>
 800a0f6:	898a      	ldrh	r2, [r1, #12]
 800a0f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0fc:	d032      	beq.n	800a164 <__ssputs_r+0x80>
 800a0fe:	6825      	ldr	r5, [r4, #0]
 800a100:	6909      	ldr	r1, [r1, #16]
 800a102:	eba5 0901 	sub.w	r9, r5, r1
 800a106:	6965      	ldr	r5, [r4, #20]
 800a108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a10c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a110:	3301      	adds	r3, #1
 800a112:	444b      	add	r3, r9
 800a114:	106d      	asrs	r5, r5, #1
 800a116:	429d      	cmp	r5, r3
 800a118:	bf38      	it	cc
 800a11a:	461d      	movcc	r5, r3
 800a11c:	0553      	lsls	r3, r2, #21
 800a11e:	d531      	bpl.n	800a184 <__ssputs_r+0xa0>
 800a120:	4629      	mov	r1, r5
 800a122:	f7fe fe67 	bl	8008df4 <_malloc_r>
 800a126:	4606      	mov	r6, r0
 800a128:	b950      	cbnz	r0, 800a140 <__ssputs_r+0x5c>
 800a12a:	230c      	movs	r3, #12
 800a12c:	f8ca 3000 	str.w	r3, [sl]
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a136:	81a3      	strh	r3, [r4, #12]
 800a138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a140:	6921      	ldr	r1, [r4, #16]
 800a142:	464a      	mov	r2, r9
 800a144:	f7fe fdd6 	bl	8008cf4 <memcpy>
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	6126      	str	r6, [r4, #16]
 800a156:	6165      	str	r5, [r4, #20]
 800a158:	444e      	add	r6, r9
 800a15a:	eba5 0509 	sub.w	r5, r5, r9
 800a15e:	6026      	str	r6, [r4, #0]
 800a160:	60a5      	str	r5, [r4, #8]
 800a162:	463e      	mov	r6, r7
 800a164:	42be      	cmp	r6, r7
 800a166:	d900      	bls.n	800a16a <__ssputs_r+0x86>
 800a168:	463e      	mov	r6, r7
 800a16a:	4632      	mov	r2, r6
 800a16c:	6820      	ldr	r0, [r4, #0]
 800a16e:	4641      	mov	r1, r8
 800a170:	f7fe fdce 	bl	8008d10 <memmove>
 800a174:	68a3      	ldr	r3, [r4, #8]
 800a176:	6822      	ldr	r2, [r4, #0]
 800a178:	1b9b      	subs	r3, r3, r6
 800a17a:	4432      	add	r2, r6
 800a17c:	60a3      	str	r3, [r4, #8]
 800a17e:	6022      	str	r2, [r4, #0]
 800a180:	2000      	movs	r0, #0
 800a182:	e7db      	b.n	800a13c <__ssputs_r+0x58>
 800a184:	462a      	mov	r2, r5
 800a186:	f7ff ff87 	bl	800a098 <_realloc_r>
 800a18a:	4606      	mov	r6, r0
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d1e1      	bne.n	800a154 <__ssputs_r+0x70>
 800a190:	6921      	ldr	r1, [r4, #16]
 800a192:	4650      	mov	r0, sl
 800a194:	f7fe fdde 	bl	8008d54 <_free_r>
 800a198:	e7c7      	b.n	800a12a <__ssputs_r+0x46>
	...

0800a19c <_svfiprintf_r>:
 800a19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a0:	4698      	mov	r8, r3
 800a1a2:	898b      	ldrh	r3, [r1, #12]
 800a1a4:	061b      	lsls	r3, r3, #24
 800a1a6:	b09d      	sub	sp, #116	; 0x74
 800a1a8:	4607      	mov	r7, r0
 800a1aa:	460d      	mov	r5, r1
 800a1ac:	4614      	mov	r4, r2
 800a1ae:	d50e      	bpl.n	800a1ce <_svfiprintf_r+0x32>
 800a1b0:	690b      	ldr	r3, [r1, #16]
 800a1b2:	b963      	cbnz	r3, 800a1ce <_svfiprintf_r+0x32>
 800a1b4:	2140      	movs	r1, #64	; 0x40
 800a1b6:	f7fe fe1d 	bl	8008df4 <_malloc_r>
 800a1ba:	6028      	str	r0, [r5, #0]
 800a1bc:	6128      	str	r0, [r5, #16]
 800a1be:	b920      	cbnz	r0, 800a1ca <_svfiprintf_r+0x2e>
 800a1c0:	230c      	movs	r3, #12
 800a1c2:	603b      	str	r3, [r7, #0]
 800a1c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1c8:	e0d1      	b.n	800a36e <_svfiprintf_r+0x1d2>
 800a1ca:	2340      	movs	r3, #64	; 0x40
 800a1cc:	616b      	str	r3, [r5, #20]
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d2:	2320      	movs	r3, #32
 800a1d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1dc:	2330      	movs	r3, #48	; 0x30
 800a1de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a388 <_svfiprintf_r+0x1ec>
 800a1e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1e6:	f04f 0901 	mov.w	r9, #1
 800a1ea:	4623      	mov	r3, r4
 800a1ec:	469a      	mov	sl, r3
 800a1ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1f2:	b10a      	cbz	r2, 800a1f8 <_svfiprintf_r+0x5c>
 800a1f4:	2a25      	cmp	r2, #37	; 0x25
 800a1f6:	d1f9      	bne.n	800a1ec <_svfiprintf_r+0x50>
 800a1f8:	ebba 0b04 	subs.w	fp, sl, r4
 800a1fc:	d00b      	beq.n	800a216 <_svfiprintf_r+0x7a>
 800a1fe:	465b      	mov	r3, fp
 800a200:	4622      	mov	r2, r4
 800a202:	4629      	mov	r1, r5
 800a204:	4638      	mov	r0, r7
 800a206:	f7ff ff6d 	bl	800a0e4 <__ssputs_r>
 800a20a:	3001      	adds	r0, #1
 800a20c:	f000 80aa 	beq.w	800a364 <_svfiprintf_r+0x1c8>
 800a210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a212:	445a      	add	r2, fp
 800a214:	9209      	str	r2, [sp, #36]	; 0x24
 800a216:	f89a 3000 	ldrb.w	r3, [sl]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 80a2 	beq.w	800a364 <_svfiprintf_r+0x1c8>
 800a220:	2300      	movs	r3, #0
 800a222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a22a:	f10a 0a01 	add.w	sl, sl, #1
 800a22e:	9304      	str	r3, [sp, #16]
 800a230:	9307      	str	r3, [sp, #28]
 800a232:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a236:	931a      	str	r3, [sp, #104]	; 0x68
 800a238:	4654      	mov	r4, sl
 800a23a:	2205      	movs	r2, #5
 800a23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a240:	4851      	ldr	r0, [pc, #324]	; (800a388 <_svfiprintf_r+0x1ec>)
 800a242:	f7f5 ffed 	bl	8000220 <memchr>
 800a246:	9a04      	ldr	r2, [sp, #16]
 800a248:	b9d8      	cbnz	r0, 800a282 <_svfiprintf_r+0xe6>
 800a24a:	06d0      	lsls	r0, r2, #27
 800a24c:	bf44      	itt	mi
 800a24e:	2320      	movmi	r3, #32
 800a250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a254:	0711      	lsls	r1, r2, #28
 800a256:	bf44      	itt	mi
 800a258:	232b      	movmi	r3, #43	; 0x2b
 800a25a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a25e:	f89a 3000 	ldrb.w	r3, [sl]
 800a262:	2b2a      	cmp	r3, #42	; 0x2a
 800a264:	d015      	beq.n	800a292 <_svfiprintf_r+0xf6>
 800a266:	9a07      	ldr	r2, [sp, #28]
 800a268:	4654      	mov	r4, sl
 800a26a:	2000      	movs	r0, #0
 800a26c:	f04f 0c0a 	mov.w	ip, #10
 800a270:	4621      	mov	r1, r4
 800a272:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a276:	3b30      	subs	r3, #48	; 0x30
 800a278:	2b09      	cmp	r3, #9
 800a27a:	d94e      	bls.n	800a31a <_svfiprintf_r+0x17e>
 800a27c:	b1b0      	cbz	r0, 800a2ac <_svfiprintf_r+0x110>
 800a27e:	9207      	str	r2, [sp, #28]
 800a280:	e014      	b.n	800a2ac <_svfiprintf_r+0x110>
 800a282:	eba0 0308 	sub.w	r3, r0, r8
 800a286:	fa09 f303 	lsl.w	r3, r9, r3
 800a28a:	4313      	orrs	r3, r2
 800a28c:	9304      	str	r3, [sp, #16]
 800a28e:	46a2      	mov	sl, r4
 800a290:	e7d2      	b.n	800a238 <_svfiprintf_r+0x9c>
 800a292:	9b03      	ldr	r3, [sp, #12]
 800a294:	1d19      	adds	r1, r3, #4
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	9103      	str	r1, [sp, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	bfbb      	ittet	lt
 800a29e:	425b      	neglt	r3, r3
 800a2a0:	f042 0202 	orrlt.w	r2, r2, #2
 800a2a4:	9307      	strge	r3, [sp, #28]
 800a2a6:	9307      	strlt	r3, [sp, #28]
 800a2a8:	bfb8      	it	lt
 800a2aa:	9204      	strlt	r2, [sp, #16]
 800a2ac:	7823      	ldrb	r3, [r4, #0]
 800a2ae:	2b2e      	cmp	r3, #46	; 0x2e
 800a2b0:	d10c      	bne.n	800a2cc <_svfiprintf_r+0x130>
 800a2b2:	7863      	ldrb	r3, [r4, #1]
 800a2b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a2b6:	d135      	bne.n	800a324 <_svfiprintf_r+0x188>
 800a2b8:	9b03      	ldr	r3, [sp, #12]
 800a2ba:	1d1a      	adds	r2, r3, #4
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	9203      	str	r2, [sp, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	bfb8      	it	lt
 800a2c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a2c8:	3402      	adds	r4, #2
 800a2ca:	9305      	str	r3, [sp, #20]
 800a2cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a398 <_svfiprintf_r+0x1fc>
 800a2d0:	7821      	ldrb	r1, [r4, #0]
 800a2d2:	2203      	movs	r2, #3
 800a2d4:	4650      	mov	r0, sl
 800a2d6:	f7f5 ffa3 	bl	8000220 <memchr>
 800a2da:	b140      	cbz	r0, 800a2ee <_svfiprintf_r+0x152>
 800a2dc:	2340      	movs	r3, #64	; 0x40
 800a2de:	eba0 000a 	sub.w	r0, r0, sl
 800a2e2:	fa03 f000 	lsl.w	r0, r3, r0
 800a2e6:	9b04      	ldr	r3, [sp, #16]
 800a2e8:	4303      	orrs	r3, r0
 800a2ea:	3401      	adds	r4, #1
 800a2ec:	9304      	str	r3, [sp, #16]
 800a2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f2:	4826      	ldr	r0, [pc, #152]	; (800a38c <_svfiprintf_r+0x1f0>)
 800a2f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2f8:	2206      	movs	r2, #6
 800a2fa:	f7f5 ff91 	bl	8000220 <memchr>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d038      	beq.n	800a374 <_svfiprintf_r+0x1d8>
 800a302:	4b23      	ldr	r3, [pc, #140]	; (800a390 <_svfiprintf_r+0x1f4>)
 800a304:	bb1b      	cbnz	r3, 800a34e <_svfiprintf_r+0x1b2>
 800a306:	9b03      	ldr	r3, [sp, #12]
 800a308:	3307      	adds	r3, #7
 800a30a:	f023 0307 	bic.w	r3, r3, #7
 800a30e:	3308      	adds	r3, #8
 800a310:	9303      	str	r3, [sp, #12]
 800a312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a314:	4433      	add	r3, r6
 800a316:	9309      	str	r3, [sp, #36]	; 0x24
 800a318:	e767      	b.n	800a1ea <_svfiprintf_r+0x4e>
 800a31a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a31e:	460c      	mov	r4, r1
 800a320:	2001      	movs	r0, #1
 800a322:	e7a5      	b.n	800a270 <_svfiprintf_r+0xd4>
 800a324:	2300      	movs	r3, #0
 800a326:	3401      	adds	r4, #1
 800a328:	9305      	str	r3, [sp, #20]
 800a32a:	4619      	mov	r1, r3
 800a32c:	f04f 0c0a 	mov.w	ip, #10
 800a330:	4620      	mov	r0, r4
 800a332:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a336:	3a30      	subs	r2, #48	; 0x30
 800a338:	2a09      	cmp	r2, #9
 800a33a:	d903      	bls.n	800a344 <_svfiprintf_r+0x1a8>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d0c5      	beq.n	800a2cc <_svfiprintf_r+0x130>
 800a340:	9105      	str	r1, [sp, #20]
 800a342:	e7c3      	b.n	800a2cc <_svfiprintf_r+0x130>
 800a344:	fb0c 2101 	mla	r1, ip, r1, r2
 800a348:	4604      	mov	r4, r0
 800a34a:	2301      	movs	r3, #1
 800a34c:	e7f0      	b.n	800a330 <_svfiprintf_r+0x194>
 800a34e:	ab03      	add	r3, sp, #12
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	462a      	mov	r2, r5
 800a354:	4b0f      	ldr	r3, [pc, #60]	; (800a394 <_svfiprintf_r+0x1f8>)
 800a356:	a904      	add	r1, sp, #16
 800a358:	4638      	mov	r0, r7
 800a35a:	f3af 8000 	nop.w
 800a35e:	1c42      	adds	r2, r0, #1
 800a360:	4606      	mov	r6, r0
 800a362:	d1d6      	bne.n	800a312 <_svfiprintf_r+0x176>
 800a364:	89ab      	ldrh	r3, [r5, #12]
 800a366:	065b      	lsls	r3, r3, #25
 800a368:	f53f af2c 	bmi.w	800a1c4 <_svfiprintf_r+0x28>
 800a36c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a36e:	b01d      	add	sp, #116	; 0x74
 800a370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a374:	ab03      	add	r3, sp, #12
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	462a      	mov	r2, r5
 800a37a:	4b06      	ldr	r3, [pc, #24]	; (800a394 <_svfiprintf_r+0x1f8>)
 800a37c:	a904      	add	r1, sp, #16
 800a37e:	4638      	mov	r0, r7
 800a380:	f7fe ff5a 	bl	8009238 <_printf_i>
 800a384:	e7eb      	b.n	800a35e <_svfiprintf_r+0x1c2>
 800a386:	bf00      	nop
 800a388:	0801bf4c 	.word	0x0801bf4c
 800a38c:	0801bf56 	.word	0x0801bf56
 800a390:	00000000 	.word	0x00000000
 800a394:	0800a0e5 	.word	0x0800a0e5
 800a398:	0801bf52 	.word	0x0801bf52

0800a39c <__sread>:
 800a39c:	b510      	push	{r4, lr}
 800a39e:	460c      	mov	r4, r1
 800a3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a4:	f000 f89c 	bl	800a4e0 <_read_r>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	bfab      	itete	ge
 800a3ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a3b0:	181b      	addge	r3, r3, r0
 800a3b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3b6:	bfac      	ite	ge
 800a3b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3ba:	81a3      	strhlt	r3, [r4, #12]
 800a3bc:	bd10      	pop	{r4, pc}

0800a3be <__swrite>:
 800a3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c2:	461f      	mov	r7, r3
 800a3c4:	898b      	ldrh	r3, [r1, #12]
 800a3c6:	05db      	lsls	r3, r3, #23
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	4616      	mov	r6, r2
 800a3ce:	d505      	bpl.n	800a3dc <__swrite+0x1e>
 800a3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f000 f868 	bl	800a4ac <_lseek_r>
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3e6:	81a3      	strh	r3, [r4, #12]
 800a3e8:	4632      	mov	r2, r6
 800a3ea:	463b      	mov	r3, r7
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f2:	f000 b817 	b.w	800a424 <_write_r>

0800a3f6 <__sseek>:
 800a3f6:	b510      	push	{r4, lr}
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3fe:	f000 f855 	bl	800a4ac <_lseek_r>
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	bf15      	itete	ne
 800a408:	6560      	strne	r0, [r4, #84]	; 0x54
 800a40a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a40e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a412:	81a3      	strheq	r3, [r4, #12]
 800a414:	bf18      	it	ne
 800a416:	81a3      	strhne	r3, [r4, #12]
 800a418:	bd10      	pop	{r4, pc}

0800a41a <__sclose>:
 800a41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a41e:	f000 b813 	b.w	800a448 <_close_r>
	...

0800a424 <_write_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4d07      	ldr	r5, [pc, #28]	; (800a444 <_write_r+0x20>)
 800a428:	4604      	mov	r4, r0
 800a42a:	4608      	mov	r0, r1
 800a42c:	4611      	mov	r1, r2
 800a42e:	2200      	movs	r2, #0
 800a430:	602a      	str	r2, [r5, #0]
 800a432:	461a      	mov	r2, r3
 800a434:	f7f7 fcf1 	bl	8001e1a <_write>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_write_r+0x1e>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_write_r+0x1e>
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	20025f84 	.word	0x20025f84

0800a448 <_close_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4d06      	ldr	r5, [pc, #24]	; (800a464 <_close_r+0x1c>)
 800a44c:	2300      	movs	r3, #0
 800a44e:	4604      	mov	r4, r0
 800a450:	4608      	mov	r0, r1
 800a452:	602b      	str	r3, [r5, #0]
 800a454:	f7f7 fcfd 	bl	8001e52 <_close>
 800a458:	1c43      	adds	r3, r0, #1
 800a45a:	d102      	bne.n	800a462 <_close_r+0x1a>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	b103      	cbz	r3, 800a462 <_close_r+0x1a>
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	20025f84 	.word	0x20025f84

0800a468 <_fstat_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d07      	ldr	r5, [pc, #28]	; (800a488 <_fstat_r+0x20>)
 800a46c:	2300      	movs	r3, #0
 800a46e:	4604      	mov	r4, r0
 800a470:	4608      	mov	r0, r1
 800a472:	4611      	mov	r1, r2
 800a474:	602b      	str	r3, [r5, #0]
 800a476:	f7f7 fcf8 	bl	8001e6a <_fstat>
 800a47a:	1c43      	adds	r3, r0, #1
 800a47c:	d102      	bne.n	800a484 <_fstat_r+0x1c>
 800a47e:	682b      	ldr	r3, [r5, #0]
 800a480:	b103      	cbz	r3, 800a484 <_fstat_r+0x1c>
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	bd38      	pop	{r3, r4, r5, pc}
 800a486:	bf00      	nop
 800a488:	20025f84 	.word	0x20025f84

0800a48c <_isatty_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4d06      	ldr	r5, [pc, #24]	; (800a4a8 <_isatty_r+0x1c>)
 800a490:	2300      	movs	r3, #0
 800a492:	4604      	mov	r4, r0
 800a494:	4608      	mov	r0, r1
 800a496:	602b      	str	r3, [r5, #0]
 800a498:	f7f7 fcf7 	bl	8001e8a <_isatty>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_isatty_r+0x1a>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_isatty_r+0x1a>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	20025f84 	.word	0x20025f84

0800a4ac <_lseek_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4d07      	ldr	r5, [pc, #28]	; (800a4cc <_lseek_r+0x20>)
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	4608      	mov	r0, r1
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	602a      	str	r2, [r5, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f7f7 fcf0 	bl	8001ea0 <_lseek>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_lseek_r+0x1e>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_lseek_r+0x1e>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	20025f84 	.word	0x20025f84

0800a4d0 <_malloc_usable_size_r>:
 800a4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4d4:	1f18      	subs	r0, r3, #4
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	bfbc      	itt	lt
 800a4da:	580b      	ldrlt	r3, [r1, r0]
 800a4dc:	18c0      	addlt	r0, r0, r3
 800a4de:	4770      	bx	lr

0800a4e0 <_read_r>:
 800a4e0:	b538      	push	{r3, r4, r5, lr}
 800a4e2:	4d07      	ldr	r5, [pc, #28]	; (800a500 <_read_r+0x20>)
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	4608      	mov	r0, r1
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	602a      	str	r2, [r5, #0]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f7f7 fc76 	bl	8001de0 <_read>
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	d102      	bne.n	800a4fe <_read_r+0x1e>
 800a4f8:	682b      	ldr	r3, [r5, #0]
 800a4fa:	b103      	cbz	r3, 800a4fe <_read_r+0x1e>
 800a4fc:	6023      	str	r3, [r4, #0]
 800a4fe:	bd38      	pop	{r3, r4, r5, pc}
 800a500:	20025f84 	.word	0x20025f84

0800a504 <_init>:
 800a504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a506:	bf00      	nop
 800a508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50a:	bc08      	pop	{r3}
 800a50c:	469e      	mov	lr, r3
 800a50e:	4770      	bx	lr

0800a510 <_fini>:
 800a510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a512:	bf00      	nop
 800a514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a516:	bc08      	pop	{r3}
 800a518:	469e      	mov	lr, r3
 800a51a:	4770      	bx	lr
